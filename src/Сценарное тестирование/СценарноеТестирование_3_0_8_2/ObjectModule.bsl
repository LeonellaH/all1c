
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРЕОБРАЗОВАНИЯ ЗНАЧЕНИЙ

// Получение истинного значения из хранимого в шаге значения
//
// Параметры
//	ВходящееЗначение - хранимое значение
//	АдресТаблицыСсылок  - адрес хранения таблицы ссылок
//	ТипЗначения - строка типа значения (может отсутствовать для старых сценариев)
//	СтруктураПараметров - глобальные параметры, используемые в клиентских шагах
//
// Возвращаемое значение - истинное значение
//
Функция СцТ_ПолучитьЗначение_НаСервере(
	Знач ВходящееЗначение,
	Знач АдресТаблицыСсылок  = "",
	Знач ТипЗначения         = Неопределено,
	Знач СтруктураПараметров = Неопределено,
	Знач УИШ = "") Экспорт
	
	Сообщения = "";
	
	// Необходимо обработать и старый формат, когда ТипЗначения не задавался
	// И новый формат, когда тип значения задан и значения могут быть параметризованы
	
	ТипВхЗначения = ТипЗнч(ВходящееЗначение);
	
	// Все значения в тесте содержатся в примитивных типах
	Если ВходящееЗначение = Неопределено И ТипЗначения = Неопределено Тогда
		// Когда тип значения не задан
		ВозвращаемоеЗначение = Неопределено;
		
	ИначеЕсли ВходящееЗначение = "Неопределено" И ТипЗначения = "Неопределено" Тогда
		// Когда тип значения не задан
		ВозвращаемоеЗначение = Неопределено;
		
	ИначеЕсли ТипЗначения = "Строка" Тогда
		ВозвращаемоеЗначение = ВходящееЗначение;
		
	ИначеЕсли ТипЗначения = "Число" Тогда
		ВозвращаемоеЗначение = ВходящееЗначение;
		
	ИначеЕсли ТипЗначения = "Дата" Тогда
		ВозвращаемоеЗначение = ВходящееЗначение;
		
	ИначеЕсли ТипЗначения = "Булево" Тогда
		ВозвращаемоеЗначение = ВходящееЗначение;
		
	ИначеЕсли ТипЗначения = "Предопределенное" Тогда
		// В качестве параметра должно храниться полное имя предопределенного значения
		Попытка
			Если Найти(ВРег(ВходящееЗначение), "ПЕРЕЧИСЛЕНИЕ.") > 0 Тогда
				ВозвращаемоеЗначение = ПредопределенноеЗначение(ВходящееЗначение);
			ИначеЕсли Найти(ВРег(ВходящееЗначение), "ПУСТАЯССЫЛКА") > 0 Тогда
				ВозвращаемоеЗначение = ПредопределенноеЗначение(ВходящееЗначение);
			Иначе
				ВозвращаемоеЗначение = ПредопределенныйЭлемент(ВходящееЗначение);
			КонецЕсли;
		Исключение
			ВозвращаемоеЗначение = Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипЗначения = "Ссылка" Тогда
		// Хранится идентификатор в таблице ссылок
		ВозвращаемоеЗначение = ПолучитьЗначениеСсылки(АдресТаблицыСсылок, ВходящееЗначение, Структурапараметров, УИШ);
		
	ИначеЕсли ТипЗначения = "УникальныйИдентификатор" Тогда
		Попытка
			ВозвращаемоеЗначение = Новый УникальныйИдентификатор(ВходящееЗначение);
		Исключение
			ВозвращаемоеЗначение = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		КонецПопытки;
		
	ИначеЕсли ТипЗначения = "СистемноеПеречисление" Тогда
		Попытка
			ВозвращаемоеЗначение = Вычислить(ВходящееЗначение);
		Исключение
			ВозвращаемоеЗначение = Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипЗначения = Тип("ХранилищеЗначения") Тогда
		Попытка
			ВозвращаемоеЗначение = XMLЗначение(Тип("ХранилищеЗначения"), ВходящееЗначение);
		Исключение
			ВозвращаемоеЗначение = Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипЗначения = "Параметр" Тогда
		Если СтруктураПараметров = Неопределено Тогда
			ВозвращаемоеЗначение = Неопределено;
		Иначе
			Если СтруктураПараметров.Свойство(ВходящееЗначение) Тогда
				ВозвращаемоеЗначение = СтруктураПараметров[ВходящееЗначение];
			Иначе
				ВозвращаемоеЗначение = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли (ТипВхЗначения = Тип("Число")
			   ИЛИ ТипВхЗначения = Тип("Булево")
			   ИЛИ ТипВхЗначения = Тип("Дата")) Тогда
		// Если тип значения не задан, то тип определяется программно.
		// Эти значения возвращаются без преобразований
		
		ВозвращаемоеЗначение = ВходящееЗначение;
		
	ИначеЕсли ТипВхЗначения = Тип("Строка") Тогда
		// В такой строке могут передаваться значения других типов
		// Вариант преобразования определяется, по косвенным признакам
		
		Если Найти(ВходящееЗначение, "Дата(") > 0 Тогда
			// Это условное представление даты
			ВозвращаемоеЗначение = СцТ_ПолучитьДатуПоУсловномуФормату(ВходящееЗначение);
			
		ИначеЕсли Найти(ВходящееЗначение, "{""#""") > 0 Тогда
			// Это строка во внутреннем представлении
			ВозвращаемоеЗначение = ПолучитьЗначениеСсылки(АдресТаблицыСсылок, ВходящееЗначение, Структурапараметров);
			
		Иначе
			// Это оказалась обычная строка
			ВозвращаемоеЗначение = ВходящееЗначение;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВходящееЗначение) = Тип("Структура") Тогда
		// Скорее всего это ключ регистра сведений в старом формате
		НоваяСтруктура = Новый Структура;
		Для каждого ЭлементСтруктуры Из ВходящееЗначение Цикл
			НоваяСтруктура.Вставить(
				ЭлементСтруктуры.Ключ,
				СцТ_ПолучитьЗначение_НаСервере(ЭлементСтруктуры.Значение,
					АдресТаблицыСсылок));
		КонецЦикла;
		ВозвращаемоеЗначение = НоваяСтруктура;
		
	ИначеЕсли ТипЗнч(ВходящееЗначение) = Тип("ТаблицаЗначений") Тогда
		ВозвращаемоеЗначение = ВходящееЗначение.Скопировать();
		Для каждого СтрокаТаблицы Из ВозвращаемоеЗначение Цикл
			Для каждого Колонка Из ВозвращаемоеЗначение.Колонки Цикл
				СтрокаТаблицы[Колонка.Имя] = СцТ_ПолучитьЗначение_НаСервере(
					СтрокаТаблицы[Колонка.Имя],
					АдресТаблицыСсылок);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		// Тип значения определить не удалось - возвращаем как есть
		ВозвращаемоеЗначение = ВходящееЗначение;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция диспетчер для получения значений ссылки
//
Функция ПолучитьЗначениеСсылки(АдресТаблицыСсылок, ВходящееЗначение, СтруктураПараметров, УИШ = "")
	
	Если ПустаяСтрока(АдресТаблицыСсылок) Тогда
		// Таблицы ссылок нет - искать негде
		ВозвращаемоеЗначение = ПолучитьЗначениеБезТаблицыСсылок(ВходящееЗначение, АдресТаблицыСсылок);
		
	Иначе
		мТаблицаСсылок = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
		
		Если ПустаяСтрока(УИШ) Тогда
			// Выбор первой строки, в которой упоминается ссылка
			НайденнаяСтрока = мТаблицаСсылок.Найти(ВходящееЗначение, "Ссылка");
			
		Иначе
			НайденныеСтроки = мТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка", ВходящееЗначение));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденнаяСтрока = Неопределено;
			Иначе
				НайденнаяСтрока = Неопределено;
				Для каждого ПроверочнаяСтрока Из НайденныеСтроки Цикл
					Если ПроверочнаяСтрока.МассивУИШ.Найти(УИШ) <> Неопределено Тогда
						НайденнаяСтрока = ПроверочнаяСтрока;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НайденнаяСтрока = Неопределено Тогда
					// Выбираем первую строку
					НайденнаяСтрока = НайденныеСтроки[0];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			ВозвращаемоеЗначение = ПолучитьЗначениеБезТаблицыСсылок(ВходящееЗначение, АдресТаблицыСсылок);
			
		Иначе
			
			// В поле "Соответствие ссылок" должны стоять истинные ссылки
			ВозвращаемоеЗначение = НайденнаяСтрока.СоответствиеСсылок;
			
			Если ВозвращаемоеЗначение = Неопределено Тогда
				
				// Попытка получить перечисление по ссылке
				Попытка
					ПроверочнаяСсылка = ЗначениеИзСтрокиВнутр(ВходящееЗначение);
				Исключение
				КонецПопытки;
				
				Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверочнаяСсылка)) Тогда
					ВозвращаемоеЗначение = ПроверочнаяСсылка;
				Иначе
					Попытка
						ПроверочныйОбъект = ПроверочнаяСсылка.ПолучитьОбъект();
						Если ПроверочныйОбъект <> Неопределено Тогда
							ВозвращаемоеЗначение = ПроверочнаяСсылка;
						КонецЕсли;
					Исключение
					КонецПопытки
				КонецЕсли;
				
				Если ВозвращаемоеЗначение = Неопределено Тогда
					
					Если ТипЗнч(НайденнаяСтрока.СтруктураИдентификации) <> Тип("ТаблицаЗначений")
						И ТипЗнч(НайденнаяСтрока.СтруктураИдентификации) <> Тип("Массив") Тогда
						Возврат Неопределено;
					КонецЕсли;
					
					// Получение значения по запросу
					ВозвращаемоеЗначение = ПолучитьЗначениеСсылкиПоСтрокеИдентификации(НайденнаяСтрока);
					
					Если ВозвращаемоеЗначение = Неопределено Тогда
						// Для этого случая, а он является старым,
						// запрос всегда был динамическим
						ТекстЗапроса = СцТ_ПолучитьТекстЗапросПоТаблицеИдентификации(
							НайденнаяСтрока.ТипМД,
							НайденнаяСтрока.ИмяМД,
							НайденнаяСтрока.СтруктураИдентификации);
						
						РезультатЗапроса = СцТ_ПолучитьОбъектыПоТаблицеИдентификации(
							ТекстЗапроса,
							СтруктураПараметров);
						
						Если РезультатЗапроса <> Неопределено И РезультатЗапроса.Количество() > 0 Тогда
							ВозвращаемоеЗначение = РезультатЗапроса[0].Ссылка;
							
							// В остальных случаях значение остается Неопределено
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				// Если объект найден, то его нужно подставить в таблицу для ускорения последующего поиска
				Если ВозвращаемоеЗначение <> Неопределено Тогда
					НайденнаяСтрока.СоответствиеСсылок = ВозвращаемоеЗначение;
					ПоместитьВоВременноеХранилище(мТаблицаСсылок, АдресТаблицыСсылок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получение значения ссылки по найденной строке таблицы идентификации
//
// Параметры
// СтрокаТаблицыСсылок - найденная строка таблицы идентификации ссылки
// СтруктураПараметров - структура глобальных параметров (переменных для клиентских процедур)
//
// Возвращаемое значение - значение ссылки
Функция ПолучитьЗначениеСсылкиПоСтрокеИдентификации(
	СтрокаТаблицыСсылок,
	СтруктураПараметров = Неопределено) Экспорт
	
	Если СтрокаТаблицыСсылок.ПоискПоЗапросу = Истина Тогда
		// Такое условие исключает значение Неопределено, так как это поле
		// было в конфигурации не сразу
		ТекстЗапроса = СтрокаТаблицыСсылок.ТекстЗапроса;
		
	Иначе
		// Запрос строится динамически
		
		ТекстЗапроса = СцТ_ПолучитьТекстЗапросПоТаблицеИдентификации(
			СтрокаТаблицыСсылок.ТипМД,
			СтрокаТаблицыСсылок.ИмяМД,
			СтрокаТаблицыСсылок.СтруктураИдентификации);
			
	КонецЕсли;
	
	РезультатЗапроса = СцТ_ПолучитьОбъектыПоТаблицеИдентификации(
		ТекстЗапроса,
		СтруктураПараметров);
	
	Если РезультатЗапроса <> Неопределено И РезультатЗапроса.Количество() >= 1 Тогда
		Возврат РезультатЗапроса[0].Ссылка;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция для попытки получения ссылочного значения, когда таблица ссылок недоступна
// или вместо ссылки передана структура (например отбор для регистра)
//
Функция ПолучитьЗначениеБезТаблицыСсылок(ВходящееЗначение, АдресТаблицыСсылок)
	
	// Так можно определить пцустые ссылки, перечисления
	Попытка
		ИстинноеЗначение = ЗначениеИзСтрокиВнутр(ВходящееЗначение);
	Исключение
		// Либо неверный формат либо отсутствует в этой конфигурации соответствующая таблица
		Возврат Неопределено;
	КонецПопытки;
	
	ТипЗначения = ТипЗнч(ИстинноеЗначение);
	
	Если ТипЗначения = Тип("Структура") Тогда
		Если НЕ ЗначениеЗаполнено(АдресТаблицыСсылок) Тогда
			Возврат Неопределено;
		Иначе
			ВозвращаемоеЗначение = СцТ_ПолучитьЗначение_НаСервере(
				ИстинноеЗначение,
				АдресТаблицыСсылок);
		КонецЕсли;
			
	ИначеЕсли ТипЗначения = Тип("ВидДвиженияБухгалтерии")
		ИЛИ   ТипЗначения = Тип("ВидДвиженияНакопления")
		ИЛИ   ТипЗначения = Тип("ВидСчета")
		ИЛИ   ТипЗначения = Тип("УникальныйИдентификатор") Тогда
		
		ВозвращаемоеЗначение = ИстинноеЗначение;
		
	Иначе
		Попытка
			Если ИстинноеЗначение.Пустая() Тогда
				ВозвращаемоеЗначение = ИстинноеЗначение;
				
			ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
				ВозвращаемоеЗначение = ИстинноеЗначение;
				
			ИначеЕсли ИстинноеЗначение.ПолучитьОбъект() <> Неопределено Тогда
				ВозвращаемоеЗначение = ИстинноеЗначение;
				
			Иначе
				ВозвращаемоеЗначение = Неопределено;
				
			КонецЕсли;
		Исключение
			ВозвращаемоеЗначение = Неопределено;
			
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирование текста запрос по таблице идентификации объектов
// Параметры:
// ТипМД - тип метаданных (Справочники, Документы и т.п.)
// ИмяМД - имя объекта метаданных
// СтруктураИдентификации - массив структур идентификации
//
// Возвращаемое значение - текст запроса
//
Функция СцТ_ПолучитьТекстЗапросПоТаблицеИдентификации(
	ТипМД,
	ИмяМД,
	СтруктураИдентификации) Экспорт
	
	ЕстьОшибки = Ложь;
	
	Если ПустаяСтрока(ТипМД)
		ИЛИ ПустаяСтрока(ИмяМД)
		ИЛИ СтруктураИдентификации = Неопределено
		ИЛИ СтруктураИдентификации.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// Название таблицы
	Если ТипМД = "Справочники" Тогда
		ИмяТаблицы = "Справочник." + ИмяМД;
	ИначеЕсли ТипМД = "Документы" Тогда
		ИмяТаблицы = "Документ." + ИмяМД;
	ИначеЕсли ТипМД = "ПланыСчетов" Тогда
		ИмяТаблицы = "ПланСчетов." + ИмяМД;
	ИначеЕсли ТипМД = "ПланыВидовХарактеристик" Тогда
		ИмяТаблицы = "ПланВидовХарактеристик." + ИмяМД;
	ИначеЕсли ТипМД = "ПланыВидовРасчета" Тогда
		ИмяТаблицы = "ПланВидовРасчета." + ИмяМД;
	ИначеЕсли ТипМД = "БизнесПроцессы" Тогда
		ИмяТаблицы = "БизнесПроцесс." + ИмяМД;
	ИначеЕсли ТипМД = "Задачи" Тогда
		ИмяТаблицы = "Задача." + ИмяМД;
	Иначе
		Возврат "";
	КонецЕсли;
	
	// Строка условий
	// PS: при построении строки условий учитываеются новый формат хранения структуры и старый
	
	СтрокаУсловий = "";
	Для каждого СтрокаСтруктуры Из СтруктураИдентификации Цикл
		
		// Для совместимости с предыдущими версиями
		Если    СтрокаСтруктуры.Имя = "ТипМД"
			ИЛИ СтрокаСтруктуры.Имя =  "ИмяМД"
			ИЛИ СтрокаСтруктуры.Имя =  "ТипМетаданных"
			ИЛИ СтрокаСтруктуры.Имя =  "ИмяМетаданных" Тогда
			Продолжить;
		КонецЕсли;
		
		// Преобразование из формата хранения к формату, удобному для
		// построения запроса. Старый формат обусловлен историей инструмента
		СтруктураПреобразованныхЗначений = ПреобразоватьСтрокуСтруктурыИдентификацииКНовомуФормату(СтрокаСтруктуры);
		
		ИмяПоля         = СтруктураПреобразованныхЗначений.Имя;
		ТипЗначения     = СтруктураПреобразованныхЗначений.ТипЗначения;
		ОграничениеТипа = СтруктураПреобразованныхЗначений.ОграничениеТипа;
		Значение        = СтруктураПреобразованныхЗначений.Значение;
		
		// Непосредственное построение текста условия
		УсловиеОтбора = "";
		
		// В тексте запроса кавычки должны быть пробублированы
		
		Если ТипЗнч(Значение) = Тип("Строка") И ВРег(Значение) = "NULL" Тогда
			УсловиеОтбора= "%1 ЕСТЬ NULL";
			УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%1", ИмяПоля);
		
		ИначеЕсли ТипЗначения = "Строка" Тогда
			
			// Дублирование кавычек (если параметр, то в нем кавычек нет)
			ЗначениеОтбора = СтрЗаменить(Значение, """", """""");
			
			// Определение ограничения строки
			Если ТипЗнч(ОграничениеТипа) = Тип("Число") Тогда
				Если ОграничениеТипа = 0 Тогда
					ОграничениеСтроки = "150";
				Иначе
					ОграничениеСтроки = Формат(ОграничениеТипа, "ЧГ=0");
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОграничениеТипа) = Тип("Строка") Тогда
				ОграничениеСтроки = ОграничениеТипа;
				ОграничениеСтроки = СтрЗаменить(ОграничениеСтроки, Символ(160), "");
				ОграничениеСтроки = СтрЗаменить(ОграничениеСтроки, " ", "");
				Попытка
					а = Число(ОграничениеСтроки);
				Исключение
					ОграничениеСтроки = "150";
				КонецПопытки;
			Иначе
				ОграничениеСтроки = "150";
			КонецЕсли;
			
			ОграничениеСтроки = Число(ОграничениеТипа);
			
			Если Лев(ЗначениеОтбора, 1) = "&" Тогда
				// Работа с параметром
				УсловиеОтбора= "(ВЫРАЗИТЬ(%1 КАК СТРОКА(%2)) = ВЫРАЗИТЬ(%3 КАК СТРОКА(%2)))";
				
			Иначе
				// значение является обычной строкой
				УсловиеОтбора= "(ВЫРАЗИТЬ(%1 КАК СТРОКА(%2)) = ВЫРАЗИТЬ(""%3"" КАК СТРОКА(%2)))";
				
			КонецЕсли;
			
			УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%1", ИмяПоля);
			УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%2", ОграничениеСтроки);
			УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%3", ЗначениеОтбора);
			
		ИначеЕсли ТипЗначения = "Число" Тогда
			Если ТипЗнч(Значение) = Тип("Число") Тогда
				ЗначениеОтбора = Формат(Значение, "ЧГ=0");
				
			ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
				ЗначениеОтбора = Значение;
				ЗначениеОтбора = СтрЗаменить(ЗначениеОтбора, Символ(160), "");
				ЗначениеОтбора = СтрЗаменить(ЗначениеОтбора, " ", "");
				Попытка
					а = Число(ЗначениеОтбора);
				Исключение
					Продолжить;
				КонецПопытки;
			Иначе
				Продолжить;
			КонецЕсли;
			
			УсловиеОтбора= "%1 = %2";
			УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%1", ИмяПоля);
			УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%2", ЗначениеОтбора);
			
		ИначеЕсли ТипЗначения = "Предопределенный" ИЛИ ТипЗначения = "Предопределенное" Тогда
			
			УсловиеОтбора= "(%1 = ЗНАЧЕНИЕ(%2))";
			УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%1", ИмяПоля);
			УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%2", Значение);
			
		ИначеЕсли ТипЗначения = "Булево" Тогда
			Если ТипЗнч(Значение) = Тип("Строка") И Лев(Значение, 1) = "&" Тогда
				// Это параметр
				УсловиеОтбора= "%1 = %2";
				УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%1", ИмяПоля);
				УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%2", Значение);
				
			Иначе
				// Обычные значения
				
				Если ТипЗнч(Значение) = Тип("Число") Тогда
					Если Значение = 0 Тогда
						ЗначениеОтбора = Истина;
					Иначе
						ЗначениеОтбора = Ложь;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
					ЗначениеОтбора = Значение;
					
				ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
					Если ВРег(Значение) = "ДА"
						ИЛИ ВРег(Значение) = "ИСТИНА"
						ИЛИ ВРег(Значение) = "TRUE" Тогда
						ЗначениеОтбора = Истина;
					Иначе
						ЗначениеОтбора = Ложь;
					КонецЕсли;
				Иначе
					ЗначениеОтбора = Ложь;
				КонецЕсли;
				
				Если ЗначениеОтбора Тогда
					УсловиеОтбора = ИмяПоля;
				Иначе
					УсловиеОтбора = "НЕ" + " " + ИмяПоля;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = "Дата" Тогда
			Если Значение = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Значение) Тогда
				ЗначениеОтбора = "1,1,1";
			Иначе
				Если ТипЗнч(Значение) = Тип("Дата") Тогда
					СтрГод  = Формат(Год(Значение)    , "ЧГ=0; ЧН=0");
					СтрМес  = Формат(Месяц(Значение)  , "ЧГ=0; ЧН=0");
					СтрДень = Формат(День(Значение)   , "ЧГ=0; ЧН=0");
					СтрЧас  = Формат(Час(Значение)    , "ЧГ=0; ЧН=0");
					СтрМин  = Формат(Минута(Значение) , "ЧГ=0; ЧН=0");
					СтрСек  = Формат(Секунда(Значение), "ЧГ=0; ЧН=0");
					
					ЗначениеОтбора = СтрГод + "," + СтрМес + "," + СтрДень + "," + СтрЧас + "," + СтрМин + "," + СтрСек;
					
				Иначе
					// Тип - строка
					ЗначениеОтбора = Значение;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(ОграничениеТипа) = Тип("Строка") Тогда
				Если    ВРег(ОграничениеТипа) = "МИНУТА"
					ИЛИ ВРег(ОграничениеТипа) = "ЧАС"
					ИЛИ ВРег(ОграничениеТипа) = "ДЕНЬ"
					ИЛИ ВРег(ОграничениеТипа) = "НЕДЕЛЯ"
					ИЛИ ВРег(ОграничениеТипа) = "МЕСЯЦ"
					ИЛИ ВРег(ОграничениеТипа) = "КВАРТАЛ"
					ИЛИ ВРег(ОграничениеТипа) = "ГОД"
					ИЛИ ВРег(ОграничениеТипа) = "ДЕКАДА"
					ИЛИ ВРег(ОграничениеТипа) = "ПОЛУГОДИЕ" ТОГДА
					
					ОграничениеОтбора = ОграничениеТипа;
					УсловиеОтбора= "(НАЧАЛОПЕРИОДА(%1, %2) = НАЧАЛОПЕРИОДА(ДАТАВРЕМЯ(%3), %2))";
					
				ИначеЕсли ВРег(ОграничениеТипа) = "СЕКУНДА" Тогда
					УсловиеОтбора= "(%1 = ДАТАВРЕМЯ(%3))";
					ОграничениеОтбора = "";
					
				Иначе
					ОграничениеСтроки = "ДЕНЬ";
					УсловиеОтбора= "(НАЧАЛОПЕРИОДА(%1, %2) = НАЧАЛОПЕРИОДА(ДАТАВРЕМЯ(%3), %2))";
				КонецЕсли;
			Иначе
				ОграничениеОтбора = "ДЕНЬ";
			КонецЕсли;
			
			УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%1", ИмяПоля);
			УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%2", ОграничениеОтбора);
			УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "%3", ЗначениеОтбора);
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(УсловиеОтбора) Тогда
			
			Если ПустаяСтрока(СтрокаУсловий) Тогда
				СтрокаУсловий = " " + "ГДЕ" + "  " + УсловиеОтбора;
			Иначе
				СтрокаУсловий = СтрокаУсловий + Символы.ПС + "    " + "И" + " " + УсловиеОтбора;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сборка итогового запроса
	ТекстЗапроса =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка
					| ИЗ" + " " + ИмяТаблицы + "
					|" + СтрокаУсловий;
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ПреобразоватьСтрокуСтруктурыИдентификацииКНовомуФормату(СтрокаИдентификации) Экспорт
	
	// PS: Это преобразование - "дань истории инструмента"
	
	ИмяПоля         = СтрокаИдентификации.Имя;
	Значение        = СтрокаИдентификации.Значение;
	СокрТипЗначения = СтрокаИдентификации.СокрТипЗначения;
	
	ПозицияНачалаОграниченияТипа = Найти(СокрТипЗначения, "(");
	Если ПозицияНачалаОграниченияТипа > 0 Тогда
		ОграничениеТипаСтр = Сред(СокрТипЗначения, ПозицияНачалаОграниченияТипа + 1, СтрДлина(СокрТипЗначения) - ПозицияНачалаОграниченияТипа - 1);
		ПредварительныйТип = Сред(СокрТипЗначения, 1, ПозицияНачалаОграниченияТипа - 1);
	Иначе
		ОграничениеТипаСтр = "";
		ПредварительныйТип = СокрТипЗначения;
	КонецЕсли;
	
	// Старые типы могли содержать в себе способ приведения к простому типу
	// которые указывались через точку
	Если ПредварительныйТип =  "Ссылка.Наименование" Тогда
		// Это старый тип
		ТипЗначения = "Строка";
		ОграничениеТипаСтр = 150; // Значение по умолчанию
		ИмяПоля = ИмяПоля + ".Наименование";
		
		// В старых версиях могут храниться задвоенные кавычки
		Значение = СтрЗаменить(Значение, """""", """");
		
	ИначеЕсли ПредварительныйТип =  "Ссылка.Код" Тогда
		// Это старый тип
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			ТипЗначения = "Строка";
			ОграничениеТипаСтр = 10; // Значение по умолчанию
		Иначе
			ТипЗначения = "Число";
			ОграничениеТипаСтр = "";
		КонецЕсли;
		ИмяПоля = ИмяПоля + ".Код";
		
	ИначеЕсли ПредварительныйТип =  "Ссылка.Дата" Тогда
		// Это старый тип
		ТипЗначения = "Дата";
		ОграничениеТипаСтр = "День"; // Значение по умолчанию
		ИмяПоля = ИмяПоля + ".Дата";
		
	ИначеЕсли ПредварительныйТип =  "ПустоеЗначение" Тогда
		// Это старый тип
		ТипЗначения = "Предопределенное";
		
	ИначеЕсли ПредварительныйТип =  "Строка" Тогда
		ТипЗначения = ПредварительныйТип;
		Если НЕ ЗначениеЗаполнено(ОграничениеТипаСтр) Тогда
			ОграничениеТипаСтр = 150;
		КонецЕсли;
		
		// В старых версиях могут храниться задвоенные кавычки
		Значение = СтрЗаменить(Значение, """""", """");
		
	ИначеЕсли ПредварительныйТип =  "Число" Тогда
		ТипЗначения = ПредварительныйТип;
		
	ИначеЕсли ПредварительныйТип =  "Дата" Тогда
		ТипЗначения = ПредварительныйТип;
		Если НЕ ЗначениеЗаполнено(ОграничениеТипаСтр) Тогда
			ОграничениеТипаСтр = "День";
		КонецЕсли;
		
	ИначеЕсли ПредварительныйТип =  "Булево" Тогда
		ТипЗначения = ПредварительныйТип;
		
	ИначеЕсли ПредварительныйТип =  "Перечисление" Тогда
		Значение = "Перечисление." + Значение;
		ТипЗначения = "Предопределенное";
		
	ИначеЕсли ПредварительныйТип =  "Предопределенное" Тогда
		ТипЗначения = "Предопределенное";
		
	КонецЕсли;
	
	Если ТипЗначения = "Дата" И ТипЗнч(Значение) = Тип("Строка") Тогда
		
		ЧислоГод   = 0;
		ЧислоМесяц = 0;
		ЧислоДень  = 0;
		ЧислоЧас   = 0;
		ЧислоМин   = 0;
		ЧислоСек   = 0;
		
		ПозицияЗапятой = Найти(Значение, ",");
		СтрГод = СокрЛП(Сред(Значение, 1, ПозицияЗапятой - 1));
		Значение = СокрЛП(Сред(Значение, ПозицияЗапятой + 1));
		Попытка
			ЧислоГод = Число(СтрГод);
		Исключение
		КонецПопытки;
		
		ПозицияЗапятой = Найти(Значение, ",");
		СтрМесяц = СокрЛП(Сред(Значение, 1, ПозицияЗапятой - 1));
		Значение = СокрЛП(Сред(Значение, ПозицияЗапятой + 1));
		Попытка
			ЧислоМесяц = Число(СтрМесяц);
		Исключение
		КонецПопытки;
		
		ПозицияЗапятой = Найти(Значение, ",");
		СтрДень = СокрЛП(Сред(Значение, 1, ПозицияЗапятой - 1));
		Значение = СокрЛП(Сред(Значение, ПозицияЗапятой + 1));
		Попытка
			ЧислоДень = Число(СтрДень);
		Исключение
		КонецПопытки;
		
		ПозицияЗапятой = Найти(Значение, ",");
		СтрЧас = СокрЛП(Сред(Значение, 1, ПозицияЗапятой - 1));
		Значение = СокрЛП(Сред(Значение, ПозицияЗапятой + 1));
		Попытка
			ЧислоЧас = Число(СтрЧас);
		Исключение
		КонецПопытки;
		
		ПозицияЗапятой = Найти(Значение, ",");
		СтрМин = СокрЛП(Сред(Значение, 1, ПозицияЗапятой - 1));
		Значение = СокрЛП(Сред(Значение, ПозицияЗапятой + 1));
		Попытка
			ЧислоМин = Число(СтрМин);
		Исключение
		КонецПопытки;
		
		СтрСек = СокрЛП(Значение);
		Попытка
			ЧислоСек = Число(СтрСек);
		Исключение
		КонецПопытки;
		
		Значение = Дата(ЧислоГод, ЧислоМесяц, ЧислоДень, ЧислоЧас, ЧислоМин, ЧислоСек);
		
	КонецЕсли;
	
	ВозвращаемаяСтруктура = Новый Структура;
	
	ВозвращаемаяСтруктура.Вставить("ТипЗначения"    , ТипЗначения);
	ВозвращаемаяСтруктура.Вставить("ОграничениеТипа", ОграничениеТипаСтр);
	ВозвращаемаяСтруктура.Вставить("Значение"       , Значение);
	ВозвращаемаяСтруктура.Вставить("Имя"            , ИмяПоля);
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Получение ссылки на объект информационной базы по запросу
//
// Параметры
// ТекстЗапроса       - тескст запроса для поиска ссылки
// СтруктураПараметров - структура параметров (переменных сценария)
// ТекстСообщения      - возвращаемый текстописания ошибки
// 
// Возвращаемое значение - таблица результата запроса
Функция СцТ_ПолучитьОбъектыПоТаблицеИдентификации(
	Знач ТекстЗапроса,
	Знач СтруктураПараметров = Неопределено,
	ТекстСообщения = "") Экспорт
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		// Всякое может быть
		Подстрока = НСтр("ru = 'Текстзапроса пустой'");
		ТекстСообщения = СцТ_ДобавитьПодстроку_НаСервере(ТекстСообщения, Подстрока, Символы.ПС);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Выполнение запроса
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	
	// Проверка параметров
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось получить параметры. Возможно есть ошибка в тексте запроса'");
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПараметрыЗапроса.Количество() > 0 Тогда
		
		СтрокаНенайденныхПараметров = "";
		СтрокаПараметровДругихТипов = "";
		
		Для каждого ПарамЗапроса Из ПараметрыЗапроса Цикл
			
			ЗначениеПараметра = Неопределено;
			ЕстьОшибки = Ложь;
			
			Если  НЕ ПарамЗапроса.ТипЗначения.СодержитТип(Тип("Строка"))
				И НЕ ПарамЗапроса.ТипЗначения.СодержитТип(Тип("Число"))
				И НЕ ПарамЗапроса.ТипЗначения.СодержитТип(Тип("Дата"))
				И НЕ ПарамЗапроса.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
				// Параметр не простого типа
				
				ЕстьОшибки = Истина;
				
				Если НЕ ПустаяСтрока(СтрокаПараметровДругихТипов) Тогда
					СтрокаПараметровДругихТипов = СтрокаПараметровДругихТипов + "," + " ";
				КонецЕсли;
				
				СтрокаПараметровДругихТипов = СтрокаПараметровДругихТипов + ПарамЗапроса.Имя;
				
			КонецЕсли;
			
			
			Если НЕ СтруктураПараметров.Свойство(ПарамЗапроса.Имя, ЗначениеПараметра) Тогда
				// Параметр не найден
				
				ЕстьОшибки = Истина;
				
				Если НЕ ПустаяСтрока(СтрокаНенайденныхПараметров) Тогда
					СтрокаНенайденныхПараметров = СтрокаНенайденныхПараметров + "," + " ";
				КонецЕсли;
				
				СтрокаНенайденныхПараметров = СтрокаНенайденныхПараметров + ПарамЗапроса.Имя;
				
			КонецЕсли;
			
			Если НЕ ЕстьОшибки Тогда
				Запрос.УстановитьПараметр(ПарамЗапроса.Имя, ЗначениеПараметра);
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстСообщения = "";
		Если НЕ ПустаяСтрока(СтрокаНенайденныхПараметров) Тогда
			Подстрока = НСтр("ru = 'Не заполнены значения параметров: %1'");
			Подстрока = СтрЗаменить(Подстрока, "%1", СтрокаНенайденныхПараметров);
			ТекстСообщения = СцТ_ДобавитьПодстроку_НаСервере(ТекстСообщения, Подстрока, Символы.ПС);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаПараметровДругихТипов) Тогда
			Подстрока = НСтр("ru = 'В качестве параметров допускается использование только простых типов данных (строка, число, булево, дата).
			|В запросе использованы параметры других типов: %1'");
			Подстрока = СтрЗаменить(Подстрока, "%1", СтрокаПараметровДругихТипов);
			ТекстСообщения = СцТ_ДобавитьПодстроку_НаСервере(ТекстСообщения, Подстрока, Символы.ПС);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаНенайденныхПараметров) ИЛИ НЕ ПустаяСтрока(СтрокаПараметровДругихТипов) Тогда
			// Запрос выполнить нельзя
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выполнение запроса
	Попытка
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка в тексте запроса'") + Символы.ПС + ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	// Преобразование таблицы
	
	Колонки = ТаблицаРезультата.Колонки;
	
	Если Колонки.Найти("Ссылка") = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Ошибка. В запросе не найдено обязательное поле ""Ссылка"".'");
		Возврат Неопределено;
	КонецЕсли;
	
	КК = Колонки.Количество();
	Если КК > 1 Тогда
		// Удаление ненужных колонок
		Для ОбрИндекс = 1 ПО КК Цикл
			Колонка = Колонки[КК - ОбрИндекс];
			Если Колонка.Имя <> "Ссылка" Тогда
				Колонки.Удалить(КК - ОбрИндекс);
			КонецЕсли;
		КонецЦикла;
		
		ТекстСообщения = НСтр("ru='Ошибка. В запросе кроме поля ""Ссылка"" были найдены другие ненужные поля. 
		|Рекомендуется удалить лишние поля из запроса.'");
	КонецЕсли;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

// Получение даты по условному формату
//
// Параметры
// СтрокаДаты - условный формат относительной даты
// Возвращаемое значение - истинное значение даты
Функция СцТ_ПолучитьДатуПоУсловномуФормату(Знач СтрокаДаты)
	
	Если Найти(ВРег(СтрокаДаты), НСтр("ru='ТЕКУЩАЯ'")) > 0 Тогда
		Возврат ТекущаяДата();
	КонецЕсли;
	
	// 1. Убираем лишнее
	СтрокаДаты = Сред(
		СтрокаДаты,
		СтрДлина(НСтр("ru='Дата('"))+1,
		СтрДлина(СтрокаДаты) - СтрДлина(НСтр("ru='Дата('")) - 1);
	
	СтрокаДаты = СтрЗаменить(СтрокаДаты, ",", ".");
	
	ЧислоТочки = Найти(СтрокаДаты, ".");
	Если ЧислоТочки = 0 Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	СтрокаЧисла = СокрЛП(Сред(СтрокаДаты, 1, ЧислоТочки - 1));
	СтрокаДаты  = СокрЛП(Сред(СтрокаДаты, ЧислоТочки + 1));
	
	
	ЧислоТочки = Найти(СтрокаДаты, ".");
	Если ЧислоТочки = 0 Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	СтрокаМесяца = СокрЛП(Сред(СтрокаДаты, 1, ЧислоТочки - 1));
	Если Найти(СтрокаМесяца, "-") > 0 Тогда
		МесяцОтрицательный = Истина;
	Иначе
		МесяцОтрицательный = Ложь;
	КонецЕсли;
	
	СтрокаМесяца = СокрЛП(
		СтрЗаменить(
			СтрЗаменить(
				СтрЗаменить(
					ВРег(СтрокаМесяца),
					"ММ",
					""),
				"-",
				""),
			"+",
			""));
	Если ПустаяСтрока(СтрокаМесяца) Тогда
		СтрокаМесяца = "0";
	КонецЕсли;
	
	СтрокаГода   = СокрЛП(Сред(СтрокаДаты, ЧислоТочки + 1));
	Если Найти(СтрокаГода, "-") > 0 Тогда
		ГодОтрицательный = Истина;
	Иначе
		ГодОтрицательный = Ложь;
	КонецЕсли;
	
	СтрокаГода = СокрЛП(
		СтрЗаменить(
			СтрЗаменить(
				СтрЗаменить(
					ВРег(СтрокаГода),
					"ГГ",
					""),
				"-",
				""),
			"+",
			""));
	Если ПустаяСтрока(СтрокаГода) Тогда
		СтрокаГода = "0";
	КонецЕсли;
	
	НачальныйМесяц = Месяц(ЭтотОбъект.НачальнаяДата);
	НачальныйГод   = Год(ЭтотОбъект.НачальнаяДата);
	
	Попытка
		// Так как других проверок нет
		Если МесяцОтрицательный Тогда
			Месяц = НачальныйМесяц - Число(СтрокаМесяца);
		Иначе
			Месяц = НачальныйМесяц + Число(СтрокаМесяца);
		КонецЕсли;
		
		КоррекцияГода = Цел(Месяц/12);
		Месяц = Месяц - КоррекцияГода*12;
		
		Если Месяц <= 0 Тогда
			КоррекцияГода = КоррекцияГода - 1;
			Месяц = Месяц + 12;
		КонецЕсли;
		
		Если ГодОтрицательный Тогда
			Год   = НачальныйГод - Число(СтрокаГода) + КоррекцияГода;
		Иначе
			Год   = НачальныйГод + Число(СтрокаГода) + КоррекцияГода;
		КонецЕсли;
		
		Если Найти(ВРег(СтрокаЧисла),"ПОСЛЕД") > 0 Тогда
			ВозвращаемаяДата = КонецМесяца(Дата(Год,Месяц, 15));
		Иначе
			ВозвращаемаяДата = Дата(Год,Месяц,Число(СокрЛП(СтрокаЧисла)));
		КонецЕсли;
			
	Исключение
		ВозвращаемаяДата = Дата(1,1,1);
	КонецПопытки;
	
	Возврат ВозвращаемаяДата;
	
КонецФункции

// Функция определения структуры для хранения значения в сценарии
// по истинному значению
Функция СцТ_ПолучитьОписаниеЗначения(ИстинноеЗначение) Экспорт
	
	Если ИстинноеЗначение = Неопределено Тогда
		ВнутрЗначение = "Неопределено";
		ТипЗначения   = "Неопределено";
	
	ИначеЕсли ТипЗнч(ИстинноеЗначение) = Тип("Число") Тогда
		ВнутрЗначение = ИстинноеЗначение;
		ТипЗначения = "Число";
		
	ИначеЕсли ТипЗнч(ИстинноеЗначение) = Тип("Строка") Тогда
		ВнутрЗначение = ИстинноеЗначение;
		ТипЗначения = "Строка";
		
	ИначеЕсли ТипЗнч(ИстинноеЗначение) = Тип("Дата") Тогда
		ВнутрЗначение = ИстинноеЗначение;
		ТипЗначения = "Дата";
		
	ИначеЕсли ТипЗнч(ИстинноеЗначение) = Тип("Булево") Тогда
		ВнутрЗначение = ИстинноеЗначение;
		ТипЗначения = "Булево";
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ИстинноеЗначение)) Тогда
		ИмяМ = ИстинноеЗначение.Метаданные().Имя;
		
		Если ИстинноеЗначение.Предопределенный ИЛИ ИстинноеЗначение.Пустая() Тогда
			
			Если ИстинноеЗначение.Пустая()  Тогда
				ВнутрЗначение = "Справочник." + ИмяМ + ".ПустаяСсылка";
			Иначе
				МассивИменПредопределенных = ИстинноеЗначение.Метаданные().ПолучитьИменаПредопределенных();
				НужноеИмя = "";
				Для каждого ИмяПредопределенного Из МассивИменПредопределенных ЦИкл
					ПолноеИмяПредопределенного = "Справочник." + ИмяМ + "." + ИмяПредопределенного;
					Если ПредопределенныйЭлемент(ПолноеИмяПредопределенного) = ИстинноеЗначение Тогда
						НужноеИмя = ПолноеИмяПредопределенного;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ВнутрЗначение = НужноеИмя;
			КонецЕсли;
			ТипЗначения = "Предопределенное";
			
		Иначе
			ВнутрЗначение = Строка(ИстинноеЗначение.УникальныйИдентификатор());
			ТипЗначения = "Ссылка";
		КонецЕсли;
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ИстинноеЗначение)) Тогда
		ИмяМ = ИстинноеЗначение.Метаданные().Имя;
		
		Если ИстинноеЗначение.Предопределенный ИЛИ ИстинноеЗначение.Пустая() Тогда
			
			Если ИстинноеЗначение.Пустая() Тогда
				ВнутрЗначение = "ПланВидовХарактеристик." + ИмяМ + ".ПустаяСсылка";
			Иначе
				МассивИменПредопределенных = ИстинноеЗначение.Метаданные().ПолучитьИменаПредопределенных();
				НужноеИмя = "";
				Для каждого ИмяПредопределенного Из МассивИменПредопределенных ЦИкл
					ПолноеИмяПредопределенного = "ПланВидовХарактеристик." + ИмяМ + "." + ИмяПредопределенного;
					Если ПредопределенныйЭлемент(ПолноеИмяПредопределенного) = ИстинноеЗначение Тогда
						НужноеИмя = ПолноеИмяПредопределенного;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ВнутрЗначение = НужноеИмя;
			КонецЕсли;
			ТипЗначения = "Предопределенное";
			
		Иначе
			ВнутрЗначение = Строка(ИстинноеЗначение.УникальныйИдентификатор());
			ТипЗначения = "Ссылка";
		КонецЕсли;
		
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(ИстинноеЗначение)) Тогда
		ИмяМ = ИстинноеЗначение.Метаданные().Имя;
		
		Если ИстинноеЗначение.Предопределенный ИЛИ ИстинноеЗначение.Пустая() Тогда
			
			Если ИстинноеЗначение.Пустая() Тогда
				ВнутрЗначение = "ПланВидовРасчета." + ИмяМ + ".ПустаяСсылка";
			Иначе
				МассивИменПредопределенных = ИстинноеЗначение.Метаданные().ПолучитьИменаПредопределенных();
				НужноеИмя = "";
				Для каждого ИмяПредопределенного Из МассивИменПредопределенных ЦИкл
					ПолноеИмяПредопределенного = "ПланВидовРасчета." + ИмяМ + "." + ИмяПредопределенного;
					Если ПредопределенныйЭлемент(ПолноеИмяПредопределенного) = ИстинноеЗначение Тогда
						НужноеИмя = ПолноеИмяПредопределенного;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ВнутрЗначение = НужноеИмя;
			КонецЕсли;
			ТипЗначения = "Предопределенное";
			
		Иначе
			ВнутрЗначение = Строка(ИстинноеЗначение.УникальныйИдентификатор());
			ТипЗначения = "Ссылка";
		КонецЕсли;
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(ИстинноеЗначение)) Тогда
		ИмяМ = ИстинноеЗначение.Метаданные().Имя;
		
		Если ИстинноеЗначение.Предопределенный ИЛИ ИстинноеЗначение.Пустая() Тогда
			
			Если ИстинноеЗначение.Пустая() Тогда
				ВнутрЗначение = "ПланСчетов." + ИмяМ + ".ПустаяСсылка";
			Иначе
				МассивИменПредопределенных = ИстинноеЗначение.Метаданные().ПолучитьИменаПредопределенных();
				НужноеИмя = "";
				Для каждого ИмяПредопределенного Из МассивИменПредопределенных ЦИкл
					ПолноеИмяПредопределенного = "ПланСчетов." + ИмяМ + "." + ИмяПредопределенного;
					Если ПредопределенныйЭлемент(ПолноеИмяПредопределенного) = ИстинноеЗначение Тогда
						НужноеИмя = ПолноеИмяПредопределенного;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ВнутрЗначение = НужноеИмя;
			КонецЕсли;
			ТипЗначения = "Предопределенное";
			
		Иначе
			ВнутрЗначение = Строка(ИстинноеЗначение.УникальныйИдентификатор());
			ТипЗначения = "Ссылка";
		КонецЕсли;
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ИстинноеЗначение))
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ИстинноеЗначение))
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(ИстинноеЗначение)) Тогда
		
		Если ИстинноеЗначение.Пустая() Тогда
			ИмяМ = ИстинноеЗначение.Метаданные().Имя;
			ВнутрЗначение = "Документ." + ИмяМ + ".ПустаяСсылка";
			ТипЗначения = "Предопределенное";
		Иначе
			ВнутрЗначение = Строка(ИстинноеЗначение.УникальныйИдентификатор());
			ТипЗначения = "Ссылка";
		КонецЕсли;
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ИстинноеЗначение)) Тогда
		ИмяМ = ИстинноеЗначение.Метаданные().Имя;
		Если ИстинноеЗначение.Пустая() Тогда
			ВнутрЗначение = "Перечисление." + ИмяМ + ".ПустоеЗначение";
		Иначе
			МассивЗначений = ИстинноеЗначение.Метаданные().ЗначенияПеречисления;
			НужноеИмя = "";
			Для каждого ЗначениеПеречисления Из МассивЗначений ЦИкл
				ПолноеИмяПредопределенного = "Перечисление." + ИмяМ + "." + ЗначениеПеречисления.Имя;
				Если ПредопределенноеЗначение(ПолноеИмяПредопределенного) = ИстинноеЗначение Тогда
					НужноеИмя = ПолноеИмяПредопределенного;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ВнутрЗначение = НужноеИмя;
			
		КонецЕсли;
		ТипЗначения = "Предопределенное";
		
	ИначеЕсли ТипЗнч(ИстинноеЗначение) = Тип("УникальныйИдентификатор") Тогда
		ВнутрЗначение = Строка(ИстинноеЗначение);
		ТипЗначения = "УникальныйИдентификатор";
		
	ИначеЕсли ТипЗнч(ИстинноеЗначение) = Тип("ВидДанныхАнализа") Тогда
		Если ИстинноеЗначение = ВидДанныхАнализа.Дискретные Тогда
			ВнутрЗначение = "ВидДанныхАнализа.Дискретные";
		ИначеЕсли ИстинноеЗначение = ВидДанныхАнализа.Непрерывные Тогда
			ВнутрЗначение = "ВидДанныхАнализа.Непрерывные";
		Иначе
			ВнутрЗначение = "";
		КонецЕсли;
		
		ТипЗначения = "СистемноеПеречисление";
		
	ИначеЕсли ТипЗнч(ИстинноеЗначение) = Тип("ВидДвиженияБухгалтерии") Тогда
		Если ИстинноеЗначение = ВидДвиженияБухгалтерии.Дебет Тогда
			ВнутрЗначение = "ВидДвиженияБухгалтерии.Дебет";
		ИначеЕсли ИстинноеЗначение = ВидДвиженияБухгалтерии.Кредит Тогда
			ВнутрЗначение = "ВидДвиженияБухгалтерии.Кредит";
		Иначе
			ВнутрЗначение = "";
		КонецЕсли;
		
		ТипЗначения = "СистемноеПеречисление";
		
	ИначеЕсли ТипЗнч(ИстинноеЗначение) = Тип("ВидДвиженияНакопления") Тогда
		Если ИстинноеЗначение = ВидДвиженияНакопления.Приход Тогда
			ВнутрЗначение = "ВидДвиженияНакопления.Приход";
		ИначеЕсли ИстинноеЗначение = ВидДвиженияНакопления.Расход Тогда
			ВнутрЗначение = "ВидДвиженияНакопления.Расход";
		Иначе
			ВнутрЗначение = "";
		КонецЕсли;
		
		ТипЗначения = "СистемноеПеречисление";
		
	ИначеЕсли ТипЗнч(ИстинноеЗначение) = Тип("ВидПериодаРегистраРасчета") Тогда
		Если ИстинноеЗначение = ВидПериодаРегистраРасчета.БазовыйПериод Тогда
			ВнутрЗначение = "ВидПериодаРегистраРасчета.БазовыйПериод";
		ИначеЕсли ИстинноеЗначение = ВидПериодаРегистраРасчета.ПериодДействия Тогда
			ВнутрЗначение = "ВидПериодаРегистраРасчета.ПериодДействия";
		ИначеЕсли ИстинноеЗначение = ВидПериодаРегистраРасчета.ПериодРегистрации Тогда
			ВнутрЗначение = "ВидПериодаРегистраРасчета.ПериодРегистрации";
		ИначеЕсли ИстинноеЗначение = ВидПериодаРегистраРасчета.ФактическийПериодДействия Тогда
			ВнутрЗначение = "ВидПериодаРегистраРасчета.ФактическийПериодДействия";
		Иначе
			ВнутрЗначение = "";
		КонецЕсли;
		
		ТипЗначения = "СистемноеПеречисление";
		
	ИначеЕсли ТипЗнч(ИстинноеЗначение) = Тип("ВидСчета") Тогда
		Если ИстинноеЗначение = ВидСчета.АктивноПассивный Тогда
			ВнутрЗначение = "ВидСчета.АктивноПассивный";
		ИначеЕсли ИстинноеЗначение = ВидСчета.Активный Тогда
			ВнутрЗначение = "ВидСчета.Активный";
		ИначеЕсли ИстинноеЗначение = ВидСчета.Пассивный Тогда
			ВнутрЗначение = "ВидСчета.Пассивный";
		Иначе
			ВнутрЗначение = "";
		КонецЕсли;
		
		ТипЗначения = "СистемноеПеречисление";
		
	ИначеЕсли ТипЗнч(ИстинноеЗначение) = Тип("ВидТочкиМаршрутаБизнесПроцесса") Тогда
		Если ИстинноеЗначение = ВидТочкиМаршрутаБизнесПроцесса.ВложенныйБизнесПроцесс Тогда
			ВнутрЗначение = "ВидТочкиМаршрутаБизнесПроцесса.ВложенныйБизнесПроцесс";
		ИначеЕсли ИстинноеЗначение = ВидТочкиМаршрутаБизнесПроцесса.ВыборВарианта Тогда
			ВнутрЗначение = "ВидТочкиМаршрутаБизнесПроцесса.ВыборВарианта";
		ИначеЕсли ИстинноеЗначение = ВидТочкиМаршрутаБизнесПроцесса.Действие Тогда
			ВнутрЗначение = "ВидТочкиМаршрутаБизнесПроцесса.Действие";
		ИначеЕсли ИстинноеЗначение = ВидТочкиМаршрутаБизнесПроцесса.Завершение Тогда
			ВнутрЗначение = "ВидТочкиМаршрутаБизнесПроцесса.Завершение";
		ИначеЕсли ИстинноеЗначение = ВидТочкиМаршрутаБизнесПроцесса.Обработка Тогда
			ВнутрЗначение = "ВидТочкиМаршрутаБизнесПроцесса.Обработка";
		ИначеЕсли ИстинноеЗначение = ВидТочкиМаршрутаБизнесПроцесса.Разделение Тогда
			ВнутрЗначение = "ВидТочкиМаршрутаБизнесПроцесса.Разделение";
		ИначеЕсли ИстинноеЗначение = ВидТочкиМаршрутаБизнесПроцесса.Слияние Тогда
			ВнутрЗначение = "ВидТочкиМаршрутаБизнесПроцесса.Слияние";
		ИначеЕсли ИстинноеЗначение = ВидТочкиМаршрутаБизнесПроцесса.Старт Тогда
			ВнутрЗначение = "ВидТочкиМаршрутаБизнесПроцесса.Старт";
		ИначеЕсли ИстинноеЗначение = ВидТочкиМаршрутаБизнесПроцесса.Условие Тогда
			ВнутрЗначение = "ВидТочкиМаршрутаБизнесПроцесса.Условие";
		Иначе
			ВнутрЗначение = "";
		КонецЕсли;
		
		ТипЗначения = "СистемноеПеречисление";
		
	ИначеЕсли ТипЗнч(ИстинноеЗначение) = Тип("ХранилищеЗначения") Тогда
		ВнутрЗначение = XMLСтрока(ИстинноеЗначение);
		ТипЗначения = "ХранилищеЗначения";
	Иначе
		
		Попытка
			ВнутрЗначение = XMLСтрока(ИстинноеЗначение);
		Исключение
			ВнутрЗначение = Неопределено;
		КонецПопытки;
		ТипЗначения = "";
		
	КонецЕсли;
	
	ОписаниеЗначения = Новый Структура;
	ОписаниеЗначения.Вставить("ТипЗначения"  , ТипЗначения);
	ОписаниеЗначения.Вставить("ВнутрЗначение", ВнутрЗначение);
	ОписаниеЗначения.Вставить("Представление", Строка(ИстинноеЗначение));
	
	Возврат ОписаниеЗначения;
	
КонецФункции

// Определение объекта или записи регистра по параметрам поиска
//
Функция ПолучитьОбъектИлиЗаписьПоСтруктуреПоиска(
	ПараметрыДляПоискаОбъекта,
	АдресТаблицыСсылок,
	ГлобальныеПараметры,
	ВозвращаемыйНабор = Неопределено,
	ТекстСообщения = "") Экспорт
	
	Если ПустаяСтрока(ПараметрыДляПоискаОбъекта.ТипМД) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан тип объекта метаданных'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыДляПоискаОбъекта.ИмяМД) Тогда
		ТекстСообщения = НСтр("ru = 'Не указано имя объекта метаданных'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если  ПараметрыДляПоискаОбъекта.ТипМД <> "Справочники"
		И ПараметрыДляПоискаОбъекта.ТипМД <> "Документы"
		И ПараметрыДляПоискаОбъекта.ТипМД <> "РегистрыСведений"
		И ПараметрыДляПоискаОбъекта.ТипМД <> "ПланыСчетов"
		И ПараметрыДляПоискаОбъекта.ТипМД <> "ПланыВидовРасчета"
		И ПараметрыДляПоискаОбъекта.ТипМД <> "ПланыВидовХарактеристик"
		И ПараметрыДляПоискаОбъекта.ТипМД <> "БизнесПроцессы"
		И ПараметрыДляПоискаОбъекта.ТипМД <> "Задачи" Тогда
		
		ТекстСообщения = НСтр("ru = 'Работа с типом объекта метаданных ""%1"" не поддерживается'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПараметрыДляПоискаОбъекта.ТипМД);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Метаданные[ПараметрыДляПоискаОбъекта.ТипМД].Найти(ПараметрыДляПоискаОбъекта.ИмяМД) = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'В конфигурации не найден объект метаданных с именем %1'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПараметрыДляПоискаОбъекта.ИмяМД);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПараметрыДляПоискаОбъекта.ТипМД = "РегистрыСведений" Тогда
		
		СтруктураОтбора = СцТ_ПолучитьСтруктуруОтбора_НаСервере(
			ПараметрыДляПоискаОбъекта.ОсновнойПараметр,
			АдресТаблицыСсылок,
			ГлобальныеПараметры);
		
		НаборЗаписей = РегистрыСведений[ПараметрыДляПоискаОбъекта.ИмяМД].СоздатьНаборЗаписей();
		
		Для каждого СтрокаОтбора Из СтруктураОтбора Цикл
			НаборЗаписей.Отбор[СтрокаОтбора.Ключ].Установить(СтрокаОтбора.Значение);
		КонецЦикла;
		
		НаборЗаписей.Прочитать();
		
		
		Если НаборЗаписей.Количество() = 1 Тогда
			ОбъектИлиЗапись = НаборЗаписей[0];
		ИначеЕсли НаборЗаписей.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru='Не удалось выбрать нужную запись. Запись регистра сведений не единственная'");
			Возврат Неопределено;
		Иначе
			ТекстСообщения = НСтр("ru='Не удалось выбрать нужную запись. Запись регистра отсутствует'");
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		// Объектные типы данных
		
		ИстиннаяСсылка = СцТ_ПолучитьЗначение_НаСервере(
			ПараметрыДляПоискаОбъекта.ОсновнойПараметр,
			АдресТаблицыСсылок,
			ПараметрыДляПоискаОбъекта.ТипПараметра,
			ГлобальныеПараметры,
			ПараметрыДляПоискаОбъекта.УИШ);
			
		Попытка
			ОбъектИлиЗапись = ИстиннаяСсылка.ПолучитьОбъект();
		Исключение
			ОбъектИлиЗапись = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ОбъектИлиЗапись;
	
	
КонецФункции



Функция ПредопределенныйЭлемент(Знач ПолноеИмяПредопределенного)
	
	ИмяПредопределенного = ВРег(ПолноеИмяПредопределенного);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяКоллекции = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	Точка = Найти(ИмяПредопределенного, ".");
	ИмяТаблицы = Лев(ИмяПредопределенного, Точка - 1);
	ИмяПредопределенного = Сред(ИмяПредопределенного, Точка + 1);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка ИЗ &ПолноеИмяТаблицы ГДЕ ИмяПредопределенныхДанных = &ИмяПредопределенного";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяТаблицы", ИмяКоллекции + "." + ИмяТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяПредопределенного", ИмяПредопределенного);

	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЯ АВТООПИСАНИЙ

// Общая функция-диспетчер формирования описания шага
//
// Параметр
// ШагСценария - данные шага
// Возвращаемое значение - описание шага
Функция СцТ_ПолучитьОписаниеШага_НаСервере(ШагСценария) Экспорт
	
	ТипШага                = ШагСценария.ТипШага;
	ТипМетаданных          = ШагСценария.ТипМетаданных;
	ИмяМетаданных          = ШагСценария.ИмяМетаданных;
	СинонимИмениМетаданных = ШагСценария.ПредставлениеИмениМетаданных;
	ОбСсылка               = СцТ_ПолучитьЗначение_НаСервере(ШагСценария.ОбСсылка);
	ИмяФормыШага           = ШагСценария.ИмяФормы;
	
	Если ШагСценария.ДеревоЗначения <> Неопределено Тогда
		ДеревоЗначенияНаСервере = ШагСценария.ДеревоЗначения;
	Иначе
		ДеревоЗначенияНаСервере = Неопределено;
	КонецЕсли;
	
	Если ТипШага = "Группа" Тогда
		Возврат "";
		
	ИначеЕсли ТипШага = "АвтоГруппа" Тогда
		Возврат СцТ_ПолучитьОписаниеШага_АвтоГруппа_НаСервере(
			ТипМетаданных,
			ИмяМетаданных,
			СинонимИмениМетаданных,
			ОбСсылка);
		
	ИначеЕсли ТипШага = "Воспроизвести" Тогда
		Возврат СцТ_ПолучитьОписаниеШага_Воспроизвести_НаСервере(
			ТипМетаданных,
			СинонимИмениМетаданных,
			ДеревоЗначенияНаСервере);
		
	ИначеЕсли ТипШага = "СравнитьСЭталоном" Тогда
		Возврат СцТ_ПолучитьОписаниеШага_СравнитьСЭталоном_НаСервере(
			ТипМетаданных,
			СинонимИмениМетаданных,
			ДеревоЗначенияНаСервере);
		
	ИначеЕсли ТипШага = "СравнитьДвижения" Тогда
		Возврат СцТ_ПолучитьОписаниеШага_СравнитьДвижения_НаСервере(ДеревоЗначенияНаСервере);
		
	ИначеЕсли ТипШага = "ВыполнитьЗапрос" Тогда
		Возврат СцТ_ПолучитьОписаниеШага_ВыполнитьЗапрос_НаСервере();
		
	ИначеЕсли ТипШага = "ВыполнитьПроцедуру" Тогда
		Возврат СцТ_ПолучитьОписаниеШага_ВыполнитьПроцедуру_НаСервере();
		
	ИначеЕсли ТипШага = "ЗаменаСсылки" Тогда
		Возврат СцТ_ПолучитьОписаниеШага_ЗаменаСсылки_НаСервере(
			ТипМетаданных,
			СинонимИмениМетаданных,
			ОбСсылка);
		
	ИначеЕсли ТипШага = "ВыполнитьВРучную" Тогда
		Возврат СцТ_ПолучитьОписаниеШага_ВыполнитьВручную();
		
	ИначеЕсли ТипШага = "Комментарий" Тогда
		Возврат "";
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЯ АВТООПИСАНИЙ - ФУНКЦИИ ПО ТИПАМ ШАГА

// Функция формирования автоматического описания для шага "Автогруппа"
// Возвращает текст описания
// 
// Параметры
//   ТипМетаданных - строка типа метаданных
//   ИмяМетаданных - строка имени метаданных,
//   СинонимИмениМетаданных - представление метаданных
//   ОбСсылка - ссылка в шаге
Функция СцТ_ПолучитьОписаниеШага_АвтоГруппа_НаСервере(
	ТипМетаданных,
	ИмяМетаданных,
	СинонимИмениМетаданных,
	Знач ОбСсылка)
	
	Если ОбСсылка = Неопределено Тогда
		ОбСсылка = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяМетаданных) Тогда
		
		ОписаниеШага = "Новая автогруппа проверки бизнес-логики";
		
	Иначе
		
		Группа         = "";
		ОбъектОписания = "";
		Дата           = "";
		
		Если ТипМетаданных = "Справочники" Тогда
			
			Если ТипЗнч(ОбСсылка) = Тип("Строка") Тогда
				Группа = НСтр("ru='Элемент'");
			Иначе
				Попытка
					Если ОбСсылка.ЭтоГруппа Тогда
						Группа = НСтр("ru='Группа'");
					Иначе
						Группа = НСтр("ru='Элемент'");
					КонецЕсли;
				Исключение
					Группа = НСтр("ru='Элемент'");
				КонецПопытки;
			КонецЕсли;
			
			ОбъектОписания = Строка(ОбСсылка);
			
			ОписаниеШага =
				НСтр("ru = '<Группа> ""<Объект>"" справочника ""<СинонимИмениМетаданных>"" '");
			
		ИначеЕсли ТипМетаданных = "Документы" Тогда
			
			Если ТипЗнч(ОбСсылка) = Тип("Строка") Тогда
				ОписаниеШага = НСтр("ru = 'Документ '") + ОбСсылка;
			Иначе
				Дата = Формат(ОбСсылка.Дата, "ДФ=""дд.ММ.гг 'г.' ЧЧ:мм:сс""");
				ОписаниеШага = НСтр("ru = 'Документ ""<СинонимИмениМетаданных>"" от <Дата>'");
			КонецЕсли;
			
		ИначеЕсли ТипМетаданных = "ПланыВидовХарактеристик" Тогда
			
			Если ТипЗнч(ОбСсылка) = Тип("Строка") Тогда
				Группа = НСтр("ru='Элемент'");
			Иначе
				Попытка
					Если ОбСсылка.ЭтоГруппа Тогда
						Группа = НСтр("ru='Группа'");
					Иначе
						Группа = НСтр("ru='Элемент'");
					КонецЕсли;
				Исключение
					Группа = НСтр("ru='Элемент'");
				КонецПопытки;
			КонецЕсли;
			
			ОбъектОписания = Строка(ОбСсылка);
			
			ОписаниеШага =
				НСтр("ru = '<Группа> ""<Объект>"" планов видов характеристик ""<СинонимИмениМетаданных>"" '");
			
		ИначеЕсли ТипМетаданных = "ПланыСчетов" Тогда
			
			ОбъектОписания = Строка(ОбСсылка);
			
			ОписаниеШага =
				НСтр("ru = 'План ""<Объект>"" плана счетов ""<СинонимИмениМетаданных>"" '");
			
		ИначеЕсли ТипМетаданных = "ПланыВидовРасчета" Тогда
			
			ОбъектОписания = Строка(ОбСсылка);
			
			ОписаниеШага = НСтр("ru = 'План ""<Объект>"" плана видов расчета ""<СинонимИмениМетаданных>"" '");
			
		ИначеЕсли ТипМетаданных = "РегистрыСведений" Тогда
			
			Если ТипЗнч(ОбСсылка) = Тип("Строка") Тогда
				ОписаниеШага = НСтр("ru = 'Запись регистра сведений ""<СинонимИмениМетаданных>"" '")
					+ ОбСсылка;
			Иначе
				ОписаниеШага = НСтр("ru = 'Запись регистра сведений ""<СинонимИмениМетаданных>"" '")
					+ СцТ_ПолучитьПредставлениеЗаписиРС_НаСервере(ИмяМетаданных, СцТ_ПолучитьЗначение_НаСервере(ОбСсылка));
			КонецЕсли;
			
		ИначеЕсли ТипМетаданных = "БизнесПроцессы" Тогда
			
			Если ТипЗнч(ОбСсылка) = Тип("Строка") Тогда
				ОписаниеШага = НСтр("ru = 'Бизнес-процесс '") + ОбСсылка;
			Иначе
				Дата = Формат(ОбСсылка.Дата, "ДФ=""дд.ММ.гг 'г.' ЧЧ:мм:сс""");
				ОписаниеШага = НСтр("ru = 'Бизнес-процесс ""<СинонимИмениМетаданных>"" от <Дата>'");
			КонецЕсли;
			
		ИначеЕсли ТипМетаданных = "Задачи" Тогда
			
			Если ТипЗнч(ОбСсылка) = Тип("Строка") Тогда
				ОписаниеШага = НСтр("ru = 'Задача '") + ОбСсылка;
			Иначе
				Дата = Формат(ОбСсылка.Дата, "ДФ=""дд.ММ.гг 'г.' ЧЧ:мм:сс""");
				ОписаниеШага = НСтр("ru = 'Задача ""<СинонимИмениМетаданных>"" от <Дата>'");
			КонецЕсли;
			
		Иначе
			
			ОписаниеШага = НСтр("ru = 'Объект ""<СинонимИмениМетаданных>""'");
			
		КонецЕсли;
		
		// Замены
		ОписаниеШага = СтрЗаменить(ОписаниеШага, НСтр("ru = '<Группа>'")                , Группа);
		ОписаниеШага = СтрЗаменить(ОписаниеШага, НСтр("ru = '<Объект>'")                , ОбъектОписания);
		ОписаниеШага = СтрЗаменить(ОписаниеШага, НСтр("ru = '<СинонимИмениМетаданных>'"), СинонимИмениМетаданных);
		ОписаниеШага = СтрЗаменить(ОписаниеШага, НСтр("ru = '<Дата>'")                  , Дата);
		
	КонецЕсли;
	
	Возврат ОписаниеШага;
	
КонецФункции

// Функция формирования автоматического описания для шага "Воспроизвести объект"
// Возвращает текст описания
//Параметры
//	ТипМетаданных - тип метаданных
//	ПредставлениеИмениМетаданных - пользовательское описание метаданных
//	ЗначениеРеквизитов - дерево с данными шага
//
//	Возвращаемое значение
//	Строка автоописания шага
Функция СцТ_ПолучитьОписаниеШага_Воспроизвести_НаСервере(
	ТипМетаданных,
	ПредставлениеИмениМетаданных,
	ДеревоЗначенийШага) Экспорт
	
	Если ТипЗнч(ДеревоЗначенийШага) <> Тип("ДеревоЗначений") Тогда
		Возврат "Ошибка структуры данных. Структура данных не является деревом";
	КонецЕсли;
	
	УзелРеквизитов = ДеревоЗначенийШага.Строки.Найти("Реквизиты", "Имя");
	
	Если УзелРеквизитов = Неопределено Тогда
		Возврат "Ошибка структуры данных. Отсутствует узел реквизитов.";
	КонецЕсли;
	
	// Описание создания и записи объектов
	Если ТипМетаданных = "Документы" Тогда
		ОписаниеСоздания = НСтр("ru='Создать документ ""%1""'");
		РеквизитПроведен = УзелРеквизитов.Строки.Найти("Проведен", "Имя");
		
		ЗначениеВариантаПроведения = "Записать";
		УзелВариантаЗаписи = ДеревоЗначенийШага.Строки.Найти("ВариантЗаписи", "Имя");
		Если УзелВариантаЗаписи <> Неопределено Тогда
			ЗначениеВариантаПроведения = Строка(УзелВариантаЗаписи.Значение);
		КонецЕсли;
		
		Если ЗначениеВариантаПроведения = "Записать" Тогда
			ОписаниеЗакрытия = НСтр("ru='Записать документ'");
		ИначеЕсли ЗначениеВариантаПроведения = "ПровестиНеоперативно" Тогда
			ОписаниеЗакрытия = НСтр("ru='Провести документ неоперативно'");
		ИначеЕсли ЗначениеВариантаПроведения = "ПровестиОперативно" Тогда
			ОписаниеЗакрытия = НСтр("ru='Провести документ оперативно'");
		Иначе
			ОписаниеЗакрытия = НСтр("ru='Отменить проведение документа'");
		КонецЕсли;
		
	ИначеЕсли ТипМетаданных = "Справочники" Тогда
		РеквизитЭтоГруппа = УзелРеквизитов.Строки.Найти("ЭтоГруппа", "Имя");
		Если РеквизитЭтоГруппа <> Неопределено И РеквизитЭтоГруппа.Значение = Истина Тогда
			ОписаниеСоздания = НСтр("ru='Создать или найти группу справочника ""%1""'");
			ОписаниеЗакрытия = НСтр("ru='Записать группу справочника'");
		Иначе
			ОписаниеСоздания = НСтр("ru='Создать или найти элемент справочника ""%1""'");
			ОписаниеЗакрытия = НСтр("ru='Записать элемент справочника'");
		КонецЕсли;
		
	ИначеЕсли ТипМетаданных = "ПланыВидовХарактеристик" Тогда
		РеквизитЭтоГруппа = УзелРеквизитов.Строки.Найти("ЭтоГруппа", "Имя");
		Если РеквизитЭтоГруппа <> Неопределено И РеквизитЭтоГруппа.Значение Тогда
			ОписаниеСоздания = НСтр("ru='Создать или найти группу планов видов характеристик ""%1""'");
			ОписаниеЗакрытия = НСтр("ru='Записать группу плана видов характеристик'");
		Иначе
			ОписаниеСоздания = НСтр("ru='Создать или найти план видов характеристик ""%1""'");
			ОписаниеЗакрытия = НСтр("ru='Записать элемент плана видов характеристик'");
		КонецЕсли;
		
	ИначеЕсли ТипМетаданных = "ПланыСчетов" Тогда
		ОписаниеСоздания = НСтр("ru='Создать или найти план счетов ""%1""'");
		ОписаниеЗакрытия = НСтр("ru='Записать план счетов'");
		
	ИначеЕсли ТипМетаданных = "ПланыВидовРасчета" Тогда
		ОписаниеСоздания = НСтр("ru='Создать или найти план видов расчета ""%1""'");
		ОписаниеЗакрытия = НСтр("ru='Записать план видов расчета'");
		
	ИначеЕсли ТипМетаданных = "Задачи" Тогда
		ОписаниеСоздания = НСтр("ru='Создать или найти задачу ""%1""'");
		ОписаниеЗакрытия = НСтр("ru='Записать задачу'");
		
	ИначеЕсли ТипМетаданных = "БизнесПроцессы" Тогда
		ОписаниеСоздания = НСтр("ru='Создать или найти бизнес-процесс ""%1""'");
		ОписаниеЗакрытия = НСтр("ru='Записать бизнес-процесс'");
		
	ИначеЕсли ТипМетаданных = "РегистрыСведений" Тогда
		ОписаниеСоздания = НСтр("ru='Создать или найти запись регистра сведений ""%1""'");
		ОписаниеЗакрытия = НСтр("ru='Записать запись регистра сведений'");
		
	Иначе
		ОписаниеСоздания = НСтр("ru='Создать или найти объект ""%1""'");
		ОписаниеЗакрытия = "Записать";
		
	КонецЕсли;
	
	ОписаниеСоздания = СтрЗаменить(ОписаниеСоздания,"%1", ПредставлениеИмениМетаданных);
	
	// Описание заполнения реквизитов шапки
	ОписаниеСтруктурыОбъекта = СцТ_ПолучитьОписаниеСтруктурыОбъекта_НаСервере(ДеревоЗначенийШага, Ложь);
	
	// Сборка описания
	ОписаниеШага = "";
	ОписаниеШага = СцТ_ДобавитьПодстроку_НаСервере(ОписаниеШага, ОписаниеСоздания        , Символы.ПС);
	ОписаниеШага = СцТ_ДобавитьПодстроку_НаСервере(ОписаниеШага, ОписаниеСтруктурыОбъекта, Символы.ПС);
	ОписаниеШага = СцТ_ДобавитьПодстроку_НаСервере(ОписаниеШага, ОписаниеЗакрытия        , Символы.ПС);
	
	Возврат ОписаниеШага;
	
КонецФункции

// Функция формирования автоматического описания для шага "Сравнить объект с эталоном"
// Возвращает текст описания
Функция СцТ_ПолучитьОписаниеШага_СравнитьСЭталоном_НаСервере(
	ТипМетаданных,
	СинонимИмениМетаданных,
	ДеревоЗначения) Экспорт
	
	Если ТипЗнч(ДеревоЗначения) <> Тип("ДеревоЗначений") Тогда
		Возврат "Ошибка структуры данных. Структура данных не является деревом";
	КонецЕсли;
	
	УзелРеквизитов = ДеревоЗначения.Строки.Найти("Реквизиты", "Имя");
	
	Если УзелРеквизитов = Неопределено Тогда
		Возврат "Ошибка структуры данных. Отсутствует узел реквизитов.";
	КонецЕсли;
	
	ОбъектИлиЗапись = "";
	Группа          = "";
	Дата            = "";
	
	РеквизитЭтоГруппа = УзелРеквизитов.Строки.Найти("ЭтоГруппа", "Имя");
	Если РеквизитЭтоГруппа <> Неопределено И РеквизитЭтоГруппа.Значение Тогда
		Группа = "группы";
	Иначе
		Группа = "элемента";
	КонецЕсли;
	
	РеквизитНаименование = УзелРеквизитов.Строки.Найти("Наименование", "Имя");
	Если РеквизитНаименование <> Неопределено Тогда
		ОбъектИлиЗапись = РеквизитНаименование.Значение;
	КонецЕсли;
	
	РеквизитДата = УзелРеквизитов.Строки.Найти("Дата", "Имя");
	Если РеквизитДата <> Неопределено Тогда
		ОбъектИлиЗапись = Формат(РеквизитДата.Значение, "ДЛФ=Д");
	КонецЕсли;
	
	Если ТипМетаданных = "Справочники" Тогда
		
		ОписаниеШага =
			НСтр("ru='Сравнить данные <Группа> ""<Объект>"" справочника ""<СинонимИмениМетаданых>"" с эталонными'");
		
	ИначеЕсли ТипМетаданных = "Документы" Тогда
		
		ОписаниеШага =
			НСтр("ru='Сравнить данные документа ""<СинонимИмениМетаданых>"" эталонными'");
		
	ИначеЕсли ТипМетаданных = "ПланыВидовХарактеристик" Тогда
		
		ОписаниеШага =
			НСтр("ru = 'Сравнить данные <Группа> ""<Объект>"" плана видов характеристик ""<СинонимИмениМетаданных>"" с эталонными'");
		
	ИначеЕсли ТипМетаданных = "ПланыСчетов" Тогда
		
		ОписаниеШага =
			НСтр("ru = 'Сравнить данные плана ""<Объект>"" плана счетов ""<СинонимИмениМетаданных>"" с эталонными'");
		
	ИначеЕсли ТипМетаданных = "ПланыВидовРасчета" Тогда
		
		ОписаниеШага =
			НСтр("ru = ''Сравнить данные плана ""<Объект>"" плана видов расчета ""<СинонимИмениМетаданных>"" с эталонными'");
		
	ИначеЕсли ТипМетаданных = "РегистрыСведений" Тогда
		
		ОписаниеШага =
			НСтр("ru='Сравнить данные записи регистра сведений ""<СинонимИмениМетаданых>"" с эталонными'");
		
	ИначеЕсли ТипМетаданных = "БизнесПроцессы" Тогда
		
		ОписаниеШага =
			НСтр("ru='Сравнить данные бизнес-процесса ""<СинонимИмениМетаданых>"" от <Дата> с эталонными'");
		
	ИначеЕсли ТипМетаданных = "Задачи" Тогда
		
		ОписаниеШага =
			НСтр("ru='Сравнить данные задачи ""<СинонимИмениМетаданых>"" от <Дата> с эталонными'");
		
	Иначе
		
		ОписаниеШага =
			НСтр("ru='Сравнить данные объекта ""<СинонимИмениМетаданых>"" с эталонными'");
		
	КонецЕсли;
	
	ОписаниеШага = СтрЗаменить(ОписаниеШага, НСтр("ru='<Объект>'")               , ОбъектИлиЗапись);
	ОписаниеШага = СтрЗаменить(ОписаниеШага, НСтр("ru='<Группа>'")               , Группа);
	ОписаниеШага = СтрЗаменить(ОписаниеШага, НСтр("ru='<СинонимИмениМетаданых>'"), СинонимИмениМетаданных);
	ОписаниеШага = СтрЗаменить(ОписаниеШага, НСтр("ru='<Дата>'")                 , Дата);
	
	// Описание заполнения реквизитов шапки
	ОписаниеСтруктурыОбъекта = СцТ_ПолучитьОписаниеСтруктурыОбъекта_НаСервере(ДеревоЗначения, Истина);
	
	// Сборка описания
	ОписаниеШага = СцТ_ДобавитьПодстроку_НаСервере(ОписаниеШага, ОписаниеСтруктурыОбъекта, Символы.ПС);
	
	Возврат ОписаниеШага;
	
КонецФункции

// Функция формирования автоматического описания для шага "Сверить движения с эталоном"
// Возвращает текст описания
Функция СцТ_ПолучитьОписаниеШага_СравнитьДвижения_НаСервере(ДеревоЗначения) Экспорт
	
	Если ТипЗнч(ДеревоЗначения) <> Тип("ДеревоЗначений") Тогда
		Возврат "";
	КонецЕсли;
	
	УзелДвижений = ДеревоЗначения.Строки.Найти("ДвиженияПоРегистрам", "Имя");
	
	Если УзелДвижений = Неопределено ИЛИ УзелДвижений.Строки.Количество() = 0 Тогда
		ОписаниеШага = НСтр("ru='Сверить с эталоном движения документа'");
		
	Иначе
		
		ОписаниеРегистров = "";
		
		Для каждого Стр Из УзелДвижений.Строки Цикл
			Если Стр.Активность Тогда
				ОписаниеРегистров = ОписаниеРегистров + Символы.ПС + """" + Стр.Синоним + """";
			КонецЕсли;
		КонецЦикла;
		
		ОписаниеШага = СцТ_ДобавитьПодстроку_НаСервере(
			НСтр("ru='Сверить с эталоном движения документа по регистрам:'"),
			ОписаниеРегистров);
		
	КонецЕсли;
	
	Возврат ОписаниеШага;
	
КонецФункции

// Функция формирования автоматического описания для шага "Использовать существующий объект"
// Возвращает текст описания
Функция СцТ_ПолучитьОписаниеШага_ЗаменаСсылки_НаСервере(
	ТипМетаданных,
	СинонимИмениМетаданных,
	Знач ОбСсылка)
	
	Если ОбСсылка = Неопределено Тогда
		ОбСсылка = "";
	КонецЕсли;
	
	Если ТипМетаданных = "Документы" Тогда
		
		ОписаниеШага =
			НСтр("ru='Заменить ссылку существующего документа ""<СинонимИмениМетаданных>"" на ссылку ""<СсылкаНаОбъект>""'");
		
	ИначеЕсли ТипМетаданных = "Справочники" Тогда
		
		Если ТипЗнч(ОбСсылка) = Тип("Строка") Тогда
			ОписаниеШага =
				НСтр("ru='Заменить существующую ссылку справочника ""<СинонимИмениМетаданных>"" на ссылку ""<СсылкаНаОбъект>""'");
		Иначе
			Если ОбСсылка.ЭтоГруппа Тогда
				ОписаниеШага =
					НСтр("ru='Заменить ссылку существующей группы справочника ""<СинонимИмениМетаданных>"" на ссылку ""<СсылкаНаОбъект>""'");
			Иначе
				ОписаниеШага =
					НСтр("ru='Заменить ссылку существующего элемента справочника ""<СинонимИмениМетаданных>"" на ссылку ""<СсылкаНаОбъект>""'");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипМетаданных = "ПланыВидовХарактеристик" Тогда
		Если ТипЗнч(ОбСсылка) = Тип("Строка") Тогда
			ОписаниеШага =
				НСтр("ru='Заменить существующую ссылку плана видов характеристик ""<СинонимИмениМетаданных>"" на ссылку ""<СсылкаНаОбъект>""'");
		Иначе
			Если ОбСсылка.ЭтоГруппа Тогда
				ОписаниеШага =
					НСтр("ru='Заменить ссылку существующей группы плана видов характеристик ""<СинонимИмениМетаданных>"" на ссылку ""<СсылкаНаОбъект>""'");
			Иначе
				ОписаниеШага =
					НСтр("ru='Заменить ссылку существующего плана видов характеристик ""<СинонимИмениМетаданных>"" на ссылку ""<СсылкаНаОбъект>""'");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипМетаданных = "ПланыСчетов" Тогда
		ОписаниеШага =
			НСтр("ru='Заменить ссылку существующего плана счетов ""<СинонимИмениМетаданных>"" на ссылку ""<СсылкаНаОбъект>""'");
		
	ИначеЕсли ТипМетаданных = "ПланыВидовРасчета" Тогда
		ОписаниеШага =
			НСтр("ru='Заменить ссылку существующего плана видов расчета ""<СинонимИмениМетаданных>"" на ссылку ""<СсылкаНаОбъект>""'");
		
	ИначеЕсли ТипМетаданных = "Задачи" Тогда
		ОписаниеШага =
			НСтр("ru='Заменить ссылку существующей задачи ""<СинонимИмениМетаданных>"" на ссылку ""<СсылкаНаОбъект>""'");
		
	ИначеЕсли ТипМетаданных = "БизнесПроцессы" Тогда
		ОписаниеШага =
			НСтр("ru='Заменить ссылку существующего бизнес-процесса ""<СинонимИмениМетаданных>"" на ссылку ""<СсылкаНаОбъект>""'");
		
	Иначе
		ОписаниеШага = НСтр("ru='ВНИМАНИЕ! Ошибка в программе!'");
		
	КонецЕсли;
	
	ОписаниеШага = СтрЗаменить(
		ОписаниеШага,
		НСтр("ru='<СинонимИмениМетаданных>'"),
		СинонимИмениМетаданных);
	
	// Для документов, бизнес процессов и задач типовое представление не подходит - номер в тесте может быть другим
	Если ТипЗнч(ОбСсылка) <> Тип("Строка")
		И (ТипМетаданных = "Документы"
		ИЛИ ТипМетаданных = "БизнесПроцессы"
		ИЛИ ТипМетаданных = "Задачи") Тогда
		ОписаниеШага = СтрЗаменить(
			ОписаниеШага,
			НСтр("ru='<СсылкаНаОбъект>'"),
			" от " + Формат(ОбСсылка.Дата, "ДФ=""дд.ММ.гг 'г.' ЧЧ:мм:сс"""));
	Иначе
		ОписаниеШага = СтрЗаменить(
			ОписаниеШага,
			НСтр("ru='<СсылкаНаОбъект>'"),
			Строка(ОбСсылка));
	КонецЕсли;
	
	Возврат ОписаниеШага;
	
КонецФункции

// Функция формирования автоматического описания для шага "Выполнить скрипт"
// Возвращает текст описания
Функция СцТ_ПолучитьОписаниеШага_ВыполнитьЗапрос_НаСервере()
	
	Возврат НСтр("ru='Выполнить запрос и сравнить его результат с приложенной к шагу таблицей'");
	
КонецФункции

// Функция формирования автоматического описания для шага "Выполнить процедуру"
// Возвращает текст описания
Функция СцТ_ПолучитьОписаниеШага_ВыполнитьПроцедуру_НаСервере()
	
	Возврат НСтр("ru='Выполнить серверную процедуру'");
	
КонецФункции

// Функция формирования автоматического описания для шага "Заполнить реквизиты шапки"
// Возвращает текст описания
Функция СцТ_ПолучитьОписаниеШага_ВыполнитьВручную()
	
	Возврат "Выполните действие вручную и перейдите на следующий шаг";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЯ АВТООПИСАНИЙ - ВСПОМОГАТЕЛЬНЫЕ СТРОКОВЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция для склейки двух строк
//
// Параметры
//	Строка - исходная строка к которой приклеивается подстрока
//	Подстрока - приклеиваемая справа подстрока
//	Разделитель - строка - расзделитель. По умолчанию перенос строки
//	ПрефиксПодстроки - префикс, который добавляется к подстроке слева, если подстрока не пустая
//
// Возвращаемое значение
// Склеенная подстрока
Функция СцТ_ДобавитьПодстроку_НаСервере(
	Строка,
	Знач Подстрока,
	Разделитель = Неопределено,
	ПрефиксПодстроки = "")
	
	Если Разделитель = Неопределено Тогда
		Разделитель = Символы.ПС;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Строка) И НЕ ПустаяСтрока(Подстрока) Тогда
		Строка = Строка + Разделитель;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Подстрока) Тогда
		Подстрока = ПрефиксПодстроки + Подстрока;
	КонецЕсли;
	
	Возврат Строка + Подстрока;
	
КонецФункции

// Функция возвращает описание структуры, переданной в виде входного параметра
//
// Параметры
// ЗначениеРеквизитов - Дерево значений заданной структуры
//                      с содержанием шага
// Возвращаемое значение - строка описания
Функция СцТ_ПолучитьОписаниеСтруктурыОбъекта_НаСервере(
	ЗначениеРеквизитов,
	ЭтоПроверяемыйОбъект)
	
	ОписаниеСтруктуры = "";
	
	Если ТипЗнч(ЗначениеРеквизитов) <> Тип("ДеревоЗначений") Тогда
		Возврат ОписаниеСтруктуры;
	КонецЕсли;
	
	// Реквизиты шапки
	УзелРеквизитов = ЗначениеРеквизитов.Строки.Найти("Реквизиты", "Имя");
	Если УзелРеквизитов <> Неопределено И УзелРеквизитов.Активность <> 0 Тогда
		
		СтрокаЗаполнения = "";
		СтрокаПроверки   = "";
		СтрокаСведений   = "";
		
		Для каждого СтрокаРеквизита Из УзелРеквизитов.Строки Цикл
			Если СтрокаРеквизита.Активность Тогда
				// Синонимы берутся непосредственно из дерева
				Если СтрокаРеквизита.Действие = "Заполнить" Тогда
					СцТ_ДобавитьРеквизитВСтроку_НаСервере(
						СтрокаЗаполнения,
						СтрокаРеквизита.Синоним,
						СтрокаРеквизита.Значение,
						СтрокаРеквизита.Представление,
						Истина,
						Истина,
						2);
						
				ИначеЕсли СтрокаРеквизита.Действие = "Проверить" Тогда
					СцТ_ДобавитьРеквизитВСтроку_НаСервере(
						СтрокаПроверки,
						СтрокаРеквизита.Синоним,
						СтрокаРеквизита.Значение,
						СтрокаРеквизита.Представление,
						Истина,
						Ложь,
						2);
						
				ИначеЕсли СтрокаРеквизита.Действие = "Сведения" Тогда
					СцТ_ДобавитьРеквизитВСтроку_НаСервере(
						СтрокаСведений,
						СтрокаРеквизита.Синоним,
						СтрокаРеквизита.Значение,
						СтрокаРеквизита.Представление,
						Истина,
						Ложь,
						2);
						
					// Других вариантов нет
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(СтрокаЗаполнения) Тогда
			Подстрока = НСтр("ru='Заполнить реквизиты:'")
				+ Символы.ПС
				+ СтрокаЗаполнения;
				
			ОписаниеСтруктуры = СцТ_ДобавитьПодстроку_НаСервере(
				ОписаниеСтруктуры,
				Подстрока,
				Символы.ПС);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаСведений) Тогда
			Подстрока = НСтр("ru='Для информации:'")
				+ Символы.ПС
				+ СтрокаСведений;
				
			ОписаниеСтруктуры = СцТ_ДобавитьПодстроку_НаСервере(
				ОписаниеСтруктуры,
				Подстрока,
				Символы.ПС);
		КонецЕсли;
		
		Если СтрДлина(СтрокаПроверки) > 1 Тогда
			Подстрока = НСтр("ru='Проверить, что:'")
				+ Символы.ПС
				+ СтрокаПроверки;
				
			ОписаниеСтруктуры = СцТ_ДобавитьПодстроку_НаСервере(
				ОписаниеСтруктуры,
				Подстрока,
				Символы.ПС);
		КонецЕсли;
		
	КонецЕсли; // Конец описание по узлу Реквизиты
	
	// Табличные части
	УзелТабличныхЧастей = ЗначениеРеквизитов.Строки.Найти("ТабличныеЧасти", "Имя");
	Если УзелТабличныхЧастей <> Неопределено Тогда
		
		Для каждого УзелТабличнойЧасти Из УзелТабличныхЧастей.Строки Цикл
			
			Если НЕ УзелТабличнойЧасти.Активность Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеСтрокТабличнойЧасти = "";
			КоличествоСтрок = УзелТабличнойЧасти.Строки.Количество() - 1;
			// Первая строка для описания не нужна - в ней настройки колонок,
			// а все необходимые параметры шапки уже переданы в строки
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				УзелСтроки = УзелТабличнойЧасти.Строки[НомерСтроки];
				Если НЕ УзелСтроки.Активность Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаЗаполнения             = "";
				СтрокаПроверки               = "";
				СтрокаКлючей                 = "";
				СтрокаСведений               = "";
				ОписаниеСтрокиТабличнойЧасти = "";
				
				Для каждого СтрокаРеквизита Из УзелСтроки.Строки Цикл
					
					Если НЕ СтрокаРеквизита.Активность
						ИЛИ СтрокаРеквизита.Имя = "НомерСтроки"
						И НЕ ЭтоПроверяемыйОбъект Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаРеквизита.Действие = "Проверить" Тогда
						СцТ_ДобавитьРеквизитВСтроку_НаСервере(
							СтрокаПроверки,
							СтрокаРеквизита.Синоним,
							СтрокаРеквизита.Значение,
							СтрокаРеквизита.Представление,
							,
							Ложь);
						
					ИначеЕсли СтрокаРеквизита.Действие = "Сведения" Тогда
						СцТ_ДобавитьРеквизитВСтроку_НаСервере(
							СтрокаСведений,
							СтрокаРеквизита.Синоним,
							СтрокаРеквизита.Значение,
							СтрокаРеквизита.Представление,
							,
							Ложь);
						
					ИначеЕсли СтрокаРеквизита.Действие = "Ключ" Тогда
						СцТ_ДобавитьРеквизитВСтроку_НаСервере(
							СтрокаКлючей,
							СтрокаРеквизита.Синоним,
							СтрокаРеквизита.Значение,
							СтрокаРеквизита.Представление,
							,
							Ложь);
						
					ИначеЕсли СтрокаРеквизита.Действие = "Заполнить" Тогда
						СцТ_ДобавитьРеквизитВСтроку_НаСервере(
							СтрокаЗаполнения,
							СтрокаРеквизита.Синоним,
							СтрокаРеквизита.Значение,
							СтрокаРеквизита.Представление);
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Строки табличной части либо заполняются, либо справниваются
				Если НЕ ПустаяСтрока(СтрокаЗаполнения) Тогда
					ОписаниеСтрокиТабличнойЧасти = СтрокаЗаполнения;
					
				Иначе
					
					// Это сравнение строк ТЧ
					ОписаниеСтрокиТабличнойЧасти = СцТ_ДобавитьПодстроку_НаСервере(
						"",
						СтрокаКлючей,
						,
						НСтр("ru = 'Ключ: '"));
					
					Уже = НЕ ПустаяСтрока(СтрокаКлючей);
					
					ОписаниеСтрокиТабличнойЧасти = СцТ_ДобавитьПодстроку_НаСервере(
						ОписаниеСтрокиТабличнойЧасти,
						СтрокаПроверки,
						Символы.ПС,
						?(Уже, "  ", "") + НСтр("ru='Проверить: '"));
					
					Уже = Уже ИЛИ НЕ ПустаяСтрока(СтрокаПроверки);
					ОписаниеСтрокиТабличнойЧасти = СцТ_ДобавитьПодстроку_НаСервере(
						ОписаниеСтрокиТабличнойЧасти,
						СтрокаСведений,
						,
						?(Уже, "  ", "") + НСтр("ru = 'Для информации: '"));
					
				КонецЕсли;
				
				ОписаниеСтрокТабличнойЧасти = СцТ_ДобавитьПодстроку_НаСервере(
					ОписаниеСтрокТабличнойЧасти,
					ОписаниеСтрокиТабличнойЧасти,
					Символы.ПС,
					Строка(УзелСтроки.Значение) + ": ");
					
			КонецЦикла;
			
			Если ЭтоПроверяемыйОбъект Тогда
				ОписаниеТаблицы = СцТ_ДобавитьПодстроку_НаСервере(
					"",
					ОписаниеСтрокТабличнойЧасти,
					"",
					НСтр("ru='Проверить табличную часть: ""'")
						+ УзелТабличнойЧасти.Синоним
						+ """:"
						+ Символы.ПС);
			Иначе
				ОписаниеТаблицы = СцТ_ДобавитьПодстроку_НаСервере(
					"",
					ОписаниеСтрокТабличнойЧасти,
					"",
					НСтр("ru='Заполнить табличную часть: ""'")
						+ УзелТабличнойЧасти.Синоним
						+ """:"
						+ Символы.ПС);
			КонецЕсли;
			
			ОписаниеСтруктуры = СцТ_ДобавитьПодстроку_НаСервере(
				ОписаниеСтруктуры,
				ОписаниеТаблицы,
				Символы.ПС);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОписаниеСтруктуры;
	
КонецФункции

// Вспомогательная процедура формирует строку описания реквизита
// в зависимости от типа реквизита, его названия и значения
//
// Параметры
//	СтрокаПолучатель - строка в которую нужно добавить описание реквизита
//	СинонимРеквизита     - пользовательское название реквизита
//	ЗначениеРеквизита    - истинное значение реквизита
//	ПредставлениеЗначенияРеквизита - пользовательское предаставление значения реквизита
//	ПереносСтроки - нужен ли перенос строки для этого реквизита
//	Заполнить - Булево. Истина = заполнить, Ложь = проверить
//	Отступ - отступ перед реквизитом в количестве символов, имеет смысл при переносе
Процедура СцТ_ДобавитьРеквизитВСтроку_НаСервере(
	СтрокаПолучатель,
	СинонимРеквизита,
	ЗначениеРеквизита,
	ПредставлениеЗначенияРеквизита,
	ПереносСтроки = Ложь,
	Заполнить = Истина,
	Отступ = 0)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование строки отступа
	СтрокаОтступа = "";
	Итератор = 0;
	Пока Итератор < Отступ Цикл
		СтрокаОтступа = СтрокаОтступа + " ";
		Итератор = Итератор + 1;
	КонецЦикла;
	
	// Добавление значения
	Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
		
		Если ЗначениеРеквизита Тогда
			Если Заполнить Тогда
				ДобавляемыйТекст = НСтр("ru='Установить флаг ""<ИмяРеквизита>""; '");
			Иначе
				// Значит проверить
				ДобавляемыйТекст = НСтр("ru='Флаг ""<ИмяРеквизита>"" установлен; '");
			КонецЕсли;
		Иначе
			Если Заполнить Тогда
				ДобавляемыйТекст = НСтр("ru='Снять флаг ""<ИмяРеквизита>""; '");
			Иначе
				// Значит проверить
				ДобавляемыйТекст = НСтр("ru='Флаг ""<ИмяРеквизита>"" снят; '");
			КонецЕсли;
		КонецЕсли;
		ДобавляемыйТекст = СтрЗаменить(ДобавляемыйТекст, НСтр("ru='<ИмяРеквизита>'"), СинонимРеквизита);
		
	Иначе
		ДобавляемыйТекст = СинонимРеквизита + " """ + ПредставлениеЗначенияРеквизита + """; ";
		
	КонецЕсли;
	
	// Сборка итоговой строки
	СтрокаПолучатель = СцТ_ДобавитьПодстроку_НаСервере(
		СтрокаПолучатель,
		СтрокаОтступа + ДобавляемыйТекст,
		?(ПереносСтроки, Символы.ПС, ""));
	
КонецПроцедуры

// Экспортная функция формирующая описание записи регистра
// по ее ключевым полям
// Параметры
//	ИмяМетаданных - имя метаданных
//	ОтборРегистра - структура отбора для поиска нужной записи
// Возвращаемое значение
//	Строка описания регистра по значениям ключевых полей
Функция СцТ_ПолучитьПредставлениеЗаписиРС_НаСервере(ИмяМетаданных, Знач ОтборРегистра) Экспорт
	
	Синоним = Метаданные.РегистрыСведений[ИмяМетаданных].Синоним;
	
	ЗаписьРегистра = РегистрыСведений[ИмяМетаданных].СоздатьНаборЗаписей();
	
	ОтборРегистра = СцТ_ПолучитьЗначение_НаСервере(ОтборРегистра);
	
	Для каждого СтрокаОтбора Из ОтборРегистра Цикл
		Попытка
			ЗаписьРегистра.Отбор[СтрокаОтбора.Ключ].Установить(СтрокаОтбора.Значение);
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	
	ЗаписьРегистра.Прочитать();
	
	Наименование = Синоним;
	
	Если ЗаписьРегистра.Количество() = 1 Тогда
		
		// Обязательные реквизиты регистровСведений
		Если Метаданные.РегистрыСведений[ИмяМетаданных].ПериодичностьРегистраСведений <>
				Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			Наименование = Формат(ЗаписьРегистра[0].Период, "ДФ=""дд/ММ/гг'г.' ЧЧ:мм:сс""");
		КонецЕсли;
		
		// Измерения
		Для каждого Измерение Из Метаданные.РегистрыСведений[ИмяМетаданных].Измерения Цикл
			Если НЕ ПустаяСтрока(Наименование) Тогда
				Наименование = Наименование + "/ ";
			КонецЕсли;
			Наименование = Наименование + Строка(ЗаписьРегистра[0][Измерение.Имя]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СцТ_ПреобразоватьВТаблицеХранилищеЗначенияВСтроку(Таблица) Экспорт
	
	ТипХрЗнч            = Тип("ХранилищеЗначения");
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	КолонкиТаблицы = Таблица.Колонки;
	// Определить колонки, содержащие хранилище значения
	ПереименованиеКолонокХЗ = Новый Соответствие;
	Для каждого Колонка Из КолонкиТаблицы Цикл
		Если Колонка.ТипЗначения.СодержитТип(ТипХрЗнч) Тогда
			ПереименованиеКолонокХЗ[Колонка.Имя] = Колонка.Заголовок;
		КонецЕсли;
	КонецЦикла;
	
	// Создание колонок для преобразования хр. знч. в строку
	Для каждого КлючЗначение Из ПереименованиеКолонокХЗ Цикл
		НовоеИмяКолонки = КлючЗначение.Ключ + "_СцТ_ХрЗнчСтр";
		КолонкиТаблицы.Добавить(НовоеИмяКолонки, ОписаниеТиповСтрока, КлючЗначение.Значение);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Для каждого КлючЗначение Из ПереименованиеКолонокХЗ Цикл
			ТипЗначения = ТипЗнч(СтрокаТаблицы[КлючЗначение.Ключ]);
			Если ТипЗначения = ТипХрЗнч Тогда
				НовоеИмяКолонки = КлючЗначение.Ключ + "_СцТ_ХрЗнчСтр";
				СтрокаТаблицы[НовоеИмяКолонки] = XMLСтрока(СтрокаТаблицы[КлючЗначение.Ключ]);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Удаление колонок с хранилищем значения
	// Переименование колонок с преобразованным хр. знч.
	
	Для каждого КлючЗначение Из ПереименованиеКолонокХЗ Цикл
		
		ИсходнаяКолонка = КолонкиТаблицы.Найти(КлючЗначение.Ключ);
		Если ИсходнаяКолонка <> Неопределено Тогда
			КолонкиТаблицы.Удалить(ИсходнаяКолонка);
		КонецЕсли;
		
		НовоеИмяКолонки = КлючЗначение.Ключ + "_СцТ_ХрЗнчСтр";
		НоваяКолонка = КолонкиТаблицы.Найти(НовоеИмяКолонки);
		
		Если НоваяКолонка <> Неопределено Тогда
			НоваяКолонка.Имя = КлючЗначение.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Получение дерева значений из структуры
// Это преобразование выполняется для облегчения клиент-серверных вызовов
//
// Параметры
// ДеревоСтруктур - структура с данными дерева
// Возвращаемое значение - дерево значений с данными из дерева структуры
Функция СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(ДеревоСтруктур) Экспорт
	
	ДеревоЗначения = Новый ДеревоЗначений;
	Для каждого ЭлементМассива Из ДеревоСтруктур.ИСТЗ_Колонки Цикл
		ДеревоЗначения.Колонки.Добавить(ЭлементМассива);
	КонецЦикла;
	
	СцТ_ЗаполнитьВеткуДереваЗначенияИзДереваСтруктур(ДеревоЗначения, ДеревоСтруктур);
	
	Возврат ДеревоЗначения;
	
КонецФункции

// Заполнение одной строки в дереве значений по данным из структуры
//
// Параметры
//	ДеревоЗначения - дерево значения (приемник)
//	ДеревоСтруктур - структура с данными дерева (Источник)
Процедура СцТ_ЗаполнитьВеткуДереваЗначенияИзДереваСтруктур(
	ДеревоЗначения,
	ДеревоСтруктур)
	
	СтрокиДереваФормы = ДеревоЗначения.Строки;
	Для каждого СтрокаДереваСтруктур Из ДеревоСтруктур.ИСТЗ_Строки Цикл
		СтрокаДереваФормы = СтрокиДереваФормы.Добавить();
		Для каждого КлючЗначение Из СтрокаДереваСтруктур Цикл
			Если КлючЗначение.Ключ <> "ИСТЗ_Строки" Тогда
				СтрокаДереваФормы[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		СцТ_ЗаполнитьВеткуДереваЗначенияИзДереваСтруктур(СтрокаДереваФормы, СтрокаДереваСтруктур);
	КонецЦикла;
	
КонецПроцедуры

// Получение списка всех обрабатываемых реквизитов (ресурсов, измерений)
// заданного объекта метаданных
//
// Параметры
// ТипМетаданных - строка типа метаданных
// ИмяМетаданных - строка имени метаданных
// ДляГруппы - признак, что нужны реквизиты для группы справочников
// Возвращаемое значение - список всех нужных реквизитов
Функция СцТ_ПолучитьСписокВсехАтрибутовОбъектаМетаданных(ТипМетаданных, ИмяМетаданных, ДляГруппы = Неопределено) Экспорт
	
	СписокРеквизитов = Новый СписокЗначений;
	
	Если ПустаяСтрока(ТипМетаданных)
		ИЛИ ПустаяСтрока(ИмяМетаданных)
		ИЛИ ТипМетаданных = "ОбщаяФорма" Тогда
		Возврат СписокРеквизитов;
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные[ТипМетаданных][ИмяМетаданных];
	
	Если ТипМетаданных = "Справочники" Тогда
		
		// Свойства
		СписокРеквизитов.Добавить("ЭтоГруппа", НСтр("ru='Это группа'"));
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.Иерархический Тогда
			СписокРеквизитов.Добавить("Родитель", НСтр("ru='Родитель'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МетаданныеОбъекта.Владельцы) Тогда
			СписокРеквизитов.Добавить("Владелец", НСтр("ru='Владелец'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			Если ДляГруппы <> Неопределено
				И (ДляГруппы 
				И Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента
				ИЛИ НЕ ДляГруппы
				И Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
				
				Продолжить;
			КонецЕсли;
			
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "Документы" Тогда
		
		// Свойства
		Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			СписокРеквизитов.Добавить("Номер", НСтр("ru='Номер'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		СписокРеквизитов.Добавить("Проведен"       , НСтр("ru='Проведен'"));
		СписокРеквизитов.Добавить("Дата"           , НСтр("ru='Дата'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "ПланыВидовХарактеристик" Тогда
		
		// Свойства
		СписокРеквизитов.Добавить("ЭтоГруппа", НСтр("ru='Это группа'"));
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.Иерархический Тогда
			СписокРеквизитов.Добавить("Родитель", НСтр("ru='Родитель'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			Если ДляГруппы <> Неопределено
				И (ДляГруппы 
				И Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента
				ИЛИ НЕ ДляГруппы
				И Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
				
				Продолжить;
			КонецЕсли;
			
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
		//Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		//	СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		//КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "ПланыВидовРасчета" Тогда
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "ПланыСчетов" Тогда
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
		Для каждого ПризнакУчета Из МетаданныеОбъекта.ПризнакиУчета Цикл
			СписокРеквизитов.Добавить(ПризнакУчета.Имя, ПризнакУчета.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "РегистрыСведений" Тогда
		
		Если МетаданныеОбъекта.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
			И МетаданныеОбъекта.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
			СписокРеквизитов.Добавить("Период", НСтр("ru='Период'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.РежимЗаписи <> Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			СписокРеквизитов.Добавить("Регистратор", НСтр("ru='Регистратор'"));
			СписокРеквизитов.Добавить("Активность" , НСтр("ru='Активность'"));
			СписокРеквизитов.Добавить("НомерСтроки", НСтр("ru='НомерСтроки'"));
		КонецЕсли;
		
		Для каждого Ресурс Из МетаданныеОбъекта.Ресурсы Цикл
			СписокРеквизитов.Добавить(Ресурс.Имя, Ресурс.Синоним);
		КонецЦикла;
		
		Для каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
			СписокРеквизитов.Добавить(Измерение.Имя, Измерение.Синоним);
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "РегистрыНакопления"
		ИЛИ   ТипМетаданных = "РегистрыБухгалтерии"
		ИЛИ   ТипМетаданных = "РегистрыРасчета" Тогда
		
		СписокРеквизитов.Добавить("ВидДвижения", НСтр("ru='Вид движения'"));
		СписокРеквизитов.Добавить("Период"     , НСтр("ru='Период'"));
		СписокРеквизитов.Добавить("Регистратор", НСтр("ru='Регистратор'"));
		СписокРеквизитов.Добавить("Активность" , НСтр("ru='Активность'"));
		СписокРеквизитов.Добавить("НомерСтроки", НСтр("ru='Номер cтроки'"));
		
		Для каждого Ресурс Из МетаданныеОбъекта.Ресурсы Цикл
			СписокРеквизитов.Добавить(Ресурс.Имя, Ресурс.Синоним);
		КонецЦикла;
		
		Для каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
			СписокРеквизитов.Добавить(Измерение.Имя, Измерение.Синоним);
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "ЖурналыДокументов" Тогда
		
		Для каждого Графа Из МетаданныеОбъекта.Графы Цикл
			СписокРеквизитов.Добавить(Графа.Имя, Графа.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "Задачи" Тогда
		
		// Свойства
		Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			СписокРеквизитов.Добавить("Номер", НСтр("ru='Номер'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("Дата"           , НСтр("ru='Дата'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		СписокРеквизитов.Добавить("БизнесПроцесс"  , НСтр("ru='Бизнес-процесс'"));
		СписокРеквизитов.Добавить("ТочкаМаршрута"  , НСтр("ru='Точка маршрута'"));
		СписокРеквизитов.Добавить("Выполнена"      , НСтр("ru='Выполнена'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеОбъекта.РеквизитыАдресации Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "БизнесПроцессы" Тогда
		
		// Свойства
		Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			СписокРеквизитов.Добавить("Номер", НСтр("ru='Номер'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("Дата"           , НСтр("ru='Дата'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		СписокРеквизитов.Добавить("Стартован"      , НСтр("ru='Стартован'"));
		СписокРеквизитов.Добавить("Завершен"       , НСтр("ru='Завершен'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "Отчеты"
		ИЛИ ТипМетаданных = "Обработки" Тогда
		
		// Свойств нет
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	КонецЕсли;
	
	СписокРеквизитов.СортироватьПоПредставлению();
	
	Возврат СписокРеквизитов;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////

Функция СцТ_ОпределитьТипМД(ПроверяемаяСсылка)
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемаяСсылка)) Тогда
		ТипМетаданных = "Справочники";
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемаяСсылка)) Тогда
		ТипМетаданных = "Документы";
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемаяСсылка)) Тогда
		ТипМетаданных = "ПланыСчетов";
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемаяСсылка)) Тогда
		ТипМетаданных = "ПланыВидовХарактеристик";
		
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемаяСсылка)) Тогда
		ТипМетаданных = "ПланыВидовРасчета";
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемаяСсылка)) Тогда
		ТипМетаданных = "Перечисления";
		
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемаяСсылка)) Тогда
		ТипМетаданных = "БизнесПроцессы";
		
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемаяСсылка)) Тогда
		ТипМетаданных = "Задачи";
		
	Иначе
		ТипМетаданных = "";
		
	КонецЕсли;
	
	Возврат ТипМетаданных;
	
КонецФункции

Функция СцТ_ПолучитьСтруктуруОтбора_НаСервере(
	МассивКлючаЗаписи,
	АдресТаблицыСсылок,
	СтруктураПараметров) Экспорт
	
	СтруктураОтбора = Новый Структура;
	Для каждого СтрМассива Из МассивКлючаЗаписи Цикл
		ИстинноеЗначение = СцТ_ПолучитьЗначение_НаСервере(СтрМассива.Значение, АдресТаблицыСсылок,СтрМассива.Тип, Структурапараметров);
		СтруктураОтбора.Вставить(СтрМассива.Имя, ИстинноеЗначение);
	КонецЦикла;
	
	Возврат СтруктураОтбора;
	
КонецФункции

// Определение всех нужных типов значений для включения в ОписаниеТипов
//
Функция СцТ_ВсеТипыЗначений() Экспорт
	
	МассивТипов = Новый Массив;
	
	Для каждого ВидМетаданных Из Метаданные.Перечисления Цикл
		МассивТипов.Добавить(Тип("ПеречислениеСсылка." + ВидМетаданных.Имя));
	КонецЦикла;
	
	Для каждого ВидМетаданных Из Метаданные.Справочники Цикл
		МассивТипов.Добавить(Тип("СправочникСсылка." + ВидМетаданных.Имя));
	КонецЦикла;
	
	Для каждого ВидМетаданных Из Метаданные.Документы Цикл
		МассивТипов.Добавить(Тип("ДокументСсылка." + ВидМетаданных.Имя));
	КонецЦикла;
	
	Для каждого ВидМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка." + ВидМетаданных.Имя));
	КонецЦикла;
	
	Для каждого ВидМетаданных Из Метаданные.ПланыСчетов Цикл
		МассивТипов.Добавить(Тип("ПланСчетовСсылка." + ВидМетаданных.Имя));
	КонецЦикла;
	
	Для каждого ВидМетаданных Из Метаданные.ПланыВидовРасчета Цикл
		МассивТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + ВидМетаданных.Имя));
	КонецЦикла;
	
	Для каждого ВидМетаданных Из Метаданные.Задачи Цикл
		МассивТипов.Добавить(Тип("ЗадачаСсылка." + ВидМетаданных.Имя));
	КонецЦикла;
	
	Для каждого ВидМетаданных Из Метаданные.БизнесПроцессы Цикл
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка." + ВидМетаданных.Имя));
	КонецЦикла;
	
	// Системные перечисления
	МассивТипов.Добавить(Тип("ВидДвиженияНакопления"));
	МассивТипов.Добавить(Тип("ВидДвиженияБухгалтерии"));
	//МассивТипов.Добавить(Тип("МоментВремени"));
	//МассивТипов.Добавить(Тип("ХранилищеЗначения"));
	
	// Примитивные типы
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Число"));
	МассивТипов.Добавить(Тип("Дата"));
	МассивТипов.Добавить(Тип("Булево"));
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипов;
	
КонецФункции

// Получение дерева значений из структуры дерева
//
Функция СцТ_ДеревоЗначенийИзСтруктурыДерева(СтруктураДерева) Экспорт
	
	ДЗ = Новый ДеревоЗначений;
	
	МассивКолонок = СтруктураДерева.ИСТЗ_Колонки;
	Для каждого ИмяКолонки Из МассивКолонок Цикл
		ДЗ.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	СтрокиДерева = СтруктураДерева.ИСТЗ_Строки;
	
	РекурсивноеДобавлениеСтрокДереваПоСтруктуре(ДЗ, СтрокиДерева, МассивКолонок);
	
	Возврат ДЗ;
	
КонецФункции

Процедура РекурсивноеДобавлениеСтрокДереваПоСтруктуре(ВеткаДерева, МассивСтруктурСтрок, МассивКолонок)
	
	Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		НовыйУзелСтроки = ВеткаДерева.Строки.Добавить();
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			НовыйУзелСтроки[ИмяКолонки] = СтруктураСтроки[ИмяКолонки];
		КонецЦикла;
		
		РекурсивноеДобавлениеСтрокДереваПоСтруктуре(НовыйУзелСтроки, СтруктураСтроки.ИСТЗ_Строки, МассивКолонок)
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПреобразоватьДеревоЗначенийДляНовогоФормата(ДеревоЗначения, АдресТаблицыСсылок = "", ТаблицаСсылокШага, АдресТаблицыКлючей) Экспорт
	
	Если ПустаяСтрока(АдресТаблицыСсылок) Тогда
		ИстиннаяТаблицаСсылок = Неопределено;
	Иначе
		ИстиннаяТаблицаСсылок = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
	КонецЕсли;
	
	МассивСсылокШага = СцТ_ПреобразоватьДанныеФормыТаблицыСсылокШагаВСтруктуру(ТаблицаСсылокШага);
	
	ИтерационноеПреобразованиеСсылокВДереве(ДеревоЗначения, ИстиннаяТаблицаСсылок, МассивСсылокШага, АдресТаблицыСсылок, АдресТаблицыКлючей);
	
	СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(ТаблицаСсылокШага, МассивСсылокШага);
	
КонецПроцедуры

Процедура ИтерационноеПреобразованиеСсылокВДереве(ВеткаДерева, ИстиннаяТаблицаСсылок, МассивСсылокШага, АдресТаблицыСсылок, АдресТаблицыКлючей)
	
	Для каждого УзелДерева Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		Если УзелДерева.ТипУзла = "Реквизит" Тогда
			// Это старый тип значения, требующий преобразования
			
			Если ТипЗнч(УзелДерева.Значение) = Тип("Строка") Тогда
				
				Если Найти(УзелДерева.Значение, "{""#""") > 0 И УзелДерева.ТипУзла <> "Ссылка" Тогда
					// Возможно требуется преобразование
					
					// Выполняем попытку определить объект в ИБ
					ИстинноеЗначение = СцТ_ПолучитьЗначение_НаСервере(УзелДерева.Значение, АдресТаблицыСсылок);
					
					Если ИстинноеЗначение <> Неопределено Тогда
					
						ОписаниеЗначения = СцТ_ПолучитьОписаниеЗначения(ИстинноеЗначение);
						
						УзелДерева.Значение      = ОписаниеЗначения.ВнутрЗначение;
						УзелДерева.Представление = ОписаниеЗначения.Представление;
						УзелДерева.ТипУзла       = ОписаниеЗначения.ТипЗначения;
						
						Если ОписаниеЗначения.ТипЗначения = "Ссылка" Тогда
							СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(ИстинноеЗначение, МассивСсылокШага,,,, АдресТаблицыКлючей, УзелДерева.Значение);
						КонецЕсли;
						
					ИначеЕсли ИстиннаяТаблицаСсылок <> Неопределено Тогда
						// Скорее всего эта база не является эталонной
						// Попытаемся найти в общей таблице описание ссылки и скопировать его в таблицу ссылок шага
						
						НужнаяСтрокаИдентификации = ИстиннаяТаблицаСсылок.Найти(УзелДерева.Значение, "Ссылка");
						Если НужнаяСтрокаИдентификации <> Неопределено Тогда
							
							НужнаяСтруктура = Неопределено;
							Для каждого СтрИ Из МассивСсылокШага Цикл
								Если СтрИ.СтрокаИдентификатора = УзелДерева.Значение Тогда
									НужнаяСтруктура = СтрИ;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							Если НужнаяСтруктура = Неопределено Тогда
								
								НужнаяСтруктура = Новый Структура;
								
								// МСИ - массив структур идентификации
								МСИ = Новый Массив;
								НужнаяСтрокаИдентификации.СтруктураИдентификации.Сортировать("Имя");
								Для каждого СтрИдентификации Из НужнаяСтрокаИдентификации.СтруктураИдентификации Цикл
									// СИ - структура идентификации
									СИ = Новый Структура;
									СИ.Вставить("Имя"            , СтрИдентификации.Имя);
									СИ.Вставить("Представление"  , СтрИдентификации.Представление);
									СИ.Вставить("Значение"       , СтрИдентификации.Значение);
									СИ.Вставить("СокрТипЗначения", СтрИдентификации.СокрТипЗначения);
									МСИ.Добавить(СИ);
								КонецЦикла;
								
								НужнаяСтруктура.Вставить("СтруктураИдентификации", МСИ);
								НужнаяСтруктура.Вставить("СтрокаИдентификатора"  , НужнаяСтрокаИдентификации.Ссылка);
								НужнаяСтруктура.Вставить("Представление"         , НужнаяСтрокаИдентификации.Представление);
								НужнаяСтруктура.Вставить("ТипМД"                 , НужнаяСтрокаИдентификации.ТипМД);
								НужнаяСтруктура.Вставить("ИмяМД"                 , НужнаяСтрокаИдентификации.ИмяМД);
								//НужнаяСтруктура.Вставить("СинонимМД"             , НужнаяСтрокаИдентификации.СинонимМД);
								НужнаяСтруктура.Вставить("ПоискПоЗапросу"        , НужнаяСтрокаИдентификации.ПоискПоЗапросу);
								НужнаяСтруктура.Вставить("ТекстЗапроса"          , НужнаяСтрокаИдентификации.ТекстЗапроса);
								
							КонецЕсли;
							
						КонецЕсли;
						УзелДерева.ТипУзла       = "Ссылка";
						
					КонецЕсли;
					
					
					
				Иначе
					// Это обычная строка
					УзелДерева.ТипУзла       = "Строка";
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(УзелДерева.Значение) = Тип("Число") Тогда
				УзелДерева.ТипУзла       = "Число";
				
			ИначеЕсли ТипЗнч(УзелДерева.Значение) = Тип("Булево") Тогда
				УзелДерева.ТипУзла       = "Булево";
				
			ИначеЕсли ТипЗнч(УзелДерева.Значение) = Тип("Дата") Тогда
				УзелДерева.ТипУзла       = "Дата";
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИтерационноеПреобразованиеСсылокВДереве(УзелДерева, ИстиннаяТаблицаСсылок, МассивСсылокШага, АдресТаблицыСсылок, АдресТаблицыКлючей);
		
	КонецЦикла;
	
КонецПроцедуры


Процедура СцТ_ДобавитьТаблицуЗначенийВВеткуДерева_НаСервере(
	УзелТаблицыВДереве,
	ИсходнаяТаблица,
	ШаблонТаблицы,
	МассивРеквизитовИсключений,
	Действие,
	КлючевыеПоля = Неопределено,
	НастройкаОбновления = Неопределено,
	ПротоколОбновленияРеквизитовТЧ = "",
	МассивИдентификацииСсылок = Неопределено,
	АдресТаблицыКлючей) Экспорт
	
	// Заполнение списка колонок и сортировка по алфавиту
	// Колонка номера строки должна быть первой (если она есть)
	СписокКолонок = Новый СписокЗначений;
	ЕстьНомерСтроки = Ложь;
	Для каждого Колонка Из ИсходнаяТаблица.Колонки Цикл
		Если Колонка.Имя = "НомерСтроки" Тогда
			ЕстьНомерСтроки = Истина;
			// Добавление этой колонки будет позже
		Иначе
			СписокКолонок.Добавить(Колонка.Имя, Колонка.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	СписокКолонок.СортироватьПоПредставлению();
	Если ЕстьНомерСтроки Тогда
		СписокКолонок.Вставить(0, "НомерСтроки", "Номер строки");
	КонецЕсли;
	
	// Заполнение строки шапки
	УзелШапкиТаблицы = СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
		УзелТаблицыВДереве,
		"ШапкаТаблицы",
		"Шапка таблицы",
		"ШапкаТаблицы");
	
	ШапкаЗаполненаПоШаблону = Ложь;
	Если ШаблонТаблицы <> Неопределено Тогда
		
		ПротоколУдаленияРеквизитовТЧ = "";
		ШаблонШапки = ШаблонТаблицы.Строки.Найти("ШапкаТаблицы", "Имя");
		Если ШаблонШапки <> Неопределено Тогда
			ШапкаЗаполненаПоШаблону = Истина;
			// Заполнение шапки таблицы по шаблону
			
			Для каждого СтрокаШаблонаШапки Из ШаблонШапки.Строки Цикл
				ЭлементСпискаКолонок = СписокКолонок.НайтиПоЗначению(СтрокаШаблонаШапки.Имя);
				Если ЭлементСпискаКолонок = Неопределено Тогда
					// Отличие шаблона и таблицы. Вероятно конфигурация изменилась
					// со времени создания шаблона
					СтрокаПротокола = НСтр("ru = 'Удален реквизит ""%1"" %2 ""%3""'");
					СтрокаПротокола = СтрЗаменить(СтрокаПротокола, "%1", СтрокаШаблонаШапки.Синоним);
					Если УзелТаблицыВДереве.ТипУзла = "ДвижениеПоРегистру" Тогда
						СтрокаПротокола = СтрЗаменить(СтрокаПротокола, "%2", НСтр("ru = 'движения'"));
					Иначе
						СтрокаПротокола = СтрЗаменить(СтрокаПротокола, "%2", НСтр("ru = 'табличной части'"));
					КонецЕсли;
					СтрокаПротокола = СтрЗаменить(СтрокаПротокола, "%3", ШаблонТаблицы.Имя);
					СцТ_ДобавитьПодстроку_НаСервере(ПротоколУдаленияРеквизитовТЧ, СтрокаПротокола);
					Продолжить;
				Иначе
					// Отметка об использовании колонки
					ЭлементСпискаКолонок.Пометка = Истина;
					// Копирование строки шаблона
					СтрокаШапкиТаблицы = СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
						УзелШапкиТаблицы,
						СтрокаШаблонаШапки.Имя,
						СтрокаШаблонаШапки.Синоним,
						20,
						СтрокаШаблонаШапки.Активность,
						СтрокаШаблонаШапки.Действие,
						,
						СтрокаШаблонаШапки.Кл,
						МассивИдентификацииСсылок,
						АдресТаблицыКлючей);
						
				КонецЕсли;
			КонецЦикла;
			
			// Таблица могла измениться относительно шаблона,
			// поэтому добавление колонок, которых не было в шаблоне
			Если НастройкаОбновления = Неопределено
				ИЛИ (УзелТаблицыВДереве.ТипУзла <> "ДвижениеПоРегистру"
						И НастройкаОбновления.ДобавитьНовыеРеквизитыСуществующихТЧ = Истина)
				ИЛИ (УзелТаблицыВДереве.ТипУзла = "ДвижениеПоРегистру"
						И НастройкаОбновления.ДобавитьНовыеРеквизитыСуществующихДвижений = Истина) Тогда
				
				Для каждого ЭлементСпискаКолонок Из СписокКолонок Цикл
					Если НЕ ЭлементСпискаКолонок.Пометка Тогда
						
						Если УзелТаблицыВДереве.ТипУзла = "ДвижениеПоРегистру" Тогда
							Активность =
								(НастройкаОбновления = Неопределено
									ИЛИ НастройкаОбновления.АктивизацияНовыхРеквизитовДвижений = 0)
									И (МассивРеквизитовИсключений.Найти(ЭлементСпискаКолонок.Значение) = Неопределено)
								ИЛИ НастройкаОбновления <> Неопределено
									И НастройкаОбновления.АктивизацияНовыхРеквизитовДвижений = 1;
						Иначе
							Активность =
								(НастройкаОбновления = Неопределено
									ИЛИ НастройкаОбновления.АктивизацияНовыхРеквизитовТЧ = 0)
									И (МассивРеквизитовИсключений.Найти(ЭлементСпискаКолонок.Значение) = Неопределено)
								ИЛИ НастройкаОбновления <> Неопределено
									И НастройкаОбновления.АктивизацияНовыхРеквизитовТЧ = 1;
						КонецЕсли;
						
						СтрокаПротокола = НСтр("ru = 'Добавлен реквизит ""%1"" %2 ""%3""'");
						СтрокаПротокола = СтрЗаменить(СтрокаПротокола, "%1", ЭлементСпискаКолонок.Представление);
						Если УзелТаблицыВДереве.ТипУзла = "ДвижениеПоРегистру" Тогда
							СтрокаПротокола = СтрЗаменить(СтрокаПротокола, "%2", НСтр("ru = 'движения'"));
						Иначе
							СтрокаПротокола = СтрЗаменить(СтрокаПротокола, "%2", НСтр("ru = 'табличной части'"));
						КонецЕсли;
						СтрокаПротокола = СтрЗаменить(СтрокаПротокола, "%3", ШаблонТаблицы.Имя);
						СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияРеквизитовТЧ, СтрокаПротокола);
						
						СтрокаШапкиТаблицы = СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
							УзелШапкиТаблицы,
							ЭлементСпискаКолонок.Значение,
							ЭлементСпискаКолонок.Представление,
							20,
							Активность,
							Действие,
							,
							0,
							МассивИдентификацииСсылок,
							АдресТаблицыКлючей);
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПротоколУдаленияРеквизитовТЧ) Тогда
			СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияРеквизитовТЧ, ПротоколУдаленияРеквизитовТЧ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если шапка не заполнена по шаблону, то заполнение по-умолчанию
	Если НЕ ШапкаЗаполненаПоШаблону Тогда
		
		Для каждого ЭлементСпискаКолонок Из СписокКолонок Цикл
			
			Активность = (МассивРеквизитовИсключений.Найти(ЭлементСпискаКолонок.Значение) = Неопределено);
			
			ЭтоКлючевоеПоле = (КлючевыеПоля <> Неопределено
				И КлючевыеПоля.Найти(ЭлементСпискаКолонок.Значение) <> Неопределено);
				
			СтрокаШапкиТаблицы = СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
				УзелШапкиТаблицы,
				ЭлементСпискаКолонок.Значение,
				ЭлементСпискаКолонок.Представление,
				20,
				Активность,
				?(ЭтоКлючевоеПоле, "Ключ", Действие),
				,
				0,
				МассивИдентификацииСсылок,
				АдресТаблицыКлючей);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Строки таблицы можно заполнять уже по настройкам заданным в шапке
	// так как применить шаблон к ячейкам все равно не реально - 
	// количество строк может существенно отличаться
	
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		
		УзелСтрокиТаблицы = СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
			УзелТаблицыВДереве,
			"СтрокаТаблицы_" + Строка(НомерСтроки),
			"Строка таблицы",
			"СтрокаТаблицы",
			НомерСтроки,
			1);
		
		Для каждого ЭлементУзлаШапки Из УзелШапкиТаблицы.Строки Цикл
			
			НовыйУзел = СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
				УзелСтрокиТаблицы,
				ЭлементУзлаШапки.Имя,
				ЭлементУзлаШапки.Синоним,
				СтрокаТаблицы[ЭлементУзлаШапки.Имя],
				ЭлементУзлаШапки.Активность,
				ЭлементУзлаШапки.Действие,
				ЭлементУзлаШапки.Скрипт,
				ЭлементУзлаШапки.Кл,
				МассивИдентификацииСсылок,
				АдресТаблицыКлючей);
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
	РодительскийУзел,
	Имя,
	Синоним,
	ТипУзла,
	Значение      = Неопределено,
	Активность    = 1,
	Действие      = "",
	Скрипт        = "",
	Кл            = 0,
	Принудительно = Истина,
	ПредставлениеЗначения = Неопределено,
	СтруктураСсылокШага = Неопределено,
	АдресТаблицыКлючей = "")
	
	НужныйУзел = Неопределено;
	Для каждого ПодчиненныйУзел ИЗ РодительскийУзел.Строки Цикл
		Если ПодчиненныйУзел.Имя = Имя Тогда
			НужныйУзел = ПодчиненныйУзел;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужныйУзел = Неопределено Тогда
		НужныйУзел = РодительскийУзел.Строки.Добавить();
		НужныйУзел.Имя = Имя;
	КонецЕсли;
	
	// Обязательно обновляемые реквизиты
	НужныйУзел.Значение = СцТ_ПреобразоватьЗначениеДляХранения_НаСервере(Значение);
	
	Если ПредставлениеЗначения = Неопределено Тогда
		Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
			НужныйУзел.Представление = Строка(НужныйУзел.Значение);
		Иначе
			НужныйУзел.Представление = Строка(Значение);
		КонецЕсли;
	Иначе
		НужныйУзел.Представление = ПредставлениеЗначения;
	КонецЕсли;
	
	НужныйУзел.Синоним      = Синоним;
	НужныйУзел.Активность   = Активность;
	НужныйУзел.Действие     = Действие;
	НужныйУзел.Скрипт       = Скрипт;
	НужныйУзел.ТипУзла      = ТипУзла;
	НужныйУзел.Кл           = Кл;
	
	Возврат НужныйУзел;
	
КонецФункции

Функция СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
	РодительскийУзел,
	Знач Имя,
	Знач Синоним,
	Знач Значение      = Неопределено,
	Знач Активность    = 1,
	Знач Действие      = "",
	Знач Скрипт        = "",
	Знач Кл            = 0,
	МассивСсылокШага,
	Знач АдресТаблицыКлючей = "") Экспорт
	
	НужныйУзел = РодительскийУзел.Строки.Найти(Имя, "Имя");
	
	Если НужныйУзел = Неопределено Тогда
		НужныйУзел = РодительскийУзел.Строки.Добавить();
		НужныйУзел.Имя     = Имя;
		НужныйУзел.Синоним = Синоним;
	КонецЕсли;
	
	ОписаниеЗначения = СцТ_ПолучитьОписаниеЗначения(Значение);
	
	НужныйУзел.Значение      = ОписаниеЗначения.ВнутрЗначение;
	НужныйУзел.Представление = ОписаниеЗначения.Представление;
	НужныйУзел.ТипУзла       = ОписаниеЗначения.ТипЗначения;
	
	НужныйУзел.Активность   = Активность;
	НужныйУзел.Действие     = Действие;
	НужныйУзел.Скрипт       = Скрипт;
	НужныйУзел.Кл           = Кл;
	
	Если ОписаниеЗначения.ТипЗначения = "Ссылка" Тогда
		СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(Значение, МассивСсылокШага,,,,АдресТаблицыКлючей);
	КонецЕсли;
	
	Возврат НужныйУзел;
	
КонецФункции

Функция СцТ_ПреобразоватьЗначениеДляХранения_НаСервере(ВходящееЗначение)
	
	ТипВхЗначения = ТипЗнч(ВходящееЗначение);
	Если ВходящееЗначение = Неопределено Тогда
		ВыходящееЗначение = Неопределено;
		
	ИначеЕсли ТипВхЗначения = Тип("Число")
		ИЛИ   ТипВхЗначения = Тип("Строка")
		ИЛИ   ТипВхЗначения = Тип("Булево")
		ИЛИ   ТипВхЗначения = Тип("Дата") Тогда
		ВыходящееЗначение = ВходящееЗначение;
		
	ИначеЕсли ТипВхЗначения = Тип("Структура") Тогда
		НоваяСтруктура = Новый Структура;
		Для каждого ЭлементСтруктуры Из ВходящееЗначение Цикл
			НоваяСтруктура.Вставить(
				ЭлементСтруктуры.Ключ,
				СцТ_ПреобразоватьЗначениеДляХранения_НаСервере(ЭлементСтруктуры.Значение));
		КонецЦикла;
		ВыходящееЗначение = НоваяСтруктура;
		
	ИначеЕсли ТипВхЗначения = Тип("ХранилищеЗначения") Тогда
		ВыходящееЗначение = XMLСтрока(ВходящееЗначение);
		
	Иначе
		ВыходящееЗначение = ЗначениеВСтрокуВнутр(ВходящееЗначение);
		
	КонецЕсли;
	
	Возврат ВыходящееЗначение;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТАБЛИЦЕЙ ССЫЛОК ШАГА

Функция СцТ_СформироватьСтруктуруИдентификацииПоСсылке_НаСервере(
	Знач Ссылка,
	Знач ТипМетаданных,
	Знач ИмяМетаданных,
	Знач АдресХранилищаТаблицыКлючей) Экспорт
	
	ТаблицаКлючейНаСервере = ПолучитьИзВременногоХранилища(АдресХранилищаТаблицыКлючей);
	
	Если Ссылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗКлюча = Новый ТаблицаЗначений;
	ТЗКлюча.Колонки.Добавить("Имя");
	ТЗКлюча.Колонки.Добавить("Представление");
	ТЗКлюча.Колонки.Добавить("Значение");
	ТЗКлюча.Колонки.Добавить("СокрТипЗначения");
	
	СцТ_ДобавитьСтрокуВТаблицуИдентификации(ТЗКлюча, "ТипМетаданных", ТипМетаданных, "Тип метаданных");
	СцТ_ДобавитьСтрокуВТаблицуИдентификации(ТЗКлюча, "ИмяМетаданных", ИмяМетаданных, "Имя метаданных");
	
	// Определение ключевых полей
	Если    ТипМетаданных = "Справочники"
		ИЛИ ТипМетаданных = "Документы"
		ИЛИ ТипМетаданных = "БизнесПроцессы"
		ИЛИ ТипМетаданных = "Задачи" Тогда
		
		// Общие для типа метаданных
		ПроверочныйСписок = СцТ_ПолучитьСписокВсехАтрибутовОбъектаМетаданных(ТипМетаданных, ИмяМетаданных);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ТипМетаданных", ТипМетаданных);
		Отбор.Вставить("ИмяМетаданных", "");
		СтрокиОбщихКлючей = ТаблицаКлючейНаСервере.НайтиСтроки(Отбор);
		Если СтрокиОбщихКлючей.Количество() > 0 Тогда
			СтрокаОбщихКлючей = СтрокиОбщихКлючей[0];
			ОбщиеКлючиТипаМетаданных = СтрокаОбщихКлючей.Ключи;
			
			Если ТипЗнч(ОбщиеКлючиТипаМетаданных) = Тип("ТаблицаЗначений") Тогда
				Для каждого СтрокаКлюча Из ОбщиеКлючиТипаМетаданных Цикл
					Если ПроверочныйСписок.НайтиПоЗначению(СтрокаКлюча.Имя) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					// Попытка добавления ключа
					Попытка
						СцТ_ДобавитьСтрокуВТаблицуИдентификации(ТЗКлюча, СтрокаКлюча.Имя, Ссылка[СтрокаКлюча.Имя], СтрокаКлюча.Наименование);
					Исключение
						Продолжить;
					КонецПопытки;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		// Индивидуальные ключи
		Отбор = Новый Структура;
		Отбор.Вставить("ТипМетаданных", ТипМетаданных);
		Отбор.Вставить("ИмяМетаданных", ИмяМетаданных);
		СтрокиИндивидуальныхКлючей = ТаблицаКлючейНаСервере.НайтиСтроки(Отбор);
		
		//ТаблицаКлючей = Неопределено;
		Если СтрокиИндивидуальныхКлючей.Количество() > 0 Тогда
			СтрокаИндивидуальныхКлючей = СтрокиИндивидуальныхКлючей[0];
			Если ТипЗнч(СтрокаИндивидуальныхКлючей.Ключи) = Тип("ТаблицаЗначений") Тогда
				ТаблицаИндКлючей = СтрокаИндивидуальныхКлючей.Ключи;
				
				Для каждого СтрокаКлюча Из ТаблицаИндКлючей Цикл
					
					Если СтрокаКлюча.Имя <> "ТипМетаданных" И СтрокаКлюча.Имя <> "ИмяМетаданных" Тогда
						// Обработка правила двоичного сложения ключей,
						// т.е. если есть общий ключ и есть индивидуальный,
						// значит ключ не используется
						Если ТЗКлюча.Найти(СтрокаКлюча.Имя, "Имя") = Неопределено Тогда
							ПозицияТочки = Найти(СтрокаКлюча.Имя, ".");
							Если ПозицияТочки > 0 Тогда
								ПерваяЧасть = Сред(СтрокаКлюча.Имя, 1, ПозицияТочки - 1);
								ВтораяЧасть = Сред(СтрокаКлюча.Имя, ПозицияТочки + 1);
								Зн = Ссылка[ПерваяЧасть][ВтораяЧасть];
							Иначе
								Зн = Ссылка[СтрокаКлюча.Имя];
							КонецЕсли;
							
							СцТ_ДобавитьСтрокуВТаблицуИдентификации(ТЗКлюча, СтрокаКлюча.Имя, Зн, СтрокаКлюча.Наименование);
						Иначе
							ТЗКлюча.Удалить(ТЗКлюча.Найти(СтрокаКлюча.Имя, "Имя"));
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипМетаданных = "ПланыСчетов" Тогда
		
		СцТ_ДобавитьСтрокуВТаблицуИдентификации(ТЗКлюча, "Код", Ссылка.Код, "Код");
		
	ИначеЕсли ТипМетаданных = "ПланыВидовХарактеристик"
		ИЛИ   ТипМетаданных = "ПланыВидовРасчета"
		ИЛИ   ТипМетаданных = "БизнесПроцессы"
		ИЛИ   ТипМетаданных = "Задачи" Тогда
		
		СцТ_ДобавитьСтрокуВТаблицуИдентификации(ТЗКлюча, "Наименование", Ссылка.Наименование, "Наименование");
		
	КонецЕсли;
	
	Возврат ТЗКлюча;
	
КонецФункции

Процедура СцТ_ДобавитьСтрокуВТаблицуИдентификации(
	ТаблЗначений,
	Имя,
	Значение,
	Представление)
	
	НайденнаяСтрока = ТаблЗначений.Найти(Имя, "Имя");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ТаблЗначений.Добавить();
		НайденнаяСтрока.Имя           = Имя;
		НайденнаяСтрока.Представление = Представление;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		НайденнаяСтрока.Значение        = "";
		НайденнаяСтрока.СокрТипЗначения = "Неопределено";
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		// В строке могут встретиться кавычки, так как эта строка используется в условии,
		// то все кавычки нужно заменить на парные
		НайденнаяСтрока.Значение        = СтрЗаменить(Значение,"""", """""");
		НайденнаяСтрока.СокрТипЗначения = "Строка";
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		НайденнаяСтрока.Значение        = СтрЗаменить(СтрЗаменить(Строка(Значение), Символ(160),""),",",".");
		НайденнаяСтрока.СокрТипЗначения = "Число";
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		НайденнаяСтрока.Значение        = Значение;
		НайденнаяСтрока.СокрТипЗначения = "Булево";
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ЗначениеПеречисления = "";
		Для каждого ЭлементПеречисления Из Значение.Метаданные().ЗначенияПеречисления Цикл
			Если Перечисления[Значение.Метаданные().Имя][ЭлементПеречисления.Имя] = Значение Тогда
				ЗначениеПеречисления = ЭлементПеречисления.Имя;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НайденнаяСтрока.Значение        = Значение.Метаданные().Имя + "." + ЗначениеПеречисления;
		НайденнаяСтрока.СокрТипЗначения = "Перечисление";
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		НайденнаяСтрока.Значение        = Формат(Значение, "ДФ=""гггг, ММ, дд, ЧЧ, мм, сс""");
		НайденнаяСтрока.СокрТипЗначения = "Дата";
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Если ЗначениеЗаполнено(Значение) Тогда
			Если Значение.Метаданные().ДлинаНаименования > 0 Тогда
				НайденнаяСтрока.Значение            = СтрЗаменить(Значение.Наименование,"""", """""");
				НайденнаяСтрока.СокрТипЗначения     = "Ссылка.Наименование";
			Иначе
				НайденнаяСтрока.Значение            = Значение.Код;
				НайденнаяСтрока.СокрТипЗначения     = "Ссылка.Код";
			КонецЕсли;
		Иначе
			НайденнаяСтрока.Значение            = "Справочник." + Значение.Метаданные().Имя + ".ПустаяСсылка";
			НайденнаяСтрока.СокрТипЗначения     = "ПустоеЗначение";
		КонецЕсли;
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Если ЗначениеЗаполнено(Значение) Тогда
			НайденнаяСтрока.Значение            = Формат(Значение.Дата, "ДФ=""гггг, ММ, дд, ЧЧ, мм, сс""");
			НайденнаяСтрока.СокрТипЗначения     = "Ссылка.Дата";
		Иначе
			НайденнаяСтрока.Значение            = "Документ." + Значение.Метаданные().Имя + ".ПустаяСсылка";
			НайденнаяСтрока.СокрТипЗначения     = "ПустоеЗначение";
		КонецЕсли;
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
		ИЛИ   ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
		ИЛИ   ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		
		Если ЗначениеЗаполнено(Значение) Тогда
			НайденнаяСтрока.Значение            = Значение.Код;
			НайденнаяСтрока.СокрТипЗначения     = "Ссылка.Код";
		Иначе
			НайденнаяСтрока.Значение            = "";
			НайденнаяСтрока.СокрТипЗначения     = "ПустоеЗначение";
		КонецЕсли;
		
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Если ЗначениеЗаполнено(Значение) Тогда
			НайденнаяСтрока.Значение            = Формат(Значение.Дата, "ДФ=""гггг, ММ, дд, ЧЧ, мм, сс""");
			НайденнаяСтрока.СокрТипЗначения     = "Ссылка.Дата";
		Иначе
			НайденнаяСтрока.Значение            = "БизнесПроцесс." + Значение.Метаданные().Имя + ".ПустаяСсылка";
			НайденнаяСтрока.СокрТипЗначения     = "ПустоеЗначение";
		КонецЕсли;	
		
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Если ЗначениеЗаполнено(Значение) Тогда
			НайденнаяСтрока.Значение            = Формат(Значение.Дата, "ДФ=""гггг, ММ, дд, ЧЧ, мм, сс""");
			НайденнаяСтрока.СокрТипЗначения     = "Ссылка.Дата";
		Иначе
			НайденнаяСтрока.Значение            = "Задача." + Значение.Метаданные().Имя + ".ПустаяСсылка";
			НайденнаяСтрока.СокрТипЗначения     = "ПустоеЗначение";
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Значение) Тогда
			НайденнаяСтрока.Значение            = Значение;
			НайденнаяСтрока.СокрТипЗначения     = "Ссылка";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(
	Знач ИстиннаяСсылка,
	МассивСтруктурдентификации,
	Знач Лок_ТипМД = Неопределено,
	Знач Лок_ИмяМД = Неопределено,
	Знач Лок_СинонимМД = Неопределено,
	Знач АдресТаблицыКлючей = "",
	Знач СтрокаИдентификатора = Неопределено) Экспорт
	
	Если СтрокаИдентификатора = Неопределено Тогда
		СтрокаИдентификатора = Строка(ИстиннаяСсылка.УникальныйИдентификатор());
	КонецЕсли;
	
	Если Лок_ТипМД = Неопределено Тогда
		Лок_ТипМД = СцТ_ОпределитьТипМД(ИстиннаяСсылка);
	КонецЕсли;
	
	Если Лок_ИмяМД = Неопределено Тогда
		Лок_ИмяМД = ИстиннаяСсылка.Метаданные().Имя;
	КонецЕсли;
	
	Если Лок_СинонимМД = Неопределено Тогда
		Лок_СинонимМД = ИстиннаяСсылка.Метаданные().Синоним;
	КонецЕсли;
	
	Если ПустаяСтрока(Лок_СинонимМД) Тогда
		Лок_СинонимМД = Лок_ИмяМД;
	КонецЕсли;
	
	// Попытка найти ссылку в массиве
	НужнаяСтруктура = Неопределено;
	
	Если МассивСтруктурдентификации = Неопределено Тогда
		МассивСтруктурдентификации = Новый Массив;
		
	ИначеЕсли МассивСтруктурдентификации.Количество() = 0 Тогда
		// Ничего не делаем
	Иначе
		Для каждого СтрСсылки Из МассивСтруктурдентификации Цикл
			Если СтрСсылки.СтрокаИдентификатора = СтрокаИдентификатора Тогда
				НужнаяСтруктура = СтрСсылки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НужнаяСтруктура = Неопределено Тогда
		// Струкутура индентификации еще не зарегистрирована
		НужнаяСтруктура = Новый Структура("СтруктураИдентификации, СтрокаИдентификатора, Представление, ТипМД, ИмяМД, СинонимМД, ПоискПоЗапросу, ТекстЗапроса");
		НужнаяСтруктура.СтрокаИдентификатора = СтрокаИдентификатора;
		
		МассивСтруктурдентификации.Добавить(НужнаяСтруктура);
	КонецЕсли;
	
	НужнаяСтруктура.Представление        = Строка(ИстиннаяСсылка);
	НужнаяСтруктура.ТипМД                = Лок_ТипМД;
	НужнаяСтруктура.ИмяМД                = Лок_ИмяМД;
	НужнаяСтруктура.СинонимМД            = Лок_СинонимМД;
	НужнаяСтруктура.ПоискПоЗапросу       = Ложь;
	НужнаяСтруктура.ТекстЗапроса         = "";
	
	ТаблИдентификации = СцТ_СформироватьСтруктуруИдентификацииПоСсылке_НаСервере(
			ИстиннаяСсылка,
			Лок_ТипМД,
			Лок_ИмяМД,
			АдресТаблицыКлючей);
			
	МСИ = Новый Массив;
	Для каждого СтрИдентификации Из ТаблИдентификации Цикл
		// СИ - структура идентификации
		СИ = Новый Структура;
		СИ.Вставить("Имя"            , СтрИдентификации.Имя);
		СИ.Вставить("Представление"  , СтрИдентификации.Представление);
		СИ.Вставить("Значение"       , СтрИдентификации.Значение);
		СИ.Вставить("СокрТипЗначения", СтрИдентификации.СокрТипЗначения);
		МСИ.Добавить(СИ);
	КонецЦикла;
	
	НужнаяСтруктура.СтруктураИдентификации = МСИ;
	
КонецПроцедуры

// Заполнение таблицы ссылок шага в форме настройки шага по массиву структур идентификации
// (массиву таблицы идентификации)
// Процедура используется всегда, когда нужно на сервере преобразовать структуру в талицу
Процедура СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(ТаблицаСсылокШага, МТИ) Экспорт
	
	ТаблицаСсылокШага.Очистить();
	
	Для каждого СтрСсылки Из МТИ Цикл
		Если ТаблицаСсылокШага.НайтиСтроки(Новый Структура("СтрокаИдентификатора", СтрСсылки.СтрокаИдентификатора)).Количество() = 0 Тогда
			НоваяСтрока = ТаблицаСсылокШага.Добавить();
		Иначе
			НоваяСтрока = ТаблицаСсылокШага.НайтиСтроки(Новый Структура("СтрокаИдентификатора", СтрСсылки.СтрокаИдентификатора))[0];
			НоваяСтрока.СтруктураИдентификации.Очистить();
		КонецЕсли;
		
		НоваяСтрока.СтрокаИдентификатора = СтрСсылки.СтрокаИдентификатора;
		НоваяСтрока.Представление        = СтрСсылки.Представление;
		НоваяСтрока.ТипМД                = СтрСсылки.ТипМД;
		НоваяСтрока.ИмяМД                = СтрСсылки.ИмяМД;
		НоваяСтрока.СинонимМД            = СтрСсылки.СинонимМД;
		НоваяСтрока.ПоискПоЗапросу       = СтрСсылки.ПоискПоЗапросу;
		НоваяСтрока.ТекстЗапроса         = СтрСсылки.ТекстЗапроса;
		
		Для каждого СИ Из СтрСсылки.СтруктураИдентификации Цикл
			СтрокаСИ = НоваяСтрока.СтруктураИдентификации.Добавить();
			СтрокаСИ.Имя             = СИ.Имя;
			СтрокаСИ.Представление   = СИ.Представление;
			СтрокаСИ.Значение        = СИ.Значение;
			СтрокаСИ.СокрТипЗначения = СИ.СокрТипЗначения;
		КонецЦикла;
		
		
	КонецЦикла;
	
	
	
КонецПроцедуры

// Построение массива структур, описывающих поиск ссылок для шага,
// на основании таблицы ссылок, хранимых в форме настройки шага
Функция СцТ_ПреобразоватьДанныеФормыТаблицыСсылокШагаВСтруктуру(ТаблицаСсылокШага) Экспорт
	
	// МТИ - массив таблицы идентификации
	МТИ = Новый Массив;
	
	Для каждого СтрТабл Из ТаблицаСсылокШага Цикл
		
		// МСИ - массив структур идентификации
		МСИ = Новый Массив;
		СтрТабл.СтруктураИдентификации.Сортировать("Имя");
		Для каждого СтрИдентификации Из СтрТабл.СтруктураИдентификации Цикл
			// СИ - структура идентификации
			СИ = Новый Структура;
			СИ.Вставить("Имя"            , СтрИдентификации.Имя);
			СИ.Вставить("Представление"  , СтрИдентификации.Представление);
			СИ.Вставить("Значение"       , СтрИдентификации.Значение);
			СИ.Вставить("СокрТипЗначения", СтрИдентификации.СокрТипЗначения);
			МСИ.Добавить(СИ);
		КонецЦикла;
		
		СтрСсылки = Новый Структура;
		СтрСсылки.Вставить("СтруктураИдентификации", МСИ);
		СтрСсылки.Вставить("СтрокаИдентификатора"  , СтрТабл.СтрокаИдентификатора);
		СтрСсылки.Вставить("Представление"         , СтрТабл.Представление);
		СтрСсылки.Вставить("ТипМД"                 , СтрТабл.ТипМД);
		СтрСсылки.Вставить("ИмяМД"                 , СтрТабл.ИмяМД);
		СтрСсылки.Вставить("СинонимМД"             , СтрТабл.СинонимМД);
		СтрСсылки.Вставить("ПоискПоЗапросу"        , СтрТабл.ПоискПоЗапросу);
		СтрСсылки.Вставить("ТекстЗапроса"          , СтрТабл.ТекстЗапроса);
		
		МТИ.Добавить(СтрСсылки);
		
	КонецЦикла;
	
	Возврат МТИ;
	
КонецФункции

// Процедура добавления в таблицу ссылок шага в форме настройки шага
// сведений из общей таблицы ссылок
Процедура СцТ_ДобавитьВТаблицуСсылокШагаСведенияИзТаблицыСсылок(ИдентификаторШага, АдресТаблицыСсылок, ТаблицаСсылокШага) Экспорт
	
	Если ПустаяСтрока(АдресТаблицыСсылок) Тогда
		// Таблица ссылок еще не создана
		Возврат;
	КонецЕсли;
	
	ПолнаяТаблицаСсылок = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
	Для каждого СтрСсылки Из ПолнаяТаблицаСсылок Цикл
		Если СтрСсылки.МассивУИШ. Найти(ИдентификаторШага) <> Неопределено тогда
			НоваяСтрока = ТаблицаСсылокШага.Добавить();
			НоваяСтрока.СтрокаИдентификатора = СтрСсылки.Ссылка;
			НоваяСтрока.Представление        = СтрСсылки.Представление;
			НоваяСтрока.ТипМД                = СтрСсылки.ТипМД;
			НоваяСтрока.ИмяМД                = СтрСсылки.ИмяМД;
			Попытка
				СинонимМД = Метаданные[СтрСсылки.ТипМД][СтрСсылки.ИмяМД].Синоним;
			Исключение
				СинонимМД = СтрСсылки.ИмяМД;
			КонецПопытки;
			НоваяСтрока.СинонимМД            = СинонимМД;
			НоваяСтрока.ПоискПоЗапросу       = СтрСсылки.ПоискПоЗапросу;
			НоваяСтрока.ТекстЗапроса         = СтрСсылки.ТекстЗапроса;
			
			Для каждого СИ Из СтрСсылки.СтруктураИдентификации Цикл
				СтрокаСИ = НоваяСтрока.СтруктураИдентификации.Добавить();
				СтрокаСИ.Имя             = СИ.Имя;
				СтрокаСИ.Представление   = СИ.Представление;
				СтрокаСИ.Значение        = СИ.Значение;
				СтрокаСИ.СокрТипЗначения = СИ.СокрТипЗначения;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА ТАБЛИЦ ШАГОВ БЛ ДЛЯ СРАВНЕНИЯ

&НаСервере
Функция СцТ_СформироватьТаблицуПоУзлуОписанияТаблицы(
	УзелТаблицы,
	КолонкиИсключений,
	МассивКлючевыхПолей,
	АдресТаблицыСсылок,
	ГлобальныеПараметры,
	ТекстСообщения) Экспорт
	
	УзелШапки = УзелТаблицы.Строки.Найти("ШапкаТаблицы", "Имя");
	Если УзелШапки = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти узел шапки таблицы'");
		Возврат Неопределено;
	КонецЕсли;
	
	ТипВсеТипы = СцТ_ВсеТипыЗначений();
	
	Результат     = Новый ТаблицаЗначений;
	ИндексКолонок = Новый Соответствие;
	
	// Формаирование колонок таблицы
	Для каждого УзелКолонки Из УзелШапки.Строки Цикл
		
		Если ПустаяСтрока(УзелКолонки.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексКолонок[УзелКолонки.Имя] <> Истина Тогда
			ИндексКолонок[УзелКолонки.Имя] = Истина;
			Результат.Колонки.Добавить(УзелКолонки.Имя, ТипВсеТипы, УзелКолонки.Имя);
			Если НЕ УзелКолонки.Активность Тогда
				КолонкиИсключений.Добавить(УзелКолонки.Имя);
			КонецЕсли;
		КонецЕсли;
		
		Если УзелКолонки.Действие = "Ключ" Тогда
			МассивКлючевыхПолей.Добавить(УзелКолонки.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение таблицы
	Для каждого УзелСтроки Из УзелТаблицы.Строки Цикл
		Если УзелСтроки.Имя = "ШапкаТаблицы" ИЛИ НЕ УзелСтроки.Активность Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаблицы = Результат.Добавить();
		Для каждого УзелЯчейки Из УзелСтроки.Строки Цикл
			Если ИндексКолонок[УзелЯчейки.Имя] <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаТаблицы[УзелЯчейки.Имя] = СцТ_ПолучитьЗначение_НаСервере(
				УзелЯчейки.Значение,
				АдресТаблицыСсылок,
				УзелЯчейки.ТипУзла);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

