{3,
{42,0,2,0,0,1,0,0,00000000-0000-0000-0000-000000000000,0,
{1,1,
{"ru","Сохранение сценария в файл"}
},0,0,1,1,1,0,3,0,
{2,3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",0,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,2,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{24,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СохранитьИЗакрыть",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,1,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{28,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СохранитьИЗакрытьExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{27,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаСправка",
{1,0},1,
{0,39bb0fe9-771d-4dd5-8a6e-2d16984523af},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{29,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаСправкаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},5,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{17,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ФайлСценария",1,0,
{1,0},
{1,1,
{"ru","Путь к файлу сценария"}
},
{1,
{15}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},1,
{1,0},
{1,0},1,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ФайлБлокаСценарияНачалоВыбора",0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0},
{0,0,0},1,
{21,
{18,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ФайлСценарияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{30,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ФайлСценарияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"Наименование",1,0,
{1,0},
{1,1,
{"ru","Наименование сценария"}
},
{1,
{16}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},1,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0},
{0,0,0},1,
{21,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"НаименованиеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{31,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"НаименованиеExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{5,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"Автор",1,0,
{1,0},
{1,1,
{"ru","Автор"}
},
{1,
{17}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{6,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"АвторКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{32,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"АвторExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"Описание",2,0,
{1,0},
{1,1,
{"ru","Краткое описание сценария"}
},
{1,
{18}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,1,1,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0},
{0,0,0},1,
{21,
{4,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ОписаниеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{33,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ОписаниеExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{23,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"Группа",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{9,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"Платформа",1,0,
{1,0},
{1,1,
{"ru","Номер сборки платформы ""1С:Предприятие 8"""}
},
{1,
{19}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0},
{0,0,0},1,
{21,
{10,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПлатформаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{35,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ПлатформаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{19,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПредставлениеКонфигурации",1,0,
{1,0},
{1,1,
{"ru","Тестируемая конфигурация и номер сборки"}
},
{1,
{3}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,1,0},
{0,0,0},1,
{21,
{20,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПредставлениеКонфигурацииКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{36,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ПредставлениеКонфигурацииExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{25,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"НадписьСтатистики",
{1,1,
{"ru","Всего шагов:"}
},
{1,1,
{"ru","Статистика сценария"}
},1,0,0,2,2,
{3,0,
{10040115}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},1,
{21,
{26,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"НадписьСтатистикиКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru","Всего шагов:"}
},0},0,1,
{10,
{37,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"НадписьСтатистикиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},1,0,1,
{10,
{34,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",2,0,0,0,0,0,3,3,0,0,2},"#Область Переменные

// Хранение указателя на основную форму обработки
&НаКлиенте
Перем СцТ_ГлавнаяФорма;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаОбработка = РеквизитФормыВЗначение(""Объект"");
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + "".Форма."";
	
	// Переданные данные
	АдресСценария = Параметры.АдресВременногоХранилищаСценария;
	Сценарий      = ПолучитьИзВременногоХранилища(АдресСценария);
	
	АдресшаблоновШагов           = Параметры.АдресВременногоХранилищаШаблоновШагов;
	АдресНастроекЭталоннойБазы   = Параметры.АдресВременногоХранилищаНастроекИБ;
	АдресНачальныхУстановокШагов = Параметры.АдресВременногоХранилищаШаговПоУмолчанию;
	АдресТаблицыСсылок           = Параметры.АдресВременногоХранилищаСсылок;
	АдресТаблицыКлючей           = Параметры.АдресВременногоХранилищаКлючей;
	АдресДереваМакрошагов        = Параметры.АдресДереваМакрошагов;
	
	СтруктураГлобальныхПараметров = Параметры.СтруктураГлобальныхПараметров;
	
	Наименование                   = Параметры.Наименование;
	Автор                          = Параметры.Автор;
	ФайлСценария                   = Параметры.ИмяФайлаБлокаТеста;
	НачальнаяДата                  = Параметры.НачальнаяДата;
	Описание                       = Параметры.Описание;
	НомерШагаДляНачальнойУстановки = Параметры.НомерШагаДляНачальнойУстановки;
	
	ИмяПользователя                    = Параметры.ИмяПользователя;
	ПарольПользователяИБ               = Параметры.ПарольПользователяИБ;
	ВидТестируемогоКлиента             = Параметры.ВидТестируемогоКлиента;
	ПортТестируемогоКлиента            = Параметры.ПортТестируемогоКлиента;
	КомпьютерИБ                        = Параметры.КомпьютерИБ;
	ДругаяИБ                           = Параметры.ДругаяИБ;
	СтрокаПодключенияКИБ               = Параметры.СтрокаПодключенияКИБ;
	ДопПараметрыКоманднойСтроки        = Параметры.ДопПараметрыКоманднойСтроки;
	URLИБ                              = Параметры.URLИБ;
	ТаймаутПоискаИнтерактивныхОбъектов = Параметры.ТаймаутПоискаИнтерактивныхОбъектов;
	ТипБлока                           = Параметры.ТипБлока;
	Если ПустаяСтрока(ТипБлока) Тогда
		ТипБлока = ""Смешанный"";
	КонецЕсли;
	
	// Расчитываемые данные
	СисИнфо = Новый СистемнаяИнформация;
	ИмяКонфигурации                = Метаданные.Имя;
	Конфигурация                   = Метаданные.Синоним;
	Платформа                      = СисИнфо.ВерсияПриложения;
	ВерсияКонфигурации             = Метаданные.Версия;
	ДатаАктуализации               = ТекущаяДата();
	ПредставлениеКонфигурации      = Конфигурация + "" ("" + ВерсияКонфигурации + "")"";
	
	КоличествоШагов       = 0;
	КоличествоРучныхШагов = 0;
	СцТ_ОпределитьКоличествоШагов(Сценарий, КоличествоШагов, КоличествоРучныхШагов);
	
	Если КоличествоШагов = 0 Тогда
		Автоматизация = 0;
	Иначе
		Автоматизация = Окр((КоличествоШагов - КоличествоРучныхШагов) * 100 / КоличествоШагов, 2);
	КонецЕсли;
	
	Автосохранение = Параметры.Автосохранение;
	
	СледДействие = Параметры.СледДействие;
	
	ТекстКоличестваШагов = НСтр(""ru='Количество шагов: <STEPS> (из них ручных - <ARMSTEPS>). Автоматизация - <PERCENT>%'"");
	ТекстКоличестваШагов = СтрЗаменить(ТекстКоличестваШагов, ""<STEPS>""   , Строка(КоличествоШагов));
	ТекстКоличестваШагов = СтрЗаменить(ТекстКоличестваШагов, ""<ARMSTEPS>"", Строка(КоличествоРучныхШагов));
	ТекстКоличестваШагов = СтрЗаменить(ТекстКоличестваШагов, ""<PERCENT>"" , Строка(Автоматизация));
	
	Элементы.НадписьСтатистики.Заголовок = ТекстКоличестваШагов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СцТ_ГлавнаяФорма    = ВладелецФормы;
	
	Если Автосохранение И НЕ ПустаяСтрока(ФайлСценария) Тогда
		
		Отказ = Истина;
		
		СообщениеОбОшибке   = """";
		АдресДвоичныхДанных = СцТ_СформироватьФайлСценария(СообщениеОбОшибке);
		
		Если АдресДвоичныхДанных = Неопределено Тогда
			ТекстСообщения = НСтр(""ru = 'Ошибка при записи файла сценария'"")
				+ ?(ПустаяСтрока(СообщениеОбОшибке), """", "": "" + СообщениеОбОшибке);
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Попытка
			ПолучитьФайл(АдресДвоичныхДанных, ФайлСценария, Ложь);
		Исключение
			ТекстСообщения = НСтр(""ru = 'Ошибка при записи файла сценария: '"")
				+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		ПарметрыДляОбмена = Новый Структура;
		ПарметрыДляОбмена.Вставить(""Наименование""      , Наименование);
		ПарметрыДляОбмена.Вставить(""Автор""             , Автор);
		ПарметрыДляОбмена.Вставить(""ИмяФайлаБлокаТеста"", ФайлСценария);
		ПарметрыДляОбмена.Вставить(""Описание""          , Описание);
		ПарметрыДляОбмена.Вставить(""СледДействие""      , СледДействие);
		
		Оповестить(""СохранениеСценария"", ПарметрыДляОбмена);
		
		ТекстОповещения = НСтр(""ru = 'Блок сценария сохранен'"");
		
		ПоказатьОповещениеПользователя(ТекстОповещения,
			,
			ФайлСценария,
			СцТ_ГлавнаяФорма.КартинкаИнформация32);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФайлБлокаСценарияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	МаскаВсеФайлы = ПолучитьМаскуВсеФайлы();
	ВыборФайла.Заголовок  =
		НСтр(""ru='Сохранение сценария'"");
	ВыборФайла.Фильтр     =
		НСтр(""ru='Сценарий в архиве (*.zip)|*.zip|Сценарий в формате xml (*.xml)|*.xml|Все файлы (""
			+ МаскаВсеФайлы
			+ "")|"" + МаскаВсеФайлы + ""'"");
	//ВыборФайла.Расширение = ""xml"";
	
	Если НЕ ПустаяСтрока(ФайлСценария) Тогда
		ВыборФайла.ПолноеИмяФайла = ФайлСценария;
		Файл = Новый Файл(ФайлСценария);
		Если ВРег(СокрЛП(Файл.Расширение)) = "".XML"" Тогда
			ВыборФайла.ИндексФильтра = 1;
		КонецЕсли;
	Иначе
		ВыборФайла.ПолноеИмяФайла = НСтр(""ru = 'Новый сценарий.zip'"");
	КонецЕсли;
	
	Если ВыборФайла.Выбрать() Тогда
		ФайлСценария = ВыборФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	Если ПустаяСтрока(ФайлСценария) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(""ru = 'Не задано имя файла.'"");
		Сообщение.Поле = ""ФайлСценария"";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Наименование) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(""ru = 'Не заполнено поле """"Наименование""""'"");
		Сообщение.Поле  = ""Наименование"";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр(""ru = 'Сохранение сценария'""), , ФайлСценария);
	
	СообщениеОбОшибке   = """";
	АдресДвоичныхДанных = СцТ_СформироватьФайлСценария(СообщениеОбОшибке);
	
	Если АдресДвоичныхДанных = Неопределено Тогда
		Состояние();
		ТекстСообщения = НСтр(""ru = 'Ошибка при записи файла сценария'"")
			+ ?(ПустаяСтрока(СообщениеОбОшибке), """", "": "" + СообщениеОбОшибке);
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Попытка
		ПолучитьФайл(АдресДвоичныхДанных, ФайлСценария, Ложь);
	Исключение
		Состояние();
		ТекстСообщения = НСтр(""ru = 'Ошибка при записи файла сценария: '"")
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Состояние();
	ТекстОповещения = НСтр(""ru = 'Блок сценария сохранен'"");
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		,
		ФайлСценария,
		СцТ_ГлавнаяФорма.КартинкаИнформация32);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить(""Наименование"", Наименование);
	ПараметрыОповещения.Вставить(""Описание""    , Описание);
	ПараметрыОповещения.Вставить(""Автор""       , Автор);
	ПараметрыОповещения.Вставить(""ФайлСценария"", ФайлСценария);
	ПараметрыОповещения.Вставить(""СледДействие"", СледДействие);
	
	Закрыть();
	
	Оповестить(""ОбновитьДанныеОСценарииПослеСохранения"", ПараметрыОповещения);
	
	Попытка
		УдалитьИзВременногоХранилища(АдресСценария);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Формирование файла выполняется на сервере. Клиенту возвращается адрес
// хранения двоичных данных файла
//
// Параметры
// СообщениеОбОшибке - возвращаемый текст ошибки
&НаСервере
Функция СцТ_СформироватьФайлСценария(СообщениеОбОшибке)
	
	СозданныеВременныеФайлы = Новый Массив;
	
	ДвоичныеДанныеФайла = СцТ_ДвоичныеДанныеФайлаСценария(
		СообщениеОбОшибке,
		СозданныеВременныеФайлы);
	
	// Удалить все созданные временные файлы
	Для каждого ИмяВремФайла Из СозданныеВременныеФайлы Цикл
		ОписательФайла = Новый Файл(ИмяВремФайла);
		Если ОписательФайла.Существует() Тогда
			Попытка
				УдалитьФайлы(ИмяВремФайла);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	АдресДвоичныхДанных = ?(
		ДвоичныеДанныеФайла = Неопределено,
		Неопределено,
		ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла));
	
	Возврат АдресДвоичныхДанных;
	
КонецФункции

// Непосрдественное сохранение сценария в xml файле
//
// Параметры
// СообщениеОбОшибке - возвращаемый текст ошибки
// СозданныеВременныеФайлы - список временных файлов
// Возвращаемое значение - двоичные данные файла сценария
&НаСервере
Функция СцТ_ДвоичныеДанныеФайлаСценария(СообщениеОбОшибке, СозданныеВременныеФайлы)
	
	Попытка
		
		Сценарий = ПолучитьИзВременногоХранилища(АдресСценария);
		Ссылки   = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
		
		ОписательФайла      = Новый Файл(ФайлСценария);
		ЭтоОбычныйФайл      = (ВРег(СокрЛП(ОписательФайла.Расширение)) <> "".ZIP"");
		
		// Персональные шаблоны
		Если НЕ ПустаяСтрока(АдресШаблоновШагов) Тогда
			ШаблонШагов = ПолучитьИзВременногоХранилища(АдресШаблоновШагов);
		КонецЕсли;
		
		ШагиПоУмолчанию  = ПолучитьИзВременногоХранилища(АдресНачальныхУстановокШагов);
		Ключи            = ПолучитьИзВременногоХранилища(АдресТаблицыКлючей);
		Если НЕ ПустаяСтрока(АдресНастроекЭталоннойБазы) Тогда
			НастройкиИБ      = ПолучитьИзВременногоХранилища(АдресНастроекЭталоннойБазы);
		КонецЕсли;
		ДеревоМакрошагов = ПолучитьИзВременногоХранилища(АдресДереваМакрошагов);
		
		// Чтение схемы XSD
		ФабрикаПакета      = Неопределено;
		СериализаторПакета = Неопределено;
		СцТ_ПрочитатьСхемуХСД(ФабрикаПакета, СериализаторПакета);
		
		// Запись данных в объекты ХДТО
		ОбъектХДТО = ФабрикаПакета.Создать(
			ФабрикаПакета.Тип(""http://v8.1c.ru/stest/extforms"",""НастройкиСценария""));
		
		// Заполнить свойства первого уровня
		ОбъектХДТО.ТипФайла                           = ""ФайлСценарияТеста"";
		ОбъектХДТО.Наименование                       = Наименование;
		ОбъектХДТО.Описание                           = Описание;
		ОбъектХДТО.Автор                              = Автор;
		ОбъектХДТО.ВерсияСтруктурыXML                 = ""82-04"";
		ОбъектХДТО.ИмяКонфигурации                    = ИмяКонфигурации;
		ОбъектХДТО.Конфигурация                       = Конфигурация;
		ОбъектХДТО.ВерсияКонфигурации                 = ВерсияКонфигурации;
		ОбъектХДТО.ДатаАктуализации                   = ТекущаяДата();
		ОбъектХДТО.НомерШагаДляНачальнойУстановки     = НомерШагаДляНачальнойУстановки;
		ОбъектХДТО.НачальнаяДата                      = НачальнаяДата;
		ОбъектХДТО.КоличествоШагов                    = КоличествоШагов;
		ОбъектХДТО.КоличествоРучныхШагов              = КоличествоРучныхШагов;
		ОбъектХДТО.Платформа                          = Платформа;
		
		ОбъектХДТО.ИмяПользователя                    = ИмяПользователя;
		ОбъектХДТО.ПарольПользователяИБ               = ПарольПользователяИБ;
		ОбъектХДТО.ВидТестируемогоКлиента             = ВидТестируемогоКлиента;
		ОбъектХДТО.ПортТестируемогоКлиента            = ПортТестируемогоКлиента;
		ОбъектХДТО.КомпьютерИБ                        = КомпьютерИБ;
		ОбъектХДТО.ДругаяИБ                           = ДругаяИБ;
		ОбъектХДТО.СтрокаПодключенияКИБ               = СтрокаПодключенияКИБ;
		ОбъектХДТО.ДопПараметрыКоманднойСтроки        = ДопПараметрыКоманднойСтроки;
		
		ОбъектХДТО.URLИБ                              = URLИБ;
		ОбъектХДТО.ТаймаутПоискаИнтерактивныхОбъектов = ТаймаутПоискаИнтерактивныхОбъектов;
		ОбъектХДТО.ТипБлока                           = ТипБлока;
		
		КомментарийZipФайла = """";
		Если НЕ ЭтоОбычныйФайл Тогда
			
			ЗаписьКомментарияZIP = Новый ЗаписьXML;
			ЗаписьКомментарияZIP.УстановитьСтроку(""utf-8"");
			ЗаписьКомментарияZIP.ЗаписатьОбъявлениеXML();
			ЗаписьКомментарияZIP.ЗаписатьКомментарий(НСТр(""ru = 'Не рекомендуется изменять комментарий к текущему архиву, т.к. комментарий содержит техническую информацию.'""));
			ЗаписьКомментарияZIP.ЗаписатьНачалоЭлемента(""НастройкиСценария"");
			СимволЗамены = Символ(160);
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""ТаймаутПоискаИнтерактивныхОбъектов"",
				СтрЗаменить(Строка(ОбъектХДТО.ТаймаутПоискаИнтерактивныхОбъектов), СимволЗамены, """"));
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""ПортТестируемогоКлиента"",
				СтрЗаменить(Строка(ОбъектХДТО.ПортТестируемогоКлиента), СимволЗамены, """"));
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""КомпьютерИБ"",
				СтрЗаменить(Строка(ОбъектХДТО.КомпьютерИБ), СимволЗамены, """"));
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""ДругаяИБ"",
				СтрЗаменить(Строка(ОбъектХДТО.ДругаяИБ), СимволЗамены, """"));
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""СтрокаПодключенияКИБ"",
				СтрЗаменить(Строка(ОбъектХДТО.СтрокаПодключенияКИБ), СимволЗамены, """"));
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""ДопПараметрыКоманднойСтроки"",
				СтрЗаменить(Строка(ОбъектХДТО.ДопПараметрыКоманднойСтроки), СимволЗамены, """"));
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""ПарольПользователяИБ"", ОбъектХДТО.ПарольПользователяИБ);
			
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""ИмяПользователя"", ОбъектХДТО.ИмяПользователя);
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""ВидТестируемогоКлиента"", Строка(ОбъектХДТО.ВидТестируемогоКлиента));
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""URLИБ"", ОбъектХДТО.URLИБ);
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""Платформа"", ОбъектХДТО.Платформа);
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""КоличествоРучныхШагов"",
				СтрЗаменить(Строка(ОбъектХДТО.КоличествоРучныхШагов), СимволЗамены, """"));
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""КоличествоШагов"",
				СтрЗаменить(Строка(ОбъектХДТО.КоличествоШагов), СимволЗамены, """"));
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""НачальнаяДата"", XMLСтрока(ОбъектХДТО.НачальнаяДата));
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""НомерШагаДляНачальнойУстановки"",
				ОбъектХДТО.НомерШагаДляНачальнойУстановки);
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""ДатаАктуализации"", XMLСтрока(ОбъектХДТО.ДатаАктуализации));
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""ВерсияКонфигурации"", ОбъектХДТО.ВерсияКонфигурации);
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""ИмяКонфигурации"", ОбъектХДТО.ИмяКонфигурации);
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""Конфигурация"", ОбъектХДТО.Конфигурация);
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""ВерсияСтруктурыXML"", ""82-04"");
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""Автор"", ОбъектХДТО.Автор);
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""Наименование"", ОбъектХДТО.Наименование);
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""ТипФайла"", ОбъектХДТО.ТипФайла);
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""xmlns:xsi"",
				""http://www.w3.org/2001/XMLSchema-instance"");
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""xmlns:xs"",
				""http://www.w3.org/2001/XMLSchema"");
			ЗаписьКомментарияZIP.ЗаписатьАтрибут(""xmlns"",
				""http://v8.1c.ru/stest/extforms"");
			ЗаписьКомментарияZIP.ЗаписатьНачалоЭлемента(""Описание"");
			ЗаписьКомментарияZIP.ЗаписатьТекст(ОбъектХДТО.Описание);
			ЗаписьКомментарияZIP.ЗаписатьКонецЭлемента();
			ЗаписьКомментарияZIP.ЗаписатьКонецЭлемента();
			КомментарийZipФайла = ЗаписьКомментарияZIP.Закрыть();
			
		КонецЕсли;
		
		// Заполнить деревья значений, настройки базы
		
		ОбъектХДТО.НастройкиЭталоннойБазыДерево =
			ФабрикаПакета.Создать(
				ФабрикаПакета.Тип(
					""http://v8.1c.ru/stest/extforms"",
					""типНастройкиЭталоннойБазыДерево""));
		Если НЕ ПустаяСтрока(АдресНастроекЭталоннойБазы) Тогда
			лкДеревоНастроекБазы = ПолучитьИзВременногоХранилища(АдресНастроекЭталоннойБазы);
			Если НЕ ПустаяСтрока(АдресНастроекЭталоннойБазы) Тогда
				СцТ_ВыгрузитьСтрокиДереваНастроекБазы(
					ФабрикаПакета,
					СериализаторПакета,
					лкДеревоНастроекБазы.Строки,
					ОбъектХДТО.НастройкиЭталоннойБазыДерево.НастройкиЭталоннойБазыСтрока);
			КонецЕсли;
		КонецЕсли;
		
		// + Заполнить деревья значений, блок сценария
		лкБлокСценария = Сценарий;
		ОбъектХДТО.БлокСценарияДерево =
			ФабрикаПакета.Создать(
				ФабрикаПакета.Тип(
					""http://v8.1c.ru/stest/extforms"",
					""типБлокСценарияДерево""));
					
		СцТ_ВыгрузитьСтрокиДереваБлокаСценария(
			ФабрикаПакета,
			СериализаторПакета,
			лкБлокСценария.Строки,
			ОбъектХДТО.БлокСценарияДерево.БлокСценарияСтрока);
		
		// Заполнить таблицы значений, Ссылки
		лкТаблицаСсылок = Ссылки;
		ОбъектХДТО.СсылкиТаблица =
			ФабрикаПакета.Создать(
				ФабрикаПакета.Тип(
					""http://v8.1c.ru/stest/extforms"",
					""типСсылкиТаблица""));
					
		Если лкТаблицаСсылок <> Неопределено Тогда
			СцТ_ВыгрузитьСтрокиТаблицыСсылок(
				ФабрикаПакета,
				СериализаторПакета,
				лкТаблицаСсылок,
				ОбъектХДТО.СсылкиТаблица.СсылкиСтрока);
		КонецЕсли;

		// + Заполнить таблицы значений, Ключи
		лкТаблицаКлючей = Ключи;
		ОбъектХДТО.КлючиТаблица =
			ФабрикаПакета.Создать(
				ФабрикаПакета.Тип(
					""http://v8.1c.ru/stest/extforms"",
					""типКлючиТаблица""));
		
		СцТ_ВыгрузитьСтрокиТаблицыКлючей(
			ФабрикаПакета,
			СериализаторПакета,
			лкТаблицаКлючей,
			ОбъектХДТО.КлючиТаблица.КлючиСтрока);
		
		// + Заполнить таблицы значений, ШагиПоУмолчаниюТаблица
		лкШагиПоУмолчанию = ШагиПоУмолчанию;
		ОбъектХДТО.ШагиПоУмолчаниюДерево =
			ФабрикаПакета.Создать(
				ФабрикаПакета.Тип(
					""http://v8.1c.ru/stest/extforms"",
					""типШагиПоУмолчаниюДерево""));
		
		СцТ_ВыгрузитьСтрокиДереваШаговПоУмолчанию(
			ФабрикаПакета,
			СериализаторПакета,
			лкШагиПоУмолчанию.Строки,
			ОбъектХДТО.ШагиПоУмолчаниюДерево.ШагиПоУмолчаниюСтрока);
			
		// Заполнить таблицы значений, ШаблонШагов
		лкШаблоныШагов = ШаблонШагов;
		ОбъектХДТО.ШаблоныШаговТаблица =
			ФабрикаПакета.Создать(
				ФабрикаПакета.Тип(
					""http://v8.1c.ru/stest/extforms"",
					""типШаблоныШаговТаблица""));
		
		Если лкШаблоныШагов <> Неопределено Тогда
			СцТ_ВыгрузитьСтрокиТаблицыШаблоновШагов(
				ФабрикаПакета,
				СериализаторПакета,
				лкШаблоныШагов,
				ОбъектХДТО.ШаблоныШаговТаблица.ШаблоныШаговСтрока);
		Иначе
			СцТ_ВыгрузитьСтрокиТаблицыШаблоновШагов(
				ФабрикаПакета,
				СериализаторПакета,
				Новый ТаблицаЗначений,
				ОбъектХДТО.ШаблоныШаговТаблица.ШаблоныШаговСтрока);
		КонецЕсли;
		
		// Сохранение таблицы глобальных параметров
		ОбъектХДТО.ГлобальныеПараметры =
			ФабрикаПакета.Создать(
				ФабрикаПакета.Тип(
					""http://v8.1c.ru/stest/extforms"",
					""типГлобальныеПараметрыТаблица""));
		
		СцТ_ВыгрузитьСтрокиГлобальныхПараметров(
				ФабрикаПакета,
				СериализаторПакета,
				СтруктураГлобальныхПараметров,
				ОбъектХДТО.ГлобальныеПараметры.ГлобальныеПараметрыСтрока);
				
				
		// Сохранение дерева макрошагов
		лкДеревоМакрошагов = ДеревоМакрошагов;
		ОбъектХДТО.Макрошаги =
			ФабрикаПакета.Создать(
				ФабрикаПакета.Тип(
					""http://v8.1c.ru/stest/extforms"",
					""типБлокСценарияДерево""));
					
		СцТ_ВыгрузитьСтрокиДереваБлокаСценария(
			ФабрикаПакета,
			СериализаторПакета,
			лкДеревоМакрошагов.Строки,
			ОбъектХДТО.Макрошаги.БлокСценарияСтрока);
		
		Попытка
			ОбъектХДТО.Проверить();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			СообщениеОбОшибке = НСтр(""ru='неверный формат схемы файла сценария ('"")
				+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + "")"";
			Возврат Неопределено;
		КонецПопытки;
		
		ЗаписьXML = Новый ЗаписьXML;
		
		Если ЭтоОбычныйФайл Тогда
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""xml"");
			СозданныеВременныеФайлы.Добавить(ИмяВременногоФайла);
		Иначе
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("""");
			СозданныеВременныеФайлы.Добавить(ИмяВременногоФайла);
			
			Попытка
				СоздатьКаталог(ИмяВременногоФайла);
			Исключение
				СообщениеОбОшибке = НСтр(""ru='не удалось создать временный каталог ('"")
					+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + "")"";
				Возврат Неопределено;
			КонецПопытки;
			
			ИмяВременногоФайла = ИмяВременногоФайла + ПолучитьРазделительПути() + НСтр(""ru = 'Сценарий.xml'"");
			
		КонецЕсли;
		
		Попытка
			
			ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			
			ФабрикаПакета.ЗаписатьXML(ЗаписьXML, ОбъектХДТО);
			
			ЗаписьXML.Закрыть();
			
		Исключение
			СообщениеОбОшибке = НСтр(""ru = 'ошибка при записи файла сценария ('"")
				+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + "")"";
			Возврат Неопределено;
		КонецПопытки;
		
		ИмяФайлаZIP = Неопределено;
		
		Если ЭтоОбычныйФайл Тогда
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
		Иначе
			
			ИмяФайлаZIP = ПолучитьИмяВременногоФайла(""zip"");
			СозданныеВременныеФайлы.Добавить(ИмяФайлаZIP);
			ЗаписьZIP = Новый ЗаписьZipФайла(
				ИмяФайлаZIP,
				,
				КомментарийZipФайла,
				МетодСжатияZIP.Сжатие,
				УровеньСжатияZIP.Максимальный);
			
			ЗаписьZIP.Добавить(ИмяВременногоФайла);
			
			ЗаписьZIP.Записать();
			
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаZIP);
			
		КонецЕсли;
		
	Исключение
		
		СообщениеОбОшибке = НСтр(""ru = 'возникло необрабатываемое исключение """"'"")
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + """""""";
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

// Подсчет количества шагов сценария для включения в служебную информацию
//
// Параметры
// ВеткаТеста       - ветка дерева для рекурсии
// ЧислоШагов       - количество шагов
// ЧислоРучныхШагов - количество шагов, выполняемых вручную
&НаСервере
Процедура СцТ_ОпределитьКоличествоШагов(
	ВеткаТеста,
	ЧислоШагов,
	ЧислоРучныхШагов = 0)
	
	Для каждого СтрокаТеста Из ВеткаТеста.Строки Цикл
		ЧислоШагов = ЧислоШагов + 1;
		
		Если СтрокаТеста.ВыполнитьВручную = 1
			ИЛИ СтрокаТеста.ТипШага = ""ВыполнитьВРучную"" Тогда
			ЧислоРучныхШагов = ЧислоРучныхШагов + 1;
		КонецЕсли;
		
		СцТ_ОпределитьКоличествоШагов(СтрокаТеста, ЧислоШагов, ЧислоРучныхШагов);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьXMLФайла

// Чтение схемы
//
&НаСервере
Процедура СцТ_ПрочитатьСхемуХСД(ФабрикаПакета, СериализаторПакета)
	
	// Чтение схемы XSD. Начало.
	МакетСхемы = РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(""СхемаXSD_82_03"");
	ТекстСхемы = МакетСхемы.ПолучитьТекст();

	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(ТекстСхемы);

	ПостроительДОМ = Новый ПостроительDOM;
	ДокументДОМ = ПостроительДОМ.Прочитать(ЧтениеХМЛ);

	ПостроительСхемыХМЛ = Новый ПостроительСхемXML;
	СхемаХМЛ = ПостроительСхемыХМЛ.СоздатьСхемуXML(ДокументДОМ);

	НаборСхемХМЛ = Новый НаборСхемXML;
	НаборСхемХМЛ.Добавить(СхемаХМЛ);

	// Добавить также пакет XDTO текущей конфигурации
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(
		ФабрикаXDTO.Пакеты.Получить(
			""http://v8.1c.ru/8.1/data/enterprise/current-config"")); // Ссылки на объекты метаданных
			
	МассивПакетов.Добавить(
		ФабрикаXDTO.Пакеты.Получить(
			""http://v8.1c.ru/8.1/data-composition-system/settings"")); // Filter - Отбор СКД

	ФабрикаПакета = Новый ФабрикаXDTO(НаборСхемХМЛ, МассивПакетов);
	СериализаторПакета = Новый СериализаторXDTO(ФабрикаПакета);
	ЧтениеХМЛ.Закрыть();
	
КонецПроцедуры

// Сериализация дерева настроек
//
&НаСервере
Процедура СцТ_ВыгрузитьСтрокиДереваНастроекБазы(
	ФабрикаПакета,
	СериализаторПакета,
	лкСтрокиДереваНастроекБазы,
	Список,
	УровеньВложенности = 0)
	
	Для каждого ТекущаяСтрока Из лкСтрокиДереваНастроекБазы Цикл
		
		Если УровеньВложенности = 1
			И НЕ ТекущаяСтрока.Активность
			И ТекущаяСтрока.Отборы.Элементы.Количество() = 0
			И ТекущаяСтрока.ТаблицаРеквизитов.Количество() = 0
			И ТекущаяСтрока.Подчинение.Количество() = 0
			И ТекущаяСтрока.ПоляГруппировки.Количество() = 0
			И ТекущаяСтрока.ПоляСортировки.Количество() = 0 Тогда
			// Не записывать пустые настройки
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(
			ФабрикаПакета.Тип(""http://v8.1c.ru/stest/extforms"",""типНастройкиЭталоннойБазыСтрока""));
		
		// Заполнить простые значения в строку ХДТО
		ЗаполнитьЗначенияСвойств(НоваяСтрокаХДТО,
			ТекущаяСтрока,
			""Имя, Представление, ТипУзла, Активность, ЕстьДоступ, ТипМетаданных"");
		
		// Заполнить сложные значения ХДТО
		
		НоваяСтрокаХДТО.Отборы            = ЗначениеВСтрокуВнутр(ТекущаяСтрока.Отборы);
		НоваяСтрокаХДТО.ТаблицаРеквизитов = СериализаторПакета.ЗаписатьXDTO(ТекущаяСтрока.ТаблицаРеквизитов);
		НоваяСтрокаХДТО.Подчинение        = СериализаторПакета.ЗаписатьXDTO(ТекущаяСтрока.Подчинение);
		НоваяСтрокаХДТО.ПоляГруппировки   = СериализаторПакета.ЗаписатьXDTO(ТекущаяСтрока.ПоляГруппировки);
		НоваяСтрокаХДТО.ПоляСортировки    = СериализаторПакета.ЗаписатьXDTO(ТекущаяСтрока.ПоляСортировки);
		
		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);
		
		// Есть подчинённые строки? Рекурсивно вложить их
		Если ТекущаяСтрока.Строки.Количество()>0 Тогда
			СцТ_ВыгрузитьСтрокиДереваНастроекБазы(
				ФабрикаПакета,
				СериализаторПакета,
				ТекущаяСтрока.Строки,
				НоваяСтрокаХДТО.НастройкиЭталоннойБазыСтрока,
				УровеньВложенности + 1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Построчная сериализация сценария
//
&НаСервере
Процедура СцТ_ВыгрузитьСтрокиДереваБлокаСценария(
	ФабрикаПакета,
	СериализаторПакета,
	лкСтрокиДереваБлокаСценария,
	Список)
	
	Для каждого ТекущаяСтрока Из лкСтрокиДереваБлокаСценария Цикл
		
		Если ТекущаяСтрока.ДанныеКартинки = Неопределено Тогда
			ТекущаяСтрока.ДанныеКартинки = 1024;
		КонецЕсли;
		
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(
			ФабрикаПакета.Тип(
				""http://v8.1c.ru/stest/extforms"",
				""типБлокСценарияСтрока""));
		
		// Заполнить простые значения в строку ХДТО
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаХДТО,
			ТекущаяСтрока,
			""НомерШага, Наименование, ТипШага, ТипМетаданных, ИмяМетаданных, Автоописание,
			|Описание, НеВыводитьАвтоописание, Активность, Выполнено, ОбСсылка,
			|ПредставлениеОбъекта, ВыполнитьВручную, УИШ, Цвет, Комментарий,
			|ИмяФормы, ПредставлениеИмениМетаданных, ДанныеКартинки, ЗаголовокФормы"");
		
		// Заполнить сложные значения ХДТО
		// Нет сложных значений

		// Вложенное дерево значений
		лкДеревоЗначенийСтрокиБлокаСценария = ТекущаяСтрока.Значение;
		НоваяСтрокаХДТО.ЗначениеБлокаСценарияДерево = 
			ФабрикаПакета.Создать(
				ФабрикаПакета.Тип(
					""http://v8.1c.ru/stest/extforms"",
					""типЗначениеБлокаСценарияДерево""));
					
		СцТ_ВыгрузитьСтрокиДереваЗначенийСтрокиБлокаСценария(
			ФабрикаПакета,
			СериализаторПакета,
			ТекущаяСтрока.Значение.Строки,
			НоваяСтрокаХДТО.ЗначениеБлокаСценарияДерево.ЗначениеБлокаСценарияСтрока);

		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);

		// Есть подчинённые строки? Рекурсивно вложить их
		Если ТекущаяСтрока.Строки.Количество()>0 Тогда
			СцТ_ВыгрузитьСтрокиДереваБлокаСценария(
				ФабрикаПакета,
				СериализаторПакета,
				ТекущаяСтрока.Строки,
				НоваяСтрокаХДТО.БлокСценарияСтрока);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СцТ_ВыгрузитьСтрокиДереваЗначенийСтрокиБлокаСценария(
	ФабрикаПакета,
	СериализаторПакета,
	лкСтрокиДереваЗначенийСтрокиБлокаСценария,
	Список)

	Для каждого ТекущаяСтрока Из лкСтрокиДереваЗначенийСтрокиБлокаСценария Цикл
		
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(
			ФабрикаПакета.Тип(
				""http://v8.1c.ru/stest/extforms"",
				""типЗначениеБлокаСценарияСтрока""));
		
		// Заполнить простые значения в строку ХДТО
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаХДТО,
			ТекущаяСтрока,
			""Имя, Синоним, Активность, Представление, Действие, Скрипт, ТипУзла"");
		
		НоваяСтрокаХДТО.ВклВОписание = ТекущаяСтрока.Кл; // КЛ
		
		// Заполнить сложные значения ХДТО
		НоваяСтрокаХДТО.Значение = СериализаторПакета.ЗаписатьXDTO(ЗначениеВСтрокуВнутр(ТекущаяСтрока.Значение));

		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);

		// Есть подчинённые строки? Рекурсивно вложить их
		Если ТекущаяСтрока.Строки.Количество()>0 Тогда
			СцТ_ВыгрузитьСтрокиДереваЗначенийСтрокиБлокаСценария(
				ФабрикаПакета,
				СериализаторПакета,
				ТекущаяСтрока.Строки,
				НоваяСтрокаХДТО.ЗначениеБлокаСценарияСтрока);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Сериализация таблицы ссылок
//
&НаСервере
Процедура СцТ_ВыгрузитьСтрокиТаблицыСсылок(
	ФабрикаПакета,
	СериализаторПакета,
	лкТаблицаСсылок,
	Список);
	
	Для каждого ТекущаяСтрока Из лкТаблицаСсылок Цикл
		
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(
			ФабрикаПакета.Тип(
				""http://v8.1c.ru/stest/extforms"",
				""типСсылкиСтрока""));
		
		// Заполнить простые значения в строку ХДТО
		//ЗаполнитьЗначенияСвойств(
		//	НоваяСтрокаХДТО,
		//	ТекущаяСтрока,
		//	""Ссылка, ТипМетаданных, ИмяМетаданных, Представление, НомерШага, СоздаетсяВШаге, ПоискПозапросу, ТекстЗапроса"");
		
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаХДТО,
			ТекущаяСтрока,
			""Ссылка, Представление, ПоискПозапросу, ТекстЗапроса"");
			
		НоваяСтрокаХДТО.ТипМетаданных = ТекущаяСтрока.ТипМД;
		НоваяСтрокаХДТО.ИмяМетаданных = ТекущаяСтрока.ИмяМД;
		
		// Заполнить сложные значения ХДТО
		НоваяСтрокаХДТО.МассивУИШ = СериализаторПакета.ЗаписатьXDTO(ТекущаяСтрока.МассивУИШ);
		
		НоваяСтрокаХДТО.СтруктураИдентификации = 
			ФабрикаПакета.Создать(
				ФабрикаПакета.Тип(
					""http://v8.1c.ru/stest/extforms"",
					""типСтруктураИдентификации""));
		
		Если ТипЗнч(ТекущаяСтрока.СтруктураИдентификации) = Тип(""ТаблицаЗначений"") Тогда
			Для каждого СтрТЗ Из ТекущаяСтрока.СтруктураИдентификации Цикл
				СтрокаСИ = ФабрикаПакета.Создать(ФабрикаПакета.Тип(
					""http://v8.1c.ru/stest/extforms"",
					""типСтруктураИдентификацииСтрока""));
					
				ЗаполнитьЗначенияСвойств(СтрокаСИ, СтрТЗ, , ""Значение"");
				СтрокаСИ.Значение = ЗначениеВСтрокуВнутр(СтрТЗ.Значение);
				НоваяСтрокаХДТО.СтруктураИдентификации.СтруктураИдентификацииСтрока.Добавить(СтрокаСИ);
			КонецЦикла;
		КонецЕсли;
		
		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);
		
	КонецЦикла;
	
КонецПроцедуры

// Сериализация таблицы ключей
//
&НаСервере
Процедура СцТ_ВыгрузитьСтрокиТаблицыКлючей(
	ФабрикаПакета,
	СериализаторПакета,
	лкТаблицаКлючей,
	Список);

	Для каждого ТекущаяСтрока Из лкТаблицаКлючей Цикл

		НоваяСтрокаХДТО = ФабрикаПакета.Создать(ФабрикаПакета.Тип(
			""http://v8.1c.ru/stest/extforms"",
			""типКлючиСтрока""));

		// Заполнить простые значения в строку ХДТО
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаХДТО,
			ТекущаяСтрока,
			""ТипМетаданных, ИмяМетаданных"");

		// Заполнить сложные значения ХДТО
		НоваяСтрокаХДТО.КлючиДанныеТаблица = ФабрикаПакета.Создать(ФабрикаПакета.Тип(
			""http://v8.1c.ru/stest/extforms"",
			""типКлючиДанныеТаблица""));
			
		СцТ_ВыгрузитьСтрокиДанныхТаблицыКлючей(
			ФабрикаПакета,
			СериализаторПакета,
			ТекущаяСтрока.Ключи,
			НоваяСтрокаХДТО.КлючиДанныеТаблица.КлючиДанныеСтрока);

		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);

	КонецЦикла;

КонецПроцедуры

// Сериализация строк таблицы ключей
//
&НаСервере
Процедура СцТ_ВыгрузитьСтрокиДанныхТаблицыКлючей(
	ФабрикаПакета,
	СериализаторПакета,
	лкТаблицаДанныхКлючей,
	Список);
	
	Для каждого ТекущаяСтрока Из лкТаблицаДанныхКлючей Цикл
		
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(ФабрикаПакета.Тип(
			""http://v8.1c.ru/stest/extforms"",
			""типКлючиДанныеСтрока""));
			
		// Заполнить простые значения в строку ХДТО
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаХДТО,
			ТекущаяСтрока,
			""Имя, Наименование"");
		
		// Заполнить сложные значения ХДТО
		// Нет сложных значений
		
		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);
		
	КонецЦикла;

КонецПроцедуры

// Сериализация общих шаблонов
//
&НаСервере
Процедура СцТ_ВыгрузитьСтрокиДереваШаговПоУмолчанию(
	ФабрикаПакета,
	СериализаторПакета,
	лкСтрокиДереваШаговПоУмолчанию,
	Список)
	
	Для каждого ТекущаяСтрока Из лкСтрокиДереваШаговПоУмолчанию Цикл
		
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(ФабрикаПакета.Тип(
			""http://v8.1c.ru/stest/extforms"",
			""типШагиПоУмолчаниюСтрока""));
		
		// Заполнить простые значения в строку ХДТО
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаХДТО,
			ТекущаяСтрока,
			""Имя, Синоним, ТипУзла, НеВыводитьАвтоописание, Активность, ПользовательскоеОписание, Комментарии"");
		
		// Заполнить сложные значения ХДТО
		// Вложенное дерево значений
		лкЗначениеШагаПоУмолчаниюДерево = ТекущаяСтрока.Значение;
		НоваяСтрокаХДТО.ЗначениеШагаПоУмолчаниюДерево = ФабрикаПакета.Создать(
			ФабрикаПакета.Тип(
				""http://v8.1c.ru/stest/extforms"",
				""типЗначениеШагаПоУмолчаниюДерево""));
				
		СцТ_ВыгрузитьСтрокиДереваЗначенийСтрокиТаблицыШаговПоУмолчанию(
			ФабрикаПакета,
			СериализаторПакета,
			ТекущаяСтрока.Значение.Строки,
			НоваяСтрокаХДТО.ЗначениеШагаПоУмолчаниюДерево.ЗначениеШагаПоУмолчаниюСтрока);
		
		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);
		
		// Есть подчинённые строки? Рекурсивно вложить их
		Если ТекущаяСтрока.Строки.Количество()>0 Тогда
			СцТ_ВыгрузитьСтрокиДереваШаговПоУмолчанию(
				ФабрикаПакета,
				СериализаторПакета,
				ТекущаяСтрока.Строки,
				НоваяСтрокаХДТО.ШагиПоУмолчаниюСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сериализация строк дерева значения шаблонов по умолчанию
//
&НаСервере
Процедура СцТ_ВыгрузитьСтрокиДереваЗначенийСтрокиТаблицыШаговПоУмолчанию(
	ФабрикаПакета,
	СериализаторПакета,
	лкСтрокиДереваЗначенийСтрокиТаблицыШаговПоУмолчанию,
	Список)
	
	Для каждого ТекущаяСтрока Из лкСтрокиДереваЗначенийСтрокиТаблицыШаговПоУмолчанию Цикл
	
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(ФабрикаПакета.Тип(
			""http://v8.1c.ru/stest/extforms"",
			""типЗначениеШагаПоУмолчаниюСтрока""));
	
		// Заполнить простые значения в строку ХДТО
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаХДТО,
			ТекущаяСтрока,
			""Имя, Синоним, ТипУзла"");
		Если ТекущаяСтрока.Значение = Неопределено Тогда
			НоваяСтрокаХДТО.Значение = """";
		Иначе
			НоваяСтрокаХДТО.Значение = ТекущаяСтрока.Значение;
		КонецЕсли;
		
		// Заполнить сложные значения ХДТО
		// Нет сложных значений
		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);
		
		// Есть подчинённые строки? Рекурсивно вложить их
		Если ТекущаяСтрока.Строки.Количество()>0 Тогда
			СцТ_ВыгрузитьСтрокиДереваЗначенийСтрокиТаблицыШаговПоУмолчанию(
				ФабрикаПакета,
				СериализаторПакета,
				ТекущаяСтрока.Строки,
				НоваяСтрокаХДТО.ЗначениеШагаПоУмолчаниюСтрока);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Построчная сериализация таблицы шаблона шагов
//
&НаСервере
Процедура СцТ_ВыгрузитьСтрокиТаблицыШаблоновШагов(
	ФабрикаПакета,
	СериализаторПакета,
	лкШаблоныШагов,
	Список);
	
	Для каждого ТекущаяСтрока Из лкШаблоныШагов Цикл
		
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(ФабрикаПакета.Тип(
			""http://v8.1c.ru/stest/extforms"",
			""типШаблоныШаговСтрока""));
		// Заполнить простые значения в строку ХДТО
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаХДТО,
			ТекущаяСтрока,
			""Наименование, ТипМетаданных, ИмяМетаданных, Комментарий, Основной"");
		
		// Заполнить сложные значения ХДТО
		// Вложенная таблица значений
		лкЗначениеСтрокиШаблонаШагов = ТекущаяСтрока.Значение;
		
		СцТ_ВыгрузитьСтрокиЗначенияСтрокиШаблонаШагов(ФабрикаПакета,
			СериализаторПакета,
			лкЗначениеСтрокиШаблонаШагов,
			НоваяСтрокаХДТО.ЗначениеСтрокиШаблонаШаговСтрока);
		
		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);
		
	КонецЦикла;
	
КонецПроцедуры

// Построчная сериализация дерева значения в шаблонах
&НаСервере
Процедура СцТ_ВыгрузитьСтрокиЗначенияСтрокиШаблонаШагов(
	ФабрикаПакета,
	СериализаторПакета,
	лкЗначениеСтрокиШаблонаШагов,
	Список);
	
	Для каждого ТекущаяСтрока Из лкЗначениеСтрокиШаблонаШагов Цикл
		
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(ФабрикаПакета.Тип(
			""http://v8.1c.ru/stest/extforms"",
			""типЗначениеСтрокиШаблонаШаговСтрока""));
		
		// Заполнить простые значения в строку ХДТО
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаХДТО,
			ТекущаяСтрока,
			""Наименование, ТипШага, Описание, НеВыводитьАвтоописание, Активность, ВыполнитьВручную, Цвет, Комментарий, ДанныеКартинки"");
		
		// Заполнить сложные значения ХДТО
		// Вложенное дерево значений
		лкДеревоЗначенияСтрокиШаблонаШагов = ТекущаяСтрока.Значение;
		НоваяСтрокаХДТО.ЗначениеЗначенияСтрокиШаблонаШаговДерево = ФабрикаПакета.Создать(ФабрикаПакета.Тип(
			""http://v8.1c.ru/stest/extforms"",
			""типЗначениеЗначенияСтрокиШаблонаШаговДерево""));
			
		СцТ_ВыгрузитьСтрокиДереваЗначенияСтрокиШаблонаШагов(ФабрикаПакета,
			СериализаторПакета,
			лкДеревоЗначенияСтрокиШаблонаШагов.Строки,
			НоваяСтрокаХДТО.ЗначениеЗначенияСтрокиШаблонаШаговДерево.ЗначениеЗначенияСтрокиШаблонаШаговСтрока);
		
		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ВыгрузитьСтрокиДереваЗначенияСтрокиШаблонаШагов(
	ФабрикаПакета,
	СериализаторПакета,
	лкДеревоЗначенияСтрокиШаблонаШагов,
	Список)
	
	Для каждого ТекущаяСтрока Из лкДеревоЗначенияСтрокиШаблонаШагов Цикл
		
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(ФабрикаПакета.Тип(
			""http://v8.1c.ru/stest/extforms"",
			""типЗначениеЗначенияСтрокиШаблонаШаговСтрока""));
		
		// Заполнить простые значения в строку ХДТО
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаХДТО,
			ТекущаяСтрока,
			""Имя, Синоним, Активность, Действие, Скрипт, ТипУзла"");//, Кл"");
		
		НоваяСтрокаХДТО.ВклВОписание = ТекущаяСтрока.Кл; // КЛ
		// Заполнить сложные значения ХДТО
		// Нет таких
		
		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);
		
		// Есть подчинённые строки? Рекурсивно вложить их
		Если ТекущаяСтрока.Строки.Количество()>0 Тогда
			СцТ_ВыгрузитьСтрокиДереваЗначенияСтрокиШаблонаШагов(
				ФабрикаПакета,
				СериализаторПакета,
				ТекущаяСтрока.Строки,
				НоваяСтрокаХДТО.ЗначениеЗначенияСтрокиШаблонаШаговСтрока)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ВыгрузитьСтрокиГлобальныхПараметров(
	ФабрикаПакета,
	СериализаторПакета,
	внСтруктураГлобальныхПараметров,
	Список)
	
	Если внСтруктураГлобальныхПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущаяСтрока Из внСтруктураГлобальныхПараметров Цикл
		
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(ФабрикаПакета.Тип(
			""http://v8.1c.ru/stest/extforms"",
			""типГлобальныеПараметрыСтрока""));
		// Заполнить простые значения в строку ХДТО
		
		Если ТипЗнч(ТекущаяСтрока.Значение) = Тип(""Число"") Тогда
			СтрокаТипа = ""Число"";
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Значение) = Тип(""Булево"") Тогда
			СтрокаТипа = ""Булево"";
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Значение) = Тип(""Дата"") Тогда
			СтрокаТипа = ""Дата"";
		Иначе
			СтрокаТипа = ""Строка"";
		КонецЕсли;
		
		НоваяСтрокаХДТО.Ключ        = ТекущаяСтрока.Ключ;
		НоваяСтрокаХДТО.Значение    = XMLСтрока(ТекущаяСтрока.Значение);
		НоваяСтрокаХДТО.ТипЗначения = СтрокаТипа;
		
		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


",
{4,38,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",ce4daf12-db98-4c61-b8f1-c944e90b3899}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"ПредставлениеКонфигурации",
{1,1,
{"ru","Конфигурация"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"КоличествоШагов",
{1,1,
{"ru","Количество шагов"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"КоличествоРучныхШагов",
{1,1,
{"ru","Количество ручных шагов"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{13},0,"Автосохранение",
{1,1,
{"ru","Автосохранение"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{15},0,"ФайлСценария",
{1,1,
{"ru","Файл сценария"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{16},0,"Наименование",
{1,1,
{"ru","Наименование"}
},
{"Pattern",
{"S",150,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{17},0,"Автор",
{1,1,
{"ru","Автор"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{18},0,"Описание",
{1,1,
{"ru","Описание"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{19},0,"Платформа",
{1,1,
{"ru","Платформа"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{20},0,"Конфигурация",
{1,1,
{"ru","Конфигурация"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{21},0,"ВерсияКонфигурации",
{1,1,
{"ru","Версия конфигурации"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{22},0,"НомерШагаДляНачальнойУстановки",
{1,1,
{"ru","Номер шага для начальной установки"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{23},0,"НачальнаяДата",
{1,1,
{"ru","Начальная дата"}
},
{"Pattern",
{"D","D"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{24},0,"ДатаАктуализации",
{1,1,
{"ru","Дата актуализации"}
},
{"Pattern",
{"D","D"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"АдресТаблицыСсылок",
{1,1,
{"ru","Адрес таблицы ссылок"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{10},0,"АдресТаблицыКлючей",
{1,1,
{"ru","Адрес таблицы ключей"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{9},0,"АдресНачальныхУстановокШагов",
{1,1,
{"ru","Адрес начальных установок шагов"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{8},0,"АдресНастроекЭталоннойБазы",
{1,1,
{"ru","Адрес настроек эталонной базы"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"АдресШаблоновШагов",
{1,1,
{"ru","Адрес шаблонов шагов"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{11},0,"АдресСценария",
{1,1,
{"ru","Адрес сценария"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{7},0,"URLИБ",
{1,1,
{"ru","URLИБ"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{12},0,"ВидТестируемогоКлиента",
{1,1,
{"ru","Вид тестируемого клиента"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{14},0,"ИмяПользователя",
{1,1,
{"ru","Имя пользователя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{25},0,"ПарольПользователяИБ",
{1,1,
{"ru","Пароль пользователя ИБ"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{26},0,"ПортТестируемогоКлиента",
{1,1,
{"ru","Порт тестируемого клиента"}
},
{"Pattern",
{"N",10,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{27},0,"ПутьКФормам",
{1,1,
{"ru","Путь к формам"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{28},0,"ТаймаутПоискаИнтерактивныхОбъектов",
{1,1,
{"ru","Таймаут поиска интерактивных объектов"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{29},0,"СледДействие",
{1,1,
{"ru","След действие"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{30},0,"ИмяКонфигурации",
{1,1,
{"ru","Имя конфигурации"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{31},0,"ТочностьДаты",
{1,1,
{"ru","Точность даты"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{33},0,"СтруктураГлобальныхПараметров",
{1,1,
{"ru","Структура глобальных параметров"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{34},0,"АдресДереваМакрошагов",
{1,1,
{"ru","Адрес дерева макрошагов"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{35},0,"КомпьютерИБ",
{1,1,
{"ru","Компьютер ИБ"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{36},0,"ДопПараметрыКоманднойСтроки",
{1,1,
{"ru","Доп параметры командной строки"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{37},0,"ДругаяИБ",
{1,1,
{"ru","Другая ИБ"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{38},0,"СтрокаПодключенияКИБ",
{1,1,
{"ru","Строка подключения КИБ"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{39},0,"ТипБлока",
{1,1,
{"ru","Тип блока"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,2,
{0,"Автосохранение",
{"Pattern",
{"B"}
},0},
{0,"СледДействие",
{"Pattern",
{"N",1,0,1}
},0}
},
{0,1,
{7,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СохранитьИЗакрыть",
{1,1,
{"ru","Сохранить и закрыть"}
},
{1,1,
{"ru","Сохранить и закрыть"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,23f940bf-7381-4c2b-85a1-e541ed428042},"",-1,-1,1,0,""},"СохранитьИЗакрыть",2,0,0,
{0,0},1,0}
},
{0,0},
{0,0},0,0}