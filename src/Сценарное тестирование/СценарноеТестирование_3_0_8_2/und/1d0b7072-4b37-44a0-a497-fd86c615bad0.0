{3,
{42,0,0,500,300,1,0,0,00000000-0000-0000-0000-000000000000,0,
{1,1,
{"ru","Запись теста"}
},0,0,1,0,1,0,2,0,
{5,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,"ОбработкаОповещения",3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",52dbb775-1631-4fd5-8c55-1615b5881dac,"ПередЗакрытием",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",ca21cd18-35b2-4281-b5c8-016ecc8da8ac,"ПриЗакрытии",0,0},
{10,06ee6a21-061e-47f8-81c5-92ae8b8f3b5d,239f0103-8de9-4fdf-b485-eb5531da7e51,3772996b-41f4-4c47-a5a8-ea397db424ae,3f01ed62-97f8-465b-b4f7-6517ac2bc994,5174ad3f-0569-42fd-8adf-011d8206db6c,5d41082e-9619-42ec-b96f-98b082b3a2f0,679b62d9-ff72-4329-bf3a-c0c32b311dd2,71e0226e-ebb2-4e33-8745-0a94a01bbf15,d7e9e72c-8fa7-430c-a3e9-aeadfd57dfc7,f3613d5c-20c6-46e5-b4d5-7d712ece1296},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},10,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{48,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"Сценарий",
{1,1,
{"ru","Сценарий"}
},
{1,1,
{"ru","Сценарий"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,0,
{0},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},12,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{55,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаУправленияБлокомСценария",
{1,1,
{"ru","Группа управления блоком сценария"}
},
{1,1,
{"ru","Группа управления блоком сценария"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},5,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{53,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"НовыйБлокСценария",
{1,0},1,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{607,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"НовыйБлокСценарияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{50,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ОткрытьБлокСценария",
{1,0},1,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{608,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ОткрытьБлокСценарияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{293,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ОткрытьБлокСценарияДляПрогона",
{1,0},1,
{35,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAB7UlEQVQ4ja2Sv2tT
URTHP/f1pTaNP1BfQZQQiJMgWigIQW2ECkYtODi4uDgUHOLQQXToX+Cig9WCCuoQ
zKCDiESsi6Ko6ZAKgg0P1EHRpBhMNa/v5b17HJI+fRBd6oEvZzj3e8753vNVIsJq
wlgV+380MAEqhcxx1MZzxoA3HFZESMTV1PbDsxf+2UFEKBf339fuR9HL70W7tmjX
lqD1VmpvzupXN4/e3nHiPCLSEwaAeJsymDHEWERUA1ENMFusSx5Qm1M7j13Nvqx/
KN/Qjy8flNrCw9brW+OzlULmdChh2WkhgUPQrke3003SI9n16ZEs9KdJ7dqHUgNx
aR8ZKz8pyjDMmAC+76P9JXznU0iOWxPEAGfxGgLE+iwAlOHj6RoIu6F7BR34iP+D
wPkSAoB8nvjJuwxaE7SbFQC87y/QbiMc1PmDwO/Ac0KQy/3Wks8zeOoescQepO1C
24s2MAwDJX0ovSYEpRLYdhS5HInkGVJ7Z6I+EC1AHNgQvXGp1Mm2Hc3A+OTTISaV
dCSIRjBRpoUyrd6G6cZ1oAo8uJStI6K6G+j5xtfqmPez2X3Wz9oexFHg0NwVlr59
Rr17XgklbEtSmHs0rUUktHIShv4kbrk4Wq8CPLsDSs2ntnpFOuv3tugUyALI3+or
+AW/mx1l/hAt0wAAAABJRU5ErkJggg==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{609,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ОткрытьБлокСценарияДляПрогонаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{49,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СохранитьБлокСценария",
{1,0},1,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{610,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СохранитьБлокСценарияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{54,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СохранитьБлокСценарияКак",
{1,0},1,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{611,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СохранитьБлокСценарияКакExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{606,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаУправленияБлокомСценарияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{282,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаВспомогательныхТаблиц",
{1,1,
{"ru","ВспомогательныеТаблицы"}
},
{1,1,
{"ru","Группа вспомогательных таблиц"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{57,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ШаблоныШагов",
{1,0},1,
{12,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",13,4,1,
{
{#base64:Qk02BQAAAAAAADYEAAAoAAAAEAAAABAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAAA
AAAAAAAA/wD/AACwFQDMmZkA7+/vADVRbAAAvT0AnH5+ABG65AB+YUQAI3mVAMqi
ogDn7PEAPk9fADNRbQAMns0A2traAJlmMwDJyckAxO36AJFlOADk5OQAx9npAABG
XgCFzuYAAdVGAALXaQCyiooAAGyQAKqZmQAB2l8AmNPsAISMkwAbYZwAgIyZAM3r
9QAzVnMAcIGRANnz/AC+kZEAAMleAI6IiAB8weEAAdNFAMXW5gCt5vgAvuv5AK3E
zACtucUAOFJpAALYZQDh9vwAPlFgAIyvzQAsWoEARo+/AAHccAAbZqQAp8nVAK65
xAC+ydIAyaysAILN5ADM0dcANMBFAALWaQAC12IAAdteAMbm8wCG3PIAy+bzALvp
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAACQkJBAQEBAQEIQsAAAAAAAkJCUQHGwcHBwcMAAAAAAAJCQkiLhYW
Dg4ODAAAAAAACQkJCQk5CQkJCTMAAAAAAAkJLS0tLSwSEjIfAAAAAAAvLy8vLy8N
DQ0kCwAAAAAAAAAAADQXMA8AAAAAAAAAAAAAAAAgFwwPAAAAAAAQEBMTCAgIKz0j
DwAAAAAAAhQDAwMDCENGHjUVAAAAAAICAgICAghFJSk2OAAAAAAREQICJhoGBgY7
FQAAAAAAAAAcFAMDAwMGAAAAAAAAAAAAKDwKCgoKBgAAAAAAAAA=}
},0,""},1,
{"Pattern"},"",0,0,1,
{10,
{614,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ШаблоныШаговExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{51,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ШаблоныПоУмолчанию",
{1,0},1,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",14,4,1,
{
{#base64:Qk02BQAAAAAAADYEAAAoAAAAEAAAABAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAAA
AAAAAAAA/wD/AAB/JADMmZkAAGs+AO/v7wBMTEwAt7e3AEVJTQCt98IAnH5+AGZm
ZgDKoqIAfmFEAMPU2gDa2toAjY2NAIyYowBu8JMAAOVBAI6OjgAs6WIAQUhNAOfs
8QDJyckAytbaAOTk5AAsN0MAnPW1AJlmMwC5nYEATlVcAMbGxgDi4uIAgIyZAKGj
pQBQWWEAzs7OAMu/swDDzdEAyaysANbMwgD5+fkAKThEAKqZmQCfo6UAjoiIAN7l
6ADK0dQAP0RIAOXq7QDc3+EAvpGRALKKigDbzr8A+fz8ADJCTgDK1tsA1tjbANPa
2wCEjJMAPURLAJ6ipQDW294ArLm+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAABQUFEwUFBQUFIRYAAAAAAAUFDyAGBQYGBgYaAAAAAAAFBQ8PBhMF
Dw8PGgAAAAAABQ8GBgYkCgoKCiMAAAAAAAUFBgYNDQ0YGDo7AAAAAAAFBgUGBwcH
BwceFgAAAAAAAAAAAAcmPA4AAAAAAAAAAAAAAAAVLzAOAAAAAAAcHB01KCUMLDIV
DgAAAAAAAhkEBAQEDD42PyoQAAAAAAICAgICAgwxKTg9NwAAAAAXFwICMzQJCQk5
EAAAAAAAAAArGQQEBAQJAAAAAAAAAAAALScLCwsLCQAAAAAAAAA=}
},0,""},1,
{"Pattern"},"",0,0,1,
{10,
{615,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ШаблоныПоУмолчаниюРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{613,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаВспомогательныхТаблицExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{688,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПоказатьОкноЭталоннойБазы",
{1,0},1,
{43,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{689,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ПоказатьОкноЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{78,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ОткрытьТаблицуСсылок",
{1,0},1,
{17,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{617,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ОткрытьТаблицуСсылокExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{950,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаМакрошаги",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{951,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаМакрошагиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{942,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаГлобальныеПараметры",
{1,0},1,
{62,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{943,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаГлобальныеПараметрыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{796,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПросмотрЖурналаВыполнения",
{1,0},1,
{41,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{797,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ПросмотрЖурналаВыполненияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{742,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаКнопокУправленияТК",
{1,1,
{"ru","Группа кнопок управления ТК"}
},
{1,1,
{"ru","Группа кнопок управления ТК"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{697,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ЗапуститьТестируемогоКлиента",
{1,0},1,
{39,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",14,0,1,
{
{#base64:Qk02AwAAAAAAADYAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAADEDgAAxA4AAAAA
AAAAAAAA/wD//wD//wD/rK6wgpGjaH6ZY3iWYXeVYHaSXnSRY3eSgY2cqqip/wD/
/wD//wD//wD//wD/naSta4KdapOxSsfhOtjzKuD7KuD7OtjzScXgYounY3aRm56k
/wD//wD//wD/naSvbIWjYa7JOeD7MeX/MeX/MeX/MeX/MeX/MeX/OeD6WqbBXnaS
nJ+j/wD/uLu+dYuoarPOQef/Qef/Qef/Qef/Qef/Qef/Qef/Qef/Qef/Qef/YqrE
an2WtrSzkaG0eZ25V+X7Uen/Uen/Uen/Uen/Uen/Uen/Uen/Uen/Uen/Uen/VuT7
apCskZqmepKvcs7kYev/EDjpBRDpYev/Yev/I2joAADpAADpAADpAADpAADpMnn1
UcT8cYOcepKweuL1ce3/CzjpBBHpce3/HmvpHmnpBRHpBRHpBRHpBBDpAxDpSKL4
X9L8ZHmWfJSyg+z8ge//DzzqBRHpge//AADpAwrpge//ge//ge//ge//ge//ge//
g+z8ZXyYfpa0ku39kfD/GUHrBxPqkfD/AADpBArpkfD/kfD/AADpGUDrkfD/kfD/
ku39Z32bgZi2oOr4JEXtKUbtDRTqofL/ToHxTH/xDBTqDBTqUIDxLEbtofL/ofL/
oOv4an+dhZy4o9vrsfT/DxXqDxXqsfT/sfT/aIfzAADpAADpZYfysfT/sfT/sfT/
pN3tfI6mobDDja7HvvP9wfb/wfb/wfb/wfb/wfb/wfb/wfb/wfb/wfb/wfb/vvP9
gaK7o6y4zs/RiKC8pczd0fj/0fj/0fj/0fj/0fj/0fj/0fj/0fj/0fj/0fj/ncPV
f5KrzczL/wD/vsXOiKG+q87e3Pj94fr/4fr/4fr/4fr/4fr/4fr/3Pj9pcjZfJOv
wsTH/wD//wD//wD/wcfQiqC9lLPKyeTu3/b86/v+6/v+3/b7x+LsjKrChJiyxMfL
/wD//wD//wD//wD//wD//wD/qbfIjKK9g5u5gZm4gJi1f5e0iJ24rbjF1NPU/wD/
/wD//wD/}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{698,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ЗапуститьТестируемогоКлиентаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{874,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ЗавершитьРаботуТестируемогоПриложения",
{1,0},1,
{45,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{875,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ЗавершитьРаботуТестируемогоПриложенияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{752,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"НачатьЗавершитьЗапись",
{1,0},1,
{46,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{753,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"НачатьЗавершитьЗаписьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{743,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаКнопокУправленияТКРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{283,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаРаботыСоСценарием",
{1,1,
{"ru","Группа работы со сценарием"}
},
{1,1,
{"ru","Группа работы со сценарием"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},0,1,0,1,
{10,
{619,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаРаботыСоСценариемExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{936,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаДобавитьШагиИзСценария",
{1,0},1,
{61,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{937,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаДобавитьШагиИзСценарияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{938,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаРазное",
{1,1,
{"ru","Группа разное"}
},
{1,1,
{"ru","Группа разное"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{89,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПронумероватьШаги",
{1,0},1,
{19,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAnElEQVQ4jaWSUQ6C
MBBEZ4hnMXIvjyFfHkPuZeQyzw8pgmxbhE022TSZaftmBQiQ9CDN/3QjSXaPdlZj
98DVuw2OiCV9vhCVuxZ3bf1rEUTdLuEcdZXyIYOauGiQFUujrGBQFP/Mp4m6B+A8
RTpPgPvTI/F15N8UXttXefaS7B6kV2Wyt2ykwiJlHFeGBhY3JQ7R2cIk8Sgx2MLl
DaSdlHmCCHOKAAAAAElFTkSuQmCC}
},0,""},0,
{"Pattern"},"",0,0,1,
{10,
{620,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ПронумероватьШагиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{279,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"НастройкаСценария",
{1,0},1,
{23,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAB1klEQVQ4jY2STWsT
URSGn6T5ICRIIJNFCTqQjXSRzSCtujBOVbrQlYLgKruA/yD/Q3DhIkFcBQSRrgIl
dBcimJQo1YhflCgh3M6MxWbqTNLjQipOEiEH7uK+973Pufecg4gwu7Ybu/Lo8RM5
29dqNdlu7Moib5iZaLZ6cqt4OaBduGiwZV6l2erJrD8AaLZ6sl7IE4lEAqaDfodw
OMx6IT8HCQD299qMx2OUUnMvUEoxmUzY32sHzgKpTkVQShGLxcjrOcrlssTjcUzT
xF09h23bnIr8HzCdTkkkEgyHQwqFAqZpAqCUYjAYkM1m+XnkBAAh+YfYbL+TnZfP
KJVKKKXwPO/PP8Nhcrkc9XqdKzfvsrmxFlpYg82NtdD12w+o1+tkMpm/ejabpVqt
cunancBlgLm+igivPhxKpVKRbrcr3W5XKpWKvP7kLDcHAN++9tF1Hd/38X0fXdf5
fvBxkXUx4Ev/LYZh4LourutiGAaf379ZHuB5J0SjUSzLwrIsotEonneyPOD4yCaV
SuE4Do7jkEwmOZ5p31lEFonTyQRN07BtGwBN0/B/ucsDRqMhnU6HYrFIOp2m0Whw
qEbLA7buP+T5i6f8sEasrETQVs9z4155IeA3JkkIiowSROcAAAAASUVORK5CYII=
}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{622,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"НастройкаСценарияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{939,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаРазноеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{1127,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаКонтрольныйПример",
{1,0},1,
{63,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,0,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{1128,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаКонтрольныйПримерРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{605,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СценарийExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{44,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДобавитьГрупповойШаг",
{1,0},1,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{624,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДобавитьГрупповойШагExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{67,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДобавитьШаг",
{1,0},1,
{1,b0016a68-ec64-4e6d-b905-c71fd62efc4c},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{625,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДобавитьШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{68,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СкопироватьШаг",
{1,0},1,
{1,0ae4bea5-23be-42a7-b69e-97b11b29c453},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{626,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СкопироватьШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{69,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ИзменитьШаг",
{1,0},1,
{51,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},0,
{"Pattern"},"",0,0,1,
{10,
{627,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ИзменитьШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{70,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"УдалитьШаг",
{1,0},1,
{1,8d772f97-c0ef-47c0-9cb0-efea28c61341},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{628,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"УдалитьШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{73,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаКнопокПеремщение",
{1,1,
{"ru","Группа кнопок перемщение"}
},
{1,1,
{"ru","Группа кнопок перемщение"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},6,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{878,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"РазвернутьВсеУзлы",
{1,0},1,
{48,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{879,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"РазвернутьВсеУзлыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{876,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СвернутьВсеУзлы",
{1,0},1,
{47,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{877,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СвернутьВсеУзлыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{71,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПереместитьУзелВверх",
{1,0},1,
{1,37740564-9e86-44a0-bea9-3f485a5a3f91},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{630,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ПереместитьУзелВверхРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{72,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПереместитьУзелВниз",
{1,0},1,
{1,fa51b106-eae6-44c7-8054-76cbb3100603},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{631,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ПереместитьУзелВнизРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{47,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПовыситьУровеньУзла",
{1,0},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{632,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ПовыситьУровеньУзлаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{46,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПонизитьУровеньУзла",
{1,0},1,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{633,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ПонизитьУровеньУзлаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{629,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаКнопокПеремщениеExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{284,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"Отладка",
{1,1,
{"ru","Отладка"}
},
{1,1,
{"ru","Отладка"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{286,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ВыполнитьСценарий",
{1,0},1,
{33,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",13,13,1,
{
{#base64:Qk06AwAAAAAAADoAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAPBI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI
//BI//BI//BI//BI//BI//BI//+1kP+1kP+1kP+1kP+1kP+1kNkAANkAAP+1kP+1
kPBI//BI//BI//BI//BI//BI//+1kP///////////////////9kAANkAANlGANlG
APBI//BI//BI//BI//BI//BI//+1kP///////////////////9kAANkAANlGANlG
ANlGANlGAPBI//BI//BI//BI//+1kP///////////////////9kAANkAANlGANlG
ANlGANlGANlGAPBI//BI//BI//+1kP///////////////////9kAANkAANlGANlG
ANlGANlGAPBI//BI//BI//BI//+1kP///////////////////9kAANkAANlGANlG
APBI//BI//BI//BI//BI//BI//+1kP///////////////////9kAANkAAP////+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////////////////////+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////////////////////+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP+1kP+1kP+1kP+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP///////////8Dc
wPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP///////8DcwMDc
wPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP///8DcwMDcwMDc
wPBI//BI//BI//BI//BI//BI//+1kP+1kP+1kP+1kP+1kP+1kMDcwMDcwMDcwP+1
kPBI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI
//BI//BI//BI/w==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{635,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ВыполнитьСценарийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{285,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ВыполнитьОтдельныйШаг",
{1,0},1,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",14,13,1,
{
{#base64:Qk06AwAAAAAAADoAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAPBI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI
//BI//BI//BI//BI//BI//BI//+1kP+1kNlGANlGAP+1kP+1kNkAANkAAP+1kP+1
kPBI//BI//BI//BI//BI//BI//+1kP///9lGANlGAP///////9kAANkAANlGANlG
APBI//BI//BI//BI//BI//BI//+1kP///9lGANlGAP///////9kAANkAANlGANlG
ANlGANlGAPBI//BI//BI//BI//+1kP///9lGANlGAP///////9kAANkAANlGANlG
ANlGANlGANlGAPBI//BI//BI//+1kP///9lGANlGAP///////9kAANkAANlGANlG
ANlGANlGAPBI//BI//BI//BI//+1kP///9lGANlGAP///////9kAANkAANlGANlG
APBI//BI//BI//BI//BI//BI//+1kP///9lGANlGAP///////9kAANkAAP////+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////////////////////+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////////////////////+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP+1kP+1kP+1kP+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP///////////8Dc
wPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP///////8DcwMDc
wPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP///8DcwMDcwMDc
wPBI//BI//BI//BI//BI//BI//+1kP+1kP+1kP+1kP+1kP+1kMDcwMDcwMDcwP+1
kPBI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI
//BI//BI//BI/w==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{636,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ВыполнитьОтдельныйШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{922,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ОстановитьВыполнение",
{1,0},0,
{20,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{923,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ОстановитьВыполнениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{634,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ОтладкаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{760,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ФормаГруппаОтладка",
{1,1,
{"ru","Отладка"}
},
{1,1,
{"ru","Форма группа отладка"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,0,
{0},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},0,1,0,1,
{10,
{761,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаГруппаОтладкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{924,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаСправка",
{1,0},1,
{0,39bb0fe9-771d-4dd5-8a6e-2d16984523af},
{0},3,0,0,0,2,1,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{925,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаСправкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{737,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаЭталоннаяБазаСценарий",
{1,1,
{"ru","Эталонная база и сценарий"}
},
{1,1,
{"ru","Группа эталонная база сценарий"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{1109,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"СвертываемаяГруппаЭталоннойБазы",
{1,1,
{"ru","Свертываемая группа эталонной базы"}
},
{1,1,
{"ru","Свертываемая группа эталонной базы"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{93,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаЭталоннойБазы",
{1,1,
{"ru","Панель эталонной базы"}
},
{1,1,
{"ru","Группа эталонной базы"}
},0,1,0,50,0,1,1,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,1,0,1,
{1,0},0,0,3,3,2,0,1,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{213,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ТипМетаданныхЭталоннойБазы",1,0,
{1,0},
{1,0},
{1,
{22}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,7,"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Справочники"},9b6abf8b-0173-48e5-b0a0-83b21fcf63c5,00000000-0000-0000-0000-000000000000,
{1,1,
{"ru","Справочники"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Документы"},9b6abf8b-0173-48e5-b0a0-83b21fcf63c5,00000000-0000-0000-0000-000000000000,
{1,1,
{"ru","Документы"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","РегистрыСведений"},9b6abf8b-0173-48e5-b0a0-83b21fcf63c5,00000000-0000-0000-0000-000000000000,
{1,1,
{"ru","Регистры сведений"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","ПланыВидовХарактеристик"},9b6abf8b-0173-48e5-b0a0-83b21fcf63c5,00000000-0000-0000-0000-000000000000,
{1,1,
{"ru","Планы видов характеристик"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","ПланыВидовРасчета"},9b6abf8b-0173-48e5-b0a0-83b21fcf63c5,00000000-0000-0000-0000-000000000000,
{1,1,
{"ru","Планы видов расчета"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","БизнесПроцессы"},9b6abf8b-0173-48e5-b0a0-83b21fcf63c5,00000000-0000-0000-0000-000000000000,
{1,1,
{"ru","Бизнес-процессы"}
}
}
},"",
{"#",0e704aa2-07bd-48b9-8223-a0212c4d5fc2,
{0,1,
{"S","Задачи"},9b6abf8b-0173-48e5-b0a0-83b21fcf63c5,00000000-0000-0000-0000-000000000000,
{1,1,
{"ru","Задачи"}
}
}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
},
{0,
{4,0,
{0},"",-1,-1,1,0,""}
}
},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ТипМетаданныхЭталоннойБазыПриИзменении",0,0},1,
{21,
{214,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ТипМетаданныхЭталоннойБазыКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{493,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ТипМетаданныхЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{904,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"СтраницыЭталоннойБазы",
{1,1,
{"ru","Страницы эталонной базы"}
},
{1,1,
{"ru","Страницы эталонной базы"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0,
{0,0,0}
},7,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{906,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"СтраницаСправочников",
{1,1,
{"ru","Страница справочников"}
},
{1,1,
{"ru","Страница справочников"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{49,
{94,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоСправочников",0,0,1,
{1,0},
{1,0},
{1,
{15}
},0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,1,2,2,1,1,0,0,0,0,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,
{3,1282f000-23b6-4887-87f4-9e8e79db3d32,"ДеревоСправочниковВыбор",2391e7b8-7235-45d7-ab7e-6ff3dc086396,"ДеревоСправочниковПередНачаломДобавления",2ccfdec5-583d-4eca-8319-e55de492665a,"ДеревоСправочниковПередУдалением",0,0},
{10,01833a5a-6553-4c49-b445-095018107bb5,05468165-f954-45a5-84f2-6641c51f9f23,0ae4bea5-23be-42a7-b69e-97b11b29c453,0d0249a4-2b2f-4fc0-a66f-b36f9494b3cc,37740564-9e86-44a0-bea9-3f485a5a3f91,8d772f97-c0ef-47c0-9cb0-efea28c61341,9ef79140-3de6-436a-8dda-610bb963f5db,b0016a68-ec64-4e6d-b905-c71fd62efc4c,b41f5bbc-ba5d-4888-8cd1-db246a371418,fa51b106-eae6-44c7-8054-76cbb3100603},1,
{21,
{95,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоСправочниковКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{21,
{96,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоСправочниковКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},6,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{224,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ДействияСОтмеченными",
{1,1,
{"ru","Действия с отмеченными"}
},
{1,1,
{"ru","Действия с отмеченными"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,3,
{0},"",-1,-1,0,
{
{#base64:AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAABAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICA
gAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AADMmDIACAgIABcXFwAnJycANzc3AEdH
RwBXV1cAZ2dnAHd3dwCHh4cAl5eXAKenpwC3t7cAx8fHAP///wDn5+cAqqqqAAAA
TAAAAH8AAACyAAAA5QAZGf8ATEz+AH9//wCysv8AABBMAAAbfwAAJrIAADHlABlK
/wBMcv4Af5r/ALLC/wAAIEwAADZ/AABMsgAAYuUAGXv/AEyZ/gB/tv8AstP/AAAx
TAAAUX8AAHKyAACT5QAZrf8ATL/+AH/R/wCy4/8AAEFMAABtfwAAmbIAAMTlABne
/wBM5f4Af+z/ALL0/wAATEcAAH92AACypQAA5dUAGf/uAEz+8gB///UAsv/5AABM
NgAAf1sAALJ/AADlowAZ/70ATP7MAH//2gCy/+kAAEwmAAB/PwAAslkAAOVyABn/
jABM/qUAf/+/ALL/2AAATBUAAH8kAACyMwAA5UEAGf9bAEz+fwB//6MAsv/IAABM
BQAAfwkAALIMAADlEAAZ/ykATP5ZAH//iACy/7cACkwAABJ/AAAZsgAAIOUAADr/
GQBm/kwAkf9/AL3/sgAbTAAALX8AAD+yAABR5QAAa/8ZAIz+TACt/38Azf+yACtM
AABIfwAAZbIAAIPlAACc/xkAsv5MAMj/fwDe/7IAPEwAAGR/AACMsgAAtOUAAM3/
GQDY/kwA4/9/AO7/sgBMTAAAf38AALKyAAD/ywAA//8ZAP7+TAD//38A//+yAEw8
AAB/ZAAAsowAAOW0AAD/zRkA/thMAP/jfwD/7rIATCsAAH9IAACyZgAA5YMAAP+c
GQD+skwA/8h/AP/esgBMGwAAfy0AALI/AADlUQAA/2sZAP6MTAD/rX8A/82yAEwK
AAB/EgAAshkAAOUgAAD/OhkA/mVMAP+RfwD/vbIATAAFAH8ACQCyAAwA5QAQAP8Z
KQD+TFkA/3+IAP+ytwBMABUAfwAkALIAMgDlAEEA/xlbAP5MfwD/f6MA/7LIAEwA
JgB/AD8AsgBZAOUAcgD/GYwA/kylAP9/vwD/stgATAA2AH8AWwCyAH8A5QCjAP8Z
vQD+TMwA/3/aAP+y6QBMAEcAfwB2ALIApQDlANUA/xnuAP5M8gD/f/UA/7L5AEEA
TABtAH8AmQCyAMQA5QDeGf8A5Uz+AOx//wD0sv8AMQBMAFEAfwByALIAkwDlAK0Z
/wC/TP4A0X//AOOy/wAgAEwANgB/AEwAsgBiAOUAexn/AJlM/gC2f/8A07L/ABAA
TAAbAH8AJgCyADEA5QBKGf8Ackz+AJp//wDCsv8AAAAAAAAAAAAAAAAAAAAAAAAA
HWEdDw8PDw8PDw8PDwAAHWFhYR0dHR0dHR0dHQ8AHWFhYWFZHZOTk5OTkx0PAB1h
YR1hYWEdHR0dHR0dDwAdYR0dHWFhYR2Tk5OTHQ8ADx0PHQ8dYWEdHR0dHR0PAA8d
Dx0PHR1ZHZOTk5MdDwAPHQ8dDx0dHR0dHR0dHQ8ADx0PHQ8dHR0dHR0dHR0PAA8d
Dx0PHR0dHR0dDw8PDwAPHQ8dDx0dHR0dHQ8dHQ8ADx0PHQ8dHR0dHR0PHQ8AAA8d
Dx0PDw8PDw8PDw8AAAAPHaWlpaWlpaWlpQAAAAAApqampqampqamAAAAAAAAAP//
AADAAQAAgAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAD
AAAABwAAAB8AAAB/AAA=}
},0,""},
{0},2,1,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{225,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковУстановитьФлажки",
{1,0},1,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{495,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковУстановитьФлажкиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{227,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковСнятьФлажки",
{1,0},1,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{496,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковСнятьФлажкиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{228,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковЗаписатьОтмеченныеВСценарий",
{1,0},1,
{28,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:Qk02BQAAAAAAADYEAAAoAAAAEAAAABAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAQAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/
AAAA//8A/wAAAP8A/wD//wAA6ZIAAAgICAAXFxcAJycnADc3NwBHR0cAV1dXAGdn
ZwB3d3cAh4eHAJeXlwCnp6cAt7e3AMfHxwDX19cA5+fnAPf39wAAAEwAAAB/AAAA
sgAAAOUAGRn/AExM/gB/f/8AsrL/AAAQTAAAG38AACayAAAx5QAZSv8ATHL+AH+a
/wCywv8AACBMAAA2fwAATLIAAGLlABl7/wBMmf4Af7b/ALLT/wAAMUwAAFF/AABy
sgAAk+UAGa3/AEy//gB/0f8AsuP/AABBTAAAbX8AAJmyAADE5QAZ3v8ATOX+AH/s
/wCy9P8AAExHAAB/dgAAsqUAAOXVABn/7gBM/vIAf//1ALL/+QAATDYAAH9bAACy
fwAA5aMAGf+9AEz+zAB//9oAsv/pAABMJgAAfz8AALJZAADlcgAZ/4wATP6lAH//
vwCy/9gAAEwVAAB/JAAAsjMAAOVBABn/WwBM/n8Af/+jALL/yAAATAUAAH8JAACy
DAAA5RAAGf8pAEz+WQB//4gAsv+3AApMAAASfwAAGbIAACDlAAA6/xkAZv5MAJH/
fwC9/7IAG0wAAC1/AAA/sgAAUeUAAGv/GQCM/kwArf9/AM3/sgArTAAASH8AAGWy
AACD5QAAnP8ZALL+TADI/38A3v+yADxMAABkfwAAjLIAALTlAADN/xkA2P5MAOP/
fwDu/7IATEwAAH9/AACysgAA5eUAAP//GQD+/kwA//9/AP//sgBMPAAAf2QAALKM
AADltAAA/80ZAP7YTAD/438A/+6yAEwrAAB/SAAAsmYAAOWDAAD/nBkA/rJMAP/I
fwD/3rIATBsAAH8tAACyPwAA5VEAAP9rGQD+jEwA/61/AP/NsgBMCgAAfxIAALIZ
AADlIAAA/zoZAP5lTAD/kX8A/72yAEwABQB/AAkAsgAMAOUAEAD/GSkA/kxZAP9/
iAD/srcATAAVAH8AJACyADIA5QBBAP8ZWwD+TH8A/3+jAP+yyABMACYAfwA/ALIA
WQDlAHIA/xmMAP5MpQD/f78A/7LYAEwANgB/AFsAsgB/AOUAowD/Gb0A/kzMAP9/
2gD/sukATABHAH8AdgCyAKUA5QDVAP8Z7gD+TPIA/3/1AP+y+QBBAEwAbQB/AJkA
sgDEAOUA3hn/AOVM/gDsf/8A9LL/ADEATABRAH8AcgCyAJMA5QCtGf8Av0z+ANF/
/wDjsv8AIABMADYAfwBMALIAYgDlAHsZ/wCZTP4Atn//ANOy/wAQAEwAGwB/ACYA
sgAxAOUAShn/AHJM/gCaf/8AwrL/AB8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx+xsR8fHx+xsR8fHx8fHx8fsQ+xHx8fsQ+xHx8fHx8fH7EPD7EfH7EP
D7EfHx8fHx8fsQ8PsR8fsQ8PsR8fHx8fHx+xDw+xHx+xDw+xHx8fHx8fH7EPD7Ef
H7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EP
D7EfHx8fHx+xD7EfHx+xD7EfHx8fHx8fsbEfHx8fsbEfHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{497,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковЗаписатьОтмеченныеВСценарийExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{494,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДействияСОтмеченнымиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{231,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковОбновитьТаблицуЭталоннойБазы",
{1,0},1,
{31,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{502,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковОбновитьТаблицуЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{658,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковВыбратьЭлементДереваЭталоннойБазы",
{1,0},1,
{30,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{659,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковВыбратьЭлементДереваЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{672,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковПометитьНаУдалениеЭлементЭталоннойБазы",
{1,0},1,
{42,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{673,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковПометитьНаУдалениеЭлементЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{217,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковНастроитьОтображениеЭталоннойБазы",
{1,0},1,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",4,13,1,
{
{#base64:Qk06AwAAAAAAADoAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAAAAAAALu7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u2tra7u7u7u7u7u7u7u7u7u7u2bMzGbMzGaZmTNmZjU1
Nbu7u7u7u7u7u7u7u7u7u4aGhmtra7u7u7u7u7u7u2bMzGaZmWaZmWaZmWaZmWaZ
mTU1Nbu7u7u7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmWaZmWaZmWaZmWaZ
mWaZmTU1Nbu7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmTNmZmaZmWbMzGaZ
mWaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u7u7u2bMzDNmZru7u7u7u7u7u2bM
zDNmZru7u7u7u7u7u4aGhru7u7u7u4aGhmtra7u7u7u7u2aZmbu7u7u7u7u7u2aZ
mbu7u7u7u7u7u4aGhru7u////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u7u7u////////////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u4aGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhmtra7u7u7u7u7u7u7u7
u7u7u7u7u7u7uw==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{500,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковНастроитьОтображениеЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{229,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковЗаписатьВСценарий",
{1,0},1,
{29,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",14,0,1,
{
{#base64:Qk02AwAAAAAAADYAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAA////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////////////eEsA6ZIA6ZIAeEsA
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{501,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковЗаписатьВСценарийExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{109,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},3,"ДеревоСправочниковОтметка",0,0,
{1,1,
{"ru"," "}
},
{1,1,
{"ru","Отметка"}
},
{2,
{15},
{7}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,1,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДеревоСправочниковОтметкаПриИзменении",0,0},1,
{21,
{110,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоСправочниковОтметкаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{506,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковОтметкаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{97,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоСправочниковЭлемент",1,0,
{1,0},
{1,1,
{"ru","Наименование объектов эталонной базы"}
},
{2,
{15},
{1}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{98,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоСправочниковЭлементКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{504,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковЭлементExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{99,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоСправочниковАналитика",1,0,
{1,0},
{1,1,
{"ru","Дополнительные характеристики объектов эталонной базы"}
},
{2,
{15},
{2}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{100,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоСправочниковАналитикаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{505,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковАналитикаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},2,2,1,0,
{"Pattern"},"","",0,2,0,1,
{10,
{503,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоСправочниковExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,1,1,1,
{4,
{1034,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоСправочниковСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0},1,
{21,
{1035,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоСправочниковСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1036,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоСправочниковСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{94,0},0,3,3},1,
{4,
{1037,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДеревоСправочниковСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,0,0},1,0,0},1,
{21,
{1038,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоСправочниковСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1039,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоСправочниковСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{94,1},0,3,3},1,
{4,
{1040,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоСправочниковУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,2},1,
{21,
{1041,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоСправочниковУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1042,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоСправочниковУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{94,2},0,3,3},0,1,0,0,1,0,3,3},1,0,1,
{10,
{907,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СтраницаСправочниковРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{908,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"СтраницаДокументов",
{1,1,
{"ru","Страница документов"}
},
{1,1,
{"ru","Страница справочников"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{49,
{111,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоДокументов",0,0,1,
{1,0},
{1,0},
{1,
{16}
},0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,0,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,
{3,1282f000-23b6-4887-87f4-9e8e79db3d32,"ДеревоСправочниковВыбор",2391e7b8-7235-45d7-ab7e-6ff3dc086396,"ДеревоСправочниковПередНачаломДобавления",2ccfdec5-583d-4eca-8319-e55de492665a,"ДеревоСправочниковПередУдалением",0,0},
{11,01833a5a-6553-4c49-b445-095018107bb5,05468165-f954-45a5-84f2-6641c51f9f23,0ae4bea5-23be-42a7-b69e-97b11b29c453,0d0249a4-2b2f-4fc0-a66f-b36f9494b3cc,37740564-9e86-44a0-bea9-3f485a5a3f91,88078230-1f6b-415f-99e4-ad2ff73810cf,8d772f97-c0ef-47c0-9cb0-efea28c61341,9ef79140-3de6-436a-8dda-610bb963f5db,b0016a68-ec64-4e6d-b905-c71fd62efc4c,b41f5bbc-ba5d-4888-8cd1-db246a371418,fa51b106-eae6-44c7-8054-76cbb3100603},1,
{21,
{112,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоДокументовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{21,
{113,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоДокументовКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},6,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{232,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ДеревоДокументовДействияСОтмеченными",
{1,1,
{"ru","Действия с отмеченными"}
},
{1,1,
{"ru","Действия с отмеченными"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,3,
{0},"",-1,-1,0,
{
{#base64:AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAABAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICA
gAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AADMmDIACAgIABcXFwAnJycANzc3AEdH
RwBXV1cAZ2dnAHd3dwCHh4cAl5eXAKenpwC3t7cAx8fHAP///wDn5+cAqqqqAAAA
TAAAAH8AAACyAAAA5QAZGf8ATEz+AH9//wCysv8AABBMAAAbfwAAJrIAADHlABlK
/wBMcv4Af5r/ALLC/wAAIEwAADZ/AABMsgAAYuUAGXv/AEyZ/gB/tv8AstP/AAAx
TAAAUX8AAHKyAACT5QAZrf8ATL/+AH/R/wCy4/8AAEFMAABtfwAAmbIAAMTlABne
/wBM5f4Af+z/ALL0/wAATEcAAH92AACypQAA5dUAGf/uAEz+8gB///UAsv/5AABM
NgAAf1sAALJ/AADlowAZ/70ATP7MAH//2gCy/+kAAEwmAAB/PwAAslkAAOVyABn/
jABM/qUAf/+/ALL/2AAATBUAAH8kAACyMwAA5UEAGf9bAEz+fwB//6MAsv/IAABM
BQAAfwkAALIMAADlEAAZ/ykATP5ZAH//iACy/7cACkwAABJ/AAAZsgAAIOUAADr/
GQBm/kwAkf9/AL3/sgAbTAAALX8AAD+yAABR5QAAa/8ZAIz+TACt/38Azf+yACtM
AABIfwAAZbIAAIPlAACc/xkAsv5MAMj/fwDe/7IAPEwAAGR/AACMsgAAtOUAAM3/
GQDY/kwA4/9/AO7/sgBMTAAAf38AALKyAAD/ywAA//8ZAP7+TAD//38A//+yAEw8
AAB/ZAAAsowAAOW0AAD/zRkA/thMAP/jfwD/7rIATCsAAH9IAACyZgAA5YMAAP+c
GQD+skwA/8h/AP/esgBMGwAAfy0AALI/AADlUQAA/2sZAP6MTAD/rX8A/82yAEwK
AAB/EgAAshkAAOUgAAD/OhkA/mVMAP+RfwD/vbIATAAFAH8ACQCyAAwA5QAQAP8Z
KQD+TFkA/3+IAP+ytwBMABUAfwAkALIAMgDlAEEA/xlbAP5MfwD/f6MA/7LIAEwA
JgB/AD8AsgBZAOUAcgD/GYwA/kylAP9/vwD/stgATAA2AH8AWwCyAH8A5QCjAP8Z
vQD+TMwA/3/aAP+y6QBMAEcAfwB2ALIApQDlANUA/xnuAP5M8gD/f/UA/7L5AEEA
TABtAH8AmQCyAMQA5QDeGf8A5Uz+AOx//wD0sv8AMQBMAFEAfwByALIAkwDlAK0Z
/wC/TP4A0X//AOOy/wAgAEwANgB/AEwAsgBiAOUAexn/AJlM/gC2f/8A07L/ABAA
TAAbAH8AJgCyADEA5QBKGf8Ackz+AJp//wDCsv8AAAAAAAAAAAAAAAAAAAAAAAAA
HWEdDw8PDw8PDw8PDwAAHWFhYR0dHR0dHR0dHQ8AHWFhYWFZHZOTk5OTkx0PAB1h
YR1hYWEdHR0dHR0dDwAdYR0dHWFhYR2Tk5OTHQ8ADx0PHQ8dYWEdHR0dHR0PAA8d
Dx0PHR1ZHZOTk5MdDwAPHQ8dDx0dHR0dHR0dHQ8ADx0PHQ8dHR0dHR0dHR0PAA8d
Dx0PHR0dHR0dDw8PDwAPHQ8dDx0dHR0dHQ8dHQ8ADx0PHQ8dHR0dHR0PHQ8AAA8d
Dx0PDw8PDw8PDw8AAAAPHaWlpaWlpaWlpQAAAAAApqampqampqamAAAAAAAAAP//
AADAAQAAgAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAD
AAAABwAAAB8AAAB/AAA=}
},0,""},
{0},2,1,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{233,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовУстановитьФлажки",
{1,0},1,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{508,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовУстановитьФлажкиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{234,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовСнятьФлажки",
{1,0},1,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{509,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовСнятьФлажкиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{235,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьОтмеченныеВСценарий",
{1,0},1,
{28,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:Qk02BQAAAAAAADYEAAAoAAAAEAAAABAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAQAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/
AAAA//8A/wAAAP8A/wD//wAA6ZIAAAgICAAXFxcAJycnADc3NwBHR0cAV1dXAGdn
ZwB3d3cAh4eHAJeXlwCnp6cAt7e3AMfHxwDX19cA5+fnAPf39wAAAEwAAAB/AAAA
sgAAAOUAGRn/AExM/gB/f/8AsrL/AAAQTAAAG38AACayAAAx5QAZSv8ATHL+AH+a
/wCywv8AACBMAAA2fwAATLIAAGLlABl7/wBMmf4Af7b/ALLT/wAAMUwAAFF/AABy
sgAAk+UAGa3/AEy//gB/0f8AsuP/AABBTAAAbX8AAJmyAADE5QAZ3v8ATOX+AH/s
/wCy9P8AAExHAAB/dgAAsqUAAOXVABn/7gBM/vIAf//1ALL/+QAATDYAAH9bAACy
fwAA5aMAGf+9AEz+zAB//9oAsv/pAABMJgAAfz8AALJZAADlcgAZ/4wATP6lAH//
vwCy/9gAAEwVAAB/JAAAsjMAAOVBABn/WwBM/n8Af/+jALL/yAAATAUAAH8JAACy
DAAA5RAAGf8pAEz+WQB//4gAsv+3AApMAAASfwAAGbIAACDlAAA6/xkAZv5MAJH/
fwC9/7IAG0wAAC1/AAA/sgAAUeUAAGv/GQCM/kwArf9/AM3/sgArTAAASH8AAGWy
AACD5QAAnP8ZALL+TADI/38A3v+yADxMAABkfwAAjLIAALTlAADN/xkA2P5MAOP/
fwDu/7IATEwAAH9/AACysgAA5eUAAP//GQD+/kwA//9/AP//sgBMPAAAf2QAALKM
AADltAAA/80ZAP7YTAD/438A/+6yAEwrAAB/SAAAsmYAAOWDAAD/nBkA/rJMAP/I
fwD/3rIATBsAAH8tAACyPwAA5VEAAP9rGQD+jEwA/61/AP/NsgBMCgAAfxIAALIZ
AADlIAAA/zoZAP5lTAD/kX8A/72yAEwABQB/AAkAsgAMAOUAEAD/GSkA/kxZAP9/
iAD/srcATAAVAH8AJACyADIA5QBBAP8ZWwD+TH8A/3+jAP+yyABMACYAfwA/ALIA
WQDlAHIA/xmMAP5MpQD/f78A/7LYAEwANgB/AFsAsgB/AOUAowD/Gb0A/kzMAP9/
2gD/sukATABHAH8AdgCyAKUA5QDVAP8Z7gD+TPIA/3/1AP+y+QBBAEwAbQB/AJkA
sgDEAOUA3hn/AOVM/gDsf/8A9LL/ADEATABRAH8AcgCyAJMA5QCtGf8Av0z+ANF/
/wDjsv8AIABMADYAfwBMALIAYgDlAHsZ/wCZTP4Atn//ANOy/wAQAEwAGwB/ACYA
sgAxAOUAShn/AHJM/gCaf/8AwrL/AB8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx+xsR8fHx+xsR8fHx8fHx8fsQ+xHx8fsQ+xHx8fHx8fH7EPD7EfH7EP
D7EfHx8fHx8fsQ8PsR8fsQ8PsR8fHx8fHx+xDw+xHx+xDw+xHx8fHx8fH7EPD7Ef
H7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EP
D7EfHx8fHx+xD7EfHx+xD7EfHx8fHx8fsbEfHx8fsbEfHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{510,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьОтмеченныеВСценарийExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{507,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовДействияСОтмеченнымиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{238,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовОбновитьТаблицуЭталоннойБазы",
{1,0},1,
{31,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{514,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовОбновитьТаблицуЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{660,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовВыбратьЭлементДереваЭталоннойБазы",
{1,0},1,
{30,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{661,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовВыбратьЭлементДереваЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{674,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовПометитьНаУдалениеЭлементЭталоннойБазы",
{1,0},1,
{42,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{675,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовПометитьНаУдалениеЭлементЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{218,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовНастроитьОтображениеЭталоннойБазы",
{1,0},1,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",6,12,1,
{
{#base64:Qk06AwAAAAAAADoAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAAAAAAALu7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u2tra7u7u7u7u7u7u7u7u7u7u2bMzGbMzGaZmTNmZjU1
Nbu7u7u7u7u7u7u7u7u7u4aGhmtra7u7u7u7u7u7u2bMzGaZmWaZmWaZmWaZmWaZ
mTU1Nbu7u7u7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmWaZmWaZmWaZmWaZ
mWaZmTU1Nbu7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmTNmZmaZmWbMzGaZ
mWaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u7u7u2bMzDNmZru7u7u7u7u7u2bM
zDNmZru7u7u7u7u7u4aGhru7u7u7u4aGhmtra7u7u7u7u2aZmbu7u7u7u7u7u2aZ
mbu7u7u7u7u7u4aGhru7u////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u7u7u////////////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u4aGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhmtra7u7u7u7u7u7u7u7
u7u7u7u7u7u7uw==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{512,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовНастроитьОтображениеЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{237,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьВСценарий",
{1,0},1,
{29,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",14,0,1,
{
{#base64:Qk02AwAAAAAAADYAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAA////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////////////eEsA6ZIA6ZIAeEsA
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{513,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьВСценарийExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{126,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},3,"ДеревоДокументовОтметка",0,0,
{1,0},
{1,1,
{"ru","Отметка"}
},
{2,
{16},
{7}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДеревоСправочниковОтметкаПриИзменении",0,0},1,
{21,
{127,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоДокументовОтметкаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{518,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовОтметкаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{114,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоДокументовЭлемент",1,0,
{1,0},
{1,0},
{2,
{16},
{1}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{115,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоДокументовЭлементКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{516,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЭлементExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{116,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоДокументовАналитика",1,0,
{1,0},
{1,0},
{2,
{16},
{2}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{117,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоДокументовАналитикаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{517,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовАналитикаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},2,2,1,0,
{"Pattern"},"","",0,2,0,1,
{10,
{515,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,1,1,1,
{4,
{1043,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоДокументовСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0},1,
{21,
{1044,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоДокументовСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1045,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоДокументовСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{111,0},0,3,3},1,
{4,
{1046,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДеревоДокументовСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,0,0},1,0,0},1,
{21,
{1047,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоДокументовСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1048,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоДокументовСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{111,1},0,3,3},1,
{4,
{1049,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоДокументовУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,2},1,
{21,
{1050,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоДокументовУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1051,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоДокументовУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{111,2},0,3,3},0,1,0,0,1,0,3,3},1,0,1,
{10,
{909,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СтраницаДокументовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{910,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"СтраницаРегистровСведений",
{1,1,
{"ru","Страница регистров сведений"}
},
{1,1,
{"ru","Страница справочников"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{49,
{145,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоРегистровСведений",0,0,1,
{1,0},
{1,0},
{1,
{17}
},0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,0,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,
{3,1282f000-23b6-4887-87f4-9e8e79db3d32,"ДеревоСправочниковВыбор",2391e7b8-7235-45d7-ab7e-6ff3dc086396,"ДеревоСправочниковПередНачаломДобавления",2ccfdec5-583d-4eca-8319-e55de492665a,"ДеревоСправочниковПередУдалением",0,0},
{10,01833a5a-6553-4c49-b445-095018107bb5,05468165-f954-45a5-84f2-6641c51f9f23,0ae4bea5-23be-42a7-b69e-97b11b29c453,0d0249a4-2b2f-4fc0-a66f-b36f9494b3cc,37740564-9e86-44a0-bea9-3f485a5a3f91,8d772f97-c0ef-47c0-9cb0-efea28c61341,9ef79140-3de6-436a-8dda-610bb963f5db,b0016a68-ec64-4e6d-b905-c71fd62efc4c,b41f5bbc-ba5d-4888-8cd1-db246a371418,fa51b106-eae6-44c7-8054-76cbb3100603},1,
{21,
{146,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоРегистровСведенийКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{21,
{147,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоРегистровСведенийКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},6,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{239,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ДеревоРегистровСведенийДействияСОтмеченными",
{1,1,
{"ru","Действия с отмеченными"}
},
{1,1,
{"ru","Действия с отмеченными"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,3,
{0},"",-1,-1,0,
{
{#base64:AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAABAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICA
gAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AADMmDIACAgIABcXFwAnJycANzc3AEdH
RwBXV1cAZ2dnAHd3dwCHh4cAl5eXAKenpwC3t7cAx8fHAP///wDn5+cAqqqqAAAA
TAAAAH8AAACyAAAA5QAZGf8ATEz+AH9//wCysv8AABBMAAAbfwAAJrIAADHlABlK
/wBMcv4Af5r/ALLC/wAAIEwAADZ/AABMsgAAYuUAGXv/AEyZ/gB/tv8AstP/AAAx
TAAAUX8AAHKyAACT5QAZrf8ATL/+AH/R/wCy4/8AAEFMAABtfwAAmbIAAMTlABne
/wBM5f4Af+z/ALL0/wAATEcAAH92AACypQAA5dUAGf/uAEz+8gB///UAsv/5AABM
NgAAf1sAALJ/AADlowAZ/70ATP7MAH//2gCy/+kAAEwmAAB/PwAAslkAAOVyABn/
jABM/qUAf/+/ALL/2AAATBUAAH8kAACyMwAA5UEAGf9bAEz+fwB//6MAsv/IAABM
BQAAfwkAALIMAADlEAAZ/ykATP5ZAH//iACy/7cACkwAABJ/AAAZsgAAIOUAADr/
GQBm/kwAkf9/AL3/sgAbTAAALX8AAD+yAABR5QAAa/8ZAIz+TACt/38Azf+yACtM
AABIfwAAZbIAAIPlAACc/xkAsv5MAMj/fwDe/7IAPEwAAGR/AACMsgAAtOUAAM3/
GQDY/kwA4/9/AO7/sgBMTAAAf38AALKyAAD/ywAA//8ZAP7+TAD//38A//+yAEw8
AAB/ZAAAsowAAOW0AAD/zRkA/thMAP/jfwD/7rIATCsAAH9IAACyZgAA5YMAAP+c
GQD+skwA/8h/AP/esgBMGwAAfy0AALI/AADlUQAA/2sZAP6MTAD/rX8A/82yAEwK
AAB/EgAAshkAAOUgAAD/OhkA/mVMAP+RfwD/vbIATAAFAH8ACQCyAAwA5QAQAP8Z
KQD+TFkA/3+IAP+ytwBMABUAfwAkALIAMgDlAEEA/xlbAP5MfwD/f6MA/7LIAEwA
JgB/AD8AsgBZAOUAcgD/GYwA/kylAP9/vwD/stgATAA2AH8AWwCyAH8A5QCjAP8Z
vQD+TMwA/3/aAP+y6QBMAEcAfwB2ALIApQDlANUA/xnuAP5M8gD/f/UA/7L5AEEA
TABtAH8AmQCyAMQA5QDeGf8A5Uz+AOx//wD0sv8AMQBMAFEAfwByALIAkwDlAK0Z
/wC/TP4A0X//AOOy/wAgAEwANgB/AEwAsgBiAOUAexn/AJlM/gC2f/8A07L/ABAA
TAAbAH8AJgCyADEA5QBKGf8Ackz+AJp//wDCsv8AAAAAAAAAAAAAAAAAAAAAAAAA
HWEdDw8PDw8PDw8PDwAAHWFhYR0dHR0dHR0dHQ8AHWFhYWFZHZOTk5OTkx0PAB1h
YR1hYWEdHR0dHR0dDwAdYR0dHWFhYR2Tk5OTHQ8ADx0PHQ8dYWEdHR0dHR0PAA8d
Dx0PHR1ZHZOTk5MdDwAPHQ8dDx0dHR0dHR0dHQ8ADx0PHQ8dHR0dHR0dHR0PAA8d
Dx0PHR0dHR0dDw8PDwAPHQ8dDx0dHR0dHQ8dHQ8ADx0PHQ8dHR0dHR0PHQ8AAA8d
Dx0PDw8PDw8PDw8AAAAPHaWlpaWlpaWlpQAAAAAApqampqampqamAAAAAAAAAP//
AADAAQAAgAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAD
AAAABwAAAB8AAAB/AAA=}
},0,""},
{0},2,1,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{240,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовУстановитьФлажки1",
{1,0},1,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{520,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовУстановитьФлажки1ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{241,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовСнятьФлажки1",
{1,0},1,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{521,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовСнятьФлажки1ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{242,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьОтмеченныеВСценарий1",
{1,0},1,
{28,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:Qk02BQAAAAAAADYEAAAoAAAAEAAAABAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAQAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/
AAAA//8A/wAAAP8A/wD//wAA6ZIAAAgICAAXFxcAJycnADc3NwBHR0cAV1dXAGdn
ZwB3d3cAh4eHAJeXlwCnp6cAt7e3AMfHxwDX19cA5+fnAPf39wAAAEwAAAB/AAAA
sgAAAOUAGRn/AExM/gB/f/8AsrL/AAAQTAAAG38AACayAAAx5QAZSv8ATHL+AH+a
/wCywv8AACBMAAA2fwAATLIAAGLlABl7/wBMmf4Af7b/ALLT/wAAMUwAAFF/AABy
sgAAk+UAGa3/AEy//gB/0f8AsuP/AABBTAAAbX8AAJmyAADE5QAZ3v8ATOX+AH/s
/wCy9P8AAExHAAB/dgAAsqUAAOXVABn/7gBM/vIAf//1ALL/+QAATDYAAH9bAACy
fwAA5aMAGf+9AEz+zAB//9oAsv/pAABMJgAAfz8AALJZAADlcgAZ/4wATP6lAH//
vwCy/9gAAEwVAAB/JAAAsjMAAOVBABn/WwBM/n8Af/+jALL/yAAATAUAAH8JAACy
DAAA5RAAGf8pAEz+WQB//4gAsv+3AApMAAASfwAAGbIAACDlAAA6/xkAZv5MAJH/
fwC9/7IAG0wAAC1/AAA/sgAAUeUAAGv/GQCM/kwArf9/AM3/sgArTAAASH8AAGWy
AACD5QAAnP8ZALL+TADI/38A3v+yADxMAABkfwAAjLIAALTlAADN/xkA2P5MAOP/
fwDu/7IATEwAAH9/AACysgAA5eUAAP//GQD+/kwA//9/AP//sgBMPAAAf2QAALKM
AADltAAA/80ZAP7YTAD/438A/+6yAEwrAAB/SAAAsmYAAOWDAAD/nBkA/rJMAP/I
fwD/3rIATBsAAH8tAACyPwAA5VEAAP9rGQD+jEwA/61/AP/NsgBMCgAAfxIAALIZ
AADlIAAA/zoZAP5lTAD/kX8A/72yAEwABQB/AAkAsgAMAOUAEAD/GSkA/kxZAP9/
iAD/srcATAAVAH8AJACyADIA5QBBAP8ZWwD+TH8A/3+jAP+yyABMACYAfwA/ALIA
WQDlAHIA/xmMAP5MpQD/f78A/7LYAEwANgB/AFsAsgB/AOUAowD/Gb0A/kzMAP9/
2gD/sukATABHAH8AdgCyAKUA5QDVAP8Z7gD+TPIA/3/1AP+y+QBBAEwAbQB/AJkA
sgDEAOUA3hn/AOVM/gDsf/8A9LL/ADEATABRAH8AcgCyAJMA5QCtGf8Av0z+ANF/
/wDjsv8AIABMADYAfwBMALIAYgDlAHsZ/wCZTP4Atn//ANOy/wAQAEwAGwB/ACYA
sgAxAOUAShn/AHJM/gCaf/8AwrL/AB8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx+xsR8fHx+xsR8fHx8fHx8fsQ+xHx8fsQ+xHx8fHx8fH7EPD7EfH7EP
D7EfHx8fHx8fsQ8PsR8fsQ8PsR8fHx8fHx+xDw+xHx+xDw+xHx8fHx8fH7EPD7Ef
H7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EP
D7EfHx8fHx+xD7EfHx+xD7EfHx8fHx8fsbEfHx8fsbEfHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{522,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьОтмеченныеВСценарий1ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{519,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийДействияСОтмеченнымиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{246,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийОбновитьТаблицуЭталоннойБазы",
{1,0},1,
{31,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{526,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийОбновитьТаблицуЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{662,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийВыбратьЭлементДереваЭталоннойБазы",
{1,0},1,
{30,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{663,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийВыбратьЭлементДереваЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{676,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийПометитьНаУдалениеЭлементЭталоннойБазы",
{1,0},1,
{42,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{677,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийПометитьНаУдалениеЭлементЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{219,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийНастроитьОтображениеЭталоннойБазы",
{1,0},1,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",6,13,1,
{
{#base64:Qk06AwAAAAAAADoAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAAAAAAALu7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u2tra7u7u7u7u7u7u7u7u7u7u2bMzGbMzGaZmTNmZjU1
Nbu7u7u7u7u7u7u7u7u7u4aGhmtra7u7u7u7u7u7u2bMzGaZmWaZmWaZmWaZmWaZ
mTU1Nbu7u7u7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmWaZmWaZmWaZmWaZ
mWaZmTU1Nbu7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmTNmZmaZmWbMzGaZ
mWaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u7u7u2bMzDNmZru7u7u7u7u7u2bM
zDNmZru7u7u7u7u7u4aGhru7u7u7u4aGhmtra7u7u7u7u2aZmbu7u7u7u7u7u2aZ
mbu7u7u7u7u7u4aGhru7u////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u7u7u////////////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u4aGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhmtra7u7u7u7u7u7u7u7
u7u7u7u7u7u7uw==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{524,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийНастроитьОтображениеЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{245,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийЗаписатьВСценарий",
{1,0},1,
{29,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",14,0,1,
{
{#base64:Qk02AwAAAAAAADYAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAA////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////////////eEsA6ZIA6ZIAeEsA
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{525,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийЗаписатьВСценарийExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{160,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},3,"ДеревоРегистровСведенийОтметка",0,0,
{1,0},
{1,1,
{"ru","Отметка"}
},
{2,
{17},
{7}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДеревоСправочниковОтметкаПриИзменении",0,0},1,
{21,
{161,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоРегистровСведенийОтметкаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{530,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийОтметкаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{148,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоРегистровСведенийЭлемент",1,0,
{1,0},
{1,0},
{2,
{17},
{1}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{149,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоРегистровСведенийЭлементКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{528,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийЭлементExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{150,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоРегистровСведенийАналитика",1,0,
{1,0},
{1,0},
{2,
{17},
{2}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{151,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоРегистровСведенийАналитикаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{529,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийАналитикаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},2,2,1,0,
{"Pattern"},"","",0,2,0,1,
{10,
{527,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоРегистровСведенийExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,1,1,1,
{4,
{1052,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоРегистровСведенийСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0},1,
{21,
{1053,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоРегистровСведенийСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1054,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоРегистровСведенийСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{145,0},0,3,3},1,
{4,
{1055,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДеревоРегистровСведенийСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,0,0},1,0,0},1,
{21,
{1056,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоРегистровСведенийСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1057,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоРегистровСведенийСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{145,1},0,3,3},1,
{4,
{1058,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоРегистровСведенийУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,2},1,
{21,
{1059,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоРегистровСведенийУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1060,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоРегистровСведенийУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{145,2},0,3,3},0,1,0,0,1,0,3,3},1,0,1,
{10,
{911,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СтраницаРегистровСведенийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{912,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"СтраницаПлановВидовХарактеристик",
{1,1,
{"ru","Страница планов видов характеристик"}
},
{1,1,
{"ru","Страница справочников"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{49,
{128,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоПлановВидовХарактеристик",0,0,1,
{1,0},
{1,0},
{1,
{18}
},0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,0,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,
{3,1282f000-23b6-4887-87f4-9e8e79db3d32,"ДеревоСправочниковВыбор",2391e7b8-7235-45d7-ab7e-6ff3dc086396,"ДеревоСправочниковПередНачаломДобавления",2ccfdec5-583d-4eca-8319-e55de492665a,"ДеревоСправочниковПередУдалением",0,0},
{10,01833a5a-6553-4c49-b445-095018107bb5,05468165-f954-45a5-84f2-6641c51f9f23,0ae4bea5-23be-42a7-b69e-97b11b29c453,0d0249a4-2b2f-4fc0-a66f-b36f9494b3cc,37740564-9e86-44a0-bea9-3f485a5a3f91,8d772f97-c0ef-47c0-9cb0-efea28c61341,9ef79140-3de6-436a-8dda-610bb963f5db,b0016a68-ec64-4e6d-b905-c71fd62efc4c,b41f5bbc-ba5d-4888-8cd1-db246a371418,fa51b106-eae6-44c7-8054-76cbb3100603},1,
{21,
{129,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоПлановВидовХарактеристикКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{21,
{130,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоПлановВидовХарактеристикКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},6,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{247,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ДеревоПВХДействияСОтмеченными",
{1,1,
{"ru","Действия с отмеченными"}
},
{1,1,
{"ru","Действия с отмеченными"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,3,
{0},"",-1,-1,0,
{
{#base64:AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAABAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICA
gAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AADMmDIACAgIABcXFwAnJycANzc3AEdH
RwBXV1cAZ2dnAHd3dwCHh4cAl5eXAKenpwC3t7cAx8fHAP///wDn5+cAqqqqAAAA
TAAAAH8AAACyAAAA5QAZGf8ATEz+AH9//wCysv8AABBMAAAbfwAAJrIAADHlABlK
/wBMcv4Af5r/ALLC/wAAIEwAADZ/AABMsgAAYuUAGXv/AEyZ/gB/tv8AstP/AAAx
TAAAUX8AAHKyAACT5QAZrf8ATL/+AH/R/wCy4/8AAEFMAABtfwAAmbIAAMTlABne
/wBM5f4Af+z/ALL0/wAATEcAAH92AACypQAA5dUAGf/uAEz+8gB///UAsv/5AABM
NgAAf1sAALJ/AADlowAZ/70ATP7MAH//2gCy/+kAAEwmAAB/PwAAslkAAOVyABn/
jABM/qUAf/+/ALL/2AAATBUAAH8kAACyMwAA5UEAGf9bAEz+fwB//6MAsv/IAABM
BQAAfwkAALIMAADlEAAZ/ykATP5ZAH//iACy/7cACkwAABJ/AAAZsgAAIOUAADr/
GQBm/kwAkf9/AL3/sgAbTAAALX8AAD+yAABR5QAAa/8ZAIz+TACt/38Azf+yACtM
AABIfwAAZbIAAIPlAACc/xkAsv5MAMj/fwDe/7IAPEwAAGR/AACMsgAAtOUAAM3/
GQDY/kwA4/9/AO7/sgBMTAAAf38AALKyAAD/ywAA//8ZAP7+TAD//38A//+yAEw8
AAB/ZAAAsowAAOW0AAD/zRkA/thMAP/jfwD/7rIATCsAAH9IAACyZgAA5YMAAP+c
GQD+skwA/8h/AP/esgBMGwAAfy0AALI/AADlUQAA/2sZAP6MTAD/rX8A/82yAEwK
AAB/EgAAshkAAOUgAAD/OhkA/mVMAP+RfwD/vbIATAAFAH8ACQCyAAwA5QAQAP8Z
KQD+TFkA/3+IAP+ytwBMABUAfwAkALIAMgDlAEEA/xlbAP5MfwD/f6MA/7LIAEwA
JgB/AD8AsgBZAOUAcgD/GYwA/kylAP9/vwD/stgATAA2AH8AWwCyAH8A5QCjAP8Z
vQD+TMwA/3/aAP+y6QBMAEcAfwB2ALIApQDlANUA/xnuAP5M8gD/f/UA/7L5AEEA
TABtAH8AmQCyAMQA5QDeGf8A5Uz+AOx//wD0sv8AMQBMAFEAfwByALIAkwDlAK0Z
/wC/TP4A0X//AOOy/wAgAEwANgB/AEwAsgBiAOUAexn/AJlM/gC2f/8A07L/ABAA
TAAbAH8AJgCyADEA5QBKGf8Ackz+AJp//wDCsv8AAAAAAAAAAAAAAAAAAAAAAAAA
HWEdDw8PDw8PDw8PDwAAHWFhYR0dHR0dHR0dHQ8AHWFhYWFZHZOTk5OTkx0PAB1h
YR1hYWEdHR0dHR0dDwAdYR0dHWFhYR2Tk5OTHQ8ADx0PHQ8dYWEdHR0dHR0PAA8d
Dx0PHR1ZHZOTk5MdDwAPHQ8dDx0dHR0dHR0dHQ8ADx0PHQ8dHR0dHR0dHR0PAA8d
Dx0PHR0dHR0dDw8PDwAPHQ8dDx0dHR0dHQ8dHQ8ADx0PHQ8dHR0dHR0PHQ8AAA8d
Dx0PDw8PDw8PDw8AAAAPHaWlpaWlpaWlpQAAAAAApqampqampqamAAAAAAAAAP//
AADAAQAAgAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAD
AAAABwAAAB8AAAB/AAA=}
},0,""},
{0},2,1,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{248,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовУстановитьФлажки2",
{1,0},1,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{532,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовУстановитьФлажки2ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{249,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовСнятьФлажки2",
{1,0},1,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{533,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовСнятьФлажки2ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{250,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьОтмеченныеВСценарий2",
{1,0},1,
{28,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:Qk02BQAAAAAAADYEAAAoAAAAEAAAABAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAQAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/
AAAA//8A/wAAAP8A/wD//wAA6ZIAAAgICAAXFxcAJycnADc3NwBHR0cAV1dXAGdn
ZwB3d3cAh4eHAJeXlwCnp6cAt7e3AMfHxwDX19cA5+fnAPf39wAAAEwAAAB/AAAA
sgAAAOUAGRn/AExM/gB/f/8AsrL/AAAQTAAAG38AACayAAAx5QAZSv8ATHL+AH+a
/wCywv8AACBMAAA2fwAATLIAAGLlABl7/wBMmf4Af7b/ALLT/wAAMUwAAFF/AABy
sgAAk+UAGa3/AEy//gB/0f8AsuP/AABBTAAAbX8AAJmyAADE5QAZ3v8ATOX+AH/s
/wCy9P8AAExHAAB/dgAAsqUAAOXVABn/7gBM/vIAf//1ALL/+QAATDYAAH9bAACy
fwAA5aMAGf+9AEz+zAB//9oAsv/pAABMJgAAfz8AALJZAADlcgAZ/4wATP6lAH//
vwCy/9gAAEwVAAB/JAAAsjMAAOVBABn/WwBM/n8Af/+jALL/yAAATAUAAH8JAACy
DAAA5RAAGf8pAEz+WQB//4gAsv+3AApMAAASfwAAGbIAACDlAAA6/xkAZv5MAJH/
fwC9/7IAG0wAAC1/AAA/sgAAUeUAAGv/GQCM/kwArf9/AM3/sgArTAAASH8AAGWy
AACD5QAAnP8ZALL+TADI/38A3v+yADxMAABkfwAAjLIAALTlAADN/xkA2P5MAOP/
fwDu/7IATEwAAH9/AACysgAA5eUAAP//GQD+/kwA//9/AP//sgBMPAAAf2QAALKM
AADltAAA/80ZAP7YTAD/438A/+6yAEwrAAB/SAAAsmYAAOWDAAD/nBkA/rJMAP/I
fwD/3rIATBsAAH8tAACyPwAA5VEAAP9rGQD+jEwA/61/AP/NsgBMCgAAfxIAALIZ
AADlIAAA/zoZAP5lTAD/kX8A/72yAEwABQB/AAkAsgAMAOUAEAD/GSkA/kxZAP9/
iAD/srcATAAVAH8AJACyADIA5QBBAP8ZWwD+TH8A/3+jAP+yyABMACYAfwA/ALIA
WQDlAHIA/xmMAP5MpQD/f78A/7LYAEwANgB/AFsAsgB/AOUAowD/Gb0A/kzMAP9/
2gD/sukATABHAH8AdgCyAKUA5QDVAP8Z7gD+TPIA/3/1AP+y+QBBAEwAbQB/AJkA
sgDEAOUA3hn/AOVM/gDsf/8A9LL/ADEATABRAH8AcgCyAJMA5QCtGf8Av0z+ANF/
/wDjsv8AIABMADYAfwBMALIAYgDlAHsZ/wCZTP4Atn//ANOy/wAQAEwAGwB/ACYA
sgAxAOUAShn/AHJM/gCaf/8AwrL/AB8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx+xsR8fHx+xsR8fHx8fHx8fsQ+xHx8fsQ+xHx8fHx8fH7EPD7EfH7EP
D7EfHx8fHx8fsQ8PsR8fsQ8PsR8fHx8fHx+xDw+xHx+xDw+xHx8fHx8fH7EPD7Ef
H7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EP
D7EfHx8fHx+xD7EfHx+xD7EfHx8fHx8fsbEfHx8fsbEfHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{534,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьОтмеченныеВСценарий2ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{531,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПВХДействияСОтмеченнымиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{254,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПВХОбновитьТаблицуЭталоннойБазы",
{1,0},1,
{31,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{538,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПВХОбновитьТаблицуЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{664,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовХарактеристикВыбратьЭлементДереваЭталоннойБазы",
{1,0},1,
{30,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{665,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовХарактеристикВыбратьЭлементДереваЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{678,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовХарактеристикПометитьНаУдалениеЭлементЭталоннойБазы",
{1,0},1,
{42,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{679,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовХарактеристикПометитьНаУдалениеЭлементЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{220,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовХарактеристикНастроитьОтображениеЭталоннойБазы",
{1,0},1,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",5,12,1,
{
{#base64:Qk06AwAAAAAAADoAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAAAAAAALu7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u2tra7u7u7u7u7u7u7u7u7u7u2bMzGbMzGaZmTNmZjU1
Nbu7u7u7u7u7u7u7u7u7u4aGhmtra7u7u7u7u7u7u2bMzGaZmWaZmWaZmWaZmWaZ
mTU1Nbu7u7u7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmWaZmWaZmWaZmWaZ
mWaZmTU1Nbu7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmTNmZmaZmWbMzGaZ
mWaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u7u7u2bMzDNmZru7u7u7u7u7u2bM
zDNmZru7u7u7u7u7u4aGhru7u7u7u4aGhmtra7u7u7u7u2aZmbu7u7u7u7u7u2aZ
mbu7u7u7u7u7u4aGhru7u////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u7u7u////////////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u4aGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhmtra7u7u7u7u7u7u7u7
u7u7u7u7u7u7uw==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{536,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовХарактеристикНастроитьОтображениеЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{253,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПВХЗаписатьВСценарий",
{1,0},1,
{29,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",14,0,1,
{
{#base64:Qk02AwAAAAAAADYAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAA////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////////////eEsA6ZIA6ZIAeEsA
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{537,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПВХЗаписатьВСценарийExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{143,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},3,"ДеревоПлановВидовХарактеристикОтметка",0,0,
{1,0},
{1,1,
{"ru","Отметка"}
},
{2,
{18},
{7}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДеревоСправочниковОтметкаПриИзменении",0,0},1,
{21,
{144,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоПлановВидовХарактеристикОтметкаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{542,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовХарактеристикОтметкаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{131,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоПлановВидовХарактеристикЭлемент",1,0,
{1,0},
{1,0},
{2,
{18},
{1}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{132,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоПлановВидовХарактеристикЭлементКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{540,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовХарактеристикЭлементExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{133,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоПлановВидовХарактеристикАналитика",1,0,
{1,0},
{1,0},
{2,
{18},
{2}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{134,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоПлановВидовХарактеристикАналитикаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{541,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовХарактеристикАналитикаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},2,2,1,0,
{"Pattern"},"","",0,2,0,1,
{10,
{539,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовХарактеристикExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,1,1,1,
{4,
{1061,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоПлановВидовХарактеристикСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0},1,
{21,
{1062,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоПлановВидовХарактеристикСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1063,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоПлановВидовХарактеристикСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{128,0},0,3,3},1,
{4,
{1064,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДеревоПлановВидовХарактеристикСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,0,0},1,0,0},1,
{21,
{1065,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоПлановВидовХарактеристикСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1066,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоПлановВидовХарактеристикСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{128,1},0,3,3},1,
{4,
{1067,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоПлановВидовХарактеристикУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,2},1,
{21,
{1068,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоПлановВидовХарактеристикУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1069,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоПлановВидовХарактеристикУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{128,2},0,3,3},0,1,0,0,1,0,3,3},1,0,1,
{10,
{913,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СтраницаПлановВидовХарактеристикРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{914,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"СтраницаПлановВидовРасчета",
{1,1,
{"ru","Страница планов видов расчета"}
},
{1,1,
{"ru","Страница справочников"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{49,
{162,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоПлановВидовРасчета",0,0,1,
{1,0},
{1,0},
{1,
{19}
},0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,0,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,
{3,1282f000-23b6-4887-87f4-9e8e79db3d32,"ДеревоСправочниковВыбор",2391e7b8-7235-45d7-ab7e-6ff3dc086396,"ДеревоСправочниковПередНачаломДобавления",2ccfdec5-583d-4eca-8319-e55de492665a,"ДеревоСправочниковПередУдалением",0,0},
{11,01833a5a-6553-4c49-b445-095018107bb5,05468165-f954-45a5-84f2-6641c51f9f23,0ae4bea5-23be-42a7-b69e-97b11b29c453,0d0249a4-2b2f-4fc0-a66f-b36f9494b3cc,2bbe4e12-06d2-409b-a972-eea585125d83,37740564-9e86-44a0-bea9-3f485a5a3f91,58b2a785-23f6-4b0e-a324-9a1323285595,9ef79140-3de6-436a-8dda-610bb963f5db,b0016a68-ec64-4e6d-b905-c71fd62efc4c,b41f5bbc-ba5d-4888-8cd1-db246a371418,fa51b106-eae6-44c7-8054-76cbb3100603},1,
{21,
{163,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоПлановВидовРасчетаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{21,
{164,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоПлановВидовРасчетаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},6,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{255,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ДеревоПВРДействияСОтмеченными",
{1,1,
{"ru","Действия с отмеченными"}
},
{1,1,
{"ru","Действия с отмеченными"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,3,
{0},"",-1,-1,0,
{
{#base64:AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAABAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICA
gAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AADMmDIACAgIABcXFwAnJycANzc3AEdH
RwBXV1cAZ2dnAHd3dwCHh4cAl5eXAKenpwC3t7cAx8fHAP///wDn5+cAqqqqAAAA
TAAAAH8AAACyAAAA5QAZGf8ATEz+AH9//wCysv8AABBMAAAbfwAAJrIAADHlABlK
/wBMcv4Af5r/ALLC/wAAIEwAADZ/AABMsgAAYuUAGXv/AEyZ/gB/tv8AstP/AAAx
TAAAUX8AAHKyAACT5QAZrf8ATL/+AH/R/wCy4/8AAEFMAABtfwAAmbIAAMTlABne
/wBM5f4Af+z/ALL0/wAATEcAAH92AACypQAA5dUAGf/uAEz+8gB///UAsv/5AABM
NgAAf1sAALJ/AADlowAZ/70ATP7MAH//2gCy/+kAAEwmAAB/PwAAslkAAOVyABn/
jABM/qUAf/+/ALL/2AAATBUAAH8kAACyMwAA5UEAGf9bAEz+fwB//6MAsv/IAABM
BQAAfwkAALIMAADlEAAZ/ykATP5ZAH//iACy/7cACkwAABJ/AAAZsgAAIOUAADr/
GQBm/kwAkf9/AL3/sgAbTAAALX8AAD+yAABR5QAAa/8ZAIz+TACt/38Azf+yACtM
AABIfwAAZbIAAIPlAACc/xkAsv5MAMj/fwDe/7IAPEwAAGR/AACMsgAAtOUAAM3/
GQDY/kwA4/9/AO7/sgBMTAAAf38AALKyAAD/ywAA//8ZAP7+TAD//38A//+yAEw8
AAB/ZAAAsowAAOW0AAD/zRkA/thMAP/jfwD/7rIATCsAAH9IAACyZgAA5YMAAP+c
GQD+skwA/8h/AP/esgBMGwAAfy0AALI/AADlUQAA/2sZAP6MTAD/rX8A/82yAEwK
AAB/EgAAshkAAOUgAAD/OhkA/mVMAP+RfwD/vbIATAAFAH8ACQCyAAwA5QAQAP8Z
KQD+TFkA/3+IAP+ytwBMABUAfwAkALIAMgDlAEEA/xlbAP5MfwD/f6MA/7LIAEwA
JgB/AD8AsgBZAOUAcgD/GYwA/kylAP9/vwD/stgATAA2AH8AWwCyAH8A5QCjAP8Z
vQD+TMwA/3/aAP+y6QBMAEcAfwB2ALIApQDlANUA/xnuAP5M8gD/f/UA/7L5AEEA
TABtAH8AmQCyAMQA5QDeGf8A5Uz+AOx//wD0sv8AMQBMAFEAfwByALIAkwDlAK0Z
/wC/TP4A0X//AOOy/wAgAEwANgB/AEwAsgBiAOUAexn/AJlM/gC2f/8A07L/ABAA
TAAbAH8AJgCyADEA5QBKGf8Ackz+AJp//wDCsv8AAAAAAAAAAAAAAAAAAAAAAAAA
HWEdDw8PDw8PDw8PDwAAHWFhYR0dHR0dHR0dHQ8AHWFhYWFZHZOTk5OTkx0PAB1h
YR1hYWEdHR0dHR0dDwAdYR0dHWFhYR2Tk5OTHQ8ADx0PHQ8dYWEdHR0dHR0PAA8d
Dx0PHR1ZHZOTk5MdDwAPHQ8dDx0dHR0dHR0dHQ8ADx0PHQ8dHR0dHR0dHR0PAA8d
Dx0PHR0dHR0dDw8PDwAPHQ8dDx0dHR0dHQ8dHQ8ADx0PHQ8dHR0dHR0PHQ8AAA8d
Dx0PDw8PDw8PDw8AAAAPHaWlpaWlpaWlpQAAAAAApqampqampqamAAAAAAAAAP//
AADAAQAAgAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAD
AAAABwAAAB8AAAB/AAA=}
},0,""},
{0},2,1,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{256,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовУстановитьФлажки3",
{1,0},1,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{544,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовУстановитьФлажки3ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{257,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовСнятьФлажки3",
{1,0},1,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{545,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовСнятьФлажки3ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{258,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьОтмеченныеВСценарий3",
{1,0},1,
{28,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:Qk02BQAAAAAAADYEAAAoAAAAEAAAABAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAQAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/
AAAA//8A/wAAAP8A/wD//wAA6ZIAAAgICAAXFxcAJycnADc3NwBHR0cAV1dXAGdn
ZwB3d3cAh4eHAJeXlwCnp6cAt7e3AMfHxwDX19cA5+fnAPf39wAAAEwAAAB/AAAA
sgAAAOUAGRn/AExM/gB/f/8AsrL/AAAQTAAAG38AACayAAAx5QAZSv8ATHL+AH+a
/wCywv8AACBMAAA2fwAATLIAAGLlABl7/wBMmf4Af7b/ALLT/wAAMUwAAFF/AABy
sgAAk+UAGa3/AEy//gB/0f8AsuP/AABBTAAAbX8AAJmyAADE5QAZ3v8ATOX+AH/s
/wCy9P8AAExHAAB/dgAAsqUAAOXVABn/7gBM/vIAf//1ALL/+QAATDYAAH9bAACy
fwAA5aMAGf+9AEz+zAB//9oAsv/pAABMJgAAfz8AALJZAADlcgAZ/4wATP6lAH//
vwCy/9gAAEwVAAB/JAAAsjMAAOVBABn/WwBM/n8Af/+jALL/yAAATAUAAH8JAACy
DAAA5RAAGf8pAEz+WQB//4gAsv+3AApMAAASfwAAGbIAACDlAAA6/xkAZv5MAJH/
fwC9/7IAG0wAAC1/AAA/sgAAUeUAAGv/GQCM/kwArf9/AM3/sgArTAAASH8AAGWy
AACD5QAAnP8ZALL+TADI/38A3v+yADxMAABkfwAAjLIAALTlAADN/xkA2P5MAOP/
fwDu/7IATEwAAH9/AACysgAA5eUAAP//GQD+/kwA//9/AP//sgBMPAAAf2QAALKM
AADltAAA/80ZAP7YTAD/438A/+6yAEwrAAB/SAAAsmYAAOWDAAD/nBkA/rJMAP/I
fwD/3rIATBsAAH8tAACyPwAA5VEAAP9rGQD+jEwA/61/AP/NsgBMCgAAfxIAALIZ
AADlIAAA/zoZAP5lTAD/kX8A/72yAEwABQB/AAkAsgAMAOUAEAD/GSkA/kxZAP9/
iAD/srcATAAVAH8AJACyADIA5QBBAP8ZWwD+TH8A/3+jAP+yyABMACYAfwA/ALIA
WQDlAHIA/xmMAP5MpQD/f78A/7LYAEwANgB/AFsAsgB/AOUAowD/Gb0A/kzMAP9/
2gD/sukATABHAH8AdgCyAKUA5QDVAP8Z7gD+TPIA/3/1AP+y+QBBAEwAbQB/AJkA
sgDEAOUA3hn/AOVM/gDsf/8A9LL/ADEATABRAH8AcgCyAJMA5QCtGf8Av0z+ANF/
/wDjsv8AIABMADYAfwBMALIAYgDlAHsZ/wCZTP4Atn//ANOy/wAQAEwAGwB/ACYA
sgAxAOUAShn/AHJM/gCaf/8AwrL/AB8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx+xsR8fHx+xsR8fHx8fHx8fsQ+xHx8fsQ+xHx8fHx8fH7EPD7EfH7EP
D7EfHx8fHx8fsQ8PsR8fsQ8PsR8fHx8fHx+xDw+xHx+xDw+xHx8fHx8fH7EPD7Ef
H7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EP
D7EfHx8fHx+xD7EfHx+xD7EfHx8fHx8fsbEfHx8fsbEfHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{546,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьОтмеченныеВСценарий3ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{543,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПВРДействияСОтмеченнымиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{262,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПВРОбновитьТаблицуЭталоннойБазы",
{1,0},1,
{31,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{550,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПВРОбновитьТаблицуЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{666,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовРасчетаВыбратьЭлементДереваЭталоннойБазы",
{1,0},1,
{30,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{667,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовРасчетаВыбратьЭлементДереваЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{680,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовРасчетаПометитьНаУдалениеЭлементЭталоннойБазы",
{1,0},1,
{42,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{681,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовРасчетаПометитьНаУдалениеЭлементЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{221,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовРасчетаНастроитьОтображениеЭталоннойБазы",
{1,0},1,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",6,13,1,
{
{#base64:Qk06AwAAAAAAADoAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAAAAAAALu7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u2tra7u7u7u7u7u7u7u7u7u7u2bMzGbMzGaZmTNmZjU1
Nbu7u7u7u7u7u7u7u7u7u4aGhmtra7u7u7u7u7u7u2bMzGaZmWaZmWaZmWaZmWaZ
mTU1Nbu7u7u7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmWaZmWaZmWaZmWaZ
mWaZmTU1Nbu7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmTNmZmaZmWbMzGaZ
mWaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u7u7u2bMzDNmZru7u7u7u7u7u2bM
zDNmZru7u7u7u7u7u4aGhru7u7u7u4aGhmtra7u7u7u7u2aZmbu7u7u7u7u7u2aZ
mbu7u7u7u7u7u4aGhru7u////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u7u7u////////////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u4aGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhmtra7u7u7u7u7u7u7u7
u7u7u7u7u7u7uw==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{548,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовРасчетаНастроитьОтображениеЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{261,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПВРЗаписатьВСценарий",
{1,0},1,
{29,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",14,0,1,
{
{#base64:Qk02AwAAAAAAADYAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAA////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////////////eEsA6ZIA6ZIAeEsA
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{549,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПВРЗаписатьВСценарийExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{177,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},3,"ДеревоПлановВидовРасчетаОтметка",0,0,
{1,0},
{1,1,
{"ru","Отметка"}
},
{2,
{19},
{7}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДеревоСправочниковОтметкаПриИзменении",0,0},1,
{21,
{178,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоПлановВидовРасчетаОтметкаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{554,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовРасчетаОтметкаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{165,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоПлановВидовРасчетаЭлемент",1,0,
{1,0},
{1,0},
{2,
{19},
{1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{166,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоПлановВидовРасчетаЭлементКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{552,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовРасчетаЭлементExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{167,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоПлановВидовРасчетаАналитика",1,0,
{1,0},
{1,0},
{2,
{19},
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{168,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоПлановВидовРасчетаАналитикаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{553,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовРасчетаАналитикаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},2,2,1,0,
{"Pattern"},"","",0,2,0,1,
{10,
{551,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоПлановВидовРасчетаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,1,1,1,
{4,
{1070,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоПлановВидовРасчетаСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0},1,
{21,
{1071,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоПлановВидовРасчетаСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1072,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоПлановВидовРасчетаСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{162,0},0,3,3},1,
{4,
{1073,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДеревоПлановВидовРасчетаСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,0,0},1,0,0},1,
{21,
{1074,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоПлановВидовРасчетаСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1075,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоПлановВидовРасчетаСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{162,1},0,3,3},1,
{4,
{1076,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоПлановВидовРасчетаУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,2},1,
{21,
{1077,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоПлановВидовРасчетаУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1078,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоПлановВидовРасчетаУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{162,2},0,3,3},0,1,0,0,1,0,3,3},1,0,1,
{10,
{915,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СтраницаПлановВидовРасчетаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{916,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"СтраницаБизнесПроцессов",
{1,1,
{"ru","Страница бизнес процессов"}
},
{1,1,
{"ru","Страница справочников"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{49,
{179,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоБизнесПроцессов",0,0,1,
{1,0},
{1,0},
{1,
{20}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,0,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,
{3,1282f000-23b6-4887-87f4-9e8e79db3d32,"ДеревоСправочниковВыбор",2391e7b8-7235-45d7-ab7e-6ff3dc086396,"БлокСценарияПередНачаломДобавления",2ccfdec5-583d-4eca-8319-e55de492665a,"ДеревоСправочниковПередУдалением",0,0},
{11,01833a5a-6553-4c49-b445-095018107bb5,05468165-f954-45a5-84f2-6641c51f9f23,0ae4bea5-23be-42a7-b69e-97b11b29c453,0d0249a4-2b2f-4fc0-a66f-b36f9494b3cc,2bbe4e12-06d2-409b-a972-eea585125d83,37740564-9e86-44a0-bea9-3f485a5a3f91,58b2a785-23f6-4b0e-a324-9a1323285595,9ef79140-3de6-436a-8dda-610bb963f5db,b0016a68-ec64-4e6d-b905-c71fd62efc4c,b41f5bbc-ba5d-4888-8cd1-db246a371418,fa51b106-eae6-44c7-8054-76cbb3100603},1,
{21,
{180,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоБизнесПроцессовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{21,
{181,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоБизнесПроцессовКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},6,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{263,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ДеревоБизнесПроцессовДействияСОтмеченными",
{1,1,
{"ru","Действия с отмеченными"}
},
{1,1,
{"ru","Действия с отмеченными"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,3,
{0},"",-1,-1,0,
{
{#base64:AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAABAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICA
gAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AADMmDIACAgIABcXFwAnJycANzc3AEdH
RwBXV1cAZ2dnAHd3dwCHh4cAl5eXAKenpwC3t7cAx8fHAP///wDn5+cAqqqqAAAA
TAAAAH8AAACyAAAA5QAZGf8ATEz+AH9//wCysv8AABBMAAAbfwAAJrIAADHlABlK
/wBMcv4Af5r/ALLC/wAAIEwAADZ/AABMsgAAYuUAGXv/AEyZ/gB/tv8AstP/AAAx
TAAAUX8AAHKyAACT5QAZrf8ATL/+AH/R/wCy4/8AAEFMAABtfwAAmbIAAMTlABne
/wBM5f4Af+z/ALL0/wAATEcAAH92AACypQAA5dUAGf/uAEz+8gB///UAsv/5AABM
NgAAf1sAALJ/AADlowAZ/70ATP7MAH//2gCy/+kAAEwmAAB/PwAAslkAAOVyABn/
jABM/qUAf/+/ALL/2AAATBUAAH8kAACyMwAA5UEAGf9bAEz+fwB//6MAsv/IAABM
BQAAfwkAALIMAADlEAAZ/ykATP5ZAH//iACy/7cACkwAABJ/AAAZsgAAIOUAADr/
GQBm/kwAkf9/AL3/sgAbTAAALX8AAD+yAABR5QAAa/8ZAIz+TACt/38Azf+yACtM
AABIfwAAZbIAAIPlAACc/xkAsv5MAMj/fwDe/7IAPEwAAGR/AACMsgAAtOUAAM3/
GQDY/kwA4/9/AO7/sgBMTAAAf38AALKyAAD/ywAA//8ZAP7+TAD//38A//+yAEw8
AAB/ZAAAsowAAOW0AAD/zRkA/thMAP/jfwD/7rIATCsAAH9IAACyZgAA5YMAAP+c
GQD+skwA/8h/AP/esgBMGwAAfy0AALI/AADlUQAA/2sZAP6MTAD/rX8A/82yAEwK
AAB/EgAAshkAAOUgAAD/OhkA/mVMAP+RfwD/vbIATAAFAH8ACQCyAAwA5QAQAP8Z
KQD+TFkA/3+IAP+ytwBMABUAfwAkALIAMgDlAEEA/xlbAP5MfwD/f6MA/7LIAEwA
JgB/AD8AsgBZAOUAcgD/GYwA/kylAP9/vwD/stgATAA2AH8AWwCyAH8A5QCjAP8Z
vQD+TMwA/3/aAP+y6QBMAEcAfwB2ALIApQDlANUA/xnuAP5M8gD/f/UA/7L5AEEA
TABtAH8AmQCyAMQA5QDeGf8A5Uz+AOx//wD0sv8AMQBMAFEAfwByALIAkwDlAK0Z
/wC/TP4A0X//AOOy/wAgAEwANgB/AEwAsgBiAOUAexn/AJlM/gC2f/8A07L/ABAA
TAAbAH8AJgCyADEA5QBKGf8Ackz+AJp//wDCsv8AAAAAAAAAAAAAAAAAAAAAAAAA
HWEdDw8PDw8PDw8PDwAAHWFhYR0dHR0dHR0dHQ8AHWFhYWFZHZOTk5OTkx0PAB1h
YR1hYWEdHR0dHR0dDwAdYR0dHWFhYR2Tk5OTHQ8ADx0PHQ8dYWEdHR0dHR0PAA8d
Dx0PHR1ZHZOTk5MdDwAPHQ8dDx0dHR0dHR0dHQ8ADx0PHQ8dHR0dHR0dHR0PAA8d
Dx0PHR0dHR0dDw8PDwAPHQ8dDx0dHR0dHQ8dHQ8ADx0PHQ8dHR0dHR0PHQ8AAA8d
Dx0PDw8PDw8PDw8AAAAPHaWlpaWlpaWlpQAAAAAApqampqampqamAAAAAAAAAP//
AADAAQAAgAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAD
AAAABwAAAB8AAAB/AAA=}
},0,""},
{0},2,1,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{264,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовУстановитьФлажки4",
{1,0},1,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{556,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовУстановитьФлажки4ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{265,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовСнятьФлажки4",
{1,0},1,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{557,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовСнятьФлажки4ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{266,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьОтмеченныеВСценарий4",
{1,0},1,
{28,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:Qk02BQAAAAAAADYEAAAoAAAAEAAAABAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAQAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/
AAAA//8A/wAAAP8A/wD//wAA6ZIAAAgICAAXFxcAJycnADc3NwBHR0cAV1dXAGdn
ZwB3d3cAh4eHAJeXlwCnp6cAt7e3AMfHxwDX19cA5+fnAPf39wAAAEwAAAB/AAAA
sgAAAOUAGRn/AExM/gB/f/8AsrL/AAAQTAAAG38AACayAAAx5QAZSv8ATHL+AH+a
/wCywv8AACBMAAA2fwAATLIAAGLlABl7/wBMmf4Af7b/ALLT/wAAMUwAAFF/AABy
sgAAk+UAGa3/AEy//gB/0f8AsuP/AABBTAAAbX8AAJmyAADE5QAZ3v8ATOX+AH/s
/wCy9P8AAExHAAB/dgAAsqUAAOXVABn/7gBM/vIAf//1ALL/+QAATDYAAH9bAACy
fwAA5aMAGf+9AEz+zAB//9oAsv/pAABMJgAAfz8AALJZAADlcgAZ/4wATP6lAH//
vwCy/9gAAEwVAAB/JAAAsjMAAOVBABn/WwBM/n8Af/+jALL/yAAATAUAAH8JAACy
DAAA5RAAGf8pAEz+WQB//4gAsv+3AApMAAASfwAAGbIAACDlAAA6/xkAZv5MAJH/
fwC9/7IAG0wAAC1/AAA/sgAAUeUAAGv/GQCM/kwArf9/AM3/sgArTAAASH8AAGWy
AACD5QAAnP8ZALL+TADI/38A3v+yADxMAABkfwAAjLIAALTlAADN/xkA2P5MAOP/
fwDu/7IATEwAAH9/AACysgAA5eUAAP//GQD+/kwA//9/AP//sgBMPAAAf2QAALKM
AADltAAA/80ZAP7YTAD/438A/+6yAEwrAAB/SAAAsmYAAOWDAAD/nBkA/rJMAP/I
fwD/3rIATBsAAH8tAACyPwAA5VEAAP9rGQD+jEwA/61/AP/NsgBMCgAAfxIAALIZ
AADlIAAA/zoZAP5lTAD/kX8A/72yAEwABQB/AAkAsgAMAOUAEAD/GSkA/kxZAP9/
iAD/srcATAAVAH8AJACyADIA5QBBAP8ZWwD+TH8A/3+jAP+yyABMACYAfwA/ALIA
WQDlAHIA/xmMAP5MpQD/f78A/7LYAEwANgB/AFsAsgB/AOUAowD/Gb0A/kzMAP9/
2gD/sukATABHAH8AdgCyAKUA5QDVAP8Z7gD+TPIA/3/1AP+y+QBBAEwAbQB/AJkA
sgDEAOUA3hn/AOVM/gDsf/8A9LL/ADEATABRAH8AcgCyAJMA5QCtGf8Av0z+ANF/
/wDjsv8AIABMADYAfwBMALIAYgDlAHsZ/wCZTP4Atn//ANOy/wAQAEwAGwB/ACYA
sgAxAOUAShn/AHJM/gCaf/8AwrL/AB8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx+xsR8fHx+xsR8fHx8fHx8fsQ+xHx8fsQ+xHx8fHx8fH7EPD7EfH7EP
D7EfHx8fHx8fsQ8PsR8fsQ8PsR8fHx8fHx+xDw+xHx+xDw+xHx8fHx8fH7EPD7Ef
H7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EP
D7EfHx8fHx+xD7EfHx+xD7EfHx8fHx8fsbEfHx8fsbEfHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{558,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьОтмеченныеВСценарий4ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{555,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовДействияСОтмеченнымиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{270,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовОбновитьТаблицуЭталоннойБазы",
{1,0},1,
{31,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{562,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовОбновитьТаблицуЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{668,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовВыбратьЭлементДереваЭталоннойБазы",
{1,0},1,
{30,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{669,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовВыбратьЭлементДереваЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{682,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовПометитьНаУдалениеЭлементЭталоннойБазы",
{1,0},1,
{42,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{683,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовПометитьНаУдалениеЭлементЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{222,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовНастроитьОтображениеЭталоннойБазы",
{1,0},1,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",6,12,1,
{
{#base64:Qk06AwAAAAAAADoAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAAAAAAALu7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u2tra7u7u7u7u7u7u7u7u7u7u2bMzGbMzGaZmTNmZjU1
Nbu7u7u7u7u7u7u7u7u7u4aGhmtra7u7u7u7u7u7u2bMzGaZmWaZmWaZmWaZmWaZ
mTU1Nbu7u7u7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmWaZmWaZmWaZmWaZ
mWaZmTU1Nbu7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmTNmZmaZmWbMzGaZ
mWaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u7u7u2bMzDNmZru7u7u7u7u7u2bM
zDNmZru7u7u7u7u7u4aGhru7u7u7u4aGhmtra7u7u7u7u2aZmbu7u7u7u7u7u2aZ
mbu7u7u7u7u7u4aGhru7u////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u7u7u////////////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u4aGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhmtra7u7u7u7u7u7u7u7
u7u7u7u7u7u7uw==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{560,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовНастроитьОтображениеЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{269,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовЗаписатьВСценарий",
{1,0},1,
{29,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",14,0,1,
{
{#base64:Qk02AwAAAAAAADYAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAA////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////////////eEsA6ZIA6ZIAeEsA
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{561,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовЗаписатьВСценарийExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{194,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},3,"ДеревоБизнесПроцессовОтметка",0,0,
{1,0},
{1,1,
{"ru","Отметка"}
},
{2,
{20},
{7}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДеревоСправочниковОтметкаПриИзменении",0,0},1,
{21,
{195,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоБизнесПроцессовОтметкаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{566,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовОтметкаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{182,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоБизнесПроцессовЭлемент",1,0,
{1,0},
{1,0},
{2,
{20},
{1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{183,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоБизнесПроцессовЭлементКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{564,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовЭлементExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{184,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоБизнесПроцессовАналитика",1,0,
{1,0},
{1,0},
{2,
{20},
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{185,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоБизнесПроцессовАналитикаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{565,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовАналитикаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},2,2,1,0,
{"Pattern"},"","",0,2,0,1,
{10,
{563,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоБизнесПроцессовExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,1,1,1,
{4,
{1079,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоБизнесПроцессовСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0},1,
{21,
{1080,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоБизнесПроцессовСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1081,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоБизнесПроцессовСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{179,0},0,3,3},1,
{4,
{1082,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДеревоБизнесПроцессовСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,0,0},1,0,0},1,
{21,
{1083,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоБизнесПроцессовСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1084,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоБизнесПроцессовСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{179,1},0,3,3},1,
{4,
{1085,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоБизнесПроцессовУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,2},1,
{21,
{1086,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоБизнесПроцессовУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1087,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоБизнесПроцессовУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{179,2},0,3,3},0,1,0,0,1,0,3,3},1,0,1,
{10,
{917,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СтраницаБизнесПроцессовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{918,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"СтраницаЗадач",
{1,1,
{"ru","Страница задач"}
},
{1,1,
{"ru","Страница справочников"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{49,
{196,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоЗадач",0,0,1,
{1,0},
{1,0},
{1,
{21}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,0,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,
{0,0,0},
{11,01833a5a-6553-4c49-b445-095018107bb5,05468165-f954-45a5-84f2-6641c51f9f23,0ae4bea5-23be-42a7-b69e-97b11b29c453,0d0249a4-2b2f-4fc0-a66f-b36f9494b3cc,2bbe4e12-06d2-409b-a972-eea585125d83,37740564-9e86-44a0-bea9-3f485a5a3f91,58b2a785-23f6-4b0e-a324-9a1323285595,9ef79140-3de6-436a-8dda-610bb963f5db,b0016a68-ec64-4e6d-b905-c71fd62efc4c,b41f5bbc-ba5d-4888-8cd1-db246a371418,fa51b106-eae6-44c7-8054-76cbb3100603},1,
{21,
{197,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоЗадачКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{21,
{198,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоЗадачКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},6,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{271,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ДеревоЗадачДействияСОтмеченными",
{1,1,
{"ru","Действия с отмеченными"}
},
{1,1,
{"ru","Действия с отмеченными"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,3,
{0},"",-1,-1,0,
{
{#base64:AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAA
AAAAAAAAAAEAAAABAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICA
gAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AADMmDIACAgIABcXFwAnJycANzc3AEdH
RwBXV1cAZ2dnAHd3dwCHh4cAl5eXAKenpwC3t7cAx8fHAP///wDn5+cAqqqqAAAA
TAAAAH8AAACyAAAA5QAZGf8ATEz+AH9//wCysv8AABBMAAAbfwAAJrIAADHlABlK
/wBMcv4Af5r/ALLC/wAAIEwAADZ/AABMsgAAYuUAGXv/AEyZ/gB/tv8AstP/AAAx
TAAAUX8AAHKyAACT5QAZrf8ATL/+AH/R/wCy4/8AAEFMAABtfwAAmbIAAMTlABne
/wBM5f4Af+z/ALL0/wAATEcAAH92AACypQAA5dUAGf/uAEz+8gB///UAsv/5AABM
NgAAf1sAALJ/AADlowAZ/70ATP7MAH//2gCy/+kAAEwmAAB/PwAAslkAAOVyABn/
jABM/qUAf/+/ALL/2AAATBUAAH8kAACyMwAA5UEAGf9bAEz+fwB//6MAsv/IAABM
BQAAfwkAALIMAADlEAAZ/ykATP5ZAH//iACy/7cACkwAABJ/AAAZsgAAIOUAADr/
GQBm/kwAkf9/AL3/sgAbTAAALX8AAD+yAABR5QAAa/8ZAIz+TACt/38Azf+yACtM
AABIfwAAZbIAAIPlAACc/xkAsv5MAMj/fwDe/7IAPEwAAGR/AACMsgAAtOUAAM3/
GQDY/kwA4/9/AO7/sgBMTAAAf38AALKyAAD/ywAA//8ZAP7+TAD//38A//+yAEw8
AAB/ZAAAsowAAOW0AAD/zRkA/thMAP/jfwD/7rIATCsAAH9IAACyZgAA5YMAAP+c
GQD+skwA/8h/AP/esgBMGwAAfy0AALI/AADlUQAA/2sZAP6MTAD/rX8A/82yAEwK
AAB/EgAAshkAAOUgAAD/OhkA/mVMAP+RfwD/vbIATAAFAH8ACQCyAAwA5QAQAP8Z
KQD+TFkA/3+IAP+ytwBMABUAfwAkALIAMgDlAEEA/xlbAP5MfwD/f6MA/7LIAEwA
JgB/AD8AsgBZAOUAcgD/GYwA/kylAP9/vwD/stgATAA2AH8AWwCyAH8A5QCjAP8Z
vQD+TMwA/3/aAP+y6QBMAEcAfwB2ALIApQDlANUA/xnuAP5M8gD/f/UA/7L5AEEA
TABtAH8AmQCyAMQA5QDeGf8A5Uz+AOx//wD0sv8AMQBMAFEAfwByALIAkwDlAK0Z
/wC/TP4A0X//AOOy/wAgAEwANgB/AEwAsgBiAOUAexn/AJlM/gC2f/8A07L/ABAA
TAAbAH8AJgCyADEA5QBKGf8Ackz+AJp//wDCsv8AAAAAAAAAAAAAAAAAAAAAAAAA
HWEdDw8PDw8PDw8PDwAAHWFhYR0dHR0dHR0dHQ8AHWFhYWFZHZOTk5OTkx0PAB1h
YR1hYWEdHR0dHR0dDwAdYR0dHWFhYR2Tk5OTHQ8ADx0PHQ8dYWEdHR0dHR0PAA8d
Dx0PHR1ZHZOTk5MdDwAPHQ8dDx0dHR0dHR0dHQ8ADx0PHQ8dHR0dHR0dHR0PAA8d
Dx0PHR0dHR0dDw8PDwAPHQ8dDx0dHR0dHQ8dHQ8ADx0PHQ8dHR0dHR0PHQ8AAA8d
Dx0PDw8PDw8PDw8AAAAPHaWlpaWlpaWlpQAAAAAApqampqampqamAAAAAAAAAP//
AADAAQAAgAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAD
AAAABwAAAB8AAAB/AAA=}
},0,""},
{0},2,1,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{272,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовУстановитьФлажки5",
{1,0},1,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{568,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовУстановитьФлажки5ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{273,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовСнятьФлажки5",
{1,0},1,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{569,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовСнятьФлажки5ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{274,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьОтмеченныеВСценарий5",
{1,0},1,
{28,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:Qk02BQAAAAAAADYEAAAoAAAAEAAAABAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAAB
AAAAAQAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwACAgIAAAAD/AAD/
AAAA//8A/wAAAP8A/wD//wAA6ZIAAAgICAAXFxcAJycnADc3NwBHR0cAV1dXAGdn
ZwB3d3cAh4eHAJeXlwCnp6cAt7e3AMfHxwDX19cA5+fnAPf39wAAAEwAAAB/AAAA
sgAAAOUAGRn/AExM/gB/f/8AsrL/AAAQTAAAG38AACayAAAx5QAZSv8ATHL+AH+a
/wCywv8AACBMAAA2fwAATLIAAGLlABl7/wBMmf4Af7b/ALLT/wAAMUwAAFF/AABy
sgAAk+UAGa3/AEy//gB/0f8AsuP/AABBTAAAbX8AAJmyAADE5QAZ3v8ATOX+AH/s
/wCy9P8AAExHAAB/dgAAsqUAAOXVABn/7gBM/vIAf//1ALL/+QAATDYAAH9bAACy
fwAA5aMAGf+9AEz+zAB//9oAsv/pAABMJgAAfz8AALJZAADlcgAZ/4wATP6lAH//
vwCy/9gAAEwVAAB/JAAAsjMAAOVBABn/WwBM/n8Af/+jALL/yAAATAUAAH8JAACy
DAAA5RAAGf8pAEz+WQB//4gAsv+3AApMAAASfwAAGbIAACDlAAA6/xkAZv5MAJH/
fwC9/7IAG0wAAC1/AAA/sgAAUeUAAGv/GQCM/kwArf9/AM3/sgArTAAASH8AAGWy
AACD5QAAnP8ZALL+TADI/38A3v+yADxMAABkfwAAjLIAALTlAADN/xkA2P5MAOP/
fwDu/7IATEwAAH9/AACysgAA5eUAAP//GQD+/kwA//9/AP//sgBMPAAAf2QAALKM
AADltAAA/80ZAP7YTAD/438A/+6yAEwrAAB/SAAAsmYAAOWDAAD/nBkA/rJMAP/I
fwD/3rIATBsAAH8tAACyPwAA5VEAAP9rGQD+jEwA/61/AP/NsgBMCgAAfxIAALIZ
AADlIAAA/zoZAP5lTAD/kX8A/72yAEwABQB/AAkAsgAMAOUAEAD/GSkA/kxZAP9/
iAD/srcATAAVAH8AJACyADIA5QBBAP8ZWwD+TH8A/3+jAP+yyABMACYAfwA/ALIA
WQDlAHIA/xmMAP5MpQD/f78A/7LYAEwANgB/AFsAsgB/AOUAowD/Gb0A/kzMAP9/
2gD/sukATABHAH8AdgCyAKUA5QDVAP8Z7gD+TPIA/3/1AP+y+QBBAEwAbQB/AJkA
sgDEAOUA3hn/AOVM/gDsf/8A9LL/ADEATABRAH8AcgCyAJMA5QCtGf8Av0z+ANF/
/wDjsv8AIABMADYAfwBMALIAYgDlAHsZ/wCZTP4Atn//ANOy/wAQAEwAGwB/ACYA
sgAxAOUAShn/AHJM/gCaf/8AwrL/AB8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx+xsR8fHx+xsR8fHx8fHx8fsQ+xHx8fsQ+xHx8fHx8fH7EPD7EfH7EP
D7EfHx8fHx8fsQ8PsR8fsQ8PsR8fHx8fHx+xDw+xHx+xDw+xHx8fHx8fH7EPD7Ef
H7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EPD7EfHx8fH7EPD7EfH7EP
D7EfHx8fHx+xD7EfHx+xD7EfHx8fHx8fsbEfHx8fsbEfHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{570,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоДокументовЗаписатьОтмеченныеВСценарий5ExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{567,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачДействияСОтмеченнымиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{278,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачОбновитьТаблицуЭталоннойБазы",
{1,0},1,
{31,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{574,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачОбновитьТаблицуЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{670,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачВыбратьЭлементДереваЭталоннойБазы",
{1,0},1,
{30,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{671,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачВыбратьЭлементДереваЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{684,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачПометитьНаУдалениеЭлементЭталоннойБазы",
{1,0},1,
{42,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{685,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачПометитьНаУдалениеЭлементЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{223,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачНастроитьОтображениеЭталоннойБазы",
{1,0},1,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",7,13,1,
{
{#base64:Qk06AwAAAAAAADoAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAAAAAAALu7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u2bMzGaZmWaZmWaZmTNm
Zru7u7u7u7u7u7u7u7u7u2tra7u7u7u7u7u7u7u7u7u7u2bMzGbMzGaZmTNmZjU1
Nbu7u7u7u7u7u7u7u7u7u4aGhmtra7u7u7u7u7u7u2bMzGaZmWaZmWaZmWaZmWaZ
mTU1Nbu7u7u7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmWaZmWaZmWaZmWaZ
mWaZmTU1Nbu7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmWaZmTNmZmaZmWbMzGaZ
mWaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u2bMzGaZmTNmZru7u7u7u7u7u2bM
zGaZmTNmZru7u7u7u7u7u4aGhru7u2tra7u7u7u7u2bMzDNmZru7u7u7u7u7u2bM
zDNmZru7u7u7u7u7u4aGhru7u7u7u4aGhmtra7u7u7u7u2aZmbu7u7u7u7u7u2aZ
mbu7u7u7u7u7u4aGhru7u////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u7u7u////////////7u7u7u7u4aGhmtra7u7u7u7u7u7u7u7u7u7
u7u7u7u7u7u7u4aGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhmtra7u7u7u7u7u7u7u7
u7u7u7u7u7u7uw==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{572,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачНастроитьОтображениеЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{277,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачЗаписатьВСценарий",
{1,0},1,
{29,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",14,0,1,
{
{#base64:Qk02AwAAAAAAADYAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAA////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////////////eEsA6ZIA6ZIAeEsA
////////////////////////////////////////////eEsA6ZIA6ZIAeEsA////
////////////////////////////////////////eEsA6ZIA6ZIAeEsA////////
////////////////////////////////////eEsA6ZIA6ZIAeEsA////////////
////////////////////////////////////eEsA6ZIAeEsA////////////////
////////////////////////////////////eEsAeEsA////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{573,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачЗаписатьВСценарийExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{211,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},3,"ДеревоЗадачОтметка",0,0,
{1,0},
{1,1,
{"ru","Отметка"}
},
{2,
{21},
{7}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДеревоСправочниковОтметкаПриИзменении",0,0},1,
{21,
{212,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоЗадачОтметкаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{578,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачОтметкаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{199,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоЗадачЭлемент",1,0,
{1,0},
{1,0},
{2,
{21},
{1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{200,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоЗадачЭлементКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{576,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачЭлементExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{201,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоЗадачАналитика",1,0,
{1,0},
{1,0},
{2,
{21},
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{202,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоЗадачАналитикаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{577,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачАналитикаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},2,2,1,0,
{"Pattern"},"","",0,2,0,1,
{10,
{575,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗадачExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,1,1,1,
{4,
{1088,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗадачСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0},1,
{21,
{1089,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоЗадачСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1090,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗадачСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{196,0},0,3,3},1,
{4,
{1091,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДеревоЗадачСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,0,0},1,0,0},1,
{21,
{1092,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоЗадачСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1093,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗадачСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{196,1},0,3,3},1,
{4,
{1094,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоЗадачУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,2},1,
{21,
{1095,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоЗадачУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1096,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗадачУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{196,2},0,3,3},0,1,0,0,1,0,3,3},1,0,1,
{10,
{919,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СтраницаЗадачРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{905,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"СтраницыЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{492,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаЭталоннойБазыExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{1106,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ДекорацияСвернутьОкноЭталоннойБазы",
{1,1,
{"ru","Декорация свернуть окно эталонной базы"}
},
{1,0},1,1,1,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAAAoAAAAQCAYAAAAvf+5AAAAAT0lEQVQokZ3SOw4A
IAgDUGo8tk4evE4ugFplg5CX8AFJU6L4AjqY5aFREnfak1gzKavJIqzZdT8chD41
B5EJoVEWl+AVn/9d5qTqe1TfbAJ2OCSZEmyEBQAAAABJRU5ErkJggg==}
},0,""},1,0,0,
{1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{1,9874537f-454c-40ae-83e9-3b9cefbc6d08,"Декорация1Нажатие",0,0}
},1,
{21,
{1107,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДекорацияСвернутьОкноЭталоннойБазыКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru","Декорация свернуть окно эталонной базы"}
},0},0,1,
{10,
{1108,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДекорацияСвернутьОкноЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},1,0,1,
{10,
{1110,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СвертываемаяГруппаЭталоннойБазыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{92,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаСценария",
{1,1,
{"ru","Шаги сценария"}
},
{1,1,
{"ru","Группа сценария"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0},2,143c00f7-a42d-4cd7-9189-88e4467dc768,
{49,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"БлокСценария",0,0,1,
{1,0},
{1,0},
{1,
{1}
},0,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,2,2,0,1,0,0,1,0,2,1,0,1,1,
{1,
{22}
},
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAAZAAAAAQCAYAAAA4eCmgAAALI0lEQVR4nO1ce2wU
xx3+htoOMqjGpIXiCkIVcNtQFBOwISHp2qWnBtuhUFG31JCrW4IjzjREjYoEwXcH
EZLVSm2Cj9Z1kL0iLtQ8ihITkp7S85WGFvMIrSMFzkCNkoB4NT5sHPyc/nG369nd
2cft+WyH3CetdvY389udvd2bb36PWUIpRRJJJJFEEknEihSe8PJlr4JVHnjATUam
O58zHHkz/nMUFcZ/DhbD0ad4Mdz3lETCIYoNlmaiTmdpciy5h0DUFoiaPNqbmyE4
A4YPXRQLNC9PczNQV2esp+gIQcymEKWQzx+vvtU/AIu4/wzDPViP1MCr12+z61u5
3wTeQ0FZkAbqBM0zCxEiP/tsSgkrk44lGXsswcvoA4CbUsLK3FEdnmzUoX4mNn5/
UWygztJia20bmsIAJjmdpcrrJycNw4on/EQznh1z6L9zm2sObwOwVTrOmT1Drjt9
/hIGByg6wuHttVvWVrJ6CguERx4SgsGhOkEwt0jy84GysgIaC4nw0HwhiPxZgqLM
yoZTX36poxDFBl2ZKDYYXjfQVkOPX9qHqRkzMW/Gk5if9SPLv4O3uGhooGk6Yq7H
tJehHqBUg5ymXgcT0sf9E8AiAP8C8Oid7kEraqOGgrKg4URAqlcTiR5R6JGGGjxC
YIlDKvNkYwlbf6gdeCRs32+tv2JDk1F1BgAKQHmuUSQS48lnGJEua8FOQBMJUhKW
+0cbMyxd04gseOjtubv12R8/hYHBAfQPDGL65HScOXUSOY8swJzZM3CzsxvV4sGt
APgEcjmoIo/2ZrnMkocHzQjAbalT+fl86wQAZs7MNyWikSQPCRs2RPY7d2plALBg
gaVLo+POVbS0NSONpOPYBwew+KFDdN3CP5s+VK+KDLzFRdQSiahBCJVJQk0e6npj
LFLttRgLs8foABSoK9S9Jz0LJJtSYpUo9CBZFywpWJXJ/Y/nd4xXP4rt+ynZezKs
eV9W5VobuMSGJliwRnpFsYE6naWE7XNQ9FKIJy31U3AOr1tdcsS43W54vV5NWX1M
RoA6JOKoaASeBPAWIzMiklC1/iQgu4L/jvf29ODYfy6it7cPfX39qPj+Quzf9ydM
GJ+G3Nxc7H3nDNJStBEPbgxEgZn5ctGDZv1mTDsraG9vhiAMEVF9vXa2DwgY8rBJ
5cg+YgGUDps+EJFJBCGKWhnbzgwrcjyk/UYrvXjjLG7d/h8CZ19HasoaWjZ/j+6D
l8iDJQxvcRG1TCJGhGGlno/nALwc3VsCzwrgDdwjAZY0jPqQ3XQkLhLRs0DM3Fuf
U6TxhELpxpHuhwJut1vee71ebNu2DQDg9Xo1ZDJSoI1D1k8RgJ2NACkJm+o94wVq
3UD21FmyLHTtgqad5Lqa+MUMtF28pKmvr68HAKxakouPP/6wRl1vSCDtDCnUG5AH
i2k7PHL56maPLJPKiUZ5ebnltmrCideF5dqdR2d/5WFsLKolAPC84yABgN++8wPa
cv5vePfcGyibb7l7iYPF2e+E9HHsQPdydIvMGsdCsJ0DHnnpWR4SQqoBXbJIjNqq
iUYvviERhpkMwJixQgBg/olJSkGuPc4zcWcBiFgeQulGBN89i2aPBwCQ7/FAWJwD
r2M53P7Dcp3bf3hIZ5itEGCILACgsrJSIx8pEiElYdrUyK9ripAIterOMoLadTUw
MID+gQG53ufzweVyob6+fo3P53tNrW9ugdjAaBAHi5UrVyqODxw4oJFduXKdq2vH
XQUAWxpK6Ecd7+Na1zlsRK2i7vklh8jaD6fR2+EOvBmqvFWYve1+AFAPxLZcVVZA
KQEhVLY8rM+y1Q7gEIDEkYfJ4Lf+VUJ3rTXoe1EhAkVKvzRLHnr62ZQS9eDLi4n8
rhbg6bs5+mrCAIBrteDWs/03AkuOXEI00V+6Y8jXf3Qzx38f1V+Vm0FCJ4ba6rk9
zGDRnSWDJQivYzmEQAAAlOSRkkHQr3WxxYuIS8qLiNExtAcQLbPyGBFeSpFx1NZv
eARhFOnEYKxAWH8BwV2zdOvVrquevl709vbhka99R24TJZE9LpcLahJJCIFIVsho
kAcQIQwrMp51YcVdpZa91LCO/uPcQWRNmQryhX78xDeFbll2CHOmPy6/NGkp6ejv
60DX3duW74Pn0rINiUSAWOIfakyd93Ae3mOszJgQh+Wy/tVI301JRAWWPOzoAxEy
iUc/luubWUtmWLoDlEsOMSK7gpJQNaF2ySMupCgHTJZYeORhHATfDeDn3BopCJ7w
YPj1CgCxk8hbcimsIzeHEXkAQE9Pz2tv+/2rMzMnIzMzU7edHonckxZITY3SVVde
Xq6R8YjBrgur404nsjIewqd3ryIlhWDyhGlou34ac6Y/Lre59cknAAgmpn3J0j3Y
Ig8z3zobA7FHItfe+3fL0JGKDIwyoOTsp5U6f1Zm9qweZKXBF+BbAPeKvlkGmSGK
ChUWhh19FntPhikWduD0yTC1GkDXgz/QopFduXKdE7OMol85YOZ7PLIrS88CiScI
bkxAIQDZ3BqZeNqOmP/uMZIIbcwgpCRMKxq1hFFdYj0byww1L65bA2DNC6/soz9b
4ZBdWTzwSGTccHRirMHv98sbT26EDRuUbixJxu7V+M26vWTvC62k43YnKAUoKJbP
f44AgP/9P9C1tQ/S7i5gYvp4FH7jxfvt3VWMYMmBdV/FBskRvju6/7pcw7EkzGbO
VmbW7Eyd3QMGg+89oM+SR0FZkPI2o+uy5LF0ByhvM+u7BCkLS4qD8LKyYoGjIE+z
8VxbElF4HcuR7/HIRCIszpHr9NxXbrdbEQRn5dLeKH5BaWSrrHSrytncOlu4XhFx
Z1mAlElVXaKUq4+HC5Irq/lMGwKnzuu28/l8ALDH5XKtBmxYIAHBfF3HNI6LYyTd
Wg6HA36/Hw6HQyM3glEWliiCqeNnYX3rqwJCN/+O1DSC4qqJtO/TVAySfoyjqSD3
deG7ORxTWsetY8ttZWZR6JGIeeD1CcWRgRsqUCeQmLOwmOvvWqt0F7Fys05+VvXj
sjyA+CwPQPP82QC6XLYZRAf0A+lqC0RYnAMhEFBYGJLrShAEIvgPUz0LhA1yswTC
q9cDj2zYc+rpBo+fgvCYtYBp8PAiCE7jNhJ5nP/2JGRXUGJnHUisSE27r7Xt4qW5
Rm1EUURLi2xNlrhcrg9iIhAr5MEjiJF2Y+lZGTxSYRFvFlb1s38lv6xbSkM3g+ju
oujuGkDqeIrMScCyxU/j6dzfW374CYt/sDLrOAY9O54DNYnE6tNnB2Hp+F7W1yNd
qzi6GSRuEkkgzALpUjZVUPRSQPc+JDkVnG4iOJUkMVxBcLsEFDx+yvC8wmMLIkRj
kjnGruGQ4k92SSOSyhtJ3WXTeXkgBHP1XFhVVVXYtGmTRB6KbCz5Uya8hYRsGq/T
YNGfKBZQZtG6JeTnA07mEynxfkrESD8rawo368qqvpXrq7Hr7Y20824HpkyegkUP
fg/fzFqi/xJwZvSWCSTBi/iiqbxhABl3ugcjfbH4+QtuQDiGT2fYDVh/VvX1Vslb
hUQi8QTR7axEZz9lwmReDYoNTeOcpcVGFsiorA1Sw85nkADrwfcoMdoiDzsIVRP6
TJTngjcoEb5MaK3b+Ly/+LVI582bp1hI6HK5MHfuXLS2tsLpdCIvLw8ul+sNn8+3
TNLTfAsriSSSGD2MlSysWCGRCJu6a5rGm5IYd8xYQyxrVoYj883OSvTyl/64J9zZ
uVo6/tVPV8Df9Bfk5D2Kjy7/F2dOHMemTZtQVVUFn88nnyNJIEkkkUQSSRjC5XK9
DuApqFxY/wclT/NXRP4pMgAAAABJRU5ErkJggg==}
},0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,0,
{9,0d644ff6-443b-4390-86fa-7f9105e42711,"БлокСценарияПроверкаПеретаскивания",1282f000-23b6-4887-87f4-9e8e79db3d32,"БлокСценарияВыбор",2391e7b8-7235-45d7-ab7e-6ff3dc086396,"БлокСценарияПередНачаломДобавления",2ccfdec5-583d-4eca-8319-e55de492665a,"БлокСценарияПередУдалением",60edb81d-887b-478e-94ee-7fef2b13393d,"БлокСценарияПриАктивизацииСтроки",6d4d6747-a823-4f61-ab31-a426572f2c6c,"БлокСценарияНачалоПеретаскивания",8ad48496-8d0b-4f6c-ae48-99d95227884b,"БлокСценарияПеретаскивание",8bfdb5eb-62dc-4851-8a2c-e983526356bf,"БлокСценарияОбработкаВыбора",fe115cc8-9e33-4684-a166-bd5136fe7a9f,"БлокСценарияПриИзменении",0,0},
{7,01833a5a-6553-4c49-b445-095018107bb5,05468165-f954-45a5-84f2-6641c51f9f23,0d0249a4-2b2f-4fc0-a66f-b36f9494b3cc,2bbe4e12-06d2-409b-a972-eea585125d83,51c99108-107c-43e1-8918-e48835bf2495,58b2a785-23f6-4b0e-a324-9a1323285595,9ef79140-3de6-436a-8dda-610bb963f5db},1,
{21,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"БлокСценарияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0},11,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{287,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаКнопокДобавления",
{1,1,
{"ru","Группа кнопок добавления"}
},
{1,1,
{"ru","Группа кнопок добавления"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},5,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{288,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБДобавитьГрупповойШаг",
{1,0},1,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{586,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБДобавитьГрупповойШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{79,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБДобавитьШаг",
{1,0},1,
{1,b0016a68-ec64-4e6d-b905-c71fd62efc4c},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{587,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБДобавитьШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{898,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБСкопироватьШаг",
{1,0},1,
{1,0ae4bea5-23be-42a7-b69e-97b11b29c453},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{899,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБСкопироватьШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{80,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБИзменитьШаг",
{1,0},1,
{51,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{588,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБИзменитьШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{81,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБУдалитьШаг",
{1,0},1,
{1,8d772f97-c0ef-47c0-9cb0-efea28c61341},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{589,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБУдалитьШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{585,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаКнопокДобавленияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{289,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаКнопокУправленияУровнем",
{1,1,
{"ru","Группа кнопок управления уровнем"}
},
{1,1,
{"ru","Группа кнопок управления уровнем"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},6,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{932,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБАктивностьШаговУстановить",
{1,0},1,
{32,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{933,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБАктивностьШаговУстановитьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{934,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБАктивностьШаговСбросить",
{1,0},1,
{44,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{935,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБАктивностьШаговСброситьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{290,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПереместитьВверх",
{1,0},1,
{1,37740564-9e86-44a0-bea9-3f485a5a3f91},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{593,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПереместитьВверхРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{291,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПереместитьВниз",
{1,0},1,
{1,fa51b106-eae6-44c7-8054-76cbb3100603},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{594,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПереместитьВнизРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{82,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПовыситьУровень",
{1,0},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{591,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПовыситьУровеньРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{83,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПонизитьУровень",
{1,0},1,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{592,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПонизитьУровеньРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{590,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаКнопокУправленияУровнемExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{56,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаРаботыСШаблонами",
{1,1,
{"ru","Группа работы с шаблонами"}
},
{1,1,
{"ru","Группа работы с шаблонами"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{1144,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ПодменюШаблоны",
{1,1,
{"ru","Шаблоны"}
},
{1,1,
{"ru","Подменю шаблоны"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,0,
{0},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},5,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{74,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБДобавитьВШаблонШагов",
{1,0},1,
{13,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{596,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБДобавитьВШаблонШаговРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{86,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПрименитьОсновнойШаблон",
{1,0},1,
{18,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{597,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПрименитьОсновнойШаблонРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{75,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБВыбратьИПрименитьШаблон",
{1,0},1,
{14,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{598,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБВыбратьИПрименитьШаблонРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{215,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПрименитьШаблонПоУмолчанию",
{1,0},1,
{21,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{599,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПрименитьШаблонПоУмолчаниюРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{295,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПрименитьИсключенияИзШаблона",
{1,0},1,
{37,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{604,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПрименитьИсключенияИзШаблонаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{1145,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПодменюШаблоныРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{1146,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ПодменюМакрошаги",
{1,1,
{"ru","Макрошаги"}
},
{1,1,
{"ru","Подменю макрошаги"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,0,
{0},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{954,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБМакрошагиСоздатьНаОснованииГруппы",
{1,0},1,
{38,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{955,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБМакрошагиСоздатьНаОснованииГруппыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{952,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБМакрошагиДобавитьГруппуВМакрошаг",
{1,0},1,
{40,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{953,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБМакрошагиДобавитьГруппуВМакрошагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{956,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБМакрошагОткрыть",
{1,0},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{957,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБМакрошагОткрытьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{1147,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПодменюМакрошагиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{595,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаРаботыСШаблонамиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{880,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБОбновитьДанныеШагов",
{1,0},1,
{49,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{881,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБОбновитьДанныеШаговРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{1030,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМДанныеШага",
{1,0},1,
{36,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{1031,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМДанныеШагаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{85,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБСтруктураИдентификации",
{1,0},1,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",0,12,1,
{
{#base64:Qk02BQAAAAAAADYEAAAoAAAAEAAAABAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAAA
AAAAAAAAAAAAADU1NQAzZgAAM2ZmAGYzMwBmZgAAa2trAAAAmQAzM5kAAADMAAAA
/wAAM8wAM2b/AACZAAAzmQAAAP8AAGbMMwAzmZkAHJ3UAADMzAAAzP8AAP//ADP/
/wBmmZkAZpn/AGbMzACZAAAAmTMzAJk0NACZNTUAmTY2AJk3NwCZZjMAzAAzAMwz
MwDMNDQA/wAAAP80NADMZjMA/2Y0AP9nNADMmQAAzJkzAP+ZNADMzDMA//9mAIaG
hgCTk5MAoaGhAK6urgC7uroAu7u7AJnMzACZ//8AzJmZAP/MmQDJyckA1tbWAMzM
/wDM//8A/8zMAOTk5ADx8fEA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAADMzMzMzMzMzMzMzMzMzMzMzMzM2NjY2NjY2
NjY2MzMzMzMzPD09PT09PT09NjMkJDMzMzw8PDw8PDw8PDYzMyQzMzM2NjY2NjY2
NjY2MzMkMzMzPD09PT09PT09NjMkJDMzMzw8PDw8PDw8PDYzMyQgICAgICAgIAY2
MzMzJDMkNj09PT09PT09NjMzJCQkJDY2NjY2NjY2NjYzMzMkMyQzMzM2NjY2NjY2
NjY2MzMkMzMzPD09PT09PT09NjMkJDMzMzw8PDw8PDw8PDYzMyQzMzM2NjY2NjY2
NjY2MzMkMzMzPD09PT09PT09NjMkJDMzMzw8PDw8PDw8PDYzMzM=}
},0,""},1,
{"Pattern"},"",0,0,1,
{10,
{600,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБСтруктураИдентификацииРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{292,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаКнопокОтладки",
{1,1,
{"ru","Группа кнопок отладки"}
},
{1,1,
{"ru","Группа кнопок отладки"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{280,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБВыполнитьСценарий",
{1,0},1,
{33,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",1,8,1,
{
{#base64:Qk06AwAAAAAAADoAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAPBI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI
//BI//BI//BI//BI//BI//BI//+1kP+1kP+1kP+1kP+1kP+1kNkAANkAAP+1kP+1
kPBI//BI//BI//BI//BI//BI//+1kP///////////////////9kAANkAANlGANlG
APBI//BI//BI//BI//BI//BI//+1kP///////////////////9kAANkAANlGANlG
ANlGANlGAPBI//BI//BI//BI//+1kP///////////////////9kAANkAANlGANlG
ANlGANlGANlGAPBI//BI//BI//+1kP///////////////////9kAANkAANlGANlG
ANlGANlGAPBI//BI//BI//BI//+1kP///////////////////9kAANkAANlGANlG
APBI//BI//BI//BI//BI//BI//+1kP///////////////////9kAANkAAP////+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////////////////////+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////////////////////+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP+1kP+1kP+1kP+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP///////////8Dc
wPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP///////8DcwMDc
wPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP///8DcwMDcwMDc
wPBI//BI//BI//BI//BI//BI//+1kP+1kP+1kP+1kP+1kP+1kMDcwMDcwMDcwP+1
kPBI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI
//BI//BI//BI/w==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{602,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБВыполнитьСценарийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{52,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБВыполнитьШаг",
{1,0},1,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",13,6,1,
{
{#base64:Qk06AwAAAAAAADoAAAAoAAAAEAAAABAAAAABABgAAAAAAAADAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAPBI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI
//BI//BI//BI//BI//BI//BI//+1kP+1kNlGANlGAP+1kP+1kNkAANkAAP+1kP+1
kPBI//BI//BI//BI//BI//BI//+1kP///9lGANlGAP///////9kAANkAANlGANlG
APBI//BI//BI//BI//BI//BI//+1kP///9lGANlGAP///////9kAANkAANlGANlG
ANlGANlGAPBI//BI//BI//BI//+1kP///9lGANlGAP///////9kAANkAANlGANlG
ANlGANlGANlGAPBI//BI//BI//+1kP///9lGANlGAP///////9kAANkAANlGANlG
ANlGANlGAPBI//BI//BI//BI//+1kP///9lGANlGAP///////9kAANkAANlGANlG
APBI//BI//BI//BI//BI//BI//+1kP///9lGANlGAP///////9kAANkAAP////+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////////////////////+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////////////////////+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP+1kP+1kP+1kP+1
kPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP///////////8Dc
wPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP///////8DcwMDc
wPBI//BI//BI//BI//BI//BI//+1kP////////////////+1kP///8DcwMDcwMDc
wPBI//BI//BI//BI//BI//BI//+1kP+1kP+1kP+1kP+1kP+1kMDcwMDcwMDcwP+1
kPBI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI//BI
//BI//BI//BI/w==}
},0,""},1,
{"Pattern"},"",0,0,1,
{10,
{603,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБВыполнитьШагРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{1148,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ПодменюОтладка",
{1,1,
{"ru","Отладка"}
},
{1,1,
{"ru","Подменю отладка"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,0,
{0},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},4,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{832,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБОтметитьВыполнение",
{1,0},1,
{50,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{833,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБОтметитьВыполнениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{695,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБСброситьВыполнение",
{1,0},1,
{24,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{696,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБСброситьВыполнениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{926,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБТочкаОстановаУстановитьСнять",
{1,0},1,
{27,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACC0lEQVQ4jaWTu2sU
URSHv3NnZmfMY8MaJVkkFmKM2EhAGxsbK8EmGFArCysRfPwhPhptRAshCYhpghb2
dilsYpHKxIREdJPZmZ3Znd2ZeyyiE5IoKP7gwuXey3d+9zxEVfkfuX+6WFyY20M+
d+Wa/O6d7HewuDCnY45hYGSUSrUGClnUINrY4KvjMXn5qvwR8GF+Rk/XRxgcPgrG
AbUgAAYtcrY2N1luNLg4daOEmF+b97Mv9FTg0l/xsEkTbYWQxtBuoUkTkohaf8AJ
sbybfVlGLXMw2vxOX9VH4xCMgxjZcWEMoorNc2yvR81R/LUV9jh4++aV1rMIWhEa
NyGOoBVDEkPS2llpjCQRJE3GaTM/81xLB+ur63hFBmEDKRRxXcTzEM9FRVBroddD
Om3Y+ka128bmdvcLQRCgCUgzRIoC4wdQ8cGrICiaF5B10DRFohAE4la8C6j0+Wyn
FerSgyRF8wLJMtRxQBWKArpdJGsjKKEEDNWGd3MwcWacz5mSV2tgDJplaBShW9to
GO7kpJuBcSiqNZasx9T1m1ICJs9fkrWhYTbEQwcG0Z9RrVUUUAzq+tjqYb6YQ6Qj
9bIKZRnrJ8f4uLxK7vocGzoCnQ6IgBFEDMZzWOnBJ/GYvnWnbKQDrfz66UM961r2
69nSGo+ePD4wDwcAAPfv3isPL0wcB2D69oO/G6Z/1Q/FZvOk9A2ZLwAAAABJRU5E
rkJggg==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{927,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБТочкаОстановаУстановитьСнятьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{930,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБТочкаОстановаУдалитьВсе",
{1,0},1,
{34,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAA4ElEQVQ4jWP8//8/
AyWABZfEmc0rUEw28Y1gxKrw////KPj0puX/cYFzW1f/R1ePwjmydilOzTBwAKIG
04Cdy+YS1AwDW5fNgxvCiBSIpIYmIwMDAwMTAwMDw9a1i0mOinXL5vyHG/D00VNS
9TP8+/OPAW4ABwcHyQZ8/vIZYQAbFzvJBvALCkMY////Zzh3ajfRMYAEUKNx4ZQe
onWumj0Z04BdO1b+Xzmpm7Dmqb1wzf/RU+L///8ZoAowQEFe/n90tf/REhIcFOYX
wAWt1OUYGBgYGEKzirBmJqwGkAIAL1+smYj9NcwAAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{931,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБТочкаОстановаУдалитьВсеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{1149,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПодменюОтладкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{601,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаКнопокОтладкиExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{900,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПерейтиКШагуПоНомеру",
{1,0},1,
{54,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{901,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПерейтиКШагуПоНомеруРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{839,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ГруппаРаботаСТестируемойФормой",
{1,1,
{"ru","Работа с тестируемой формой"}
},
{1,1,
{"ru","Работа с тестируемой формой"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,1,
{0,fc34a694-e99b-4d1c-a526-63f5571bdb09},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{690,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПривязатьАвтогруппуКФорме",
{1,0},1,
{16,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{691,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБПривязатьАвтогруппуКФормеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{837,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБАктивизироватьТестируемуюФорму",
{1,0},1,
{52,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{838,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБАктивизироватьТестируемуюФормуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{840,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаРаботаСТестируемойФормойРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{882,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"КМИзменитьЦветТекста",
{1,1,
{"ru","Цвет текста"}
},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+g
vaeTAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAB3RJTUUH3QYRBiwINvb/JQAAAIJJ
REFUOMtj/P//PwMlgIWBgYGBkZExkFSN////Xw83AFkAZuD/dwxdcL4QQ9l/BksE
n+F4GYzNxEAhoNgAxv///1MnDBj+M8ghjGV4xPCBYR2cL8AQpFGD4N9oYQgalmEQ
+h8RBqsZHzGE/u9C4pcxuN1EhMku9eEUBoyU5kaKvQAA6NI5Fc8ynpYAAAAASUVO
RK5CYII=}
},0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},6,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{884,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБЦветАвто",
{1,0},1,
{53,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+g
vaeTAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAB3RJTUUH3QYRBhYkIYdNvwAAADBJ
REFUOMtj/P//PwMlgImBQsDIwMAQT4kBLFB6AZn6Eyj2wqgBowYMjrzASGl2BgDR
aQfXn3FVOAAAAABJRU5ErkJggg==}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{885,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБЦветАвтоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{888,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБЦветКрасный",
{1,0},1,
{55,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+g
vaeTAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAB3RJTUUH3QYRBhQFX9g/YwAAADVJ
REFUOMtj/P//PwMlgImBQsDIwMAQT4kBLAwMDAz/GRgWkGl7AsVeGDVg1IDBkRcY
Kc3OABltCNf66F+jAAAAAElFTkSuQmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{889,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБЦветКрасныйРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{894,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБЦветЗеленый",
{1,0},1,
{58,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+g
vaeTAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAB3RJTUUH3QYRBgIDqiMvgQAAADdJ
REFUOMtj/P//PwMlgImBQsDIwMAQT4kBLAwMDAwMNxgWkKVbgyGBYi+MGjBqwODI
C4yUZmcAD+UI16/MdgAAAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{895,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБЦветЗеленыйРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{896,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБЦветСиний",
{1,0},1,
{59,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+g
vaeTAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAB3RJTUUH3QYRBhUgDcfaZQAAADdJ
REFUOMtj/P//PwMlgImBQsDIwMAQT4kBLAwMDAwMjf+byNJdz1hHsRdGDRg1YHDk
BUZKszMAPEIJ13zFMjYAAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{897,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБЦветСинийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{890,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБЦветОранжевый",
{1,0},1,
{56,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+g
vaeTAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAB3RJTUUH3QYRBhUDr6CrFwAAADpJ
REFUOMtj/P//PwMlgJGBgSGeEgNYGBgYGM6EMjSRo9lkNUMdEwOFYNSAUQOoYgDF
eYGR0txIsRcA3sMJ13uBAY0AAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{891,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБЦветОранжевыйРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{892,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"КМБЦветФиолетовый",
{1,0},1,
{57,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+g
vaeTAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAB3RJTUUH3QYRBhYJZFgRygAAADpJ
REFUOMtj/P//PwMlgJGBgSGeEgNYGBgYGLoZuheQo7mUoTSBiYFCMGrAqAFUMYDi
vMBIaW6k2AsA4esJ1yebh78AAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{10,
{893,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМБЦветФиолетовыйРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{883,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КМИзменитьЦветТекстаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{1125,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"БлокСценарияКонтекстноеМенюНайтиИЗаменить",
{1,0},1,
{60,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{1126,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"БлокСценарияКонтекстноеМенюНайтиИЗаменитьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},1,
{21,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"БлокСценарияКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},0,1,0,0,0,3,3},7,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{829,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"БлокСценарияТочкаОстанова",1,0,
{1,0},
{1,1,
{"ru","Точка останова"}
},
{2,
{1},
{15}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,0,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{8,1,0,0,0,
{4,3,
{0},"",7,5,1,
{
{#base64:Qk02BgAAAAAAADYAAAAoAAAAIAAAABAAAAABABgAAAAAAAAGAAAAAAAAAAAAAAAA
AAAAAAAA////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////dXd6b25wcHBxlZye////////////////
////////////////////////////////////////////////////////////////
////////////////////r7/Li5CejJTCjZztkqDwlKHxjp3ti5XHjJSk////////
////////////////////////////////////////////////////////////////
////////////////qbi6i5KpjJbViZjwgZDwgpHwg5PwhZTxiJnziJTUjZWq////
////////////////////////////////////////////////////////////////
////////////////jJShi5nZhZj2dYn2cIT4coT2c4f3dIf3eoz2hpf1h5TVk5uq
////////////////////////////////////////////////////////////////
////////////u8rOeYW9hpjyeIz3dor3c4f4c4b4c4f4cof4c4j3dIn3fpLyeoS0
////////////////////////////////////////////////////////////////
////////////lqCneozddYr2dor3fZH4gZX5hJj5g5f5gJT4eo73cYf3bYT1dYbf
n6at////////////////////////////////////////////////////////////
////////////j5ahdIvuc4n1gJX3iJz5j6L5laf6lKf6kaP4iZz3f5L2boT0bYXv
jJWe////////////////////////////////////////////////////////////
////////////h46ZdIvvg5j0laX2man3nq75orP6o7T5obL4nK33k6X3fpPzbYTv
maGr////////////////////////////////////////////////////////////
////////////oqy0e5Dqlqj0orL1prT2qLf4q7r5rrz5rbv5qLj3orL2k6bzdorh
m6Wt////////////////////////////////////////////////////////////
////////////////iZfRpLT0sb/2tMH2tcP4uMX5usf5ucb5tcL3sL31orHzf4q8
////////////////////////////////////////////////////////////////
////////////////naa5qbXqwcz3ws73xM/4xdD5xtL5xdD4ws34wMv3o67inqa1
////////////////////////////////////////////////////////////////
////////////////////pa3EvMbs0dn51Nv50tr50tv51Nv50Nj4uMDmpa3A////
////////////////////////////////////////////////////////////////
////////////////////////p7LLqbXowcz00tr60tn6v8vzprLlq7XO////////
////////////////////////////////////////////////////////////////
////////////////////////////tMDGw8nPvL/HvsLKvcPJw9DV////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////}
},0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,0,
{0},1,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0,0,0},1,0,0,1,0},
{0,0,0},1,
{21,
{830,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"БлокСценарияТочкаОстановаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},1,0,1,
{10,
{831,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"БлокСценарияТочкаОстановаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{20,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},3,"БлокСценарияАктивность",1,0,
{1,1,
{"ru","Акт."}
},
{1,1,
{"ru","Активность шага"}
},
{2,
{1},
{9}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,1,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"БлокСценарияАктивностьПриИзменении",0,0},1,
{21,
{21,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"БлокСценарияАктивностьКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},1,0,1,
{10,
{638,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"БлокСценарияАктивностьExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{6,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"БлокСценарияНаименование",1,0,
{1,0},
{1,1,
{"ru","Наименование шага"}
},
{2,
{1},
{2}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{7,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"БлокСценарияНаименованиеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{639,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"БлокСценарияНаименованиеExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{4,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"БлокСценарияНомерШага",1,0,
{1,0},
{1,1,
{"ru","Номер шага"}
},
{2,
{1},
{1}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},1,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{5,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"БлокСценарияНомерШагаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{640,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"БлокСценарияНомерШагаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{762,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"БлокСценарияОбСсылка",1,0,
{1,0},
{1,0},
{2,
{1},
{12}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{763,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"БлокСценарияОбСсылкаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{764,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"БлокСценарияОбСсылкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{28,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},4,"БлокСценарияВыполнитьВручную",1,0,
{1,0},
{1,1,
{"ru","Признак ручного выполнения"}
},
{2,
{1},
{14}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{8,1,0,0,0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAADAAAAAQCAYAAABQrvyxAAAAmUlEQVRIie2WMQ7C
MAxFn7lNV3olrsHEMciVmJm5BOtnQJWikizIv1WlPClLBsff9k8SknAxlxDA+wXP
m8JxxskRdEsOLwBJ1nW+I2f8cHlgmX/4egA8PrAIqJOvcZj58B5IFzCX0OPyW+Wl
+tO13Z1/GR2o6VW/JrsLqQJaybf2Mo08RmhvhoAWvYcs+woF00u8QoDlKw3wAUCb
yVbKwynIAAAAAElFTkSuQmCC}
},0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,0,
{0},1,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{1,996b8c30-7a89-4973-8d56-2c9ce2976695,"БлокСценарияВыполнитьВручнуюНажатие",0,0},1,0,0,1,0},
{0,0,0},1,
{21,
{29,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"БлокСценарияВыполнитьВручнуюКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{641,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"БлокСценарияВыполнитьВручнуюExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{692,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"БлокСценарияВыполнено",1,0,
{1,0},
{1,0},
{2,
{1},
{10}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0},
{0,0,0},1,
{21,
{693,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"БлокСценарияВыполненоКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},0,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{694,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"БлокСценарияВыполненоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},2,2,1,1,
{"Pattern"},"","",0,2,0,1,
{10,
{637,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"БлокСценарияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,1,1,1,
{4,
{1097,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"БлокСценарияСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0},1,
{21,
{1098,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"БлокСценарияСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1099,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"БлокСценарияСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{1,0},0,3,3},1,
{4,
{1100,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"БлокСценарияСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,0,0},1,0,0},1,
{21,
{1101,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"БлокСценарияСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1102,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"БлокСценарияСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{1,1},0,3,3},1,
{4,
{1103,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"БлокСценарияУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,0,0,2},1,
{21,
{1104,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"БлокСценарияУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{1105,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"БлокСценарияУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{1,2},0,3,3},0,1,0,0,1,0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{920,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаОписанияШага",
{1,1,
{"ru","Описание"}
},
{1,1,
{"ru","Группа описания шага"}
},0,1,0,0,0,1,1,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,0,0,2,1,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,1,1,0,
{1,1,
{"ru","Описание шага (подробно)"}
},0,0,3,3,2,0,1,0},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{87,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ОписаниеШага",0,0,
{1,0},
{1,0},
{1,
{13}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,1,2,1,2,1,1,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,0,0},
{0,0,0},1,
{21,
{88,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ОписаниеШагаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{655,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ОписаниеШагаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{921,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаОписанияШагаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{579,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаСценарияExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{738,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаЭталоннаяБазаСценарийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{1111,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаСтатусаОбработки",
{1,1,
{"ru","Группа статуса обработки"}
},
{1,1,
{"ru","Группа статуса обработки"}
},0,1,0,0,0,1,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{739,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПредставлениеИмениФайла",0,0,
{1,0},
{1,0},
{1,
{5}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{31,
{3,0},0,0,1,0,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,1,2,
{0},70,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,0,0,0,0,0},
{0,0,0},1,
{21,
{740,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПредставлениеИмениФайлаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{741,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ПредставлениеИмениФайлаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{1132,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"СтраницыРежимаВыполнения",
{1,1,
{"ru","Страницы режима выполнения"}
},
{1,1,
{"ru","Страницы режима выполнения"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0,
{0,0,0}
},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{1134,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"СтраницаВыполнение",
{1,1,
{"ru","Страница выполнение"}
},
{1,1,
{"ru","Страница выполнение"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},1,3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{1141,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"КартинкаВыполнение",
{1,1,
{"ru","Картинка выполнение"}
},
{1,1,
{"ru","Режим выполнения.
Изменить?"}
},1,2,1,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAZ0lEQVQ4jb2TUQoA
IQhEndj7X3n6WASLcbGEFfoQ9Zk5gSStYaNT/B8AQP8GGaQMICkheGNrUCX7sgBY
XNxQSdH3k8GvthAhV4A4xrMHMj97A1Sk7EV7sdmhDlSvIx0oKwG+pmx/pgk0YEIL
FLWgfwAAAABJRU5ErkJggg==}
},0,""},1,0,0,
{1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{1,9874537f-454c-40ae-83e9-3b9cefbc6d08,"КартинкаВыполнениеНажатие",0,0}
},1,
{21,
{1142,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КартинкаВыполнениеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru","Картинка выполнение"}
},0},0,1,
{10,
{1143,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КартинкаВыполнениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},1,0,1,
{10,
{1135,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаВыполнениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{1136,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"СтраницаРедактирование",
{1,1,
{"ru","Страница редактирование"}
},
{1,1,
{"ru","Страница редактирование"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},1,3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{1138,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"КартинкаРедактирование",
{1,1,
{"ru","Картинка редактирование"}
},
{1,1,
{"ru","Режим редактирования.
Изменить?"}
},1,2,1,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAcklEQVQ4jaWTQQ7A
IAgE2ab/bnz5eiJRQALVixdmXEMWJCkX56kMYUAw8E+gIL84aCqIYJvkKKjAR0EG
2684QQd2gi4cJujAm0CH7Z3BYYIOLCLyKlAZjh6BdsHuOBOuCUGSNvIqsyI3m7Xx
VKBtU7d1nlWmUxxKSN8RAAAAAElFTkSuQmCC}
},0,""},1,0,0,
{1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{1,9874537f-454c-40ae-83e9-3b9cefbc6d08,"КартинкаРедактированиеНажатие",0,0}
},1,
{21,
{1139,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КартинкаРедактированиеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru","Картинка редактирование"}
},0},0,1,
{10,
{1140,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КартинкаРедактированиеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},1,0,1,
{10,
{1137,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаРедактированиеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{1133,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницыРежимаВыполненияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{1119,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"СтраницыСостоянияТП",
{1,1,
{"ru","Страницы состояния ТП"}
},
{1,1,
{"ru","Страницы состояния ТП"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0,
{0,0,0}
},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{1121,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"СтраницаТПВкл",
{1,1,
{"ru","Страница ТПВкл"}
},
{1,1,
{"ru","Страница ТПВкл"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},1,3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{1113,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ТестируемоеПриложениеПодключено",
{1,1,
{"ru","Тестируемое приложение подключено"}
},
{1,1,
{"ru","Тестируемое приложение подключено.
Отключить?"}
},1,2,1,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAYklEQVQ4jWP8//8/
AyWACZmjWctIsmlM2DSSYhALPklCBl1v/s+I14Drzf8ZCRnOhC5Acjj8//8fjjVq
GP4j8/FhmFomwlbgB6MGYElIFEUjvujChRnRcyMxLkBOoRgGkAoA2O56jbY0fYIA
AAAASUVORK5CYII=}
},0,""},1,0,0,
{1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{1,9874537f-454c-40ae-83e9-3b9cefbc6d08,"ТестируемоеПриложениеПодключеноНажатие",0,0}
},1,
{21,
{1114,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТестируемоеПриложениеПодключеноКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru","Тестируемое приложение подключено"}
},0},0,1,
{10,
{1115,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТестируемоеПриложениеПодключеноРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},1,0,1,
{10,
{1122,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаТПВклРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{1123,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"СтраницаТПОткл",
{1,1,
{"ru","Страница ТПОткл"}
},
{1,1,
{"ru","Страница ТПОткл"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},1,3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{1116,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ТестируемоеПриложениеВыключено",
{1,1,
{"ru","Тестируемое приложение выключено"}
},
{1,1,
{"ru","Тестируемое приложение выключено.
Подключить?"}
},1,2,1,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAbklEQVQ4jdWTUQrA
IAxDm+G5lZ787We4zblp8WuBgCk0pKUKsBWk+pJOJ1DMQOLW1OqpBJ3GUsrnfO4u
AwwzAKtsdYc5Z4AjAWhtB8GmK7arGM08NFhO8E+D1BbCi5w9mDeq/Y0zCdy93szD
IIodk/6FrdazaLYAAAAASUVORK5CYII=}
},0,""},1,0,0,
{1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{1,9874537f-454c-40ae-83e9-3b9cefbc6d08,"ТестируемоеПриложениеВыключеноНажатие",0,0}
},1,
{21,
{1117,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТестируемоеПриложениеВыключеноКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru","Тестируемое приложение выключено"}
},0},0,1,
{10,
{1118,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТестируемоеПриложениеВыключеноРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},1,0,1,
{10,
{1124,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницаТПОтклРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{1120,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтраницыСостоянияТПРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{1112,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСтатусаОбработкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",2,0,0,0,0,0,3,3,0,0,2},"
#Область Переменные

// Для хранения указателя на тестируемое приложения
&НаКлиенте
Перем СцТ_Контроллер Экспорт;

// Хранит указатели на формы тестируемого приложения.
//	Ключ - идентификатор шага интерактивной автогруппы в дереве БлокСценария;
//	Значение - структура с полями:
//	ФормаОбъект - объект формы;
//	ОкноОбъект - объект окна;
//	ТипОкна (Число):  0 - без окна, 1 - основное окно, 2 - клиентское окно.
&НаКлиенте
Перем СцТ_ФормыТестируемогоПриложения Экспорт;

// Тип: соответствие
// Хранит указатели на таблицы форм тестируемого приложения при автоматическом выполнении,
// чтобы не выполнять поиск таблицы при каждом выполнении действия в таблице
&НаКлиенте
Перем СцТ_ТаблицыТестируемогоПриложения Экспорт;

// Для хранения указателей на открытые формы настройки шагов
&НаКлиенте
Перем СцТ_ОткрытыеФормыНастройкиШагов Экспорт;

// Содержит разделитель пути в зависимости от типа ОС - чтобы не получать
// разделитель каждый раз.
&НаКлиенте
Перем РазделительПутиКлиента;

&НаКлиенте
Перем ПутьКаталогаСообщений;

&НаКлиенте
Перем ПутьФайлаСценарияДляАвтоОткрытия;

// Параметр автоматического запуска. Определяет действие, которое
// необходимо выполнить при запуске обработки.
&НаКлиенте
Перем СцТ_ВидДействияАвтоматическогоЗапуска;

// Вид клиента для автоматического запуска
&НаКлиенте
Перем СцТ_ВидКлиентаАвтоматическогоЗапуска Экспорт;

&НаКлиенте
Перем ПутьКИсполняемомуФайлуОбозревателя;

&НаКлиенте
Перем СцТ_ПортПриложенияНаВебСервере Экспорт;

&НаКлиенте
Перем СцТ_ИмяКомпьютераИБ Экспорт;


&НаКлиенте
Перем СцТ_URLИнформационнойБазы Экспорт;

&НаКлиенте
Перем ФормаОткрытия;

// Булево, Истина, если пользователь нажал кнопку ""ОстановитьВыполнение""
&НаКлиенте
Перем СцТ_ОстановкаПоИнициативеПользователя Экспорт;

// Хранение типа выполнения теста (пошаговый или автоматический)
// при прогоне
&НаКлиенте
Перем СцТ_ВыполнениеТеста Экспорт;

// Соедржит идентификатор текущего выполняемого шага сценария
&НаКлиенте
Перем СцТ_ИдентификаторТекущегоШагаСценария Экспорт;

// Признак необходимости перезаписи протокола
&НаКлиенте
Перем СцТ_ПерезаписатьФайлПротокола Экспорт;

// Определяет набор шагов, доступных для выполнения.
// Устанавливается автоматически
// Может принимать следующие значения:
// ВсеШаги                 - будут выполняться все шаги. Обычный режим
// ТолькоШагиБизнесЛогики  - будут выполнены только шаги проверки бизнес-логики
// ТолькоИнтерактивныеШаги - будут выполнены интерактивные шаги
&НаКлиенте
Перем СцТ_ДоступныйНаборШаговДляВыполнения Экспорт;

// Определяет есть ли у обработки внешнее управление
// или она открыта в ручном режиме
// Устанавливается только автоматически
// Может принимать следующие значения:
// Отсутствует       - обработка работает в ручном режиме
// ПосредствомФайлов - обработка открыта в обычном режиме из конфигурации СцТестирование
//                     управление осуществляется путем обмена файлами
// Непосредственное  - обработка открыта в конфигурации сценарного тестирования
//                     возможна работа только с интерактивными шагами
&НаКлиенте
Перем СцТ_ВнешнееУправлениеОбработкой Экспорт;

&НаКлиенте
Перем СцТ_JSONЗапись Экспорт;

&НаКлиенте
Перем СцТ_ФормаВыполнения;

&НаКлиенте
Перем СцТ_ВремяОжиданияОстаток;

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Закрытие обработки по внешней команде
&НаКлиенте
Процедура СцТ_ЗакрытьОбработку() Экспорт
	
	Оповестить(""СцТ_ПринудительноеЗакрытиеВсехФормОбработки"");
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

// Управление доступностью кнопок повышения и понижения уровня узла дерева сценария
// Параметры
// ТекущиеДанныеШага - текущие данные дерева сценария
&НаКлиенте
Процедура СцТ_ОбновитьДоступностьПовышенияИлиПониженияУровня(
	ТекущиеДанныеШага = Неопределено,
	ВызвавшаяФорма) Экспорт
	
	Если ТекущиеДанныеШага = Неопределено Тогда
		ТекущиеДанныеШага = ВызвавшаяФорма.Элементы.БлокСценария.ТекущиеДанные;
	КонецЕсли;
	
	ВызвавшаяФорма.Элементы.ПовыситьУровеньУзла.Доступность =
		СцТ_ПовышениеУровняУзлаВозможно(ТекущиеДанныеШага, ВызвавшаяФорма);
		
	ВызвавшаяФорма.Элементы.ПонизитьУровеньУзла.Доступность =
		СцТ_ПонижениеУровняУзлаВозможно(ТекущиеДанныеШага, ВызвавшаяФорма);
		
	ВызвавшаяФорма.Элементы.КМБПовыситьУровень.Доступность  = 
		ВызвавшаяФорма.Элементы.ПовыситьУровеньУзла.Доступность;
		
	ВызвавшаяФорма.Элементы.КМБПонизитьУровень.Доступность  =
		ВызвавшаяФорма.Элементы.ПонизитьУровеньУзла.Доступность;
	
КонецПроцедуры

// Добавление в дерево сценария или изменение шагов сценария
//
// Параметр - параметр, переданный в обработчике оповещения
&НаКлиенте
Процедура СцТ_ИмпортироватьШагиСценария(Параметр, ВызвавшаяФорма) Экспорт
	
	ТекущийШаг = ВызвавшаяФорма.Элементы.БлокСценария.ТекущиеДанные;
	
	// Определение места вставки записанных шагов
	ИндексВставки = 0;
	Если ТекущийШаг = Неопределено Тогда
		ШагПриемник = ВызвавшаяФорма.БлокСценария;
	ИначеЕсли ТекущийШаг.ТипШага = ""Группа""
		ИЛИ ТекущийШаг.ТипШага = ""АвтоГруппа""
		ИЛИ ТекущийШаг.ТипШага = ""ИнтерактивнаяАвтоГруппа""
		ИЛИ ТекущийШаг.ТипШага = ""АвтоГруппаТаблицаФормы""
		ИЛИ ТекущийШаг.ТипШага = ""АвтоГруппаТабличныйДокумент""
		
		Тогда
		
		ШагПриемник   = ТекущийШаг;
		ИндексВставки = ШагПриемник.ПолучитьЭлементы().Количество();
		
	Иначе
		
		ШагПриемник = ТекущийШаг.ПолучитьРодителя();
		Если ШагПриемник = Неопределено Тогда
			ШагПриемник = ВызвавшаяФорма.БлокСценария;
		КонецЕсли;
		ДочерниеШагиПриемника = ШагПриемник.ПолучитьЭлементы();
		Если ДочерниеШагиПриемника.Количество() > 0 Тогда
			ИндексВставки = ДочерниеШагиПриемника.Индекс(ТекущийШаг) + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	ШагКомментарий = ШагПриемник.ПолучитьЭлементы().Вставить(ИндексВставки);
	ШагКомментарий.ТипШага        = ""Комментарий"";
	ШагКомментарий.Активность     = 1;
	ШагКомментарий.Наименование   = Параметр.КомментарийНачала;
	Если Параметр.Свойство(""РазвернутыйКомментарийНачала"") Тогда
		ШагКомментарий.Комментарий = Параметр.РазвернутыйКомментарийНачала;
	КонецЕсли;
	ШагКомментарий.УИШ            = Строка(Новый УникальныйИдентификатор);
	ШагКомментарий.ДанныеКартинки = СцТ_ПолучитьДанныеКартинки_НаКлиенте(ШагКомментарий);
	
	СцТ_ДобавитьУзелВДеревоЗначения(ШагКомментарий.Значение, ""ИСТЗ_НаименованиеРучное"", Истина);
	
	///////////////////////////////////////////////////////////////////////////////
	ИндексВставки = ИндексВставки + 1;
	
	НовыеУзлы = Новый Массив;
	РеквизитАктивности = Параметр.ИмяРеквизитаАктивности;
	ИзмененныеУИШ = Новый Соответствие;
	
	Для каждого УзелЗаписанногоШага Из Параметр.Дерево.ПолучитьЭлементы() Цикл
		
		Если УзелЗаписанногоШага[РеквизитАктивности] = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйУзел = СцТ_СкопироватьУзелСценария(
			УзелЗаписанногоШага,
			ШагПриемник,
			ИндексВставки,
			Ложь,
			Истина,,
			Истина,,
			Параметр.ЭлементФормы,
			РеквизитАктивности);
			
		ИзмененныеУИШ.Вставить(УзелЗаписанногоШага.УИШ, НовыйУзел.УИШ);
		
		НовыеУзлы.Добавить(НовыйУзел);
		ИндексВставки = ИндексВставки + 1;
		
	КонецЦикла;
	
	Если Параметр.Свойство(""ДобавляемыеСсылки"") Тогда
		Если Параметр.ДобавляемыеСсылки.Количество() > 0 Тогда
			СцТ_ИмпортироватьСсылки(Параметр.ДобавляемыеСсылки, АдресТаблицыСсылок, ИзмененныеУИШ);
		КонецЕсли;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////////
	
	Если НовыеУзлы.Количество() > 0 Тогда
		
		ВызвавшаяФорма.Элементы.БлокСценария.ВыделенныеСтроки.Очистить();
		Для каждого ДобавленныйУзел Из НовыеУзлы Цикл
			
			СцТ_УстановитьФлагиУРодителей(ДобавленныйУзел);
			СцТ_РазвернутьУзлыНаПутиОтУзлаККорню(ДобавленныйУзел, Элементы.БлокСценария);
			ВызвавшаяФорма.Элементы.БлокСценария.ВыделенныеСтроки.Добавить(ДобавленныйУзел.ПолучитьИдентификатор());
			ИдентификаторыПодчиненных = СцТ_ПолучитьИдентификаторыВсехПодчиненныхУзлов(ДобавленныйУзел, Истина);
			
			Для каждого ИдентификаторПодчиненного Из ИдентификаторыПодчиненных Цикл
				ВызвавшаяФорма.Элементы.БлокСценария.ВыделенныеСтроки.Добавить(ИдентификаторПодчиненного);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ШагКомментарий = ШагПриемник.ПолучитьЭлементы().Вставить(ИндексВставки);
	ШагКомментарий.ТипШага        = ""Комментарий"";
	ШагКомментарий.Активность     = 1;
	ШагКомментарий.УИШ            = Строка(Новый УникальныйИдентификатор);
	ШагКомментарий.Наименование   = Параметр.КомментарийОкончания;
	ШагКомментарий.ДанныеКартинки = СцТ_ПолучитьДанныеКартинки_НаКлиенте(ШагКомментарий);
	
	СцТ_ДобавитьУзелВДеревоЗначения(ШагКомментарий.Значение, ""ИСТЗ_НаименованиеРучное"", Истина);
	
	СцТ_ПронумероватьШаги_НаКлиенте(,, ВызвавшаяФорма);
	
	ПоказатьОповещениеПользователя(НСтр(""ru = 'Добавление шагов'""),
		,
		НСтр(""ru = 'Выбранные шаги успешно добавлены в текущий сценарий'""),
		КартинкаИнформация32);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТЕСТИРУЕМЫМ ПРИЛОЖЕНИЕМ

// Определение заголовка интерактивного объекта тестируемого приложения
// в зависимости от его типа
// Параметры
//	ИнтерактивныйОбъект - объект тестируемого приложения
// Возвращаемое значение
//	Строка заголовка объекта
&НаКлиенте
Функция СцТ_ЗаголовокИнтерактивногоОбъекта(ИнтерактивныйОбъект) Экспорт
	
	ТипОбъекта = ТипЗнч(ИнтерактивныйОбъект);
	Если ТипОбъекта = Тип(""ТестируемоеПриложение"") Тогда
		ТекстЗаголовка = """";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемоеОкноКлиентскогоПриложения"") Тогда
		ТекстЗаголовка = ИнтерактивныйОбъект.Заголовок;
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемыйКомандныйИнтерфейсОкна"")
		ИЛИ   ТипОбъекта = Тип(""ТестируемаяГруппаКомандногоИнтерфейса"")
		ИЛИ   ТипОбъекта = Тип(""ТестируемаяКнопкаКомандногоИнтерфейса"")
		ИЛИ   ТипОбъекта = Тип(""ТестируемаяФорма"")
		ИЛИ   ТипОбъекта = Тип(""ТестируемоеПолеФормы"")
		ИЛИ   ТипОбъекта = Тип(""ТестируемаяГруппаФормы"")
		ИЛИ   ТипОбъекта = Тип(""ТестируемаяКнопкаФормы"")
		ИЛИ   ТипОбъекта = Тип(""ТестируемаяТаблицаФормы"")
		ИЛИ   ТипОбъекта = Тип(""ТестируемаяДекорацияФормы"") Тогда
		
		ТекстЗаголовка = ИнтерактивныйОбъект.ТекстЗаголовка;
		
		// Устарнение ошибки платформы
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, ""* *"", ""*"");
		
	Иначе
		ТекстЗаголовка = """";
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

// Определение имени интерактивного объекта тестируемого приложения
// в зависимости от его типа
// Параметры
//	ИнтерактивныйОбъект - объект тестируемого приложения
// Возвращаемое значение
//	Строка имени объекта
&НаКлиенте
Функция СцТ_ИмяИнтерактивногоОбъекта(ИнтерактивныйОбъект) Экспорт
	
	ТипОбъекта = ТипЗнч(ИнтерактивныйОбъект);
	Если    ТипОбъекта = Тип(""ТестируемоеПриложение"")
		ИЛИ ТипОбъекта = Тип(""ТестируемоеОкноКлиентскогоПриложения"")
		ИЛИ ТипОбъекта = Тип(""ТестируемыйКомандныйИнтерфейсОкна"")
		ИЛИ ТипОбъекта = Тип(""ТестируемаяГруппаКомандногоИнтерфейса"")
		ИЛИ ТипОбъекта = Тип(""ТестируемаяКнопкаКомандногоИнтерфейса"")
		ИЛИ ТипОбъекта = Тип(""ТестируемаяКнопкаКомандногоИнтерфейса"") Тогда
		
		Возврат """";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяФорма"") Тогда
		Возврат ИнтерактивныйОбъект.ИмяФормы;
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемоеПолеФормы"")
		ИЛИ   ТипОбъекта = Тип(""ТестируемаяГруппаФормы"")
		ИЛИ   ТипОбъекта = Тип(""ТестируемаяКнопкаФормы"")
		ИЛИ   ТипОбъекта = Тип(""ТестируемаяТаблицаФормы"")
		ИЛИ   ТипОбъекта = Тип(""ТестируемаяДекорацияФормы"") Тогда
		
		Возврат ИнтерактивныйОбъект.Имя;
		
	Иначе
		Возврат """";
		
	КонецЕсли;
	
КонецФункции

// Определение может ли объект тестируемого приложения содержать подчиненные объекты,
// например контекстное меню
// Параметры
//	ИнтерактивныйОбъект - объект тестируемого приложения
// Возвращаемое значение
//	Истина - может, Ложь - не может
&НаКлиенте
Функция СцТ_ИнтерактивныйОбъектДопускаетНаличиеПодчиненныхОбъектов(ИнтерактивныйОбъект) Экспорт
	
	// Пока что только кнопка не может содержать подчиненные объекты
	ТипОбъекта = ТипЗнч(ИнтерактивныйОбъект);
	Возврат (ТипОбъекта <> Тип(""ТестируемаяКнопкаФормы""));
	
КонецФункции

// Получение данных объекта тестируемого приложения
// Параметры
//	ИнтерактивныйОбъект - указатель на тестируемый объект
//	ВидОбъекта - вид тестируемого объекта
//	ТаблицаНаФорме - указатель на тестируемую таблицу
//	ИстинныеДанные  - возвращаемый параметр с данными объекта
// Возвращаемое значение
//	Пользовательское описание данных объекта
&НаКлиенте
Функция СцТ_ДанныеИнтерактивногоОбъекта(
	ИнтерактивныйОбъект,
	Знач ВидОбъекта = Неопределено,
	ТаблицаНаФорме = Неопределено,
	ИстинныеДанные = Неопределено) Экспорт
	
	ТипОбъекта                 = ТипЗнч(ИнтерактивныйОбъект);
	ПредставлениеДанныхОбъекта = """";
	ИмяОбъекта = СцТ_ИмяИнтерактивногоОбъекта(ИнтерактивныйОбъект);
	
	// Получение значения данных в поле ввода
	Если ТипОбъекта = Тип(""ТестируемоеПолеФормы"") Тогда
		
		Если ВидОбъекта = Неопределено Тогда
			ВидОбъекта = СцТ_ПолучитьВидОбъекта(ИнтерактивныйОбъект).Вид;
		КонецЕсли;
		
		Попытка
			
			Если ТаблицаНаФорме = Неопределено Тогда
				ПредставлениеДанныхОбъекта = ИнтерактивныйОбъект.ПолучитьТекстРедактирования();
				
			Иначе
				Если ТаблицаНаФорме.ТекущийРежимРедактирование() Тогда
					
					ИнтерактивныйОбъект.Активизировать();
					ПредставлениеДанныхОбъекта = ИнтерактивныйОбъект.ПолучитьТекстРедактирования();
					
				Иначе
					
					Если ВидОбъекта = ""ПолеФлажка"" Тогда
						// Для колонки флажка можно получить только ПолучитьПредставлениеДанных(),
						// при этом колонка должна быть активизирована
						ИнтерактивныйОбъект.Активизировать();
						ПредставлениеДанныхОбъекта = ИнтерактивныйОбъект.ПолучитьТекстРедактирования();
					Иначе
						ПредставлениеДанныхОбъекта = ТаблицаНаФорме.ПолучитьТекстЯчейки(ИмяОбъекта);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
		ИстинныеДанные = СцТ_ИстинныеДанныеДляПоляФормы(ВидОбъекта, ПредставлениеДанныхОбъекта);
		
	КонецЕсли;
	
	Возврат ПредставлениеДанныхОбъекта;
	
КонецФункции

// Получение атрибутов доступности тестируемого объекта
// Параметры
//	ИнтерактивныйОбъект - указатель на тестируемый объект
// Возвращаемое значение
//	Структура со сведениями овидимости, доступности, только просмотре
&НаКлиенте
Функция СцТ_АтрибутыДоступностиИнтерактивногоОбъекта(ИнтерактивныйОбъект) Экспорт
	
	ТипОбъекта = ТипЗнч(ИнтерактивныйОбъект);
	// Изначально оптимистичный прогноз, т.к. могут пристуствовать не все свойства
	Результат = Новый Структура(""Видимость,Доступность,ТолькоПросмотр"", Истина, Истина, Ложь);
	
	Если ТипОбъекта = Тип(""ТестируемоеПолеФормы"")
		ИЛИ ТипОбъекта = Тип(""ТестируемаяГруппаФормы"")
		ИЛИ ТипОбъекта = Тип(""ТестируемаяТаблицаФормы"")
		ИЛИ ТипОбъекта = Тип(""ТестируемаяДекорацияФормы"")
		ИЛИ ТипОбъекта = Тип(""ТестируемаяКнопкаФормы"") Тогда
		
		Попытка
			Результат.Видимость = ИнтерактивныйОбъект.ТекущаяВидимость();
		Исключение
		КонецПопытки;
		
		Попытка
			Результат.Доступность = ИнтерактивныйОбъект.ТекущаяДоступность();
		Исключение
		КонецПопытки;
		
		Попытка
			Результат.ТолькоПросмотр = ИнтерактивныйОбъект.ТекущееТолькоПросмотр();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Инициирует процесс запуска тестируемого приложения и подключения к нему
&НаКлиенте
Функция СцТ_ТестируемоеПриложение(СД = Неопределено) Экспорт
	
	СцТ_Контроллер = Неопределено;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""ВидТестируемогоКлиента""          , ВидТестируемогоКлиента);
	ПараметрыФормы.Вставить(""ИмяПользователя""                 , Объект.ИмяПользователя);
	ПараметрыФормы.Вставить(""ПарольПользователяИБ""            , Объект.ПарольПользователяИБ);
	ПараметрыФормы.Вставить(""URLИБ""                           , URLИБ);
	ПараметрыФормы.Вставить(""ПортТестируемогоКлиента""         , ПортТестируемогоКлиента);
	ПараметрыФормы.Вставить(""КомпьютерИБ""                     , КомпьютерИБ);
	ПараметрыФормы.Вставить(""ДругаяИБ""                        , ДругаяИБ);
	ПараметрыФормы.Вставить(""СтрокаПодключенияКИБ""            , СтрокаПодключенияКИБ);
	ПараметрыФормы.Вставить(""ДопПараметрыКоманднойСтроки""     , ДопПараметрыКоманднойСтроки);
	
	ПараметрыФормы.Вставить(""ЗакрыватьПриЗакрытииВладельца""   , Истина);
	ПараметрыФормы.Вставить(""ЭтоКлиентСервернаяИБ""            , ПараметрыСоединенияСИБ.КлиентСерверная);
	ПараметрыФормы.Вставить(""ПутьКФормам""                     , ПутьКФормам);
	
	ПараметрыФормы.Вставить(""СцТ_РежимВыполнения""             , СцТ_РежимВыполнения);
	ПараметрыФормы.Вставить(""ВыполнятьЗамерПроизводительности"", ВыполнятьЗамерПроизводительности);
	
	ОткрытьФорму(ПутьКФормам + ""ПараметрыЗапускаТестируемогоКлиента"",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения(""СцТ_ЗапуститьТребуемоеПриложениеПоКомандеИнтерфейса"", ЭтотОбъект, СД));
	
КонецФункции

// Проверка активности тестируемого приложения
// Так как у тестируемого приложения нет соответствующего метода,
// то активность определяется по косвенным признакам
// Возвращаемое значение
// Истина - активно, Ложь - не активно
&НаКлиенте
Функция СцТ_ТестируемоеПриложениеАктивно() Экспорт
	
	Если СцТ_Контроллер = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ПодчиненныеОбъекты = СцТ_Контроллер.ПолучитьПодчиненныеОбъекты();
		Если ПодчиненныеОбъекты = Неопределено ИЛИ ПодчиненныеОбъекты.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Получение основного окна тестируемого приложения
// Возвращаемое значение
// Указатель на основное окно тестируемого приложения или неопределено,
//	если тестируемое приложение не найдено
&НаКлиенте
Функция СцТ_ПолучитьОсновноеОкноТестируемогоПриложения() Экспорт
	
	Попытка
		ОкнаКлиентскогоПриложения = СцТ_Контроллер.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
		Для каждого ОкноПриложения Из ОкнаКлиентскогоПриложения Цикл
			Если ОкноПриложения.Основное Тогда
				Возврат ОкноПриложения;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// Получение вида тестируемого объекта
// Вид объекта показывает, как видит объект формы пользователь
// Виды объектов тестирумеого приложения (Вид, СинонимВида),
// Отметка ""+"" показывает с какими полями формы реализована работа.
//
// ""Гиперссылка""                          : ""Гиперссылка""
// ""ГруппаКнопок""                         : ""Группа кнопок""
// ""ГруппаКолонок""                        : ""Группа колонок""
// ""Картинка""                             : ""Картинка""
// ""КнопкаКоманднойПанели""                : ""Кнопка""
// ""КоманднаяПанель""                      : ""Командная панель""
// ""КонтекстноеМеню""                      : ""Контекстное меню"";
// ""Надпись""                              : ""Надпись"";
// ""ОбычнаяГруппа""                        : ""Группа элементов"";
// ""ОбычнаяКнопка""                        : ""Кнопка"";
// ""Подменю""                              : ""Подменю"";
// ""ПолеHTMLДокумента""                    : ""Поле HTML-документа"";
// ""ПолеВвода""                            : ""Поле ввода"";
// ""ПолеГеографическойСхемы""              : ""Географическая схема"";
// ""ПолеГрафическойСхемы""                 : ""Графическая схема"";
// ""ПолеДендрограммы""                     : ""Дендрограма"";
// ""ПолеДиаграммы""                        : ""Диаграмма"";
// ""ПолеДиаграммыГанта""                   : ""Диаграмма Ганта"";
// ""ПолеИндикатора""                       : ""Индикатор"";
// ""ПолеКалендаря""                        : ""Календарь"";
// ""ПолеПереключателя""                    : ""Переключатель"";
// ""ПолеПолосыРегулирования""              : ""Полоса регулирования"";
// ""ПолеТабличногоДокумента""              : ""Табличный документ"";
// ""ПолеТекстовогоДокумента""              : ""Текстовый документ"";
// ""ПолеФлажка""                           : ""Флажок"";
// ""ПолеФорматированногоДокумента""        : ""Форматированный документ"";
// ""Страница""                             : ""Страница"";
// ""Страницы""                             : ""Набор страниц"";
// ""ТаблицаФормы""                         : ""Таблица"";
// ""ТестируемаяФорма""                     : ""Форма""
// ""ТестируемоеОкноКлиентскогоПриложения"" : ""Окно""
// ""ТестируемоеПриложение""                : ""Тестирумеое приложение""
// ""ТестируемоеПриложение""                : ""Тестирумеое приложение""
// ""КомандныйИнтерфейс""                   : ""Командный интерфейс""
// ""ГруппаКомандногоИнтерфейса""           : ""Группа интерфейса""
// ""КнопкаКомандногоИнтерфейса""           : ""Кнопка""
//
&НаКлиенте
Функция СцТ_ПолучитьВидОбъекта(ОбъектТестируемогоПриложения) Экспорт
	
	Результат = Новый Структура(""Вид,Синоним"", Неопределено, НСтр(""ru = 'Вид не определен'""));
	
	ТипОбъекта = ТипЗнч(ОбъектТестируемогоПриложения);
	
	Если ТипОбъекта = Тип(""ТестируемоеПриложение"") Тогда
		Результат.Вид     = ""ТестируемоеПриложение"";
		Результат.Синоним = ""Тестирумеое приложение"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемоеОкноКлиентскогоПриложения"") Тогда
		Результат.Вид     = ""ТестируемоеОкноКлиентскогоПриложения"";
		Результат.Синоним = ""Окно"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяФорма"") Тогда
		Результат.Вид     = ""ТестируемаяФорма"";
		Результат.Синоним = ""Форма"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемоеПолеФормы"") Тогда
		Если ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеHTMLДокумента Тогда
			Результат.Вид     = ""ПолеHTMLДокумента"";
			Результат.Синоним = ""Поле HTML-документа"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеВвода Тогда
			Результат.Вид     = ""ПолеВвода"";
			Результат.Синоним = ""Поле ввода"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеГеографическойСхемы Тогда
			Результат.Вид     = ""ПолеГеографическойСхемы"";
			Результат.Синоним = ""Географическая схема"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеГрафическойСхемы Тогда
			Результат.Вид     = ""ПолеГрафическойСхемы"";
			Результат.Синоним = ""Графическая схема"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеДендрограммы Тогда
			Результат.Вид     = ""ПолеДендрограммы"";
			Результат.Синоним = ""Дендрограма"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеДиаграммы Тогда
			Результат.Вид     = ""ПолеДиаграммы"";
			Результат.Синоним = ""Диаграмма"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеДиаграммыГанта Тогда
			Результат.Вид     = ""ПолеДиаграммыГанта"";
			Результат.Синоним = ""Диаграмма Ганта"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеИндикатора Тогда
			Результат.Вид     = ""ПолеИндикатора"";
			Результат.Синоним = ""Индикатор"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеКалендаря Тогда
			Результат.Вид     = ""ПолеКалендаря"";
			Результат.Синоним = ""Календарь"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеКартинки Тогда
			Результат.Вид     = ""Картинка"";
			Результат.Синоним = ""Картинка"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеНадписи Тогда
			Результат.Вид     = ""Надпись"";
			Результат.Синоним = ""Надпись"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеПереключателя Тогда
			Результат.Вид     = ""ПолеПереключателя"";
			Результат.Синоним = ""Переключатель"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеПолосыРегулирования Тогда
			Результат.Вид     = ""ПолеПолосыРегулирования"";
			Результат.Синоним = ""Полоса регулирования"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
			Результат.Вид     = ""ПолеТабличногоДокумента"";
			Результат.Синоним = ""Табличный документ"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеТекстовогоДокумента Тогда
			Результат.Вид     = ""ПолеТекстовогоДокумента"";
			Результат.Синоним = ""Текстовый документ"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеФлажка Тогда
			Результат.Вид     = ""ПолеФлажка"";
			Результат.Синоним = ""Флажок"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидПоляФормы.ПолеФорматированногоДокумента Тогда
			Результат.Вид     = ""ПолеФорматированногоДокумента"";
			Результат.Синоним = ""Форматированный документ"";
			
		Иначе
			Результат.Вид     = ""ПолеВвода"";
			Результат.Синоним = ""Поле ввода"";
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяГруппаФормы"") Тогда
		Если ОбъектТестируемогоПриложения.Вид = Неопределено Тогда
			Результат.Вид     = ""КоманднаяПанель"";
			Результат.Синоним = ""Командная панель"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидГруппыФормы.КоманднаяПанель Тогда
			Результат.Вид     = ""КоманднаяПанель"";
			Результат.Синоним = ""Командная панель"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидГруппыФормы.ГруппаКнопок Тогда
			Результат.Вид     = ""ГруппаКнопок"";
			Результат.Синоним = ""Группа кнопок"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидГруппыФормы.ГруппаКолонок Тогда
			Результат.Вид     = ""ГруппаКолонок"";
			Результат.Синоним = ""Группа колонок"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидГруппыФормы.КонтекстноеМеню Тогда
			Результат.Вид     = ""КонтекстноеМеню"";
			Результат.Синоним = ""Контекстное меню"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
			Результат.Вид     = ""ОбычнаяГруппа"";
			Результат.Синоним = ""Группа элементов"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидГруппыФормы.Подменю Тогда
			Результат.Вид     = ""Подменю"";
			Результат.Синоним = ""Подменю"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидГруппыФормы.Страница Тогда
			Результат.Вид     = ""Страница"";
			Результат.Синоним = ""Страница"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидГруппыФормы.Страницы Тогда
			Результат.Вид     = ""Страницы"";
			Результат.Синоним = ""Набор страниц"";
			
		КонецЕсли;
		
		Если Результат.Вид = ""КоманднаяПанель""
			И ОбъектТестируемогоПриложения.Имя = ""ФормаКоманднаяПанель"" Тогда
			
			Результат.Синоним = ""Командная панель формы"";
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяКнопкаФормы"") Тогда
		
		Если ОбъектТестируемогоПриложения.Вид = ВидКнопкиФормы.Гиперссылка Тогда
			Результат.Вид     = ""Гиперссылка"";
			Результат.Синоним = ""Гиперссылка"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели Тогда
			Результат.Вид     = ""КнопкаКоманднойПанели"";
			Результат.Синоним = ""Кнопка"";
			
		Иначе
			Результат.Вид     = ""ОбычнаяКнопка"";
			Результат.Синоним = ""Кнопка"";
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяТаблицаФормы"") Тогда
		Результат.Вид     = ""ТаблицаФормы"";
		Результат.Синоним = ""Таблица"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяДекорацияФормы"") Тогда
		Если ОбъектТестируемогоПриложения.Вид = ВидДекорацииФормы.Картинка Тогда
			Результат.Вид     = ""Картинка"";
			Результат.Синоним = ""Картинка"";
			
		ИначеЕсли ОбъектТестируемогоПриложения.Вид = ВидДекорацииФормы.Надпись Тогда
			Результат.Вид     = ""Надпись"";
			Результат.Синоним = ""Надпись"";
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемыйКомандныйИнтерфейсОкна"") Тогда
			Результат.Вид     = ""КомандныйИнтерфейс"";
			Результат.Синоним = ""Командный интерфейс"";

	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяГруппаКомандногоИнтерфейса"") Тогда
			Результат.Вид     = ""ГруппаКомандногоИнтерфейса"";
			Результат.Синоним = ""Группа интерфейса"";

	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяКнопкаКомандногоИнтерфейса"") Тогда
			Результат.Вид     = ""КнопкаКомандногоИнтерфейса"";
			Результат.Синоним = ""Кнопка"";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение истинного значения для интерактивных шагов
// Параметры
//	ВидТестируемогоПоляФормы - строка вида тестируемого объекта
//	ПредставлениеДанных - хранимое в тесте представление данных
// Возвращаемое значение - истинное значение простого типа (строка, дата, булево)
&НаКлиенте
Функция СцТ_ИстинныеДанныеДляПоляФормы(ВидТестируемогоПоляФормы, ПредставлениеДанных) Экспорт
	
	Если ВидТестируемогоПоляФормы = ""ПолеКалендаря"" Тогда
		Попытка
			ЗначениеДаты = Дата(ПредставлениеДанных);
		Исключение
			ЗначениеДаты = '00010101';
		КонецПопытки;
		
		Возврат ЗначениеДаты;
		
	ИначеЕсли ВидТестируемогоПоляФормы = ""ПолеФлажка"" Тогда
		ДанныеВРег = ВРег(СокрЛП(Строка(ПредставлениеДанных)));
		
		Возврат (ДанныеВРег = ""ИСТИНА""
			ИЛИ ДанныеВРег = ""ДА""
			ИЛИ ДанныеВРег = ""YES""
			ИЛИ ДанныеВРег = ""1""
			ИЛИ ДанныеВРег = ""2"");
		
	Иначе
		
		Возврат ПредставлениеДанных;
	КонецЕсли;
	
КонецФункции

// Определение тетсируемого объекта для интерактивного шага сценария
// Параметры
//	ШагСценария - Данные шага
//	ОписаниеРезультата - строка описания при ошибке
// Возвращаемое значение - указатель на тестируемый объект (форму или таблицу формы)
&НаКлиенте
Функция СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(
	ШагСценария,
	ОписаниеРезультата = """",
	БезТаймаута = Ложь) Экспорт
	
	ТекущаяАвтоГруппа = ШагСценария;
	Пока  ТекущаяАвтоГруппа <> Неопределено
		И ТекущаяАвтоГруппа.ТипШага <> ""ИнтерактивнаяАвтоГруппа""
		И ТекущаяАвтоГруппа.ТипШага <> ""АвтоГруппаТаблицаФормы"" Цикл
		ТекущаяАвтоГруппа = ТекущаяАвтоГруппа.ПолучитьРодителя();
	КонецЦикла;
	
	Если ТекущаяАвтоГруппа = Неопределено Тогда
		ОписаниеРезультата = ""НетАвтоГруппыТаблица"";
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущаяАвтоГруппа.ТипШага = ""ИнтерактивнаяАвтоГруппа"" Тогда
		Возврат СцТ_ПолучитьТестируемуюФормуДляИнтерактивнойАвторгруппы(ТекущаяАвтоГруппа, , ОписаниеРезультата);
	ИначеЕсли ТекущаяАвтоГруппа.ТипШага = ""АвтоГруппаТаблицаФормы"" Тогда
		Возврат СцТ_ПолучитьТаблицуДляИнтерактивногоШага(ТекущаяАвтоГруппа, ОписаниеРезультата, БезТаймаута);
	КонецЕсли;
	
КонецФункции

// Получение пользовательского описания действий с полем тестируемой формы
// Параметры
//	ЗначениеДействия - хранимая строка действия
// Возвращаемое значение - пользовательская строка действия
&НаКлиенте
Функция СцТ_ПолучитьПредставлениеДействияСПолемФормы(ЗначениеДействия) Экспорт
	
	Если ЗначениеДействия = ""ВвестиТекст"" Тогда
		Возврат НСтр(""ru = 'Ввести текст'"");
		
	ИначеЕсли ЗначениеДействия = ""ВводПоСтроке"" Тогда
		Возврат НСтр(""ru = 'Ввод по строке'"");
		
	ИначеЕсли ЗначениеДействия = ""НажатьКнопкуВыбора"" Тогда
		Возврат НСтр(""ru = 'Нажать кнопку выбора (F4)'"");
		
	ИначеЕсли ЗначениеДействия = ""ВыбратьВариант"" Тогда
		Возврат НСтр(""ru = 'Выбрать вариант'"");
		
	ИначеЕсли ЗначениеДействия = ""ВыбратьИзСпискаВыбора"" Тогда
		Возврат НСтр(""ru = 'Выбрать из списка выбора'"");
		
	ИначеЕсли ЗначениеДействия = ""ВыбратьИзВыпадающегоСписка"" Тогда
		Возврат НСтр(""ru = 'Выбрать из выпадающего списка'"");
		
	ИначеЕсли ЗначениеДействия = ""Открыть"" Тогда
		Возврат НСтр(""ru = 'Открыть'"");
		
	ИначеЕсли ЗначениеДействия = ""Очистить"" Тогда
		Возврат НСтр(""ru = 'Очистить'"");
		
	ИначеЕсли ЗначениеДействия = ""ПерейтиКДате"" Тогда
		Возврат НСтр(""ru = 'Перейти к дате'"");
		
	ИначеЕсли ЗначениеДействия = ""Выбрать"" Тогда
		Возврат НСтр(""ru = 'Выбрать'"");
		
	ИначеЕсли ЗначениеДействия = ""ПерейтиНаГодВперед"" Тогда
		Возврат НСтр(""ru = 'Перейти на год вперед'"");
		
	ИначеЕсли ЗначениеДействия = ""ПерейтиНаГодНазад"" Тогда
		Возврат НСтр(""ru = 'Перейти на год назад'"");
		
	ИначеЕсли ЗначениеДействия = ""ПерейтиНаМесяцВперед"" Тогда
		Возврат НСтр(""ru = 'Перейти на месяц вперед'"");
		
	ИначеЕсли ЗначениеДействия = ""ПерейтиНаМесяцНазад"" Тогда
		Возврат НСтр(""ru = 'Перейти на месяц назад'"");
		
	ИначеЕсли ЗначениеДействия = ""Проверить"" Тогда
		Возврат НСтр(""ru = 'Проверить'"");
		
	ИначеЕсли ЗначениеДействия = ""ПолучитьСведения"" Тогда
		Возврат НСтр(""ru = 'Получить сведения'"");
		
	ИначеЕсли ЗначениеДействия = ""УвеличитьЗначение"" Тогда
		Возврат НСтр(""ru = 'Увеличить значение'"");
		
	ИначеЕсли ЗначениеДействия = ""УменьшитьЗначение"" Тогда
		Возврат НСтр(""ru = 'Уменьшить значение'"");
		
	ИначеЕсли ЗначениеДействия = ""УстановитьОтметку"" Тогда
		Возврат НСтр(""ru = 'Установить отметку'"");
		
	Иначе
		Возврат ЗначениеДействия;
	КонецЕсли;
	
КонецФункции

// Получение формы выбора объектов тестируемого приложения и выбор объектов
// Параметры
//	ВладелецОбъектов - владелец объектов тестируемого приложения
//	ТипыВыбираемыхОбъектов - список нужных типов объектов
//	ТипыОтображаемыхОбъектов - спсиок отображаемых типов объектов
//	ТекущиеЭлементы               - текущие элементы
//	МножественныйВыбор            - возможность множественного выбора
//	ВладелецФормыВыбора           - элемент или форма, получающий оповещение о выборе
//	ЗаголовокФормыВыбораЭлементов - заголовок формы выбора
//	Автоматически                 - признак автоматического выбора (по умолчанию)
//	НеВыбиратьПодчиненныеИзТаблиц - признак запрета отбора подчиненных объектов в таблицах
//	ПодсвечиваемыеПриВыборе       - список выделенных объектов
//	ВидимостьКолонок              - видимость колонок в таблице
//	ДополнительныеПараметры       - любые дополнительные параметры, участвующие в отборе
//
&НаКлиенте
Функция СцТ_ВыбратьОбъектыТестируемогоПриложения(
	ВладелецОбъектов,
	Знач ТипыВыбираемыхОбъектов        = Неопределено,
	Знач ТипыОтображаемыхОбъектов      = Неопределено,
	ТекущиеЭлементы                    = Неопределено,
	МножественныйВыбор                 = Ложь,
	ВладелецФормыВыбора                = Неопределено,
	ЗаголовокФормыВыбораЭлементов      = """",
	Автоматически                      = Ложь,
	НеВыбиратьПодчиненныеИзТаблиц      = Ложь,
	ПодсвечиваемыеПриВыборе            = Неопределено,
	ВидимостьКолонок                   = Неопределено,
	ДополнительныеПараметры            = Неопределено,
	ОписаниеОповещенияОЗакрытииФормы   = Неопределено,
	НужноКонтекстноеМеню               = Ложь) Экспорт
	
	Если ТипыОтображаемыхОбъектов <> Неопределено
		И ТипЗнч(ТипыОтображаемыхОбъектов) <> Тип(""СписокЗначений"") Тогда
		СписокОтображаемыхТипов = Новый СписокЗначений;
		СписокОтображаемыхТипов.Добавить(ТипыОтображаемыхОбъектов);
		ТипыОтображаемыхОбъектов = СписокОтображаемыхТипов;
	КонецЕсли;
	
	Если ТипыВыбираемыхОбъектов <> Неопределено
		И ТипЗнч(ТипыВыбираемыхОбъектов) <> Тип(""СписокЗначений"") Тогда
		СписокВыбираемыхТипов = Новый СписокЗначений;
		СписокВыбираемыхТипов.Добавить(ТипыВыбираемыхОбъектов);
		ТипыВыбираемыхОбъектов = СписокВыбираемыхТипов;
	КонецЕсли;
	
	
	ПараметрыФормыВыбора = Новый Структура(""МножественныйВыбор,ЗакрыватьПриЗакрытииВладельца,
											|ЗакрыватьПриВыборе,ВидимостьКолонок,ПоказыватьКонтекстноеМеню"",
		МножественныйВыбор, Истина, Истина, ВидимостьКолонок, НужноКонтекстноеМеню);
		
	Если НЕ Автоматически Тогда
		ФормаВыбораОбъектов = ОткрытьФорму(
			ПутьКФормам + ""ВыборИнтерактивныхОбъектов"",
			ПараметрыФормыВыбора,
			ВладелецФормыВыбора,,,,
			ОписаниеОповещенияОЗакрытииФормы,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ФормаВыбораОбъектов = ПолучитьФорму(
			ПутьКФормам + ""ВыборИнтерактивныхОбъектов"",
			ПараметрыФормыВыбора,
			ВладелецФормыВыбора);
	КонецЕсли;
	
	ФормаВыбораОбъектов.СцТ_ГлавнаяФорма = ЭтотОбъект;
	
	Если НЕ ПустаяСтрока(ЗаголовокФормыВыбораЭлементов) Тогда
		ФормаВыбораОбъектов.Автозаголовок = Ложь;
		ФормаВыбораОбъектов.Заголовок = ЗаголовокФормыВыбораЭлементов;
	КонецЕсли;
	
	ФормаВыбораОбъектов.ВладелецОбъектов = ВладелецОбъектов;
	Если ТекущиеЭлементы <> Неопределено Тогда
		Если ТипЗнч(ТекущиеЭлементы) = Тип(""СписокЗначений"") Тогда
			ФормаВыбораОбъектов.ТекущиеЭлементы = ТекущиеЭлементы;
		Иначе
			ФормаВыбораОбъектов.ТекущиеЭлементы = Новый СписокЗначений;
			ФормаВыбораОбъектов.ТекущиеЭлементы.Добавить(ТекущиеЭлементы);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ТипыОтображаемыхОбъектов) = Тип(""СписокЗначений"")
		И ТипЗнч(ТипыВыбираемыхОбъектов)  = Тип(""СписокЗначений"") Тогда
		АбсолютныйСписокТиповОбъектов = ТипыОтображаемыхОбъектов.Скопировать();
		Для каждого ЭлементСписка Из ТипыВыбираемыхОбъектов Цикл
			Если АбсолютныйСписокТиповОбъектов.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
				АбсолютныйСписокТиповОбъектов.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		ФормаВыбораОбъектов.ТипыОтображаемыхОбъектов = АбсолютныйСписокТиповОбъектов;
	Иначе
		ФормаВыбораОбъектов.ТипыОтображаемыхОбъектов = ТипыОтображаемыхОбъектов;
	КонецЕсли;
	
	Если ПодсвечиваемыеПриВыборе <> Неопределено И ТипЗнч(ПодсвечиваемыеПриВыборе) <> Тип(""СписокЗначений"") Тогда
		СписокПодсвечиваемых = Новый СписокЗначений;
		СписокПодсвечиваемых.Добавить(ПодсвечиваемыеПриВыборе);
		ПодсвечиваемыеПриВыборе = СписокПодсвечиваемых;
	КонецЕсли;
	
	ФормаВыбораОбъектов.ТипыВыбираемыхОбъектов        = ТипыВыбираемыхОбъектов;
	ФормаВыбораОбъектов.МножественныйВыбор            = МножественныйВыбор;
	ФормаВыбораОбъектов.Автоматически                 = Автоматически;
	ФормаВыбораОбъектов.НеВыбиратьПодчиненныеИзТаблиц = НеВыбиратьПодчиненныеИзТаблиц;
	ФормаВыбораОбъектов.ПодсвечиваемыеПриВыборе       = ПодсвечиваемыеПриВыборе;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
		
		ДополнительныеПараметры.Свойство(""ЗапретитьВыборПодсвеченных"",
			ФормаВыбораОбъектов.ЗапретитьВыборПодсвеченных);
		
	КонецЕсли;
	
	ФормаВыбораОбъектов.СцТ_ОтобразитьОбъектыТестируемогоПриложения();
	
	Если НЕ Автоматически Тогда
		ФормаВыбораОбъектов.СцТ_Контроллер = СцТ_Контроллер;
	Иначе
		Возврат ФормаВыбораОбъектов.СцТ_ПолучитьВсеВыбираемыеОбъекты();
	КонецЕсли;
	
КонецФункции

// Получение формы для любого итерактивного шага
// Параметры
//	УзелБлокаСценария - шаг сценария
//	ПолноеОписание    - описание данных для открытия формы
//	ОписаниеРезультата - возвращаемый параметр описания ошибки при открытии
//	ПолучитьОкно - необходимость получения окна (не формы)
// Возвращаемое значение - Нужная форма тестируемого приложения
&НаКлиенте
Функция СцТ_ПолучитьФормуДляИнтерактивногоШага(
	УзелБлокаСценария,
	ПолноеОписание     = Ложь,
	ОписаниеРезультата = """",
	ПолучитьОкно       = Ложь) Экспорт
	
	Если УзелБлокаСценария <> Неопределено И УзелБлокаСценария.ТипШага = ""ИнтерактивнаяАвтоГруппа"" Тогда
		Принудительно = Истина;
	Иначе
		Принудительно = Ложь;
	КонецЕсли;
	
	ОписаниеРезультата = """";
	РодительУзла = УзелБлокаСценария;
	Пока РодительУзла <> Неопределено И РодительУзла.ТипШага <> ""ИнтерактивнаяАвтоГруппа"" Цикл
		РодительУзла = РодительУзла.ПолучитьРодителя();
	КонецЦикла;
	
	Если РодительУзла = Неопределено Тогда
		ОписаниеРезультата = ""НетАвтоГруппыФорма"";
		Возврат Неопределено;
	Иначе
		Возврат СцТ_ПолучитьТестируемуюФормуДляИнтерактивнойАвторгруппы(
			РодительУзла,
			ПолноеОписание,
			ОписаниеРезультата,
			ПолучитьОкно);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПУТЬ ПОИСКА ЭЛЕМЕНТА ФОРМЫ

// Процедура добавления в дерево значения варианта и пути поиска объектов
// тестируемого приложения
// Параметры
//	УзелВладелец - родительк которому добавляется путь
//	ДобавляемыйПутьПоискаОбъекта - путь поиска
&НаКлиенте
Процедура СцТ_ДобавитьУзелПутиПоискаОбъекта(УзелВладелец, ДобавляемыйПутьПоискаОбъекта) Экспорт
	
	Если ДобавляемыйПутьПоискаОбъекта = Неопределено Тогда
		УзелПутиПоиска = СцТ_НайтиУзелДереваФормы(УзелВладелец, ""Имя"", ""ИСТЗ_ПутьКОбъекту"", Ложь);
		Если УзелПутиПоиска <> Неопределено Тогда
			УзелВладелец.ПолучитьЭлементы().Удалить(УзелПутиПоиска);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	УзелПутиПоиска = СцТ_ДобавитьУзелВДеревоЗначения(УзелВладелец, ""ИСТЗ_ПутьКОбъекту"");
	УзелПутиПоиска.ПолучитьЭлементы().Очистить();
	
	
	Если  ТипЗнч(ДобавляемыйПутьПоискаОбъекта) = Тип(""Структура"") Тогда
		Для каждого ОбъектПутиПоиска Из ДобавляемыйПутьПоискаОбъекта Цикл
			
			УзелЭлементаПути = СцТ_ДобавитьУзелВДеревоЗначения(
				УзелПутиПоиска,
				ОбъектПутиПоиска.Значение.ИмяОбъекта,,
				ОбъектПутиПоиска.Значение.ЗаголовокОбъекта,,,,,
				ОбъектПутиПоиска.Значение.ТипОбъекта);
			
		КонецЦикла;
	Иначе
		// иассив
		Для каждого ОбъектПутиПоиска Из ДобавляемыйПутьПоискаОбъекта Цикл
			
			УзелЭлементаПути = СцТ_ДобавитьУзелВДеревоЗначения(
				УзелПутиПоиска,
				ОбъектПутиПоиска.ИмяОбъекта,,
				ОбъектПутиПоиска.ЗаголовокОбъекта,,,,,
				ОбъектПутиПоиска.ТипОбъекта);
			
		КонецЦикла;
	КонецЕсли
	
КонецПроцедуры

// Процедура добавления в дерево значения варианта и пути поиска объектов
// тестируемого приложения
// Параметры
//	УзелВладелец - родительк которому добавляется путь
//	ДобавляемыйПутьПоискаОбъекта - путь поиска
&НаКлиенте
Процедура СцТ_ДобавитьВСТруктуруУзелПутиПоискаОбъекта(УзелСтруктуры_Владелец, ДобавляемыйПутьПоискаОбъекта)
	
	УзелПутиПоиска = СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелСтруктуры_Владелец, ""ИСТЗ_ПутьКОбъекту"");
	
	Если  ТипЗнч(ДобавляемыйПутьПоискаОбъекта) = Тип(""Структура"") Тогда
		Для каждого ОбъектПутиПоиска Из ДобавляемыйПутьПоискаОбъекта Цикл
			
			СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
				УзелПутиПоиска,
				ОбъектПутиПоиска.Значение.ИмяОбъекта,,
				ОбъектПутиПоиска.Значение.ЗаголовокОбъекта,,,,,
				СцТ_ТипТестируемогоОбъектаВСтроку(ОбъектПутиПоиска.Значение.ТипОбъекта));
			
		КонецЦикла;
	Иначе
		// массив
		Для каждого ОбъектПутиПоиска Из ДобавляемыйПутьПоискаОбъекта Цикл
			
			СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
				УзелПутиПоиска,
				ОбъектПутиПоиска.ИмяОбъекта,,
				ОбъектПутиПоиска.ЗаголовокОбъекта,,,,,
				СцТ_ТипТестируемогоОбъектаВСтроку(ОбъектПутиПоиска.ТипОбъекта));
			
		КонецЦикла;
	КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРЕОБРАЗОВАНИЕ ЗНАЧЕНИЙ

// Получение служебного числа, соответствующего типу элемента формы
// Служебные числа использованы для простоты передачи данных между формами и между
// клиентом-сервером
// Обратная функция для СцТ_ТипТестируемогоОбъектаИзЧисла
// Параметры
// ТипОбъекта - Тип тестируемого объекта
// Возвращаемое значение - служебное число
&НаКлиенте
Функция СцТ_ТипТестируемогоОбъектаВЧисло(ТипОбъекта) Экспорт
	
	Если ТипОбъекта = Тип(""ТестируемоеПриложение"") Тогда
		Возврат 0;
	ИначеЕсли ТипОбъекта = Тип(""ТестируемоеОкноКлиентскогоПриложения"") Тогда
		Возврат 1;
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяФорма"") Тогда
		Возврат 2;
	ИначеЕсли ТипОбъекта = Тип(""ТестируемоеПолеФормы"") Тогда
		Возврат 3;
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяГруппаФормы"") Тогда
		Возврат 4;
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяКнопкаФормы"") Тогда
		Возврат 5;
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяДекорацияФормы"") Тогда
		Возврат 6;
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяТаблицаФормы"") Тогда
		Возврат 7;
	ИначеЕсли ТипОбъекта = Тип(""ТестируемыйКомандныйИнтерфейсОкна"") Тогда
		Возврат 8;
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяГруппаКомандногоИнтерфейса"") Тогда
		Возврат 9;
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяКнопкаКомандногоИнтерфейса"") Тогда
		Возврат 10;
	Иначе
		Возврат -1;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СцТ_ТипТестируемогоОбъектаВСтроку(ТипОбъекта) Экспорт
	
	Если ТипОбъекта = Тип(""ТестируемоеПриложение"") Тогда
		Возврат ""ТестируемоеПриложение"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемоеОкноКлиентскогоПриложения"") Тогда
		Возврат ""ТестируемоеОкноКлиентскогоПриложения"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяФорма"") Тогда
		Возврат ""ТестируемаяФорма"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемоеПолеФормы"") Тогда
		Возврат ""ТестируемоеПолеФормы"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяГруппаФормы"") Тогда
		Возврат ""ТестируемаяГруппаФормы"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяКнопкаФормы"") Тогда
		Возврат ""ТестируемаяКнопкаФормы"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяДекорацияФормы"") Тогда
		Возврат ""ТестируемаяДекорацияФормы"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяТаблицаФормы"") Тогда
		Возврат ""ТестируемаяТаблицаФормы"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемыйКомандныйИнтерфейсОкна"") Тогда
		Возврат ""ТестируемыйКомандныйИнтерфейсОкна"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяГруппаКомандногоИнтерфейса"") Тогда
		Возврат ""ТестируемаяГруппаКомандногоИнтерфейса"";
		
	ИначеЕсли ТипОбъекта = Тип(""ТестируемаяКнопкаКомандногоИнтерфейса"") Тогда
		Возврат ""ТестируемаяКнопкаКомандногоИнтерфейса"";
		
	Иначе
		Возврат """";
		
	КонецЕсли;
	
КонецФункции

// Получение типа объекта тестируемого приложения по служебному числу
// Обратная функция для СцТ_ТипТестируемогоОбъектаВЧисло и СцТ_ТипТестируемогоОбъектаВСтроку
// Параметры
//	ТипОбъектаЧисло - служебное число типа объекта тестируемого приложения
// Возвращаемое значение
// Тип объекта тестируемого приложения
&НаКлиенте
Функция СцТ_ТипТестируемогоОбъектаИзЧисла(Знач ТипОбъектаЧисло) Экспорт
	
	Если ТипЗнч(ТипОбъектаЧисло) = Тип(""Число"") Тогда
	
		Если ТипОбъектаЧисло = 0 Тогда
			Возврат Тип(""ТестируемоеПриложение"");
		ИначеЕсли ТипОбъектаЧисло = 1 Тогда
			Возврат Тип(""ТестируемоеОкноКлиентскогоПриложения"");
		ИначеЕсли ТипОбъектаЧисло = 2 Тогда
			Возврат Тип(""ТестируемаяФорма"");
		ИначеЕсли ТипОбъектаЧисло = 3 Тогда
			Возврат Тип(""ТестируемоеПолеФормы"");
		ИначеЕсли ТипОбъектаЧисло = 4 Тогда
			Возврат Тип(""ТестируемаяГруппаФормы"");
		ИначеЕсли ТипОбъектаЧисло = 5 Тогда
			Возврат Тип(""ТестируемаяКнопкаФормы"");
		ИначеЕсли ТипОбъектаЧисло = 6 Тогда
			Возврат Тип(""ТестируемаяДекорацияФормы"");
		ИначеЕсли ТипОбъектаЧисло = 7 Тогда
			Возврат Тип(""ТестируемаяТаблицаФормы"");
		ИначеЕсли ТипОбъектаЧисло = 8 Тогда
			Возврат Тип(""ТестируемыйКомандныйИнтерфейсОкна"");
		ИначеЕсли ТипОбъектаЧисло = 9 Тогда
			Возврат Тип(""ТестируемаяГруппаКомандногоИнтерфейса"");
		ИначеЕсли ТипОбъектаЧисло = 10 Тогда
			Возврат Тип(""ТестируемаяКнопкаКомандногоИнтерфейса"");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТипОбъектаЧисло) = Тип(""Строка"") Тогда
		Попытка
			Возврат Тип(ТипОбъектаЧисло);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
	
КонецФункции

// Расшифровка наиболее распространенных ошибок
// Параметры
//	ВнутреннееОписаниеОшибки - служебное представление ошибки
// Возвращаемое значение - строка пользовательского описания ошибки
&НаКлиенте
Функция СцТ_РасшифроватьОшибку(ВнутреннееОписаниеОшибки) Экспорт
	
	Если ВнутреннееОписаниеОшибки = ""НетАвтоГруппыТаблица"" Тогда
		Возврат НСтр(""ru = 'Текущий шаг теста не находится в автогруппе таблицы'"");
		
	ИначеЕсли ВнутреннееОписаниеОшибки = ""НеВыбранаТаблица"" Тогда
		Возврат НСтр(""ru = 'Не выбрана таблица формы'"");
		
	ИначеЕсли ВнутреннееОписаниеОшибки = ""ТаблицаНеНайденаНаФорме"" Тогда
		Возврат НСтр(""ru = 'Указанная таблица не найдена на форме'"");
		
	ИначеЕсли ВнутреннееОписаниеОшибки = ""СвязьСФормойНеУстановлена"" Тогда
		Возврат НСтр(""ru = 'Текущая автогруппа не связана с формой тестируемого приложения'"");
		
	ИначеЕсли ВнутреннееОписаниеОшибки = ""СвязьСФормойПотеряна"" Тогда
		Возврат НСтр(""ru = 'Форма была закрыта или тестируемый клиент не запущен'"");
		
	ИначеЕсли ВнутреннееОписаниеОшибки = ""НетАвтоГруппыФорма"" Тогда
		Возврат НСтр(""ru = 'Шаг сценария не подчинен автогруппе работы с формой'"");
		
	ИначеЕсли ВнутреннееОписаниеОшибки = ""СвязьСОкномНеУстановлена"" Тогда
		Возврат НСтр(""ru = 'Текущая автогруппа не связана с формой или форма не имеет окна'"");
		
	ИначеЕсли ВнутреннееОписаниеОшибки = ""СвязьСОкномПотеряна"" Тогда
		Возврат НСтр(""ru = 'Окно формы было закрыто или тестируемый клиент не запущен'"");
		
	ИначеЕсли ВнутреннееОписаниеОшибки = ""ТекущаяФормаНеИмеетОкна"" Тогда
		Возврат НСтр(""ru = 'Текущая форма не имеет окна'"");
		
	Иначе
		Возврат ВнутреннееОписаниеОшибки;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТЕСТИРУЕМЫМ ТАБЛИЧНЫМ ДОКУМЕНТОВ

// Определение координат области табличного документа по строке адреса
// Параметры
//	АдресОбласти - строка адреса области
// Возвращаемое значение - Стркутура с координатами
&НаКлиенте
Функция СцТ_КоординатыОбластиИзАдреса(Знач АдресОбласти, Сообщения = """") Экспорт
	
	Попытка
		НедопустимыеСимволы = СцТ_НедопустимыеСимволыВСтроке(АдресОбласти,
			""RrCc0123456789:"");
		
		Если НЕ ПустаяСтрока(НедопустимыеСимволы) Тогда
			ВызватьИсключение НСтр(""ru = 'В адресе области обнаружены недопустимые символы: '"" + НедопустимыеСимволы);
		КонецЕсли;
		
		АдресОбласти = СокрЛП(ВРег(АдресОбласти));
		Результат = Новый Структура(""НачальнаяСтрока,НачальнаяКолонка,КонечнаяСтрока,КонечнаяКолонка"", 0, 0, 0, 0);
		
		ПозицияДвоеточия = Найти(АдресОбласти, "":"");
		Если ПозицияДвоеточия = 0 Тогда
			АдресНачала = АдресОбласти;
			АдресКонца  = АдресОбласти;
		Иначе
			АдресНачала = Лев(АдресОбласти, ПозицияДвоеточия - 1);
			АдресКонца  = Сред(АдресОбласти, ПозицияДвоеточия + 1);
		КонецЕсли;
		
		ПозицияС = Найти(АдресНачала, ""C"");
		Результат.НачальнаяСтрока  = Число(Сред(АдресНачала, 2, ПозицияС - 2));
		Результат.НачальнаяКолонка = Число(Сред(АдресНачала, ПозицияС + 1));
		
		ПозицияС = Найти(АдресКонца, ""C"");
		Результат.КонечнаяСтрока  = Число(Сред(АдресКонца, 2, ПозицияС - 2));
		Результат.КонечнаяКолонка = Число(Сред(АдресКонца, ПозицияС + 1));
		
		Если Результат.НачальнаяСтрока     = 0
			ИЛИ Результат.НачальнаяКолонка = 0
			ИЛИ Результат.КонечнаяСтрока   = 0
			ИЛИ Результат.КонечнаяКолонка  = 0
			ИЛИ Результат.КонечнаяСтрока  < Результат.НачальнаяСтрока
			ИЛИ Результат.КонечнаяКолонка < Результат.НачальнаяКолонка Тогда
			
			ВызватьИсключение НСтр(""ru = 'Неверный формат адреса области: '"") + АдресОбласти;
			
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получение строки адреса области табличного документа
// по номерам строки и колонки
// Параметры
//	СтрокаТД - номер строки табличного документа
//	СтолбецТД - номер колонки табличного документа
// Возвращаемое значение - строка адреса
&НаКлиенте
Функция СцТ_АдресЯчейки(СтрокаТД, СтолбецТД) Экспорт
	
	Возврат ""R"" + Формат(СтрокаТД, ""ЧГ=0"") + ""C"" + Формат(СтолбецТД, ""ЧГ=0"");
	
КонецФункции

// Чтение табличного документа тестируемого приложения
// и добавление данных в дерево, хранящееся в шаге.
// Сведения об области возвращаются в параметрах УзелДанных и УзелОбъединений
// Параметры
//	УзелДанных - Данные шага об ячейках табличного документа
//	УзелОбъединений - данные шага об объединенных ячейках
//	ТаблДокОбъект - указатель на табличный документ
//	ОбластьТаблДок - указатель на область табличного документа
//	Обновление - признак обновления
&НаКлиенте
Процедура СцТ_ПолучитьДанныеИзРеальногоТабличногоДокумента(
	УзелДанных,
	ТабличныйДокумент,
	КоординатыОбласти) Экспорт
	
	СтрокиУзлаДанных = УзелДанных.ПолучитьЭлементы();
	
	ТекущееКолвоСтрокТД = СтрокиУзлаДанных.Количество();
	
	Попытка
		
		ОбъединенныеОбласти = Новый Соответствие;
		СцТ_СохранитьТДвДереве(
			УзелДанных,
			ТабличныйДокумент,
			КоординатыОбласти);
		
	Исключение
		
		// Удалить новые строки данных, если они были добавлены
		КолвоСтрокТД = СтрокиУзлаДанных.Количество();
		Пока КолвоСтрокТД > ТекущееКолвоСтрокТД Цикл
			СтрокиУзлаДанных.Удалить(КолвоСтрокТД - 1);
			КолвоСтрокТД = КолвоСтрокТД - 1;
		КонецЦикла;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Удалить прежние строки данных
	Для Итератор = 1 По ТекущееКолвоСтрокТД Цикл
		СтрокиУзлаДанных.Удалить(0);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДЕРЕВОМ ШАГОВ

// Получение формы записи журнала действий пользователя
// Параметры:
//	ВызвавшаяФорма - текущая форма или форма макрошага
&НаКлиенте
Процедура СцТ_ЗаписатьЖурналДействийПользователя(ВызвавшаяФорма = Неопределено) Экспорт
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""ЗакрыватьПриЗакрытииВладельца"", Истина);
	ПараметрыФормы.Вставить(""РежимОткрытияФормыЖурнала"", ""ПоследовательностьШагов"");
	ПараметрыФормы.Вставить(""РежимСовместимости838""    , РежимСовместимости838);
	
	ФормаЗаписиЖурнала = ОткрытьФорму(ПутьКФормам + ""РаботаСЖурналомДействийПользователя"",
		ПараметрыФормы,
		ЭтотОбъект);
	
	ФормаЗаписиЖурнала.СцТ_Контроллер   = СцТ_Контроллер;
	ФормаЗаписиЖурнала.СцТ_ГлавнаяФорма = ЭтотОбъект;
	ФормаЗаписиЖурнала.ВызвавшаяФорма   = ВызвавшаяФорма;
	ФормаЗаписиЖурнала.ОтработатьДоступностьКонтроллера();
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ПолучитьДанныеКартинки_НаКлиенте(НовыйШаг) Экспорт
	
	// Картинка в поле Картинка
	Если НовыйШаг.ТипШага = ""Группа"" Тогда
		ДанныеКартинки = 0;
		
	ИначеЕсли НовыйШаг.ТипШага = ""АвтоГруппа"" Тогда
		ДанныеКартинки = 1;
		
	ИначеЕсли НовыйШаг.ТипШага = ""ИнтерактивнаяАвтоГруппа"" Тогда
		ДанныеКартинки = 2;
		
	ИначеЕсли НовыйШаг.ТипШага = ""АвтоГруппаТаблицаФормы"" Тогда
		ДанныеКартинки = 3;
		
	ИначеЕсли НовыйШаг.ТипШага = ""АвтоГруппаТабличныйДокумент"" Тогда
		ДанныеКартинки = 4;
		
	ИначеЕсли НовыйШаг.ТипШага = ""Повторение"" Тогда
		ДанныеКартинки = 5;
		
	ИначеЕсли НовыйШаг.ТипШага = ""Условие"" Тогда
		ДанныеКартинки = 6;
		
	ИначеЕсли НовыйШаг.ТипШага = ""Комментарий"" Тогда
		ДанныеКартинки = 7;
		
	ИначеЕсли НовыйШаг.ТипШага = ""ВыполнитьВРучную"" Тогда
		ДанныеКартинки = 8;
		
	ИначеЕсли НовыйШаг.ТипШага = ""Воспроизвести"" Тогда
		ДанныеКартинки = 9;
		
	ИначеЕсли НовыйШаг.ТипШага = ""СравнитьСЭталоном"" Тогда
		ДанныеКартинки = 10;
		
	ИначеЕсли НовыйШаг.ТипШага = ""СравнитьДвижения"" Тогда
		ДанныеКартинки = 11;
		
	ИначеЕсли НовыйШаг.ТипШага = ""ВыполнитьЗапрос"" Тогда
		ДанныеКартинки = 12;
		
	ИначеЕсли НовыйШаг.ТипШага = ""ПроверитьТекстОшибки"" Тогда
		ДанныеКартинки = 13;
		
	ИначеЕсли НовыйШаг.ТипШага = ""ВыполнитьПроцедуру"" Тогда
		ДанныеКартинки = 14;
		
	ИначеЕсли НовыйШаг.ТипШага = ""ВыполнитьКлиентскуюПроцедуру"" Тогда
		ДанныеКартинки = 15;
		
	ИначеЕсли НовыйШаг.ТипШага = ""Пауза"" Тогда
		ДанныеКартинки = 16;
		
	ИначеЕсли НовыйШаг.ТипШага = ""ВыполнитьМакрошаг"" Тогда
		ДанныеКартинки = 17;
		
	ИначеЕсли НовыйШаг.ТипШага = ""НажатьКнопку""
		ИЛИ НовыйШаг.ТипШага = ""НажатьКнопкуКИ"" Тогда
		ДанныеКартинки = 18;
		
	ИначеЕсли НовыйШаг.ТипШага = ""НайтиЭлементФормы""
		ИЛИ НовыйШаг.ТипШага = ""ЗаполнитьОдинРеквизитФормы""
		ИЛИ НовыйШаг.ТипШага = ""ЗаполнитьКолонкуТаблицы""
		ИЛИ НовыйШаг.ТипШага = ""ДействиеСЯчейкойТД""
		Тогда
		ДанныеКартинки = 19;
		
	ИначеЕсли НовыйШаг.ТипШага = ""ЗаполнитьРеквизитыФормы""
		ИЛИ НовыйШаг.ТипШага = ""ЗаполнитьСтрокуТаблицы"" Тогда
		ДанныеКартинки = 20;
		
	ИначеЕсли НовыйШаг.ТипШага = ""НайтиФорму""
		ИЛИ НовыйШаг.ТипШага = ""НайтиСтрокуТаблицы"" Тогда
		ДанныеКартинки = 22;
		
	ИначеЕсли НовыйШаг.ТипШага = ""ЗавершитьРаботуТестируемогоКлиента""
		ИЛИ НовыйШаг.ТипШага = ""ЗакрытьКлиентскоеОкноФормы"" Тогда
		ДанныеКартинки = 23;
		
	ИначеЕсли НовыйШаг.ТипШага = ""ДействиеСТаблицей""  Тогда
		ДанныеКартинки = 24;
		
	Иначе
		ДанныеКартинки = 21;
		
	КонецЕсли;
	
	Возврат ДанныеКартинки;
	
КонецФункции


// Функция для преобразования узла дерева с подчиненными строками
// в структуру для передачи ее между формами и на сервер
// Параметры
//	ДеревоФормы - Данные дерева
//	КолонкиДерева - массив колонок
//	РодительскаяСтрока - родительский узел
// Возвращаемая структура - структура с данными дерева
&НаКлиенте
Функция СцТ_ДеревоформыВДеревоСтруктур(
	Знач ДеревоФормы,
	Знач КолонкиДерева = Неопределено,
	Знач РодительскаяСтрока = Неопределено) Экспорт
	
	Если КолонкиДерева = Неопределено Тогда
		КолонкиДерева = СцТ_КолонкиДереваЗначения();
	КонецЕсли;
	
	Если РодительскаяСтрока = Неопределено Тогда
		РодительскаяСтрока  = Новый Структура;
		РодительскаяСтрока.Вставить(""ИСТЗ_Колонки"", КолонкиДерева);
		РодительскаяСтрока.Вставить(""ИСТЗ_Строки"" , Новый Массив);
	КонецЕсли;
	
	Если ДеревоФормы <> Неопределено Тогда
		// формирование строк дерева структур
		Для каждого СтрокаДереваФормы Из ДеревоФормы.ПолучитьЭлементы() Цикл
			СтрокаДерева = Новый Структура;
			Для каждого Колонка Из КолонкиДерева Цикл
				СтрокаДерева.Вставить(Колонка, СтрокаДереваФормы[Колонка]);
			КонецЦикла;
			СтрокаДерева.Вставить(""ИСТЗ_Строки"", Новый Массив);
			РодительскаяСтрока.ИСТЗ_Строки.Добавить(СтрокаДерева);
			СцТ_ДеревоформыВДеревоСтруктур(СтрокаДереваФормы, КолонкиДерева, СтрокаДерева);
		КонецЦикла;
	КонецЕсли;
	
	Возврат РодительскаяСтрока;
	
КонецФункции

// Поиск строки дерева формы по значению реквизита
// Параметры
//	ДеревоФормы - Дерево данных формы
//	Реквизит - Имя реквизита,
//	ЗначениеРеквизита - значение реквизита
//	Рекурсивно - признак необходимости поиска в подчиненных узлах
// Возвращаемое значение - указатель на найденный узел
&НаКлиенте
Функция СцТ_НайтиУзелДереваФормы(
	ДеревоФормы,
	Реквизит,
	ЗначениеРеквизита,
	Рекурсивно = Ложь) Экспорт
	
	Для каждого Узел Из ДеревоФормы.ПолучитьЭлементы() Цикл
		Если Узел[Реквизит] = ЗначениеРеквизита Тогда
			Возврат Узел;
		КонецЕсли;
		Если Рекурсивно Тогда
			НайденыйУзел = СцТ_НайтиУзелДереваФормы(Узел, Реквизит, ЗначениеРеквизита, Истина);
			Если НайденыйУзел <> Неопределено Тогда
				Возврат НайденыйУзел;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Копирование дерева формы
// Параметры
//	ДеревоИсточник - деревор откуда копируются данные
//	ДеревоПриемник - дерево куда копируются данные
//	ПервоеВложение - признак первой итерации
&НаКлиенте
Процедура СцТ_СкопироватьДеревоФормы(
	ДеревоИсточник,
	ДеревоПриемник,
	ПервоеВложение = Истина) Экспорт
	
	Если ПервоеВложение Тогда
		// очистка приемника
		ДеревоПриемник.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	Для каждого УзелИсточник Из ДеревоИсточник.ПолучитьЭлементы() Цикл
		УзелПриемник = ДеревоПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(УзелПриемник, УзелИсточник);
		СцТ_СкопироватьДеревоФормы(УзелИсточник, УзелПриемник, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Определение текущего узла дерева сценария
// Параметры
//	УзелШага - идентификатор узла, неопределено или узел дерева
// Возвращаемое значение - данные текущего шага или указатель на дерево
&НаКлиенте
Функция СцТ_УзелБлокаСценария(УзелШага, ВызвавшаяФорма) Экспорт
	
	Если УзелШага = Неопределено ИЛИ УзелШага = ВызвавшаяФорма.БлокСценария Тогда
		Возврат ВызвавшаяФорма.БлокСценария;
	КонецЕсли;
	
	Возврат ?(ТипЗнч(УзелШага) = Тип(""Число""),
			  ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(УзелШага),
			  УзелШага);
	
КонецФункции

// Добавление нового узла в дерево значений
// Параметры
//	ДеревоЗначения - данные дерева
//	ИмяУзла        - имя узла дерева
//	Значение       - значение узла
//	СинонимУзла    - пользовательское представление
//	Активность     - активность узла
//	Представление  - Пользовательское представление значения
//	Действие       - строка - название действия
//	Скрипт         - команда для заполнения поля
//	ТипУзла        - служебная строка типа узла
//	Кл             - признак, что этот реквизит является ключем
//	ИспользоватьСуществующий - признак, что нужно внести изменение в существующий узел,
//		а не добавлять новый
// Возвращаемое значение - данные нового узла дерева формы
&НаКлиенте
Функция СцТ_ДобавитьУзелВДеревоЗначения(
	ДеревоЗначения,
	ИмяУзла       = """",
	Значение      = Неопределено,
	СинонимУзла   = """",
	Активность    = Истина,
	Представление = """",
	Действие      = """",
	Скрипт        = """",
	ТипУзла       = """",
	Кл            = Ложь,
	ИспользоватьСуществующий = Истина) Экспорт
	
	Если ИспользоватьСуществующий Тогда
		НовыйУзел = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, ""Имя"", ИмяУзла);
		Если НовыйУзел = Неопределено Тогда
			НовыйУзел = ДеревоЗначения.ПолучитьЭлементы().Добавить();
		КонецЕсли;
	Иначе
		НовыйУзел = ДеревоЗначения.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	НовыйУзел.Имя           = ИмяУзла;
	НовыйУзел.Синоним       = СинонимУзла;
	НовыйУзел.Активность    = Активность;
	НовыйУзел.Значение      = Значение;
	НовыйУзел.Представление = Представление;
	НовыйУзел.Действие      = Действие;
	НовыйУзел.Скрипт        = Скрипт;
	НовыйУзел.ТипУзла       = ТипУзла;
	НовыйУзел.Кл            = Кл;
	
	Возврат НовыйУзел;
	
КонецФункции

// Получение массива всех родительских узлов дерева
// Параметры
//	МассивУзлов - неупорядоченный массив узлов дерева
// Возвращаемое значение - упорядоченный по иерархии массив узлов
&НаКлиенте
Функция СцТ_УзлыВерхнегоУровня(Знач МассивУзлов, Знач ДеревоРеквизит = Неопределено) Экспорт
	
	Результат = Новый Массив;
	ИдентификаторыВсехУзлов = Новый Соответствие;
	
	Если ДеревоРеквизит = Неопределено Тогда
		ДеревоРеквизит = БлокСценария;
	КонецЕсли;
	
	// Занести идентификаторы всех узлов в индексированное соответствие
	Для каждого Узел Из МассивУзлов Цикл
		Если Узел = ДеревоРеквизит Тогда
			Результат = Новый Массив;
			Результат.Добавить(Узел);
			Возврат Результат; // Дерево является единственным высшим узлом в иерархии
		КонецЕсли;
		ИдентификаторыВсехУзлов[Узел.ПолучитьИдентификатор()] = Истина;
	КонецЦикла;

	// Для каждого узла движемся вверх по иерархии и проверяем принадлежность родителя
	// массиву переданных узлов. Если один из родителей находится в массиве переданных
	// узлов, то текущий узел не является узлом верхнего уровня.
	Для каждого Узел Из МассивУзлов Цикл
		
		РодительУзла = Узел.ПолучитьРодителя();
		
		Пока РодительУзла <> Неопределено Цикл
			Если ИдентификаторыВсехУзлов[РодительУзла.ПолучитьИдентификатор()] = Истина Тогда
				Прервать;
			КонецЕсли;
			РодительУзла = РодительУзла.ПолучитьРодителя();
		КонецЦикла;
		
		Если РодительУзла = Неопределено Тогда
			Результат.Добавить(Узел);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получение массива узлов дерева по массиву идентификаторов
// Параметры
//	МассивИдентификаторов - массив идентификаторов узлов
//	Дерево - дерево значений, в котором нужно найти узлы
// Возвращаемое значение - массив узлов дерева
&НаКлиенте
Функция СцТ_ПреобразоватьВУзлыИзИдентификаторов(МассивИдентификаторов, Дерево) Экспорт
	
	Результат = Новый Массив;
	
	Для каждого Идентификатор Из МассивИдентификаторов Цикл
		Если ТипЗнч(Идентификатор) = Тип(""Число"") Тогда
			Результат.Добавить(Дерево.НайтиПоИдентификатору(Идентификатор));
		ИначеЕсли Идентификатор = Неопределено Тогда
			Результат.Добавить(Дерево);
		Иначе
			// Иначе - это узел
			Результат.Добавить(Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразование данных шага в структуру
//
// параметры
// СтрокаБлокаСценария - данные шага
// Возвращаемое значение - структура с данными шага
&НаКлиенте
Функция СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(СтрокаБлокаСценария) Экспорт
	
	СтруктураДанныхШага = Новый Структура;
	СтруктураДанныхШага.Вставить(""НомерШага""                   , СтрокаБлокаСценария.НомерШага);
	СтруктураДанныхШага.Вставить(""Наименование""                , СтрокаБлокаСценария.Наименование);
	СтруктураДанныхШага.Вставить(""ТипШага""                     , СтрокаБлокаСценария.ТипШага);
	СтруктураДанныхШага.Вставить(""ТипМетаданных""               , СтрокаБлокаСценария.ТипМетаданных);
	СтруктураДанныхШага.Вставить(""ИмяМетаданных""               , СтрокаБлокаСценария.ИмяМетаданных);
	СтруктураДанныхШага.Вставить(""Автоописание""                , СтрокаБлокаСценария.Автоописание);
	СтруктураДанныхШага.Вставить(""Описание""                    , СтрокаБлокаСценария.Описание);
	СтруктураДанныхШага.Вставить(""СкрытьАвтоописание""          , СтрокаБлокаСценария.НеВыводитьАвтоописание);
	СтруктураДанныхШага.Вставить(""Активность""                  , СтрокаБлокаСценария.Активность);
	СтруктураДанныхШага.Вставить(""ОбСсылка""                    , СтрокаБлокаСценария.ОбСсылка);
	СтруктураДанныхШага.Вставить(""ПредставлениеОбъекта""        , СтрокаБлокаСценария.ПредставлениеОбъекта);
	СтруктураДанныхШага.Вставить(""ВыполнитьВручную""            , СтрокаБлокаСценария.ВыполнитьВручную);
	СтруктураДанныхШага.Вставить(""УИШ""                         , СтрокаБлокаСценария.УИШ);
	СтруктураДанныхШага.Вставить(""Комментарий""                 , СтрокаБлокаСценария.Комментарий);
	СтруктураДанныхШага.Вставить(""ИмяФормы""                    , СтрокаБлокаСценария.ИмяФормы);
	СтруктураДанныхШага.Вставить(""ПредставлениеИмениМетаданных"", СтрокаБлокаСценария.ПредставлениеИмениМетаданных);
	СтруктураДанныхШага.Вставить(""ЗаголовокФормы""              , СтрокаБлокаСценария.ЗаголовокФормы);
	СтруктураДанныхШага.Вставить(""ДанныеКартинки""              , СтрокаБлокаСценария.ДанныеКартинки);
	
	СтруктураДанныхШага.Вставить(""ДеревоЗначения"",
		СцТ_ДеревоформыВДеревоСтруктур(СтрокаБлокаСценария.Значение));
	
	Возврат СтруктураДанныхШага;
	
КонецФункции

// Нумерация шагов в сценарии
//
// Параметры
// Все параметры нужны для рекурсивного обхода веток сценария
//	ДанныеВеткиДерева -  текущая ветка дерева
//	ТекущийНомерШага - текущий номер шага
&НаКлиенте
Процедура СцТ_ПронумероватьШаги_НаКлиенте(
	ДанныеВеткиДерева = Неопределено,
	ТекущийНомерШага = 0,
	ВызвавшаяФорма = Неопределено) Экспорт
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	ЭтоПервоеВложение = (ДанныеВеткиДерева = Неопределено);
	
	Если ДанныеВеткиДерева = Неопределено Тогда
		ДанныеВеткиДерева = ВызвавшаяФорма.БлокСценария;
	КонецЕсли;
	
	Для каждого ДанныеСтрокиДерева Из ДанныеВеткиДерева.ПолучитьЭлементы() Цикл
		
		ТекущийНомерШага = ТекущийНомерШага + 1;
		ДанныеСтрокиДерева.НомерШага = ТекущийНомерШага;
		
		СцТ_ПронумероватьШаги_НаКлиенте(ДанныеСтрокиДерева, ТекущийНомерШага);
		
	КонецЦикла;
	
	Если ЭтоПервоеВложение Тогда
		Оповестить(""СцТ_ИзмениласьНумерацияШагов"", , ВызвавшаяФорма);
	КонецЕсли;
	
КонецПроцедуры

// Обновление подчиненных шагов по данным автогруппы
//
// Параметры
// УзелАвтогруппы - шаг автогруппы
&НаКлиенте
Процедура СцТ_ОбновитьПодчиненныеШагиАвтоГруппы(УзелАвтоГруппы, ВызвавшаяФорма = Неопределено) Экспорт
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	Для каждого ДочернийУзел Из УзелАвтоГруппы.ПолучитьЭлементы() Цикл
		
		Если ДочернийУзел.ТипШага <> ""Группа""
			И ДочернийУзел.ТипШага <> ""АвтоГруппа""
			И ДочернийУзел.ТипШага <> ""ИнтерактивнаяАвтоГруппа""
			И ДочернийУзел.ТипШага <> ""ВыполнитьВРучную""
			И ДочернийУзел.ТипШага <> ""ВыполнитьЗапрос""
			И ДочернийУзел.ТипШага <> ""ВыполнитьПроцедуру""
			И ДочернийУзел.ТипШага <> ""Комментарий""
			И ДочернийУзел.ТипШага <> ""ВыполнитьСкрипт""
			И ДочернийУзел.ТипШага <> ""СохранитьПечатнуюФорму"" Тогда
			
			ДочернийУзел.ИмяФормы = УзелАвтоГруппы.ИмяФормы;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Оповестить(""СцТ_ОбновилисьДанныеАвтогруппы"", УзелАвтоГруппы, ВызвавшаяФорма);
	
КонецПроцедуры

// Проверка возможности повышения уровня шага
//
// Параметры
// УзелСценария - данные текущего шага
// Возвращаемое значение - Истина - перемещение возможно
&НаКлиенте
Функция СцТ_ПовышениеУровняУзлаВозможно(Знач УзелСценария, Знач ВызвавшаяФорма) Экспорт
	
	УзелСценария = СцТ_УзелБлокаСценария(УзелСценария, ВызвавшаяФорма);
	
	Если УзелСценария = ВызвавшаяФорма.БлокСценария
		ИЛИ УзелСценария.ПолучитьРодителя() = Неопределено
		ИЛИ (СцТ_СписокСвободноПеремещаемыхШагов().НайтиПоЗначению(УзелСценария.ТипШага) = Неопределено) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если УзелСценария.ТипШага = ""НажатьКнопкуКИ"" Тогда
		
		ТипРодителя = СцТ_ПолучитьТипКонтейнераШага(УзелСценария.ПолучитьРодителя().ПолучитьРодителя());
		Если ТипРодителя = ""Группа"" ИЛИ ТипРодителя = ""АвтоГруппа"" Тогда
			
			Если СцТ_ЗначениеВДереве(УзелСценария.Значение, ""ОписаниеКнопкиКИ"", ""1"", ""ТипУзла"") <> ""1"" Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СцТ_СписокСвободноПеремещаемыхШагов() Экспорт
	
	СписокПеремещаемыхШагов = Новый СписокЗначений;
	СписокПеремещаемыхШагов.Добавить(""Группа"");
	СписокПеремещаемыхШагов.Добавить(""АвтоГруппа"");
	СписокПеремещаемыхШагов.Добавить(""ИнтерактивнаяАвтоГруппа"");
	СписокПеремещаемыхШагов.Добавить(""Комментарий"");
	СписокПеремещаемыхШагов.Добавить(""ВыполнитьВРучную"");
	СписокПеремещаемыхШагов.Добавить(""ВыполнитьЗапрос"");
	СписокПеремещаемыхШагов.Добавить(""ВыполнитьПроцедуру"");
	СписокПеремещаемыхШагов.Добавить(""ВыполнитьИнтерактивнуюКоманду"");
	СписокПеремещаемыхШагов.Добавить(""ЗавершитьРаботуТестируемогоКлиента"");
	СписокПеремещаемыхШагов.Добавить(""Повторение"");
	СписокПеремещаемыхШагов.Добавить(""Условие"");
	СписокПеремещаемыхШагов.Добавить(""ВыполнитьКлиентскуюПроцедуру"");
	СписокПеремещаемыхШагов.Добавить(""ВыполнитьМакрошаг"");
	СписокПеремещаемыхШагов.Добавить(""Пауза"");
	СписокПеремещаемыхШагов.Добавить(""НажатьКнопкуКИ"");
	СписокПеремещаемыхШагов.Добавить(""ПроверитьТекстОшибки"");
	
	Возврат СписокПеремещаемыхШагов;
	
КонецФункции

// Проверка возможности понижения уровня шага
//
// Параметры
// УзелСценария - данные текущего шага
// Возвращаемое значение - Истина - перемещение возможно
&НаКлиенте
Функция СцТ_ПонижениеУровняУзлаВозможно(Знач УзелСценария, ВызвавшаяФорма) Экспорт
	
	УзелСценария = СцТ_УзелБлокаСценария(УзелСценария, ВызвавшаяФорма);
	
	Если УзелСценария = ВызвавшаяФорма.БлокСценария Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СцТ_СписокСвободноПеремещаемыхШагов().НайтиПоЗначению(УзелСценария.ТипШага) = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РодительУзла = СцТ_УзелБлокаСценария(УзелСценария.ПолучитьРодителя(), ВызвавшаяФорма);
	СоседниеЭлементы = РодительУзла.ПолучитьЭлементы();
	ИндексУзла = СоседниеЭлементы.Индекс(УзелСценария);
	Если ИндексУзла = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредыдущийУзел = СоседниеЭлементы.Получить(ИндексУзла - 1);
	Если ПредыдущийУзел.ТипШага <> ""Группа""
		И ПредыдущийУзел.ТипШага <> ""АвтоГруппа""
		И ПредыдущийУзел.ТипШага <> ""ИнтерактивнаяАвтоГруппа""
		И ПредыдущийУзел.ТипШага <> ""АвтоГруппаТаблицаФормы""
		И ПредыдущийУзел.ТипШага <> ""АвтоГруппаТабличныйДокумент""
		И ПредыдущийУзел.ТипШага <> ""Повторение""
		И ПредыдущийУзел.ТипШага <> ""Условие""
		ИЛИ ПредыдущийУзел.ТипШага = ""АвтоГруппаТаблицаФормы""
			И УзелСценария.ТипШага = ""НажатьКнопкуКИ"" Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если УзелСценария.ТипШага = ""НажатьКнопкуКИ"" Тогда
		
		Если ПредыдущийУзел.ТипШага = ""Группа""
			ИЛИ ПредыдущийУзел.ТипШага = ""АвтоГруппа"" Тогда
			
			Если СцТ_ЗначениеВДереве(УзелСценария.Значение, ""ОписаниеКнопкиКИ"", ""1"", ""ТипУзла"") <> ""1"" Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Повышение уровня текущего шага
//
// Параметры
// УзелСценария - данные текущего шага
&НаКлиенте
Процедура СцТ_ПовыситьУровеньУзла_НаКлиенте(УзелСценария, ВызвавшаяФорма) Экспорт
	
	РодительУзла = УзелСценария.ПолучитьРодителя();
	Прародитель  = РодительУзла.ПолучитьРодителя();
	Если Прародитель = Неопределено Тогда
		Прародитель = ВызвавшаяФорма.БлокСценария;
	КонецЕсли;
	
	СоседниеЭлементыРодителя = Прародитель.ПолучитьЭлементы();
	ИндексВставки = СоседниеЭлементыРодителя.Индекс(РодительУзла) + 1;
	
	НовыйУзел = СцТ_СкопироватьУзелСценария(УзелСценария, Прародитель, ИндексВставки, Истина, Истина, , , , ВызвавшаяФорма.Элементы.БлокСценария);
	
	ВызвавшаяФорма.Элементы.БлокСценария.ТекущаяСтрока = НовыйУзел.ПолучитьИдентификатор();
	
	ВызвавшаяФорма.Модифицированность = Истина;
	
КонецПроцедуры

// Понижение уровня текущего шага
//
// Параметры
// УзелСценария - данные текущего шага
&НаКлиенте
Процедура СцТ_ПонизитьУровеньУзла_НаКлиенте(УзелСценария, ВызвавшаяФорма) Экспорт
	
	РодительУзла     = СцТ_УзелБлокаСценария(УзелСценария.ПолучитьРодителя(), ВызвавшаяФорма);
	СоседниеЭлементы = РодительУзла.ПолучитьЭлементы();
	ИндексУзла       = СоседниеЭлементы.Индекс(УзелСценария);
	ПредыдущийУзел   = СоседниеЭлементы.Получить(ИндексУзла - 1);
	
	НовыйУзел = СцТ_СкопироватьУзелСценария(УзелСценария, ПредыдущийУзел, , Истина, Истина, , , , ВызвавшаяФорма.Элементы.БлокСценария,,ВызвавшаяФорма);
	
	ВызвавшаяФорма.Элементы.БлокСценария.Развернуть(ПредыдущийУзел.ПолучитьИдентификатор(), Ложь);
	ВызвавшаяФорма.Элементы.БлокСценария.ТекущаяСтрока = НовыйУзел.ПолучитьИдентификатор();
	
	ВызвавшаяФорма.Модифицированность = Истина;
	
КонецПроцедуры

// Копирование ветки сценария
//
// Параметры
//	УзелИсточник                 - откуда копировать
//	УзелПриемник                 - родительский узел куда копировать
//	ИндексВставки                - положение для нового узла
//	УдалитьУзлыИсточника         - нужно ли удалять старые узлы (т.е. перенос)
//	КопироватьРазвернутость      - нужно ли отображать новые узлы так же как и в источнике
//	УзлыПеремещенных             - перемещенные узлы дерева
//	КопироватьТолькоАктивныеУзлы - копировать только активные узлы или все
//	ПервоеВложение               - параметр для организации рекурсии
//	ЭлементДерева                - дерево на форме
&НаКлиенте
Функция СцТ_СкопироватьУзелСценария(
	УзелИсточник,                                // 1
	УзелПриемник,                                // 2
	Знач ИндексВставки           = Неопределено, // 3
	УдалитьУзлыИсточника         = Ложь,         // 4 (Обозначает, выполнить ли перемещение узлов)
	КопироватьРазвернутость      = Ложь,         // 5
	УзлыПеремещенных             = Неопределено, // 6
	КопироватьТолькоАктивныеУзлы = Ложь,         // 7
	ПервоеВложение               = Истина,       // 8
	ЭлементДерева                = Неопределено, // 9
	ИмяРеквизитаАктивности       = ""Активность"", // 10
	ВызвавшаяФорма = Неопределено) Экспорт
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	Если КопироватьТолькоАктивныеУзлы И УзелИсточник[ИмяРеквизитаАктивности] = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыПриемника = УзелПриемник.ПолучитьЭлементы();
	Если ИндексВставки = Неопределено Тогда
		ИндексВставки = ЭлементыПриемника.Количество();
	КонецЕсли;
	
	НовыйУзел = ЭлементыПриемника.Вставить(ИндексВставки);
	ЗаполнитьЗначенияСвойств(НовыйУзел, УзелИсточник, , ""УИШ, Значение, Выполнено"");
	
	Если КопироватьТолькоАктивныеУзлы И УзелИсточник[ИмяРеквизитаАктивности] > 0 Тогда
		НовыйУзел.Активность = 1;
	КонецЕсли;
	
	НовыйУзел.УИШ = ?(УдалитьУзлыИсточника,
					  УзелИсточник.УИШ,
					  Строка(Новый УникальныйИдентификатор));
	СцТ_СкопироватьДеревоФормы(УзелИсточник.Значение, НовыйУзел.Значение);
	
	Если УдалитьУзлыИсточника Тогда
		СцТ_ФормыТестируемогоПриложения[НовыйУзел.УИШ] = СцТ_ФормыТестируемогоПриложения[УзелИсточник.УИШ];
		Если ПервоеВложение Тогда
			УзлыПеремещенных = Новый Соответствие;
		КонецЕсли;
		УзлыПеремещенных[УзелИсточник] = НовыйУзел;
	КонецЕсли;
	
	ЭлементыИсточника        = УзелИсточник.ПолучитьЭлементы();
	КоличествоУзловИсточника = ЭлементыИсточника.Количество();
	Итератор = 0;
	Пока УдалитьУзлыИсточника И ЭлементыИсточника.Количество() > 0
		ИЛИ НЕ УдалитьУзлыИсточника И Итератор < КоличествоУзловИсточника Цикл
		
		ДочернийУзел = ЭлементыИсточника.Получить(?(УдалитьУзлыИсточника, 0, Итератор));
		СцТ_СкопироватьУзелСценария(
			ДочернийУзел,
			НовыйУзел,
			,
			УдалитьУзлыИсточника,
			КопироватьРазвернутость,
			УзлыПеремещенных,
			КопироватьТолькоАктивныеУзлы,
			Ложь,
			Неопределено, // Копируется только развернутость узлов верхнего уровня
			ИмяРеквизитаАктивности);
		
		Если УдалитьУзлыИсточника Тогда
			СцТ_УдалитьУзелДереваФормы(ДочернийУзел, ВызвавшаяФорма.БлокСценария);
		КонецЕсли;
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	Если КопироватьРазвернутость
		И ЭлементДерева <> Неопределено
		И ЭлементДерева.Развернут(УзелИсточник.ПолучитьИдентификатор()) Тогда
		ВызвавшаяФорма.Элементы.БлокСценария.Развернуть(НовыйУзел.ПолучитьИдентификатор(), Ложь);
	КонецЕсли;
	
	Если ПервоеВложение Тогда
		Если УдалитьУзлыИсточника Тогда
			СцТ_УдалитьУзелДереваФормы(УзелИсточник, ВызвавшаяФорма.БлокСценария);
			// Нужно оповестить открытые формы настройки шага о том,
			// что узлы были перемещены для ""перепривязки"" их к новым
			// узлам сценария
			Оповестить(""СцТ_ПеремещениеУзловСценария"", УзлыПеремещенных, ЭтотОбъект);
		КонецЕсли;
		// После выполнения копирования узлов требуется перенумеровать шаги
		СцТ_ПронумероватьШаги_НаКлиенте(,, ВызвавшаяФорма);
		ВызвавшаяФорма.Модифицированность = Истина;
	КонецЕсли;
	
	Возврат НовыйУзел;
	
КонецФункции

// Установка флагов у родительских узлов, относительно текущего
//
// Параметры
// ТекущиеДанные - Текущие данные дерева
&НаКлиенте
Процедура СцТ_УстановитьФлагиУРодителей(ТекущиеДанные) Экспорт
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	ТекущаяАктивность = ТекущиеДанные.Активность;
	Если Родитель <> Неопределено Тогда
		Родитель.Активность = ТекущаяАктивность;
		
		Для каждого ПодчиненныйЭлемент Из Родитель.ПолучитьЭлементы() Цикл
			Если ПодчиненныйЭлемент.Активность <> Родитель.Активность Тогда
				Родитель.Активность = 2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СцТ_УстановитьФлагиУРодителей(Родитель);
	КонецЕсли;
	
КонецПроцедуры

// Установка флагов у всех подчиненных узлов относительно текущего
//
// Параметры
// ТекущиеДанные - Текущие данные дерева
&НаКлиенте
Процедура СцТ_УстановитьФлагиУДочерних(ТекущиеДанные) Экспорт
	
	ТекущаяАктивность = ТекущиеДанные.Активность;
	Для каждого ПодчиненныйЭлемент Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		ПодчиненныйЭлемент.Активность = ТекущаяАктивность;
		СцТ_УстановитьФлагиУДочерних(ПодчиненныйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

// Устновка отметки о выполнении у узла дерева
//
// Параметры
//	ВеткаДерева - текущая ветка дерева
// ЗначениеФлага - устанавливаемое значение флага
&НаКлиенте
Процедура СцТ_ИтерационноУстановитьФлагВыполненоУВетки(ВеткаДерева = Неопределено, ЗначениеФлага = 0) Экспорт
	
	Если ВеткаДерева = Неопределено Тогда
		ВеткаДерева = БлокСценария;
	Иначе
		ВеткаДерева.Выполнено = ЗначениеФлага;
	КонецЕсли;
	
	Для каждого ПодчиненныйУзел Из ВеткаДерева.ПолучитьЭлементы() Цикл
		СцТ_ИтерационноУстановитьФлагВыполненоУВетки(ПодчиненныйУзел, ЗначениеФлага);
	КонецЦикла;
	
КонецПроцедуры

// Заполнение списка идентификаторов узлов для всех подчиненных строк узла дерева
//
// Парметры
// РодительскийУзел - корень ветки, для которого нужно заполнить идентификаторы
// СписокИдентификаторовУзлов - заполняемый список идентификаторов
&НаКлиенте
Процедура СцТ_ЗаполнитьСписокИдентификаторовУзлов(РодительскийУзел, СписокИдентификаторовУзлов) Экспорт
	
	СписокИдентификаторовУзлов.Добавить(РодительскийУзел.ПолучитьИдентификатор());
	Для каждого Узел Из РодительскийУзел.ПолучитьЭлементы() Цикл
		СцТ_ЗаполнитьСписокИдентификаторовУзлов(Узел, СписокИдентификаторовУзлов);
	КонецЦикла;
	
КонецПроцедуры

// Процедура отображения состояния текущего шага сценария
// Вызывается в обрабочике ожидания
&НаКлиенте
Процедура СцТ_ОтобразитьСостояниеТекущегоШага(ВызвавшаяФорма = Неопределено) Экспорт
	
	СцТ_ОбновитьАвтоОписаниеШагаВДеревеБлокаСценария(ВызвавшаяФорма.Элементы.БлокСценария.ТекущиеДанные, ВызвавшаяФорма);
	
КонецПроцедуры

// Выделение строк сценария цветом
//
// Параметры
// ЦветСтр - строка цвета
&НаКлиенте
Процедура СцТ_УстановитьЦветТекстаУВыделенных(ЦветСтр, ВызвавшаяФорма = Неопределено) Экспорт
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	Для каждого ИВС Из ВызвавшаяФорма.Элементы.БлокСценария.ВыделенныеСтроки Цикл
		ДанныеСтроки = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ИВС);
		ДанныеСтроки.Цвет = ЦветСтр;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПАРАМЕТРАМИ

&НаКлиенте
Функция ПроверитьПравильностьИмениПараметра(ИмяПараметра) Экспорт
	
	// Имя переменной не может быть пустым
	ДлинаИмени = СтрДлина(ИмяПараметра);
	Если ДлинаИмени = 0 Тогда
		ТекстПредупреждения = НСтр(""ru = 'Имя параметра не может быть пустой строкой'"");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	// Имя переменной должно содержать только допустимые символы
	ДопустимыеСимволы = ""АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGIHJKLMNOPQRSTUVWXYZ1234567890"";
	СтрокаНедопустимыхСимволов = """";
	КоличествоОшибок = 0;
	Для НомерСимвола = 1 По ДлинаИмени Цикл
		ТекущийСимвол = Сред(ИмяПараметра, НомерСимвола, 1);
		Если НЕ Найти(ДопустимыеСимволы, ВРег(ТекущийСимвол)) Тогда
			Если ТекущийСимвол = "" "" Тогда
				ТекущийСимвол = НСтр(""ru = '<Пробел>'"");
			КонецЕсли;
			Если НЕ Найти(СтрокаНедопустимыхСимволов, ТекущийСимвол) Тогда
				СтрокаНедопустимыхСимволов = СтрокаНедопустимыхСимволов + ТекущийСимвол;
				КоличествоОшибок = КоличествоОшибок + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаНедопустимыхСимволов) Тогда
		Если КоличествоОшибок = 1 Тогда
			ТекстПредупреждения = НСтр(""ru = 'В имени параметра использован недопустимый символ - %1'"");
		Иначе
			ТекстПредупреждения = НСтр(""ru = 'В имени параметра использованы недопустимые символы - %1'"");
		КонецЕсли;
		
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, ""%1"", СтрокаНедопустимыхСимволов);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	// Первый символ не может быть цифрой
	ПервыйСимвол = Лев(ИмяПараметра, 1);
	Если Найти(""1234567890"", ПервыйСимвол) Тогда
		ТекстПредупреждения = НСтр(""ru = 'Первый символ имени параметра не может быть цифрой'"");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПроверитьПравильностьЗначенияПараметра(Знач ЗначениеПараметра) Экспорт
	
	Если ТипЗнч(ЗначениеПараметра) <> Тип(""Строка"") Тогда
		// Проверять на наличие параметра нужно только строки
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеПараметра = ""&"" Тогда
		ТекстПредупреждения = НСтр(""ru = 'Значение параметра не может состоять из символа &. Используйте удвоенный символ'"");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(ЗначениеПараметра) = 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Значение строкового параметра не должно быть параметром
	Если Лев(ЗначениеПараметра, 1) = ""&"" И Лев(ЗначениеПараметра, 2) <> ""&&"" Тогда
		ТекстПредупреждения = НСтр(""ru = 'Использование другого параметра в качестве значения параметра запрещено'"");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
	
КонецФункции

&НаКлиенте
Функция ПроверитьПравильностьУказателяНаПараметр(УказательНаПараметр, БезПредупреждения = Ложь, ТекстПредупреждения = """") Экспорт
	
	Если ТипЗнч(УказательНаПараметр) <> Тип(""Строка"") Тогда
		// Проверять ничего не нужно. Это точно не параметр)
		Возврат Истина;
	КонецЕсли;
	
	ДлинаУказателя = СтрДлина(УказательНаПараметр);
	
	Если ДлинаУказателя = 0 Тогда
		// значение может быть пустым
		Возврат Истина;
	ИначеЕсли Лев(УказательНаПараметр, 1) <> ""&"" Тогда
		// Это не параметр
		Возврат Истина;
	ИначеЕсли ДлинаУказателя = 1 И УказательНаПараметр = ""&"" Тогда
		ТекстПредупреждения = НСтр(""ru = 'Значение не может быть символом &. Используйте дублирование'"");
		Если НЕ БезПредупреждения Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли  ДлинаУказателя >= 2 И Лев(УказательНаПараметр, 2) = ""&&"" Тогда
		// Это не параметр
		Возврат Истина;
	Иначе
		// выполняем расширенную проверку
		ИмяПараметра = Сред(УказательНаПараметр, 2);
		
		// Имя переменной должно содержать только допустимые символы
		ДопустимыеСимволы = ""АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGIHJKLMNOPQRSTUVWXYZ1234567890"";
		СтрокаНедопустимыхСимволов = """";
		КоличествоОшибок = 0;
		Для НомерСимвола = 1 По ДлинаУказателя - 1 Цикл
			ТекущийСимвол = Сред(ИмяПараметра, НомерСимвола, 1);
			Если НЕ Найти(ДопустимыеСимволы, ВРег(ТекущийСимвол)) Тогда
				Если НЕ Найти(СтрокаНедопустимыхСимволов, ТекущийСимвол) Тогда
					Если ТекущийСимвол = "" "" Тогда
						СтрокаНедопустимыхСимволов = СтрокаНедопустимыхСимволов + НСтр(""ru = '<Пробел>'"");
					Иначе
						СтрокаНедопустимыхСимволов = СтрокаНедопустимыхСимволов + ТекущийСимвол;
					КонецЕсли;
					
					КоличествоОшибок = КоличествоОшибок + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(СтрокаНедопустимыхСимволов) Тогда
			Если КоличествоОшибок = 1 Тогда
				ТекстПредупреждения = НСтр(""ru = 'В имени параметра использован недопустимый символ - %1'"");
			Иначе
				ТекстПредупреждения = НСтр(""ru = 'В имени параметра использованы недопустимые символы - %1'"");
			КонецЕсли;
			
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, ""%1"", СтрокаНедопустимыхСимволов);
			Если НЕ БезПредупреждения Тогда
				ПоказатьПредупреждение(, ТекстПредупреждения);
			КонецЕсли;
			Возврат Ложь;
			
		КонецЕсли;
		
		// Первый символ не может быть цифрой
		ПервыйСимвол = Лев(ИмяПараметра, 1);
		Если Найти(""1234567890"", ПервыйСимвол) Тогда
			ТекстПредупреждения = НСтр(""ru = 'Первый символ имени параметра не может быть цифрой'"");
			Если НЕ БезПредупреждения Тогда
				ПоказатьПредупреждение(, ТекстПредупреждения);
			КонецЕсли;
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Определение по имени узла, относится ли он к тестируемому приложению
// Параметры
//	ИмяУзла - Строка имени узла
// Возвращаемое значение - Истина или Ложь
&НаКлиенте
Функция СцТ_УзелОписываетОбъектТестируемогоПриложения(Знач ИмяУзла) Экспорт
	
	ИмяУзла = ВРег(СокрЛП(ИмяУзла));
	
	Возврат (ИмяУзла = ""CLIENTAPPLICATIONWINDOW"" // Окно
		ИЛИ  ИмяУзла = ""FORM""                    // Форма
		ИЛИ  ИмяУзла = ""FORMGROUP""               // Группа формы
		ИЛИ  ИмяУзла = ""FORMFIELD""               // Поле формы
		ИЛИ  ИмяУзла = ""FORMTABLE""               // Таблица формы
		ИЛИ  ИмяУзла = ""FORMBUTTON""              // Кнопка формы
		ИЛИ  ИмяУзла = ""FORMDECORATION""          // Декорация формы
		ИЛИ  ИмяУзла = ""COMMANDINTERFACE""        // Командный интерфейс
		ИЛИ  ИмяУзла = ""COMMANDINTERFACEGROUP""   // Группа командного интерфейса
		ИЛИ  ИмяУзла = ""COMMANDINTERFACEBUTTON""  // Кнопка командного интерфейса
		);
	
КонецФункции

// Открытие формы настройки шага по идентификатору строки
// Параметры
//	ИдентификаторСтроки - идентификатор строки
&НаКлиенте
Процедура СцТ_ОткрытьФормуНастройкиШага(Знач ИдентификаторСтроки, Знач ВызвавшаяФорма = Неопределено) Экспорт
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	СтрокаБлокаСценария = СцТ_УзелБлокаСценария(ИдентификаторСтроки, ВызвавшаяФорма);
	
	Если СцТ_ОткрытыеФормыНастройкиШагов[СтрокаБлокаСценария.УИШ] <> Неопределено Тогда
		// Т.е. форма уже открыта
		Если СцТ_ОткрытыеФормыНастройкиШагов[СтрокаБлокаСценария.УИШ].Открыта() Тогда
			СцТ_ОткрытыеФормыНастройкиШагов[СтрокаБлокаСценария.УИШ].Активизировать();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Форма еще не открыта - открытие
	
	НетПодчиненныхУзлов = (СтрокаБлокаСценария.ПолучитьЭлементы().Количество() = 0);
	
	РодительскийШаг      = СтрокаБлокаСценария.ПолучитьРодителя();
	
	Если РодительскийШаг = Неопределено Тогда
		ИдентификаторУзлаРодителя = Неопределено;
		РодительскийШаг           = ВызвавшаяФорма.БлокСценария;
		ТипРодителя               = Неопределено;
	Иначе
		ИдентификаторУзлаРодителя = РодительскийШаг.ПолучитьИдентификатор();
		ТипРодителя               = РодительскийШаг.ТипШага;
	КонецЕсли;
	
	ИндексВставки = РодительскийШаг.ПолучитьЭлементы().Индекс(СтрокаБлокаСценария);
	
	ОписательПоложенияШагаВДереве = Новый Структура;
	ОписательПоложенияШагаВДереве.Вставить(""ИдентификаторУзлаРодителя"", ИдентификаторУзлаРодителя);
	ОписательПоложенияШагаВДереве.Вставить(""ИндексВставки""            , ИндексВставки);
	ОписательПоложенияШагаВДереве.Вставить(""ИдентификаторШага""        , СтрокаБлокаСценария.УИШ);
	ОписательПоложенияШагаВДереве.Вставить(""ТипРодителя""              , ТипРодителя);
	
	
	
	// В связи с большим объемом блока сценария требуется избегать контекстных серверных вызовов,
	// т.к. при таких вызовах все данные текущей формы передаются на сервер. Для этого необходимые
	// данные шага сценария преобразуются на клиенте в дерево структур и далее передаются
	// на сервер форме настройки шага
	СтруктураДанныхШага = СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(СтрокаБлокаСценария);
	
	ПараметрыФормыНастройкиШага = Новый Структура;
	ПараметрыФормыНастройкиШага.Вставить(""СтруктураДанныхШага""          , СтруктураДанныхШага);
	ПараметрыФормыНастройкиШага.Вставить(""НетПодчиненныхУзлов""          , НетПодчиненныхУзлов);
	ПараметрыФормыНастройкиШага.Вставить(""АдресНачальныхУстановокШагов"" , АдресНачальныхУстановокШагов);
	ПараметрыФормыНастройкиШага.Вставить(""АдресТаблицыСсылок""           , АдресТаблицыСсылок);
	ПараметрыФормыНастройкиШага.Вставить(""АдресТаблицыКлючей""           , АдресТаблицыКлючей);
	ПараметрыФормыНастройкиШага.Вставить(""АдресДереваМакрошагов""        , АдресДереваМакрошагов);
	ПараметрыФормыНастройкиШага.Вставить(""ЭтоНовый""                     , Ложь);
	ПараметрыФормыНастройкиШага.Вставить(""ВыполнятьПреобразованиеСсылочныхТипов"", ВыполнятьПреобразованиеСсылочныхТипов);
	
	ПараметрыФормыНастройкиШага.Вставить(""ТипШага""                      , СтруктураДанныхШага.ТипШага);
	ПараметрыФормыНастройкиШага.Вставить(""Активность""                   , СтруктураДанныхШага.Активность);
	ПараметрыФормыНастройкиШага.Вставить(""ОписательПоложенияШагаВДереве"", ОписательПоложенияШагаВДереве);
	ПараметрыФормыНастройкиШага.Вставить(""НомерШага""                    , СтруктураДанныхШага.НомерШага);
	
	ПараметрыФормыНастройкиШага.Вставить(""РежимСовместимости838""        , РежимСовместимости838);
	
	ИмяФормыНастройки = ОпределитьИмяФормыНастройкиШагаПоЕгоТипу(СтруктураДанныхШага.ТипШага);
	
	Если ИмяФормыНастройки = Неопределено Тогда
		ТекстСообщения = НСтр(""ru = 'Не удалось определить форму настройки шага'"");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Возвращение результатов настройки будет выполнено посредством оповещения
	ФормаНастройкиШага = ОткрытьФорму(
		ПутьКФормам + ИмяФормыНастройки,
		ПараметрыФормыНастройкиШага,
		ВызвавшаяФорма,
		СтруктураДанныхШага.УИШ);
	
	ФормаНастройкиШага.СцТ_ГлавнаяФорма  = ЭтотОбъект;
	ФормаНастройкиШага.ВызвавшаяФорма    = ВызвавшаяФорма;
	ФормаНастройкиШага.ДанныеШага        = СтрокаБлокаСценария;
	ФормаНастройкиШага.ИдентификаторУзла = СтрокаБлокаСценария.ПолучитьИдентификатор();
	
	// Формирование заголовка формы (для однотипности)
	ЭлементОписаниеТипаШага = СписокТиповШагов.НайтиПоЗначению(СтруктураДанныхШага.ТипШага);
	Если ЭлементОписаниеТипаШага = Неопределено Тогда
		ТекстЗаголовка = НСтр(""ru = 'Неизвестный тип шага ('"") + СтруктураДанныхШага.ТипШага + "")"";
	Иначе
		ТекстЗаголовка = НСтр(""ru = 'Настройка шага """"%1""""'"");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, ""%1"", ЭлементОписаниеТипаШага.Представление);
	КонецЕсли;
	ФормаНастройкиШага.Заголовок = ТекстЗаголовка;
	
	// Регистрация открытой формы
	СцТ_ОткрытыеФормыНастройкиШагов[СтруктураДанныхШага.УИШ] = ФормаНастройкиШага;
	
	ФормаНастройкиШага.СцТ_СформироватьПредставлениеРодителя();
	
КонецПроцедуры

// Определение родительского типа шага
// Параметры
//	УзелСценария - данные шага
// Возвращаемое значение - строка типа шага
&НаКлиенте
Функция СцТ_ПолучитьТипКонтейнераШага(УзелСценария) Экспорт
	
	ТекущаяАвтоГруппа = УзелСценария;
	Пока ТекущаяАвтоГруппа <> Неопределено
		И ТекущаяАвтоГруппа.ТипШага <> ""Группа""
		И ТекущаяАвтоГруппа.ТипШага <> ""АвтоГруппа""
		И ТекущаяАвтоГруппа.ТипШага <> ""ИнтерактивнаяАвтоГруппа""
		И ТекущаяАвтоГруппа.ТипШага <> ""АвтоГруппаТаблицаФормы"" Цикл
		
		ТекущаяАвтоГруппа = ТекущаяАвтоГруппа.ПолучитьРодителя();
		
	КонецЦикла;
	
	Возврат ?(ТекущаяАвтоГруппа = Неопределено,
			  ""Группа"",
			  ТекущаяАвтоГруппа.ТипШага);
	
КонецФункции

// Проверка заполненности значения в тестируемом приложении
// Параметры
//	ЗначениеВПолеФормы - значение прочитанное из поля формы
// Возвращаемое значение - Истина, когда значение заполнено
&НаКлиенте
Функция СцТ_ЗначениеВПолеФормыЗаполнено(ЗначениеВПолеФормы) Экспорт
	
	Возврат ЗначениеЗаполнено(ЗначениеВПолеФормы)
			И ЗначениеВПолеФормы <> ""0""
			И ЗначениеВПолеФормы <> ""  .  .    ""
			И ЗначениеВПолеФормы <> Ложь
			И ЗначениеВПолеФормы <> '00010101'
			И ВРег(ЗначениеВПолеФормы) <> НСтр(""ru = 'НЕТ'"");
	
КонецФункции

// Определение действий по умолчанию для тестируемых элементов
// Параметры
//	 ВидПоляФормы - Строка, определяющая вид
// Возвращаемое значение - Строка действия
&НаКлиенте
Функция СцТ_ДействиеПоУмолчаниюДляПоляФормы(ВидПоляФормы) Экспорт
	
	Если ВидПоляФормы = ""ПолеВвода"" Тогда
		Возврат ""ВводПоСтроке"";
	ИначеЕсли ВидПоляФормы = ""Надпись"" Тогда
		Возврат ""Проверить"";
	ИначеЕсли ВидПоляФормы = ""ПолеКалендаря"" Тогда
		Возврат ""ПерейтиКДате"";
	ИначеЕсли ВидПоляФормы = ""ПолеПереключателя"" Тогда
		Возврат ""ВыбратьВариант"";
	ИначеЕсли ВидПоляФормы = ""ПолеТекстовогоДокумента"" Тогда
		Возврат ""ВвестиТекст"";
	ИначеЕсли ВидПоляФормы = ""ПолеФлажка"" Тогда
		Возврат ""УстановитьОтметку"";
	Иначе
		Возврат """";
	КонецЕсли;
	
КонецФункции

// Функция определения значения атрибута XML
// по имени
// Параметры
//	ЧтениеXML - стандартная ЧтениеXML
// Возвращаемое значение - значение атрибута
&НаКлиенте
Функция СцТ_АтрибутыУзла(ЧтениеXML) Экспорт
	
	Результат = Новый Соответствие;
	Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
		Результат[ВРег(СокрЛП(ЧтениеXML.Имя))] = ЧтениеXML.Значение;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразование строки - Если строка записана с заглавной буквы,
// то возвращается строка со строчной буквы
&НаКлиенте
Функция СцТ_НачатьСоСтрочногоСимвола(Стр) Экспорт
	
	Если СтрДлина(Стр) = 0 Тогда
		Возврат """";
	Иначе
		ПервыйСимвол = Сред(Стр, 1, 1);
		Возврат НРег(ПервыйСимвол) + Сред(Стр, 2);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЗАИМОДЖЕЙСТВИЕ С ВНЕШНИМИ ПРОГРАММАМИ

// Выполняет закрытие главного окна тестируемого приложения
// и разрывает соединение с тестируемым приложением
// Параметры:
//	КодВозврата - код возврата диалога запроса на закрытия тестируемого приложения;
//	ДопПараметры - дополнительные параметры;
//
&НаКлиенте
Процедура СцТ_ЗакрытьГлавноеОкноТПИРазорватьСоединение(КодВозврата, ДопПараметры) Экспорт
	
	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОсновноеОкно = СцТ_ПолучитьОсновноеОкноТестируемогоПриложения();
		Если ОсновноеОкно <> Неопределено Тогда
			ОсновноеОкно.Закрыть();
		КонецЕсли;
		СцТ_Контроллер.РазорватьСоединение();
	Исключение
		ТекстОповещения = НСтр(""ru = 'Ошибка при попытке закрыть тестируемое приложение'"");
		
		ДобавитьКраткуюИнформациюОбОшибке(ТекстОповещения,ИнформацияОбОшибке());
		
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстОповещения, КартинкаИнформация32);
		Возврат;
	КонецПопытки;
	
	СцТ_ФормыТестируемогоПриложения   = Новый Соответствие;
	СцТ_ТаблицыТестируемогоПриложения = Новый Соответствие;
	СцТ_Контроллер                    = Неопределено;
	СцТ_СостояниеТП();
	
	ПоказатьОповещениеПользователя(НСтр(""ru = 'Закрытие тестируемого приложения'""),
		,
		НСтр(""ru = 'Соединение с тестируемым приложением разорвано'""),
		КартинкаИнформация32);
	
КонецПроцедуры

// Операции, выполняемые при сохранении сценария
// Параметры:
//	СледДействие (Число) - код действия, котор. необходимо выполнить после сохранения сценария;
//		0 - не выполнять никакого действия;
//		1 - закрыть обработку;
//		2 - открыть сценарий для редактирования;
//		3 - открыть сценарий для выполнения;
//		4 - создать новый сценарий;
//
&НаКлиенте
Процедура СцТ_ОбработатьСохранениеСценария(СледДействие = 0, АвтоСохранение = Истина) Экспорт
	
	Если СледДействие <> 0 Тогда
		Если СцТ_СценарийМодифицирован() Тогда
			ПоказатьВопрос(
				Новый ОписаниеОповещения(""СцТ_СохранитьСценарий"",
					ЭтотОбъект,
					Новый Структура(""СледДействие, АвтоСохранение"", СледДействие, АвтоСохранение)),
				НСтр(""ru = 'Сценарий был изменен. Сохранить изменения?'""),
				РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			СцТ_СохранитьСценарий(
				КодВозвратаДиалога.Нет,
				Новый Структура(""СледДействие, АвтоСохранение"", СледДействие, АвтоСохранение));
		КонецЕсли;
	Иначе
		СцТ_СохранитьСценарий(
			КодВозвратаДиалога.Да,
			Новый Структура(""СледДействие, АвтоСохранение"", СледДействие, АвтоСохранение));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ВыполнитьОткрытиеСценария(РежимОткрытия = ""Редактирование"") Экспорт
	
	СцТ_ОчиститьВспомогательныеТаблицы();
	
	СцТ_РежимВыполнения = (РежимОткрытия <> ""Редактирование"");
	СцТ_УправлениеРежимомВыполнения(Истина);
	
	// Открытие файла сценария для редактирования
	СцТ_ОткрытьФайлСценария(РежимОткрытия);
	
	Если РежимОткрытия = ""Выполнение"" И СцТ_ВнешнееУправлениеОбработкой <> ""Непосредственное"" Тогда
		ВыполнятьЗамерПроизводительности = (ВидТестируемогоКлиента <> 2);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет последовательность действий по сохранению данных файла сценария
// Параметры:
//	КодВозврата (КодВозвратаДиалога) - код клавиши, нажатой пользователем в диалоге на сохранение;
//	ДопПараметры (Структура) - дополнительные параметры сохранения;
//
&НаКлиенте
Процедура СцТ_СохранитьСценарий(КодВозврата, ДопПараметры) Экспорт
	
	Если ТипЗнч(КодВозврата) <> Тип(""КодВозвратаДиалога"")
		ИЛИ КодВозврата = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		// Выполнить попытку сохранения данных сценария
		// в формах настройки шагов
		
		// Цикл закрытия нужно организовать по копии соответствия, так как при закрытии формы
		// удаляют себя из соответствия СцТ_ОткрытыеФормыНастройкиШагов
		КопияОткрытыеФормыНастройкиШагов = Новый Соответствие;
		Для каждого КлючИЗначение Из СцТ_ОткрытыеФормыНастройкиШагов Цикл
			КопияОткрытыеФормыНастройкиШагов.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		// Открытые формы настройки шагов
		Для каждого КлючИЗначение Из КопияОткрытыеФормыНастройкиШагов Цикл
			
			ФормаНастройкиШага = КлючИЗначение.Значение;
			Попытка
				ФормаОткрыта = ФормаНастройкиШага.Открыта();
			Исключение
				// Вероятнее всего форма закрыта
				Продолжить;
			КонецПопытки;
			
			Попытка
				// Чтобы снять фокус ввода с полей ввода и привести
				// к установке флага модифицированности.
				ФормаНастройкиШага.ТекущийЭлемент = ФормаНастройкиШага.Элементы.ПрименитьИЗакрыть;
			Исключение
			КонецПопытки;
			
			Если ФормаНастройкиШага.Модифицированность Тогда
				Если НЕ ФормаНастройкиШага.СцТ_ПрименитьИзменения_НаКлиенте() Тогда
					// В форме настройки шага отображено сообщение об ошибке
					// форму необходимо активизировать и прервать процесс сохранения
					ФормаНастройкиШага.Активизировать();
					
					КопияОткрытыеФормыНастройкиШагов = Неопределено;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ФормаНастройкиШага.Закрыть();
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		КопияОткрытыеФормыНастройкиШагов = Неопределено;
		
		// Остальные формы можно закрыть принудительно
		
	КонецЕсли;
	
	Если ДопПараметры.СледДействие <> 0 Тогда
		// Закрыть все формы настройки шагов, т.к. это открытие или создание
		// другого сценария
		
		
		Оповестить(""СцТ_ПринудительноеЗакрытиеВсехФормОбработки"");
		
	КонецЕсли;
	
	Если КодВозврата = КодВозвратаДиалога.Нет Тогда
		СцТ_ВыполнитьСледующееДействиеПослеСохранения(ДопПараметры.СледДействие);
	Иначе
		
		// Сохранить сценарий в файл.
		// Следующее действие будет выполнено при обработке оповещения формы сохранения
		// Подготовка данных
		
		ТекущиеДанныеБлока = Элементы.БлокСценария.ТекущиеДанные;
		Если ТекущиеДанныеБлока = Неопределено Тогда
			УИШТекущегоШага = Неопределено;
		Иначе
			УИШТекущегоШага = ТекущиеДанныеБлока.УИШ;
		КонецЕсли;
		
		ПараметрыФормыСохранения = СцТ_ПодготовитьДанныеДляСохранения_НаСервере(
			УИШТекущегоШага,
			ДопПараметры.АвтоСохранение);
		
		ПараметрыФормыСохранения.Вставить(""СледДействие"", ДопПараметры.СледДействие);
		ПараметрыФормыСохранения.Вставить(""ЗакрыватьПриЗакрытииВладельца"", Истина);
		ФормаСохранения = ОткрытьФорму(
			ПутьКФормам + ""СохранениеСценария"",
			ПараметрыФормыСохранения,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ЗагрузитьИВыполнитьСценарий(РабочийКаталогВыполнения, СтруктураЭкспортныхДанных) Экспорт
	
	Объект.РабочийКаталог = РабочийКаталогВыполнения;
	СцТ_ВнешнееУправлениеОбработкой = ""Непосредственное"";
	
	#Если НЕ ТонкийКлиент И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр(""ru = 'Работа с инструментом недоступна в текущем клиенте'"");
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстСообщения, КартинкаИнформация32);
		
		ЭтаФорма.Закрыть();
		Возврат;
	#КонецЕсли
	
	// Проверка: запущен ли сеанс в режиме менеджера тестирования;
	// если нет, то сообщить об этом пользователю.
	Попытка
		ФиктивнаяПеременная = Тип(""ТестируемоеПриложение"");
		ЭтоМенеджерТестирования = Истина;
	Исключение
		ЭтоМенеджерТестирования = Ложь;
	КонецПопытки;
	
	Если НЕ ЭтоМенеджерТестирования Тогда
		ТекстСообщения = НСтр(""ru = 'Текущий сеанс не запущен в режиме менеджера тестирования. Работа с интерактивными шагами будет недоступна.
				|Для работы с интерактивными шагами требуется запустить информационную базу с параметром """"/TESTMANAGER""""'"");
				
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстСообщения, КартинкаИнформация32);
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли;
	
	СцТ_ВидДействияАвтоматическогоЗапуска = ""ВыполнитьИнтерактивныеШаги"";
	
	// Открытие сценария выполнятся в обработчике ожидания, чтобы главная форма
	// обработки отобразилась на экране, иначе форма не отобразится
	// до окончания открытия файла сценария
	
	ПутьФайлаСценарияДляАвтоОткрытия = Объект.РабочийКаталог + ""Сценарий.xml"";
	ПодключитьОбработчикОжидания(""СцТ_ОткрытьСценарийАвто"", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарийПодВнешнимУправлением(ЗамерПроизводительности = Неопределено) Экспорт
	
	Если ЗамерПроизводительности <> Неопределено Тогда
		ВыполнятьЗамерПроизводительности = ЗамерПроизводительности;
	КонецЕсли;
	
	// На случай, если пользователь выполнил какую то настройку вручную
	СцТ_ВнешнееУправлениеОбработкой = ""Непосредственное"";
	
	#Если НЕ ТонкийКлиент И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр(""ru = 'Работа с инструментом недоступна в текущем клиенте'"");
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстСообщения, КартинкаИнформация32);
		
		ЭтаФорма.Закрыть();
		Возврат;
	#КонецЕсли
	
	// Проверка: запущен ли сеанс в режиме менеджера тестирования;
	// если нет, то сообщить об этом пользователю.
	Попытка
		ФиктивнаяПеременная = Тип(""ТестируемоеПриложение"");
		ЭтоМенеджерТестирования = Истина;
	Исключение
		ЭтоМенеджерТестирования = Ложь;
	КонецПопытки;
	
	Если НЕ ЭтоМенеджерТестирования Тогда
		ТекстСообщения = НСтр(""ru = 'Текущий сеанс не запущен в режиме менеджера тестирования. Работа с интерактивными шагами будет недоступна.
				|Для работы с интерактивными шагами требуется запустить информационную базу с параметром """"/TESTMANAGER""""'"");
				
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстСообщения, КартинкаИнформация32);
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли;
	
	ШагиПервогоУровня = БлокСценария.ПолучитьЭлементы();
	Если ШагиПервогоУровня.Количество() = 0 Тогда
		ТекстСообщения = НСтр(""ru = 'Сценарий не содержит шагов. Выполнение сценария невозможно'"");
				
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстСообщения, КартинкаИнформация32);
		ЭтаФорма.Закрыть();
		Возврат;
	Иначе
		СцТ_ИдентификаторТекущегоШагаСценария = БлокСценария.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		
		СцТ_ОстановкаПоИнициативеПользователя = Ложь;
		СцТ_ВыполнениеТеста                   = ""АвтоматическийРежим"";
		
		СцТ_ТаблицыТестируемогоПриложения = Новый Соответствие;
		Элементы.ОстановитьВыполнение.Доступность = Истина;
		
		// Если в обработку не загружен сценарий и действие выполняется,
		// то именно так хочет пользователь. В противном случае процесс был бы прерван
		// еще при загрузке сценария
		
		ПолучитьФормуВыполненияИВыполнить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьТаблицуПараметровПодВнешнимУправлением(ПолныйПутьКФайлуСПарметрами) Экспорт
	
	// На случай, если пользователь выполнил какую то настройку вручную
	СцТ_ВнешнееУправлениеОбработкой = ""Непосредственное"";
	
	#Если НЕ ТонкийКлиент И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр(""ru = 'Работа с инструментом недоступна в текущем клиенте'"");
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстСообщения, КартинкаИнформация32);
		Возврат Ложь;
	#КонецЕсли
	
	#Если НЕ ВебКлиент Тогда
	// Проверка: запущен ли сеанс в режиме менеджера тестирования;
	// если нет, то сообщить об этом пользователю.
	Попытка
		ФиктивнаяПеременная = Тип(""ТестируемоеПриложение"");
		ЭтоМенеджерТестирования = Истина;
	Исключение
		ЭтоМенеджерТестирования = Ложь;
	КонецПопытки;
	
	Если НЕ ЭтоМенеджерТестирования Тогда
		ТекстСообщения = НСтр(""ru = 'Текущий сеанс не запущен в режиме менеджера тестирования. Работа с интерактивными шагами будет недоступна.
				|Для работы с интерактивными шагами требуется запустить информационную базу с параметром """"/TESTMANAGER""""'"");
				
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстСообщения, КартинкаИнформация32);
		Возврат Ложь;
	КонецЕсли;
	
	// Начало чтения параметров
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.ОткрытьФайл(ПолныйПутьКФайлуСПарметрами);
	Исключение
		ТекстПредупреждения = НСтр(""ru='Не удалось открыть файл XML <FILENAME>.'"");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, ""<FILENAME>"", ПолныйПутьКФайлуСПарметрами);
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстПредупреждения, КартинкаИнформация32);
		ЧтениеXML.Закрыть();
		Возврат Ложь;
	КонецПопытки;
	
	ЧтениеXML.Прочитать(); // зашли в корень
	
	Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
			Если      ЧтениеXML.Имя = ""ВерсияСтруктурыXML"" Тогда
				ВерсияСтруктуры = ЧтениеXML.Значение;
				
			ИначеЕсли ЧтениеXML.Имя = ""ТипФайла"" Тогда
				ТипФайла = ЧтениеXML.Значение;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Ничего страшного. Будет выполнение с другими параметрами
	Если ТипФайла <> ""GlobalParametrs"" Тогда
		ТекстПредупреждения = НСтр(""ru='Выбранный файл не содержит таблицу глобальных параметров. Выберите другой файл'"");
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстПредупреждения, КартинкаИнформация32);
		
		ЧтениеXML.Закрыть();
		Возврат Ложь;
	КонецЕсли;
	
	Если ВерсияСтруктуры = ""83-01"" Тогда
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				// Очистка параметров
				ИмяПараметра   = """";
				СтрокаЗначения = """";
				ТипЗначения    = """";
				
				// Чтение параметров
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если      ЧтениеXML.Имя = ""Параметр"" Тогда
						ИмяПараметра = ЧтениеXML.Значение;
					ИначеЕсли ЧтениеXML.Имя = ""Значение"" Тогда
						СтрокаЗначения = ЧтениеXML.Значение;
					ИначеЕсли ЧтениеXML.Имя = ""ТипЗначения"" Тогда
						ТипЗначения = ЧтениеXML.Значение;
					КонецЕсли;
				КонецЦикла;
				
				Если ТипЗначения = ""Число"" Тогда
					ИстинноеЗначение = XMLЗначение(Тип(""Число""), СтрокаЗначения);
				ИначеЕсли ТипЗначения = ""Булево"" Тогда
					ИстинноеЗначение = XMLЗначение(Тип(""Булево""), СтрокаЗначения);
				ИначеЕсли ТипЗначения = ""Дата"" Тогда
					ИстинноеЗначение = XMLЗначение(Тип(""Дата""), СтрокаЗначения);
				Иначе
					ИстинноеЗначение = СтрокаЗначения;
				КонецЕсли;
				
				Если ГлобальныеПараметры.Свойство(ИмяПараметра) Тогда
					ГлобальныеПараметры[ИмяПараметра] = ИстинноеЗначение;
				Иначе
					ГлобальныеПараметры.Вставить(ИмяПараметра, ИстинноеЗначение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекстПредупреждения = НСтр(""ru='Структура файла параметров отличается от нужной. параметры не загружены'"");
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстПредупреждения, КартинкаИнформация32);
		ЧтениеXML.Закрыть();
		Возврат Ложь;
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ВыгрузитьТаблицуПараметровПодВнешнимУправлением(ПолныйПутьКФайлу) Экспорт
	
	// На случай, если пользователь выполнил какую то настройку вручную
	СцТ_ВнешнееУправлениеОбработкой = ""Непосредственное"";
	
	#Если НЕ ТонкийКлиент И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр(""ru = 'Работа с инструментом недоступна в текущем клиенте'"");
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстСообщения, КартинкаИнформация32);
		Возврат Ложь;
	#КонецЕсли
	
	#Если НЕ ВебКлиент Тогда
	// Проверка: запущен ли сеанс в режиме менеджера тестирования;
	// если нет, то сообщить об этом пользователю.
	Попытка
		ФиктивнаяПеременная = Тип(""ТестируемоеПриложение"");
		ЭтоМенеджерТестирования = Истина;
	Исключение
		ЭтоМенеджерТестирования = Ложь;
	КонецПопытки;
	
	Если НЕ ЭтоМенеджерТестирования Тогда
		ТекстСообщения = НСтр(""ru = 'Текущий сеанс не запущен в режиме менеджера тестирования. Работа с интерактивными шагами будет недоступна.
				|Для работы с интерактивными шагами требуется запустить информационную базу с параметром """"/TESTMANAGER""""'"");
				
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстСообщения, КартинкаИнформация32);
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Попытка
		ЗаписьXML.ОткрытьФайл(ПолныйПутьКФайлу);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента(""Root"");
		// Аттрибуты
		ЗаписьXML.ЗаписатьАтрибут(""ВерсияСтруктурыXML"", ""83-01"");
		ЗаписьXML.ЗаписатьАтрибут(""ТипФайла""          , ""GlobalParametrs"");
		
		Если ТипЗнч(ГлобальныеПараметры) = Тип(""Структура"") Тогда
			Для каждого КлючЗначение Из ГлобальныеПараметры Цикл
			
				ЗаписьXML.ЗаписатьНачалоЭлемента(""СтрокаПараметра"");
				
				ЗаписьXML.ЗаписатьАтрибут(""Параметр""   , КлючЗначение.Ключ);
				ЗаписьXML.ЗаписатьАтрибут(""Значение""   , XMLСтрока(КлючЗначение.Значение));
				
				Если ТипЗнч(КлючЗначение.Значение) = Тип(""Дата"") Тогда
					ТипПараметра = ""Дата"";
				ИначеЕсли ТипЗнч(КлючЗначение.Значение) = Тип(""Булево"") Тогда
					ТипПараметра = ""Булево"";
				ИначеЕсли ТипЗнч(КлючЗначение.Значение) = Тип(""Число"") Тогда
					ТипПараметра = ""Число"";
				Иначе
					ТипПараметра = ""Строка"";
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьАтрибут(""ТипЗначения"", ТипПараметра);
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); // СтрокаПараметра
				
			КонецЦикла;
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Root
		
		ЗаписьXML.Закрыть();
		Возврат Истина;
		
	Исключение
		ЗаписьXML.Закрыть();
		Возврат Ложь;
		
	КонецПопытки;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура СцТ_ЗагрузитьСценарийПоВнешнейКоманде(РабочийКаталогВыполнения) Экспорт
	
	Объект.РабочийКаталог = РабочийКаталогВыполнения;
	СцТ_ВнешнееУправлениеОбработкой = ""Непосредственное"";
	
	#Если НЕ ТонкийКлиент И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр(""ru = 'Работа с инструментом недоступна в текущем клиенте'"");
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстСообщения, КартинкаИнформация32);
		
		ЭтаФорма.Закрыть();
		Возврат;
	#КонецЕсли
	
	// Проверка: запущен ли сеанс в режиме менеджера тестирования;
	// если нет, то сообщить об этом пользователю.
	Попытка
		ФиктивнаяПеременная = Тип(""ТестируемоеПриложение"");
		ЭтоМенеджерТестирования = Истина;
	Исключение
		ЭтоМенеджерТестирования = Ложь;
	КонецПопытки;
	
	Если НЕ ЭтоМенеджерТестирования Тогда
		ТекстСообщения = НСтр(""ru = 'Текущий сеанс не запущен в режиме менеджера тестирования. Работа с интерактивными шагами будет недоступна.
				|Для работы с интерактивными шагами требуется запустить информационную базу с параметром """"/TESTMANAGER""""'"");
				
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстСообщения, КартинкаИнформация32);
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли;
	
	СцТ_ВидДействияАвтоматическогоЗапуска = ""ОткрытьСценарийДляВыполнения"";
	
	// Открытие сценария выполнятся в обработчике ожидания, чтобы главная форма
	// обработки отобразилась на экране, иначе форма не отобразится
	// до окончания открытия файла сценария
	
	ПутьФайлаСценарияДляАвтоОткрытия = Объект.РабочийКаталог + ""Сценарий.xml"";
	ПодключитьОбработчикОжидания(""СцТ_ОткрытьСценарийАвто"", 0.1, Истина);
	
КонецПроцедуры

// Возвращает Истина, выполнение остановлено из конфигурации
// сценарного тестирования
&НаКлиенте
Функция СцТ_ОстановленИзКонфигурацииСТ() Экспорт
	
	Если НЕ СцТ_ВнешнееУправлениеОбработкой = ""ПосредствомФайлов"" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписательФайла = Новый Файл(Объект.РабочийКаталог + ""state"" + РазделительПутиКлиента + ""Остановить.txt"");
	Возврат ОписательФайла.Существует();
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Добавление нового шага при инициализации добавления в дереве шагов
// или дереве шагов макрошага
&НаКлиенте
Процедура ДобавитьНовыйШаг(УпрФ, Элемент, Копирование) Экспорт
	
	// Определение текущего узла дереве сценария
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущийТипШага = НЕопределено;
	Иначе
		ТекущийТипШага = ТекущиеДанные.ТипШага;
	КонецЕсли;
	
	Если Копирование Тогда
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			СцТ_СкопироватьУзелСценарияПоКомандеИнтерфейса(
				ТекущиеДанные,
				УпрФ);
				
			СцТ_ПронумероватьШаги_НаКлиенте();
			
		Иначе
			ТекстПредупреждения = НСтр(""ru = 'Не выбрана строка для копирования'"");
			
		КонецЕсли;
		
	Иначе
		
		ОписательПоложенияШагаВДереве = ПолучитьОписательПоложенияНовогоШагаВДереве(УпрФ, ТекущиеДанные);
		
		//// Формирование списков выбора доступных действий
		//СписокВыбора = СцТ_ЗаполнитьСписокДоступныхШагов_НаКлиенте(ТекущиеДанные); //ОписательПоложенияШагаВДереве
		
		СтруктураДопПараметров = Новый Структура;
		СтруктураДопПараметров.Вставить(""ВызвавшаяФорма""               , ЭтотОбъект);
		СтруктураДопПараметров.Вставить(""ОписательПоложенияШагаВДереве"", ОписательПоложенияШагаВДереве);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(""СцТ_ОбработатьВыборТипаНовогоШага"", ЭтотОбъект, СтруктураДопПараметров);
		// Добавление шагов в сценарий
		//СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр(""ru = 'Тип добавляемого шага'""));
		
		// Подготовка данных
		
		Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.ТипШага <> ""Группа""
			И ТекущиеДанные.ТипШага <> ""АвтоГруппа""
			И ТекущиеДанные.ТипШага <> ""ИнтерактивнаяАвтоГруппа""
			И ТекущиеДанные.ТипШага <> ""АвтоГруппаТаблицаФормы""
			И ТекущиеДанные.ТипШага <> ""АвтоГруппаТабличныйДокумент""
			И ТекущиеДанные.ТипШага <> ""Повторение""
			И ТекущиеДанные.ТипШага <> ""Условие"" Тогда
			
			ДанныеШага = ТекущиеДанные.ПолучитьРодителя();
			
		Иначе
			ДанныеШага = ТекущиеДанные;
			
		КонецЕсли;
	
		Если ДанныеШага = Неопределено Тогда
			
			ТипГруппы     = ""Группа"";
			ТипМетаданных = """";
			
		Иначе
			
			ТипГруппы     = ДанныеШага.ТипШага;
			ТипМетаданных = ДанныеШага.ТипМетаданных;
			
		КонецЕсли;
		
		ПФ = Новый Структура;
		ПФ.Вставить(""ТипРодителя""    , ТипГруппы);
		ПФ.Вставить(""ТипМД""          , ТипМетаданных);
		ПФ.Вставить(""ДляМакрошага""   , Ложь);
		ПФ.Вставить(""ВставитьГруппу"" , Ложь);
		
		// Открытие формы настройки эталонной базы
		ФормаВыбораТипаШага = ОткрытьФорму(ПутьКФормам + ""ВыборТипаШага"",
			ПФ,
			ЭтотОбъект,,,,
			ОписаниеОповещения);
			
	КонецЕсли;
	
КонецПроцедуры

// Выполняет удаление шагов сценария в результате запроса нажатия кнопки ""Да""
// в диалоге вопроса об удалении
// Параметры
//	КодВозврата - код нажатой кнопки в диалоге вопроса;
//	ДопПараметры - любые дополнительные параметры;
//
&НаКлиенте
Процедура СцТ_УдалитьШагиСценарияПоЗапросуНаУдаление(КодВозврата, ДопПараметры) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		НужнаяФорма = ЭтотОбъект;
	Иначе
		НужнаяФорма = ДопПараметры;
	КонецЕсли;
	
	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Требуется закрыть все открытые формы настройки удаляемых шагов
	
	СписокИдентификаторовУзлов = Новый СписокЗначений;
	Для каждого ИдентификаторУдаляемогоШага Из НужнаяФорма.Элементы.БлокСценария.ВыделенныеСтроки Цикл
		Узел = НужнаяФорма.БлокСценария.НайтиПоИдентификатору(ИдентификаторУдаляемогоШага);
		СцТ_ЗаполнитьСписокИдентификаторовУзлов(Узел, СписокИдентификаторовУзлов);
	КонецЦикла;
	
	// Удаление шагов сценария
	ИдентификаторыРодителей = Новый Соответствие;
	Для каждого ЭлементСписка Из СписокИдентификаторовУзлов Цикл
		УзелСценария = НужнаяФорма.БлокСценария.НайтиПоИдентификатору(ЭлементСписка.Значение);
		Если УзелСценария = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РодительУзла = УзелСценария.ПолучитьРодителя();
		Если РодительУзла = Неопределено Тогда
			РодительУзла = НужнаяФорма.БлокСценария;
		Иначе
			ИдентификаторыРодителей[РодительУзла.ПолучитьИдентификатор()] = Истина;
		КонецЕсли;
		
		РодительУзла.ПолучитьЭлементы().Удалить(УзелСценария);
		
	КонецЦикла;
	
	// Повторная нумерация шагов
	СцТ_ПронумероватьШаги_НаКлиенте(,, НужнаяФорма);
	
	// Вычисление активности групповых шагов
	Для каждого КлючЗначение Из ИдентификаторыРодителей Цикл
		РодительскийУзел = НужнаяФорма.БлокСценария.НайтиПоИдентификатору(КлючЗначение.Ключ);
		Если РодительскийУзел <> Неопределено Тогда
			СцТ_ВычислитьАктивностьУзла(РодительскийУзел);
			СцТ_УстановитьФлагиУРодителей(РодительскийУзел);
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	СцТ_ОтобразитьСостояниеТекущегоШага(НужнаяФорма);
	
	Оповестить(""СцТ_УдалениеШаговСценария"", СписокИдентификаторовУзлов, ЭтотОбъект);
	
КонецПроцедуры

// Выполняет запуск тестируемого приложения
// Параметры:
//	ПараметрыПриложения (Структура) - параметры требуемого приложения;
//	АвтоматическийЗапуск (Булево) - Истина, если запуск выполняется автоматически
//		(не по команде интерфейса);
//	СообщениеОбОшибке (Строка) - выходная переменная с описание ошибки запуска;
//
&НаКлиенте
Процедура СцТ_ЗапуститьТребуемоеПриложение(
	ПараметрыПриложения,
	АвтоматическийЗапуск = Ложь,
	СообщениеОбОшибке = """",
	ПараметрыПродолжения = Неопределено) Экспорт
	
	Если АвтоматическийЗапуск <> Истина Тогда
		Если ТипЗнч(ПараметрыПриложения) <> Тип(""Структура"") Тогда
			СцТ_Контроллер = -1;
			Возврат;
		Иначе
			СцТ_ПрименитьИзмененияПараметровЗапускаТП(ПараметрыПриложения);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидТестируемогоКлиента < 2 Тогда
		
		ПараметрыЗапускаКлента = ""ENTERPRISE"";
		
		Если ДругаяИБ Тогда
			СтрокаСоединения = СтрокаПодключенияКИБ;
		Иначе
			СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		КонецЕсли;
		
		СтрокаСоединения = """""""" + СтрЗаменить(СтрокаСоединения, """""""", """""""""""") + """""""";
		
		ПараметрыЗапускаКлента = ПараметрыЗапускаКлента
			+ "" /IBConnectionString"" + СтрокаСоединения
			+ "" /TESTCLIENT -TPort""
			+ СтрЗаменить(Строка(ПортТестируемогоКлиента), Символ(160), """");
		
		Если НЕ ПустаяСтрока(Объект.ИмяПользователя) Тогда
			
			ПараметрыЗапускаКлента = ПараметрыЗапускаКлента
				+ "" /N """""" + СтрЗаменить(Объект.ИмяПользователя, """""""", """""""""""") + """""""";
			
			ПараметрыЗапускаКлента = ПараметрыЗапускаКлента
				+ "" /P """""" + СтрЗаменить(Объект.ПарольПользователяИБ, """""""", """""""""""") + """""""";
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ДопПараметрыКоманднойСтроки) Тогда
			ПараметрыЗапускаКлента = ПараметрыЗапускаКлента + "" "" + ДопПараметрыКоманднойСтроки;
		КонецЕсли;
		
		#Если НЕ ВебКлиент Тогда
		ПутьКИсполняемомуФайлу = КаталогПрограммы() + ?(ВидТестируемогоКлиента = 0, ""1cv8c"", ""1cv8"");
		
		КомандаЗапуска = """""""" + 
			ПутьКИсполняемомуФайлу
			+ """""" ""
			+ ПараметрыЗапускаКлента;
		#КонецЕсли
		
		Попытка
			#Если НЕ ВебКлиент Тогда
			// Для внутренней обработки
			
			//ЗапуститьСистему(ПараметрыЗапускаКлента);
			// Для внешней обработки
			ЗапуститьПриложение(КомандаЗапуска);
			#КонецЕсли
		Исключение
			
			СцТ_Контроллер = Неопределено;
			
			СцТ_СостояниеТП();
			
			Если АвтоматическийЗапуск <> Истина Тогда
				СообщениеОбОшибке = НСтр(""ru = 'Не удалось выполнить запуск тестируемого приложения из-за ошибки'"");
				ДобавитьКраткуюИнформациюОбОшибке(СообщениеОбОшибке, ИнформацияОбОшибке());
				ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, СообщениеОбОшибке, КартинкаИнформация32);
			КонецЕсли;
			
			Возврат;
		КонецПопытки;
		
		Если АвтоматическийЗапуск = Истина Тогда
			СцТ_Контроллер = СцТ_УстановитьПодключениеКТестируемомуКлиенту(120);
		Иначе
			СцТ_Контроллер = СцТ_УстановитьПодключениеКТестируемомуКлиенту();
		КонецЕсли;
		
		Состояние();
		
		Если ТипЗнч(СцТ_Контроллер) = Тип(""Строка"") Тогда
			СообщениеОбОшибке = СцТ_Контроллер;
			СцТ_Контроллер = Неопределено;
			Если АвтоматическийЗапуск <> Истина Тогда
				ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, СообщениеОбОшибке, КартинкаИнформация32);
			КонецЕсли;
			СцТ_СостояниеТП();
			Возврат;
		ИначеЕсли СцТ_Контроллер = Неопределено Тогда
			Если АвтоматическийЗапуск <> Истина Тогда
				СообщениеОбОшибке = НСтр(""ru = 'Не удалось запустить тестируемое приложение из-за внутренней ошибки'"");
				ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, СообщениеОбОшибке, КартинкаИнформация32);
			КонецЕсли;
			СцТ_СостояниеТП();
			Возврат;
		ИначеЕсли АвтоматическийЗапуск <> Истина Тогда
			ПоказатьОповещениеПользователя(НСтр(""ru = 'Запуск тестируемого приложения'""),,
				НСтр(""ru = 'Запуск тестируемого приложения выполнен успешно'""),
				КартинкаИнформация32);
				
			Если ПараметрыПродолжения <> Неопределено И ПараметрыПродолжения.Свойство(""ТекущиеДанные"") И ПараметрыПродолжения.Свойство(""УпрФорма"") Тогда
				ПараметрыПродолжения.УпрФорма.ПродолжениеПодготовкиКВыполнениюШага(ПараметрыПродолжения.ТекущиеДанные);
			КонецЕсли;
			
		КонецЕсли;
		
		СцТ_СостояниеТП();
		
	Иначе
		
		Если АвтоматическийЗапуск = Истина Тогда
			URLИБ = СцТ_URLИнформационнойБазы;
		Иначе
			URLИБ = ПараметрыПриложения.URLИБ;
		КонецЕсли;
		
		СтрокаЗапуска = URLИБ;
		Если НЕ ПустаяСтрока(Объект.ИмяПользователя) Тогда
			
			СцТ_ДобавитьПараметрКURL(СтрокаЗапуска, ""N"", Объект.ИмяПользователя);
			Если Объект.ПарольПользователяИБ <> """" Тогда
				СцТ_ДобавитьПараметрКURL(СтрокаЗапуска, ""P"", Объект.ПарольПользователяИБ);
			КонецЕсли;
			
		КонецЕсли;
		
		СцТ_ДобавитьПараметрКURL(СтрокаЗапуска, ""TESTCLIENT"");
		СцТ_ДобавитьПараметрКURL(СтрокаЗапуска, ""TESTCLIENTID"", ИдентификаторВебКлиента);
		
		Если НЕ АвтоматическийЗапуск Тогда
			Если НЕ ПараметрыПриложения.ИспользоватьБраузерПоУмолчанию Тогда
				ПоказатьВводСтроки(Новый ОписаниеОповещения(""СцТ_ПодключитьсяКВебКлиенту"", ЭтотОбъект),
					СтрокаЗапуска,
					НСтр(""ru = 'Ссылка для запуска тестируемого клиента в произвольном браузере'""));
			Иначе
				Попытка
					ЗапуститьПриложение(СтрокаЗапуска);
				Исключение
					СцТ_Контроллер = Неопределено;
					СцТ_СостояниеТП();
					Возврат;
				КонецПопытки;
				СцТ_ПодключитьсяКВебКлиенту(СтрокаЗапуска, АвтоматическийЗапуск);
				
				Если ТипЗнч(СцТ_Контроллер) <> Тип(""Строка"") Тогда
					Если ПараметрыПродолжения <> Неопределено И ПараметрыПродолжения.Свойство(""ТекущиеДанные"") И ПараметрыПродолжения.Свойство(""УпрФорма"") Тогда
						ПараметрыПродолжения.УпрФорма.ПродолжениеПодготовкиКВыполнениюШага(ПараметрыПродолжения.ТекущиеДанные);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			//URLИБ                          = СцТ_URLИнформационнойБазы;
			ПортТестируемогоКлиента = Формат(СцТ_ПортПриложенияНаВебСервере, ""ЧГ=0"");
			КомандаОС = ПутьКИсполняемомуФайлуОбозревателя + "" "" + СтрокаЗапуска;
			КомпьютерИБ = СцТ_ИмяКомпьютераИБ;
			
			Попытка
				ЗапуститьПриложение(КомандаОС);
			Исключение
				СообщениеОбОшибке = НСтр(""ru = 'Ошибка при запуске интернет-обозревателя. '"")
					+ СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
				СцТ_Контроллер = Неопределено;
				СцТ_СостояниеТП();
				Возврат;
			КонецПопытки;
			
			СцТ_ПодключитьсяКВебКлиенту(СтрокаЗапуска, Истина);
			
			Если ТипЗнч(СцТ_Контроллер) = Тип(""Строка"") Тогда
				СообщениеОбОшибке = НСтр(""ru = 'Ошибка при подключении к тестируемому веб-приложению. '"")
					+ СцТ_Контроллер;
				СцТ_Контроллер = Неопределено;
				СцТ_СостояниеТП();
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		СцТ_СостояниеТП();
		
	КонецЕсли;
	
КонецПроцедуры


// Процедура установки флага выполнения
// у групповых узлов
//
// Параметры
// ДанныеГрупповогоУзла - текущие данные дерева
&НаКлиенте
Процедура СцТ_УстановитьФлагВыполненияУГрупповогоУзла(ДанныеГрупповогоУзла, КореньДерева = Неопределено) Экспорт
	
	Если КореньДерева = Неопределено Тогда
		КореньДерева = БлокСценария;
	КонецЕсли;
	
	ПодчиненныеУзлы = ДанныеГрупповогоУзла.ПолучитьЭлементы();
	Если ПодчиненныеУзлы.Количество() >  0 Тогда
	
		ВыполнениеПервого = ПодчиненныеУзлы[0].Выполнено;
		
		ЕстьОтличие = Ложь;
		Для каждого ПодчиненныйУзел Из ДанныеГрупповогоУзла.ПолучитьЭлементы() Цикл
			Если ПодчиненныйУзел.Выполнено <> ВыполнениеПервого Тогда
				ЕстьОтличие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеГрупповогоУзла <> КореньДерева Тогда
			Если ЕстьОтличие Тогда
				ДанныеГрупповогоУзла.Выполнено = 2;
			Иначе
				ДанныеГрупповогоУзла.Выполнено = ВыполнениеПервого;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ДанныеГрупповогоУзла <> КореньДерева Тогда
			ДанныеГрупповогоУзла.Выполнено = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция - диспетчер создания новых шагов
// Вызывает персональную процедуру создания шага и возвращает созданный шаг
// Параметры
// ТекущаяСтрокаСценария - Указатель на текущую строку сценария, по этой строке
//                         определяется место вставки нового шага
// ТипШага               - тип шага, который нужно вставить в сценарий
// СтруктураШаблонаШагов - Структура шаблона данного шага
// ПрименениеШаблона     - признак использования шаблона
// Возвращаемое значение - данные нового шага
&НаКлиенте
Функция СцТ_ВставитьШаг_НаКлиенте(
	ТекущаяСтрокаСценария,
	ТипШага,
	ВызвавшаяФорма) Экспорт
	
	// Общие шаги
	
	ОписательПоложенияШагаВДереве = ПолучитьОписательПоложенияНовогоШагаВДереве(ВызвавшаяФорма, ТекущаяСтрокаСценария);
	
	// СДНШ - Структура параметров нового шага
	СДНШ = СцТ_ПодготовитьСтруктуруДанныхНовогоШага(
		ТипШага,
		ОписательПоложенияШагаВДереве,,,
		ВызвавшаяФорма);
	
	// Форму открывать ненужно, так как для пользователя это неочевидное поведение
	
	ПолнаяСтруктураДанныхШага = Новый Структура;
	ПолнаяСтруктураДанныхШага.Вставить(""ОписательПоложенияШагаВДереве"", ОписательПоложенияШагаВДереве);
	ПолнаяСтруктураДанныхШага.Вставить(""ТипШага""                      , ТипШага);
	ПолнаяСтруктураДанныхШага.Вставить(""Наименование""                 , СДНШ.Наименование);
	ПолнаяСтруктураДанныхШага.Вставить(""Активность""                   , Истина);
	ПолнаяСтруктураДанныхШага.Вставить(""СтруктураДанныхШага""          , СДНШ);
	ПолнаяСтруктураДанныхШага.Вставить(""СсылкиШага""                   , СДНШ.МассивСсылокШага);
	
	СцТ_СохранитьНовыйШаг(ВызвавшаяФорма, ПолнаяСтруктураДанныхШага);
	
КонецФункции

&НаКлиенте
Процедура СцТ_ОбработатьИзменениеДанныхШага(Узел, ВызвавшаяФорма) Экспорт
	
	ВызвавшаяФорма.Модифицированность = Истина;
	Если Узел.Активность <> 2 Тогда
		СцТ_УстановитьФлагиУРодителей(Узел);
		СцТ_УстановитьФлагиУДочерних(Узел);
	КонецЕсли;
	
	Если Узел.ТипШага = ""ИнтерактивнаяАвтоГруппа"" Тогда
		СцТ_ОбновитьПодчиненныеШагиАвтоГруппы(Узел, ВызвавшаяФорма);
	КонецЕсли;
	
	Если Узел.ТипШага = ""ИнтерактивнаяАвтоГруппа"" Тогда
		// Добавление шага ""НайтиФорму"", если нужно
		ШагНайтиФорму = СцТ_НайтиУзелДереваФормы(Узел, ""ТипШага"", ""НайтиФорму"");
		Если ШагНайтиФорму = Неопределено Тогда
			ШагНайтиФорму = СцТ_ВставитьШаг_НаКлиенте(Узел, ""НайтиФорму"", ВызвавшаяФорма);
			СоседниеЭлементы = Узел.ПолучитьЭлементы();
			ИндексНайтиформу = СоседниеЭлементы.Индекс(ШагНайтиФорму);
			СоседниеЭлементы.Сдвинуть(ИндексНайтиформу, -ИндексНайтиформу);
			СцТ_ПронумероватьШаги_НаКлиенте(,, ВызвавшаяФорма);
		КонецЕсли;
	КонецЕсли;
	
	СцТ_ОбновитьАвтоОписаниеШагаВДеревеБлокаСценария(ВызвавшаяФорма.Элементы.БлокСценария.ТекущиеДанные, ВызвавшаяФорма);
	
	Если Узел.ТипШага = ""Группа""
		ИЛИ Узел.ТипШага = ""АвтоГруппа""
		ИЛИ Узел.ТипШага = ""ИнтерактивнаяАвтоГруппа""
		ИЛИ Узел.ТипШага = ""АвтоГруппаТаблицаФормы""
		ИЛИ Узел.ТипШага = ""АвтоГруппаТабличныйДокумент""
		Тогда
		// Если обновлены данные группового шага, то обновить его описание в дочерних шагах
		Оповестить(""СцТ_ОбновленыДанныеГрупповогоШага"", Узел, ВызвавшаяФорма);
	КонецЕсли;
	
КонецПроцедуры

// Обновление автоописания текщуего шага
//
// Параметры
// ДанныеШага - текщие данные шага
&НаКлиенте
Процедура СцТ_ОбновитьАвтоОписаниеШагаВДеревеБлокаСценария(ДанныеШага, ВызвавшаяФорма = Неопределено) Экспорт
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	Если ДанныеШага = Неопределено Тогда
		ВызвавшаяФорма.ОписаниеШага = """";
		Возврат;
	КонецЕсли;
	
	Если ДанныеШага.ТипШага = ""Комментарий"" Тогда
		ВызвавшаяФорма.ОписаниеШага = НСтр(""ru = 'Комментарий:'"") + Символы.ПС + ДанныеШага.Комментарий;
		
	ИначеЕсли ДанныеШага.ТипШага = ""ВыполнитьВРучную"" ИЛИ ДанныеШага.ТипШага = ""Группа"" Тогда
		
		ВызвавшаяФорма.ОписаниеШага = ДанныеШага.Описание;
		
	Иначе
		ВызвавшаяФорма.ОписаниеШага = ДанныеШага.Описание;
		
		// собираем описание
		Если НЕ ДанныеШага.НеВыводитьАвтоописание Тогда
			Если ПустаяСтрока(ВызвавшаяФорма.ОписаниеШага) Тогда
				ВызвавшаяФорма.ОписаниеШага = ДанныеШага.АвтоОписание;
			Иначе
				ВызвавшаяФорма.ОписаниеШага = ВызвавшаяФорма.ОписаниеШага
				             + Символы.ПС
				             + ДанныеШага.АвтоОписание;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получение таблицы формы
//
// Параметры
// УзелСценария - щаг с описание мтаблицы формы
// ОписаниеРезультата - текст о выполнении шага
// Возвращаемое значение - указатель на таблицу формы
&НаКлиенте
Функция СцТ_ПолучитьТаблицуДляИнтерактивногоШага(УзелСценария, ОписаниеРезультата = """", БезТаймаута = Ложь) Экспорт
	
	ОписаниеРезультата = """";
	УзелТаблицы = УзелСценария;
	
	Если УзелТаблицы <> Неопределено И УзелТаблицы.ТипШага = ""АвтоГруппаТаблицаФормы"" Тогда
		Принудительно = Истина;
	Иначе
		Принудительно = Ложь;
	КонецЕсли;
	
	Пока УзелТаблицы <> Неопределено И УзелТаблицы.ТипШага <> ""АвтоГруппаТаблицаФормы"" Цикл
		УзелТаблицы = УзелТаблицы.ПолучитьРодителя();
	КонецЦикла;
	
	Если УзелТаблицы = Неопределено Тогда
		ОписаниеРезультата = ""НетАвтоГруппыТаблица"";
		Возврат Неопределено;
	КонецЕсли;
	
	Если СцТ_ВыполнениеТеста = ""АвтоматическийРежим"" И НЕ Принудительно Тогда
		ТаблицаНаФорме = СцТ_ТаблицыТестируемогоПриложения[УзелТаблицы.УИШ];
		Если ТаблицаНаФорме <> Неопределено Тогда
			Возврат ТаблицаНаФорме;
		КонецЕсли;
	КонецЕсли;
	
	ФормаПриложения = СцТ_ПолучитьФормуДляИнтерактивногоШага(УзелТаблицы, , ОписаниеРезультата);
	Если ФормаПриложения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверить, открыта ли форма
	Попытка
		ФормаЗакрыта = ФормаПриложения.ОжидатьЗакрытие(0);
	Исключение
		ФормаЗакрыта = Истина;
	КонецПопытки;
	
	Если ФормаЗакрыта Тогда
		ОписаниеРезультата = НСтр(""ru = 'Не удалось обратиться к форме тестируемого приложения:
			|форма была закрыта, либо тестируемое приложение не запущено'"");
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТаблицы       = СцТ_ЗначениеВДереве(УзелТаблицы.Значение, ""ОписаниеТаблицы"", """");
	ЗаголовокТаблицы = СцТ_ЗначениеВДереве(УзелТаблицы.Значение, ""ОписаниеТаблицы"", """", ""Синоним"");
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		ОписаниеРезультата = ""НеВыбранаТаблица"";
		Возврат Неопределено;
	КонецЕсли;
	
	УзелПутиПоиска       = СцТ_НайтиУзелДереваФормы(УзелТаблицы.Значение, ""Имя"", ""ИСТЗ_ПутьКОбъекту"");
	ВариантПоискаОбъекта = СцТ_ЗначениеВДереве(УзелТаблицы.Значение, ""ВариантПоискаОбъекта"", """", , Ложь);
	
	Если ПустаяСтрока(ВариантПоискаОбъекта) Тогда
		Если Лев(ИмяТаблицы, 1) = ""$"" Тогда
			ВариантПоискаОбъекта = ""011"";
		Иначе
			ВариантПоискаОбъекта = ""100"";
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ТаблицаНаФорме = СцТ_НайтиИнтерактивныйОбъектТестируемогоПриложения(
			ФормаПриложения,
			ВариантПоискаОбъекта,
			Тип(""ТестируемаяТаблицаФормы""),
			ИмяТаблицы,
			ЗаголовокТаблицы,
			УзелПутиПоиска,
			БезТаймаута);
	Исключение
		ОписаниеРезультата = НСтр(""ru = 'Ошибка при обращении к таблице формы'"")
			+ Символы.ПС
			+ СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(ТаблицаНаФорме) <> Тип(""ТестируемаяТаблицаФормы"") Тогда
		ОписаниеРезультата = ""ТаблицаНеНайденаНаФорме"";
		Возврат Неопределено;
	КонецЕсли;
	
	Если СцТ_ВыполнениеТеста = ""АвтоматическийРежим"" Тогда
		// Сохранение таблицы в кеше при автоматическом выполнении
		СцТ_ТаблицыТестируемогоПриложения[УзелТаблицы.УИШ] = ТаблицаНаФорме;
	КонецЕсли;
	
	Возврат ТаблицаНаФорме;
	
КонецФункции

// Поиск тестируемой формы
//
// Параметры
//	УзелБлокаСценария - шаг с описание формы
//	ПолноеОписание - является ли описание формы полным или частичным
//	ОписаниеРезультата  - протокол выполнения шага
//	ПолучитьОкно - нужно ли получить окно
// Возвращаемое значение - указатель на нужную форму
&НаКлиенте
Функция СцТ_ПолучитьТестируемуюФормуДляИнтерактивнойАвторгруппы(
	УзелБлокаСценария,
	ПолноеОписание     = Ложь,
	ОписаниеРезультата = """",
	ПолучитьОкно       = Ложь) Экспорт
	
	ОписаниеРезультата = """";
	
	ИдентификаторШага = УзелБлокаСценария.УИШ;
	
	ОписательТестирумойФормы = СцТ_ФормыТестируемогоПриложения[ИдентификаторШага];
	
	Если ОписательТестирумойФормы = Неопределено Тогда
		ОписаниеРезультата = ?(ПолучитьОкно, ""СвязьСОкномНеУстановлена"", ""СвязьСФормойНеУстановлена"");
		Возврат Неопределено;
	Иначе
		
		Если ПолучитьОкно И ОписательТестирумойФормы.ОкноОбъект = Неопределено Тогда
			ОписаниеРезультата = ""ТекущаяФормаНеИмеетОкна"";
			Возврат Неопределено;
		КонецЕсли;
		
		Если ПолноеОписание Тогда
			Возврат ОписательТестирумойФормы;
		Иначе
			Возврат ?(ПолучитьОкно, ОписательТестирумойФормы.ОкноОбъект, ОписательТестирумойФормы.ФормаОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Получить данные в тестируемом поле ввода
//
// Параметры
//	ПолеТестируемойФормы - указатель на тестируемое поле
// Возвращаемые данные - значение в поле
&НаКлиенте
Функция СцТ_ДанныеПоляФормы(ПолеТестируемойФормы) Экспорт
	
	Если ТипЗнч(ПолеТестируемойФормы) <> Тип(""ТестируемоеПолеФормы"") Тогда
		Возврат """";
	Иначе
		Попытка
			Возврат ПолеТестируемойФормы.ПолучитьТекстРедактирования();
		Исключение
			Возврат """";
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

// Поиск нужных объектов в тестируемом приложении
//
// Параметры
//	Контейнер - владелец нужного объекта
//	ВариантПоиска - вариантом поиска нужного объекта
//	ТипОбъекта строка с типом объекта
//	ИмяОбъекта - имя объекта
//	ЗаголовокОбъекта - заголовок нужного объекта
//	УзелПутиПоиска - узел дерева данных с описанием пути к объекту
&НаКлиенте
Функция СцТ_НайтиИнтерактивныйОбъектТестируемогоПриложения(
	Контейнер,
	ВариантПоиска,
	ТипОбъекта,
	ИмяОбъекта,
	ЗаголовокОбъекта,
	УзелПутиПоиска,
	БезТаймаута = Ложь) Экспорт
	
	ИскатьПоИмени         = (Лев(ВариантПоиска, 1)     = ""1"");
	ИскатьПоЗаголовку     = (Сред(ВариантПоиска, 2, 1) = ""1"");
	УчитыватьРасположение = (Прав(ВариантПоиска, 1)    = ""1"");
	
	ИмяИскомогоОбъекта       = Неопределено;
	ЗаголовокИскомогоОбъекта = Неопределено;
	
	НайденыйОбъект = Неопределено;
	
	Если ИскатьПоИмени И Лев(ИмяОбъекта, 1) <> ""$"" Тогда
		ИмяИскомогоОбъекта = ИмяОбъекта;
	КонецЕсли;
	
	Если ИскатьПоЗаголовку Тогда
		ЗаголовокИскомогоОбъекта = ЗаголовокОбъекта;
	КонецЕсли;
	
	Попытка
		
		Объекты = Контейнер.НайтиОбъекты(
			ТипОбъекта,
			ЗаголовокИскомогоОбъекта,
			ИмяИскомогоОбъекта,
			?(БезТаймаута, 0, ТаймаутПоискаИнтерактивныхОбъектов));
		
		КоличествоНайденыхОбъектов = Объекты.Количество();
		Если НЕ УчитыватьРасположение И КоличествоНайденыхОбъектов > 1 Тогда
			Возврат СтрЗаменить(НСтр(""ru = 'Найдено более одного объекта (%1)'""),
				""%1"",
				СтрЗаменить(Строка(КоличествоНайденыхОбъектов), Символ(160), """"));
		ИначеЕсли КоличествоНайденыхОбъектов = 0 Тогда
			Возврат Неопределено;
		Иначе
			НайденыйОбъект = Объекты[0];
		КонецЕсли;
		
		Если КоличествоНайденыхОбъектов = 1 ИЛИ НЕ УчитыватьРасположение Тогда
			Возврат НайденыйОбъект;
		Иначе
			// Иначе поиск должен быть выполнен по пути поиска объекта
			// с учетом расположения в иерархии элементов
			
			Если УзелПутиПоиска = Неопределено ИЛИ УзелПутиПоиска.ПолучитьЭлементы().Количество() = 0 Тогда
				Возврат НСтр(""ru ='Не удалось найти объект с учетом расположения. Не задан путь поиска объекта'"");
			КонецЕсли;
			
			НайденыеОбъекты = СцТ_НайтиОбъектТестируемогоПриложенияПоУзлуПутиКОбъекту(
				Контейнер,
				УзелПутиПоиска,
				ИскатьПоИмени);
			
			Если ТипЗнч(НайденыеОбъекты) = Тип(""Строка"") Тогда
				
				Возврат НайденыеОбъекты;
				
			Иначе
				
				КоличествоНайденыхОбъектов = НайденыеОбъекты.Количество();
				Если КоличествоНайденыхОбъектов = 0 Тогда
					Возврат Неопределено;
				ИначеЕсли КоличествоНайденыхОбъектов > 1 Тогда
					Возврат СтрЗаменить(
						НСтр(""ru ='По заданному расположению найдено более одного объекта (%1)'""),
						""%1"",
						Строка(КоличествоНайденыхОбъектов));
				Иначе
					Возврат НайденыеОбъекты[0];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Возврат НСтр(""ru ='Не удалось найти объект тестируемого приложения. '"")
			+ Символы.ПС
			+ СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат НайденыйОбъект;
	
КонецФункции

// Определяет соответствие строки заданной маске.
// Используется только для шага проверки формы в виду его специфики.
// Параметры:
//	ИсхСтрока (Строка) - исходная строка;
//	Маска (Строка) - строка маски, может включать в себя символы
//		""*"" - любое количество произвольных символов (в т.ч. 0),
//		""?"" - любой одиночный символ;
//	ДлинаИсх (Число) - длина исходной строки, при вызове не указывается;
//	ДлинаМаска (Число) - длина маски, при вызове не указывается;
//	ТекИсх (Число) - индекс текущего символа исх. строки,
//		при вызове не указывается;
//	ТекМаска (Число) - индекс текущего символа маски,
//		при вызове не указывается;
//
// Возвращаемое значение - Булево: Истина - исх. строка соответствует
// маске, Ложь -  в противном случае.
//
&НаКлиенте
Функция СцТ_ТестСтроки(
	ИсхСтрока,
	Знач Маска,
	УчитыватьРегистр = Ложь,
	ДлинаИсх         = Неопределено,
	ДлинаМаска       = Неопределено,
	ТекИсх           = Неопределено,
	ТекМаска         = Неопределено) Экспорт
	
	Если ДлинаИсх = Неопределено Тогда
		
		// Инициализация
		
		// Для ускорения - исключение лишних символов маски
		//Пока Истина Цикл
		//	Позиция2Звезды = Найти(Маска, ""**"");
		//	Если Позиция2Звезды = 0 Тогда
		//		Прервать;
		//	КонецЕсли;
		//	Маска = СтрЗаменить(Маска, ""**"", ""*"");
		//КонецЦикла;
		
		ДлинаИсх   = СтрДлина(ИсхСтрока);
		ДлинаМаска = СтрДлина(Маска);
		
		Если ДлинаИсх = 0 И ДлинаМаска = 0 Тогда
			Возврат Истина;
		ИначеЕсли Маска = ""*"" Тогда
			Возврат Истина;
		ИначеЕсли (ДлинаИсх = 0 ИЛИ ДлинаМаска = 0) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат СцТ_ТестСтроки(ИсхСтрока, Маска, УчитыватьРегистр, ДлинаИсх, ДлинаМаска, 1, 1);
		
	КонецЕсли;
	
	ТекСимволИсх   = Сред(ИсхСтрока, ТекИсх, 1);
	ТекСимволМаски = Сред(Маска, ТекМаска, 1);
	
	Если ТекСимволМаски = ""*"" И ТекМаска = ДлинаМаска
		ИЛИ ТекИсх > ДлинаИсх И ТекМаска > ДлинаМаска Тогда
		Возврат Истина;
	ИначеЕсли ТекИсх > ДлинаИсх ИЛИ ТекМаска > ДлинаМаска Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДобавочныйМаски = 0;
	Если ТекСимволМаски = ""?"" Тогда
		
		// Определение ""??"" маски как ""?"" в проверяемой строке
		Если Сред(Маска, ТекМаска + 1, 1) = ""?"" Тогда
			ДобавочныйМаски = 1;
		Иначе
			Возврат СцТ_ТестСтроки(ИсхСтрока, Маска, УчитыватьРегистр, ДлинаИсх, ДлинаМаска, ТекИсх + 1, ТекМаска + 1);
		КонецЕсли;
		
	ИначеЕсли ТекСимволМаски = ""*"" Тогда
		
		// Определение ""**"" маски как ""*"" в проверяемой строке
		Если Сред(Маска, ТекМаска + 1, 1) = ""*"" Тогда
			ДобавочныйМаски = 1;
		Иначе
			Для Итератор = ТекИсх По ДлинаИсх Цикл
				Результат = СцТ_ТестСтроки(ИсхСтрока, Маска, УчитыватьРегистр, ДлинаИсх, ДлинаМаска, Итератор, ТекМаска + 1);
				Если Результат Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Обычный символ маски
	Если (УчитыватьРегистр И ТекСимволМаски <> ТекСимволИсх)
		ИЛИ (НЕ УчитыватьРегистр И ВРег(ТекСимволМаски) <> ВРег(ТекСимволИсх)) Тогда
		Возврат Ложь;
	Иначе
		Возврат СцТ_ТестСтроки(
			ИсхСтрока,
			Маска,
			УчитыватьРегистр,
			ДлинаИсх,
			ДлинаМаска,
			ТекИсх + 1,
			ТекМаска + 1 + ДобавочныйМаски);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске(СтатусЗавершения = ""ERR"") Экспорт
	
	Если СцТ_ВнешнееУправлениеОбработкой = ""ПосредствомФайлов"" Тогда
		
		// Завершить работу тестируемого приложения
		Если СцТ_Контроллер <> Неопределено Тогда
			// Необходимо попытаться завершить работу тетстируемого приложения
			Попытка
				ОсновноеОкно = СцТ_ПолучитьОсновноеОкноТестируемогоПриложения();
				ОсновноеОкно.Закрыть();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		СцТ_ИнформационноеСообщение(СтатусЗавершения, """", """");
		
		СцТ_ФормыТестируемогоПриложения   = Неопределено;
		СцТ_ТаблицыТестируемогоПриложения = Неопределено;
		СцТ_Контроллер                    = Неопределено;
		
		ЗавершитьРаботуСистемы(Ложь);
		
	ИначеЕсли СцТ_ВнешнееУправлениеОбработкой = ""Непосредственное"" Тогда
		
		// Завершить работу тестируемого приложения
		Если СцТ_Контроллер <> Неопределено Тогда
			// Необходимо попытаться завершить работу тетстируемого приложения
			Попытка
				ОсновноеОкно = СцТ_ПолучитьОсновноеОкноТестируемогоПриложения();
				ОсновноеОкно.Закрыть();
				
				СцТ_Контроллер = Неопределено;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// Переменные не очищаются, так как они впоследствии пригодятся для анализа ошибки
				
		//СцТ_ФормыТестируемогоПриложения   = Неопределено;
		//СцТ_ТаблицыТестируемогоПриложения = Неопределено;
		//СцТ_Контроллер                    = Неопределено;
		
		Оповестить(""СцТ_ЗавершениеВыполненияСценария"", СтатусЗавершения, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////


// Добавление в список элемента списка типов шагов
//
&НаКлиенте
Процедура СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокПриемник, ЗначениеСписка) Экспорт
	
	НайденныйЭлемент = СписокТиповШагов.НайтиПоЗначению(ЗначениеСписка);
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокПриемник.Добавить(НайденныйЭлемент.Значение, НайденныйЭлемент.Представление);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение списка доступных шагов
//
&НаКлиенте
Функция СцТ_ЗаполнитьСписокДоступныхШагов_НаКлиенте(ДанныеТекущегоШага, ДляМакрошага = Ложь) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	
	ДанныеШага = ДанныеТекущегоШага;
	
	Если ДанныеШага <> Неопределено
		И ДанныеШага.ТипШага <> ""Группа""
		И ДанныеШага.ТипШага <> ""АвтоГруппа""
		И ДанныеШага.ТипШага <> ""ИнтерактивнаяАвтоГруппа""
		И ДанныеШага.ТипШага <> ""АвтоГруппаТаблицаФормы""
		И ДанныеШага.ТипШага <> ""АвтоГруппаТабличныйДокумент""
		И ДанныеШага.ТипШага <> ""Повторение""
		И ДанныеШага.ТипШага <> ""Условие"" Тогда
		
		ДанныеШага = ДанныеШага.ПолучитьРодителя();
		
	КонецЕсли;
	
	Если ДанныеШага = Неопределено Тогда
		
		ТипГруппы     = ""Группа"";
		ТипМетаданных = """";
		ИмяМетаданных = """";
		
	Иначе
		
		ТипГруппы     = ДанныеШага.ТипШага;
		ТипМетаданных = ДанныеШага.ТипМетаданных;
		ИмяМетаданных = ДанныеШага.ИмяМетаданных;
		
	КонецЕсли;
	
	Если    ТипГруппы = ""Группа""
		ИЛИ ТипГруппы = ""Повторение""
		ИЛИ ТипГруппы = ""Условие"" Тогда
		
		Если НЕ ДляМакрошага И НЕ ДругаяИБ Тогда
			СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьЗапрос"");
			СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьПроцедуру"");
		КонецЕсли;
		
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""НажатьКнопкуКИ"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьИнтерактивнуюКоманду"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьИнтерактивныйСкрипт"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьКлиентскуюПроцедуру"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ЗавершитьРаботуТестируемогоКлиента"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьВРучную"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""Комментарий"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""Пауза"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ПроверитьТекстОшибки"");
		
		//Если НЕ ДляМакрошага Тогда
			СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьМакрошаг"");
		//КонецЕсли;
		
	ИначеЕсли ТипГруппы = ""АвтоГруппа"" Тогда
		
		Если НЕ ДляМакрошага И НЕ ДругаяИБ Тогда
			// Шаги бизнес-логики
			Если НЕ ПустаяСтрока(ТипМетаданных)
				И НЕ ПустаяСтрока(ИмяМетаданных) Тогда
				
				//Если ТипМетаданных <> ""РегистрыСведений"" Тогда
				//	СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ЗаменаСсылки"");
				//КонецЕсли;
				// Этот шаг больше не используется в выборе новых шагов
				
				СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""Воспроизвести"");
				СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""СравнитьСЭталоном"");
				
				Если ТипМетаданных = ""Документы"" Тогда
					СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""СравнитьДвижения"");
				КонецЕсли;
				
			КонецЕсли;
			
			СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьЗапрос"");
			СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьПроцедуру"");
		КонецЕсли;
		
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""НажатьКнопкуКИ"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьИнтерактивнуюКоманду"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьИнтерактивныйСкрипт"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ЗавершитьРаботуТестируемогоКлиента"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьВРучную"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""Комментарий"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""Пауза"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьКлиентскуюПроцедуру"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьМакрошаг"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ПроверитьТекстОшибки"");
		
	ИначеЕсли ТипГруппы = ""ИнтерактивнаяАвтоГруппа"" Тогда
		
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""НайтиФорму"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ПроверитьФорму"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ЗаполнитьОдинРеквизитФормы"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ЗаполнитьРеквизитыФормы"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""НажатьКнопку"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""НажатьКнопкуКИ"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ПроверитьТабличныйДокумент"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""НайтиЭлементФормы"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ЗакрытьКлиентскоеОкноФормы"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьИнтерактивнуюКоманду"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьИнтерактивныйСкрипт"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыбратьСообщениеПользователю"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ЗавершитьРаботуТестируемогоКлиента"");
		Если НЕ ДляМакрошага И НЕ ДругаяИБ Тогда
			СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьЗапрос"");
			СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьПроцедуру"");
		КонецЕсли;
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьВРучную"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""Комментарий"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""Пауза"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьКлиентскуюПроцедуру"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьМакрошаг"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ПроверитьТекстОшибки"");
		
	ИначеЕсли ТипГруппы = ""АвтоГруппаТаблицаФормы"" Тогда
		
		// Заполнить типы шагов для таблицы формы
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ДействиеСТаблицей"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""НайтиСтрокуТаблицы"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ЗаполнитьКолонкуТаблицы"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ЗаполнитьСтрокуТаблицы"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""НажатьКнопку"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""НайтиЭлементФормы"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьИнтерактивнуюКоманду"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьИнтерактивныйСкрипт"");
		Если НЕ ДляМакрошага И НЕ ДругаяИБ Тогда
			СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьЗапрос"");
			СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьПроцедуру"");
		КонецЕсли;
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьВРучную"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""Комментарий"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""Пауза"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьКлиентскуюПроцедуру"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьМакрошаг"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ПроверитьТекстОшибки"");
		
	ИначеЕсли ТипГруппы = ""АвтоГруппаТабличныйДокумент"" Тогда
		
		// Заполнить типы шагов для табличного документа
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ДействиеСТабДокументом"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ДействиеСЯчейкойТД"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьИнтерактивнуюКоманду"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьИнтерактивныйСкрипт"");
		Если НЕ ДляМакрошага И НЕ ДругаяИБ Тогда
			СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьЗапрос"");
			СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьПроцедуру"");
		КонецЕсли;
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьВРучную"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""Комментарий"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""Пауза"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьКлиентскуюПроцедуру"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ВыполнитьМакрошаг"");
		СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, ""ПроверитьТекстОшибки"");
		
		
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

// Проверка, что узел находится в подчинении у узла
//
//Параметры
// ПроверяемыйУзел - проверяемый узел
// Узел - узел, для которого выполняется проверка
// Возвращаемое значение - Истина, когда находится
&НаКлиенте
Функция СцТ_УзелНаходитсяВИерархииУзла(Знач ПроверяемыйУзел, Знач Узел) Экспорт
	
	Если ТипЗнч(Узел) = Тип(""ДанныеФормыДерево"") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемыйУзел) = Тип(""ДанныеФормыДерево"")
		ИЛИ ПроверяемыйУзел = Узел Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Родитель = ПроверяемыйУзел;
	Пока Родитель <> Неопределено Цикл
		
		Если Родитель = Узел Тогда
			Возврат Истина;
		КонецЕсли;
		
		Родитель = Родитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверка, что шаг является групповым
//
// Параметры
// ТипШага - строка типа шага
// Возвращаемое значение - Истина, когда шаг групповой
&НаКлиенте
Функция СцТ_ЭтоГрупповойШаг(ТипШага) Экспорт
	
	Возврат (ТипШага = ""Группа""
		ИЛИ ТипШага = ""АвтоГруппа""
		ИЛИ ТипШага = ""ИнтерактивнаяАвтоГруппа""
		ИЛИ ТипШага = ""АвтоГруппаТаблицаФормы""
		ИЛИ ТипШага = ""АвтоГруппаТабличныйДокумент""
		ИЛИ ТипШага = ""Повторение""
		ИЛИ ТипШага = ""Условие"");
	
КонецФункции

&НаКлиенте
Функция СцТ_СвернутьРекурсивно(Узел, ВызвавшаяФорма = Неопределено) Экспорт
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	Для каждого ПодчиненныйУзел Из Узел.ПолучитьЭлементы() Цикл
		СцТ_СвернутьРекурсивно(ПодчиненныйУзел, ВызвавшаяФорма);
	КонецЦикла;
	
	Если Узел <> ВызвавшаяФорма.БлокСценария Тогда
		ИдентификаторУзла = Узел.ПолучитьИдентификатор();
		Если ВызвавшаяФорма.Элементы.БлокСценария.Развернут(ИдентификаторУзла) Тогда
			ВызвавшаяФорма.Элементы.БлокСценария.Свернуть(ИдентификаторУзла);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СцТ_НайтиУзелШагаПоНомеру(НомерИскомогоШага, Узел = Неопределено) Экспорт
	
	// По алгоритму бинарного поиска
	
	Если Узел = Неопределено Тогда
		Узел = БлокСценария;
	КонецЕсли;
	
	ЭлементыУзла = Узел.ПолучитьЭлементы();
	ЛГраница     = 0;
	ПГраница     = ЭлементыУзла.Количество() - 1;
	
	Если ПГраница = -1 ИЛИ ЭлементыУзла[0].НомерШага > НомерИскомогоШага Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПравыйУзел = ЭлементыУзла[ПГраница];
	Если ПравыйУзел.НомерШага < НомерИскомогоШага Тогда
		Возврат СцТ_НайтиУзелШагаПоНомеру(НомерИскомогоШага, ПравыйУзел);
	КонецЕсли;
	
	СИндекс = Неопределено;
	Пока ЛГраница < ПГраница Цикл
		
		СИндекс = ЛГраница + Окр((ПГраница - ЛГраница) / 2, 0, РежимОкругления.Окр15как10);
		
		Если НомерИскомогоШага <= ЭлементыУзла[СИндекс].НомерШага Тогда
			ПГраница = СИндекс;
		Иначе
			ЛГраница = СИндекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ПравыйУзел = ЭлементыУзла[ПГраница];
	Если ПравыйУзел.НомерШага = НомерИскомогоШага Тогда
		Возврат ПравыйУзел;
	Иначе
		
		ИндексПредыдущегоУзла = ЭлементыУзла.Индекс(ПравыйУзел) - 1;
		Если ИндексПредыдущегоУзла > -1 Тогда
			Возврат СцТ_НайтиУзелШагаПоНомеру(НомерИскомогоШага, ЭлементыУзла[ИндексПредыдущегоУзла]);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СцТ_УстановитьАктивностьШага(ШагСценария, ЗначениеАктивности) Экспорт
	
	ШагСценария.Активность = ЗначениеАктивности;
	
	СцТ_УстановитьФлагиУРодителей(ШагСценария);
	СцТ_УстановитьФлагиУДочерних(ШагСценария);
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ПредставлениеИсключения(ИнфОшибка) Экспорт
	
	Возврат НСтр(""ru = 'Краткое описание ошибки: '"") + КраткоеПредставлениеОшибки(ИнфОшибка)
		+ Символы.ПС
		+ НСтр(""ru = 'Подробное описание ошибки: '"")
		+ ПодробноеПредставлениеОшибки(ИнфОшибка);
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьДанныеШага(ИдентификаторСтроки,  ВызвавшаяФорма = Неопределено) Экспорт
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	СтрокаБлокаСценария = СцТ_УзелБлокаСценария(ИдентификаторСтроки, ВызвавшаяФорма);
	
	// В связи с большим объемом блока сценария требуется избегать контекстных серверных вызовов,
	// т.к. при таких вызовах все данные текущей формы передаются на сервер. Для этого необходимые
	// данные шага сценария преобразуются на клиенте в дерево структур и далее передаются
	// на сервер форме настройки шага
	ДанныеШага = СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(СтрокаБлокаСценария);
	
	ПараметрыДанныхШага = Новый Структура;
	ПараметрыДанныхШага.Вставить(""ДанныеШага""                   , ДанныеШага);
	
	ФормаДанныхШага = ПолучитьФорму(ПутьКФормам + ""СтруктураДанныхШага"",
									ПараметрыДанныхШага,
									,
									СтрокаБлокаСценария.УИШ);
	
	ФормаДанныхШага.СцТ_ГлавнаяФорма = ЭтотОбъект;
	ФормаДанныхШага.ВызвавшаяФорма   = ВызвавшаяФорма;
	
	ФормаДанныхШага.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьХранимыеДанныеШага(ИдентификаторСтроки,  ВызвавшаяФорма = Неопределено) Экспорт
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	СтрокаБлокаСценария = СцТ_УзелБлокаСценария(ИдентификаторСтроки, ВызвавшаяФорма);
	
	// В связи с большим объемом блока сценария требуется избегать контекстных серверных вызовов,
	// т.к. при таких вызовах все данные текущей формы передаются на сервер. Для этого необходимые
	// данные шага сценария преобразуются на клиенте в дерево структур и далее передаются
	// на сервер форме настройки шага
	ДанныеШага = СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(СтрокаБлокаСценария);
	
	ПараметрыДанныхШага = Новый Структура;
	ПараметрыДанныхШага.Вставить(""ДанныеШага""                   , ДанныеШага);
	
	ФормаДанныхШага = ПолучитьФорму(ПутьКФормам + ""СтруктураДанныхШага"",
									ПараметрыДанныхШага,
									,
									СтрокаБлокаСценария.УИШ);
	
	ФормаДанныхШага.СцТ_ГлавнаяФорма = ЭтотОбъект;
	ФормаДанныхШага.ВызвавшаяФорма   = ВызвавшаяФорма;
	
	ФормаДанныхШага.Открыть();
	
КонецПроцедуры

&НаКлиенте
Функция НайтиЭлементФормы(СтруктураПоискаЭлемента, ДанныеШага, ФормаШагов) Экспорт
	
	Если СцТ_Контроллер = Неопределено Тогда
		ТекстПредупреждения = НСтр(""ru = 'Тестируемое приложение не запущено. Действие не может быть выполнено'"");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеРезультата = """";
	ФормаИлиТаблица = СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(
		ДанныеШага,
		ОписаниеРезультата);
	
	Если ФормаИлиТаблица = Неопределено Тогда
		ТекстПредупреждения = СцТ_РасшифроватьОшибку(ОписаниеРезультата);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Неопределено;
	КонецЕсли;
	
	ВариантПоискаЭлемента = СтруктураПоискаЭлемента.ВариантПоискаЭлемента;
	ИмяЭлемента           = СтруктураПоискаЭлемента.ИмяЭлемента;
	ЗаголовокЭлемента     = СтруктураПоискаЭлемента.ЗаголовокЭлемента;
	ПутьКЭлементуФормы    = СтруктураПоискаЭлемента.ПутьКЭлементуФормы;
	ТипЭлемента           = СцТ_ТипТестируемогоОбъектаИзЧисла(СтруктураПоискаЭлемента.ТипЭлемента);
	
	
	
	НайденныйЭлемент = СцТ_НайтиЭлементТестируемойФормы(
		ФормаИлиТаблица,
		ВариантПоискаЭлемента,
		ТипЭлемента,
		ИмяЭлемента,
		ЗаголовокЭлемента,
		ПутьКЭлементуФормы,
		Истина);
		
	Возврат НайденныйЭлемент;
	

	//УзелОбъекта = СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, ""Имя"", ""ИмяОбъекта"");
	//
	//Если УзелОбъекта = Неопределено Тогда
	//	ТекстСообщения = НСтр(""ru = 'Не задан элемент формы'"");
	//	Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);;
	//КонецЕсли;
	//
	//ИмяОбъекта       = УзелОбъекта.Значение;
	//ЗаголовокОбъекта = УзелОбъекта.Синоним;
	//
	//Если ПустаяСтрока(ИмяОбъекта) Тогда
	//	ТекстСообщения = НСтр(""ru = 'Не задан элемент формы'"");
	//	Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);;
	//КонецЕсли;
	//
	//ДействиеСОбъектом = СцТ_ЗначениеВДереве(ДанныеШага.Значение, ""ДействиеСОбъектом"", """", , Ложь);
	//
	//ИскатьСредиВидимых = СцТ_ЗначениеВДереве(ДанныеШага.Значение, ""ИскатьТолькоСредиВидимых"", Истина, , Ложь);
	//
	//Если ПустаяСтрока(ДействиеСОбъектом) Тогда
	//	ТекстСообщения = НСтр(""ru = 'Не указано назначение шага'"");
	//	Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);;
	//КонецЕсли;
	//
	////СписокДоступныхДействий.Добавить(""ПроверитьСуществование""      , НСтр(""ru = 'Найти элемент и проверить существование'""));
	////СписокДоступныхДействий.Добавить(""ПроверитьСвойства""           , НСтр(""ru = 'Проверить свойства'""));
	////СписокДоступныхДействий.Добавить(""ПроверитьОтсутствие""         , НСтр(""ru = 'Проверить отсутствие'""));
	////СписокДоступныхДействий.Добавить(""ПроверитьЧтоТекущий""         , НСтр(""ru = 'Проверить, что это текущий элемент'""));
	////
	////Если Форма.НайтиЭлементТипОбъекта <> 5 Тогда
	////	СписокДоступныхДействий.Добавить(""Активизировать"", НСтр(""ru = 'Найти и активизировать'""));
	////	СписокДоступныхДействий.Добавить(""НажатьКнопку""
	//
	////Если  ДействиеСОбъектом <> ""ПроверитьСуществование""
	////	И ДействиеСОбъектом <> ""Активизировать""
	////	И ДействиеСОбъектом <> ""ПроверитьОтсутствие""
	////	И ДействиеСОбъектом <> ""ПроверитьСвойства""
	////	И ДействиеСОбъектом <> ""ПроверитьЧтоТекущий""
	////	И ДействиеСОбъектом <> ""НажатьКнопку""
	////	Тогда
	////	ТекстСообщения = СтрЗаменить(
	////		НСтр(""ru = 'Неизвестное действие с элементом (%1)'""),
	////		""%1"",
	////		ДействиеСОбъектом);
	////	Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);;
	////КонецЕсли;
	//
	//УзелПути             = СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, ""Имя"", ""ИСТЗ_ПутьКОбъекту"");
	//ВариантПоискаОбъекта = СцТ_ЗначениеВДереве(ДанныеШага.Значение, ""ВариантПоискаОбъекта"", """", , Ложь);
	//ТипЭлемента          = СцТ_ЗначениеВДереве(ДанныеШага.Значение, ""ТипОбъекта""          , -1, , Ложь);
	//
	//Если ТипЗнч(ТипЭлемента) <> Тип(""Число"")
	//	ИЛИ ТипЭлемента < 3 ИЛИ ТипЭлемента > 7 Тогда
	//	ТекстСообщения = НСтр(""ru = 'Не задан тип элемента формы'"");
	//	Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//КонецЕсли;
	//
	//Если ПустаяСтрока(ВариантПоискаОбъекта) Тогда
	//	Если Лев(ИмяОбъекта, 1) = ""$"" Тогда
	//		ВариантПоискаОбъекта = ""011"";
	//	Иначе
	//		ВариантПоискаОбъекта = ""100"";
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ДействиеСОбъектом = ""ПроверитьЧтоТекущий"" Тогда
	//	// Искать ничего не нужно. Достаточно проверить свойства текущего объекта с заданными
	//	Попытка
	//		ТекущийОбъектФормы = ФормаПриложения.ПолучитьТекущийЭлемент();
	//	Исключение
	//		ТекущийОбъектФормы = Неопределено;
	//	КонецПопытки;
	//	
	//	Если ТекущийОбъектФормы = Неопределено Тогда
	//		ТекстСообщения = НСтр(""ru = 'Не удалось получить текущий элемент формы'"");
	//		Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//	КонецЕсли;
	//	
	//	Если Лев(ВариантПоискаОбъекта, 1) = ""1"" И ТекущийОбъектФормы.Имя <> ИмяОбъекта
	//		ИЛИ Прав(ВариантПоискаОбъекта, 1) = ""1"" И ТекущийОбъектФормы.ТекстЗаголовка <> ЗаголовокОбъекта Тогда
	//		ТекстСообщения = НСтр(""ru = 'Текущий элемент формы - другой. Текущим должен быть """"%1"""", является текущим - """"%2""""'"");
	//		Если Прав(ВариантПоискаОбъекта, 1) = ""1"" Тогда
	//			ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ЗаголовокОбъекта);
	//			ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ТекущийОбъектФормы.ТекстЗаголовка);
	//		Иначе
	//			ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ИмяОбъекта);
	//			ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ТекущийОбъектФормы.Имя);
	//		КонецЕсли;
	//		
	//		Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//	Иначе
	//		// Текущий элемент отвечает критериям поиска
	//		Возврат Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// Для других действий требуется выполнить поиск элемента формы
	//ИнтерактивныйОбъект = СцТ_ГлавнаяФорма.СцТ_НайтиИнтерактивныйОбъектТестируемогоПриложения(
	//	ФормаПриложения,
	//	ВариантПоискаОбъекта,
	//	СцТ_ГлавнаяФорма.СцТ_ТипТестируемогоОбъектаИзЧисла(ТипЭлемента),
	//	ИмяОбъекта,
	//	ЗаголовокОбъекта,
	//	УзелПути,
	//	(ДействиеСОбъектом = ""ПроверитьОтсутствие""));
	//
	//Если ТипЗнч(ИнтерактивныйОбъект) = Тип(""Строка"") Тогда
	//	ТекстСообщения = НСтр(""ru = 'Не удалось найти элемент формы: '"")
	//		+ ИнтерактивныйОбъект;
	//	Возврат  ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//КонецЕсли;
	//
	//Если ДействиеСОбъектом = ""ПроверитьОтсутствие"" Тогда
	//	Если ИнтерактивныйОбъект = Неопределено Тогда
	//		// Все нормально. Нужного элемента нет
	//		Возврат Истина;
	//	Иначе
	//		Если ИскатьСредиВидимых И НЕ ИнтерактивныйОбъект.ТекущаяВидимость() Тогда
	//			// Этот объект не виден пользователю, значит с ео точки зрения объекта нет
	//			Возврат Истина;
	//		Иначе
	//			ТекстСообщения = НСтр(""ru = 'Проверка отсутствия элемента не выполнена.
	//				|Заданный элемент обнаружен в тестируемом приложении'"");
	//			Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// Для остальных действий необходимо существование элемента
	//Если ИнтерактивныйОбъект = Неопределено Тогда
	//	ТекстСообщения = НСтр(""ru = 'Нужный элемент не найден на текущей форме'"");
	//	Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//КонецЕсли;
	//
	//// Вместо конструкций ИначеЕсли используются простые условия - кажется, что это 
	//// повысит читаемость процедуры
	//
	//Если ДействиеСОбъектом = ""ПроверитьСуществование"" Тогда
	//	Если ИскатьСредиВидимых И НЕ ИнтерактивныйОбъект.ТекущаяВидимость() Тогда
	//		ТекстСообщения = НСтр(""ru = 'Проверка существования элемента не выполнена.
	//				|Элемент не видим для пользователя'"");
	//			Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//	Иначе
	//		Возврат Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ДействиеСОбъектом = ""Активизировать"" Тогда
	//	Попытка
	//		ИнтерактивныйОбъект.Активизировать();
	//	Исключение
	//		ТекстСообщения = НСтр(""ru ='Не удалось активизировать выбранный элемент. Ошибка при активизации элемента: '"")
	//			+ СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
	//		Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//	КонецПопытки;
	//	
	//	Возврат Истина;
	//	
	//КонецЕсли;
	//
	//Если ДействиеСОбъектом = ""ПроверитьСвойства"" Тогда
	//	
	//	УзелСвойств = СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, ""Имя"", ""СвойстваОбъекта"", Ложь);
	//	Если УзелСвойств = Неопределено Тогда
	//		ТекстСообщения = НСтр(""ru ='Не удалось выполнить проверку свойств элемента: не заданы значения свойств'"");
	//		Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//	КонецЕсли;
	//	
	//	ОписаниеРазличий = """";
	//	Для каждого УзелСвойства Из УзелСвойств.ПолучитьЭлементы() Цикл
	//		
	//		Если НЕ УзелСвойства.Активность Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ПредставлениеСвойства = """";
	//		Попытка
	//			Если УзелСвойства.Имя = ""Видимость"" Тогда
	//				ПредставлениеСвойства = НСтр(""ru = 'видимость'"");
	//				ЗначениеСвойства = ИнтерактивныйОбъект.ТекущаяВидимость();
	//			ИначеЕсли УзелСвойства.Имя = ""Доступность"" Тогда
	//				ПредставлениеСвойства = НСтр(""ru = 'доступность'"");
	//				ЗначениеСвойства = ИнтерактивныйОбъект.ТекущаяДоступность();
	//			ИначеЕсли УзелСвойства.Имя = ""ТолькоПросмотр"" Тогда
	//				ПредставлениеСвойства = НСтр(""ru = 'только просмотр'"");
	//				ЗначениеСвойства = ИнтерактивныйОбъект.ТекущееТолькоПросмотр();
	//			ИначеЕсли УзелСвойства.Имя = ""Заголовок"" Тогда
	//				ПредставлениеСвойства = НСтр(""ru = 'заголовок'"");
	//				ЗначениеСвойства = ИнтерактивныйОбъект.ТекстЗаголовка;
	//			ИначеЕсли УзелСвойства.Имя = ""ТекстПодсказки"" Тогда
	//				ПредставлениеСвойства = НСтр(""ru = 'текст подсказки'"");
	//				ЗначениеСвойства = ИнтерактивныйОбъект.ПолучитьТекстПодсказки();
	//			Иначе
	//				// Неизвестное свойство
	//				Продолжить;
	//			КонецЕсли;
	//		Исключение
	//			
	//			Если ПустаяСтрока(ПредставлениеСвойства) Тогда
	//				ТекстСообщения = НСтр(""ru ='Ошибка при получении значения свойства элемента:'"");
	//			Иначе
	//				ТекстСообщения = СтрЗаменить(НСтр(""ru ='Не удалось получить свойство """"%1"""" элемента.'""),
	//					""%1"",
	//					ПредставлениеСвойства);
	//			КонецЕсли;
	//			
	//			ТекстСообщения = ТекстСообщения + "" "" + СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
	//			Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//			
	//		КонецПопытки;
	//		
	//		// Проверка заданного свойства
	//		
	//		Если УзелСвойства.Значение <> ЗначениеСвойства Тогда
	//			ОписаниеРазличий =
	//				 ОписаниеРазличий
	//				+ ?(ПустаяСтрока(ОписаниеРазличий), """", "";"" + Символы.ПС)
	//				+ ПредставлениеСвойства + "": "" + НСтр(""ru = 'эталонное значение - '"")
	//				+ Строка(УзелСвойства.Значение)
	//				+ НСтр(""ru = ', фактическое значение - '"")
	//				+ Строка(ЗначениеСвойства);
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	Если НЕ ПустаяСтрока(ОписаниеРазличий) Тогда
	//		ТекстСообщения =
	//			  НСтр(""ru = 'Значения свойств выбранного элемента не соответствуют эталонным:'"")
	//			+ Символы.ПС
	//			+ ОписаниеРазличий
	//			+ ""."";
	//		Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//	КонецЕсли;
	//	
	//	Возврат Истина;
	//	
	//КонецЕсли;
	//
	//Если ДействиеСОбъектом = ""Свернуть"" Тогда
	//	Попытка
	//		ИнтерактивныйОбъект.Свернуть();
	//	Исключение
	//		ТекстСообщения = НСтр(""ru ='Не удалось свернуть группу формы: '"")
	//			+ СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
	//		Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//	КонецПопытки;
	//	
	//	Возврат Истина;
	//КонецЕсли;
	//
	//Если ДействиеСОбъектом = ""Развернуть"" Тогда
	//	Попытка
	//		ИнтерактивныйОбъект.Развернуть();
	//	Исключение
	//		ТекстСообщения = НСтр(""ru ='Не удалось развернуть группу формы: '"")
	//			+ СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
	//		Возврат ОбработатьДействиеПриОшибке(ДействиеПриОшибке, ИмяПеременнойОшибки);
	//	КонецПопытки;
	//	
	//	Возврат Истина;
	//	
	//КонецЕсли;
	//
	//
	//Если ДействиеСОбъектом = ""НажатьКнопку"" Тогда
	//	
	//	///////////////////////////////////////////////////////////////////////////////////////
	//	УзелКнопки =  СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, ""Имя"", ""КнопкаЭлемента"", Ложь);
	//	
	//	ПредставлениеКнопки = СцТ_ЗначениеВДереве(УзелКнопки, ""ПредставлениеКнопки"", """",          , Ложь);
	//	ИмяКнопки           = СцТ_ЗначениеВДереве(УзелКнопки, ""ИмяКнопки""          , """",          , Ложь);
	//	ЗаголовокОбъекта    = СцТ_ЗначениеВДереве(УзелКнопки, ""ИмяКнопки""          , """", ""Синоним"", Ложь);
	//	
	//	УзелПути            = СцТ_НайтиУзелДереваФормы(УзелКнопки, ""Имя"", ""ИСТЗ_ПутьКОбъекту"");
	//
	//
	//ВариантПоискаОбъекта = СцТ_ЗначениеВДереве(УзелКнопки, ""ВариантПоискаОбъекта"", """", , Ложь);
	//
	//Если ПустаяСтрока(ВариантПоискаОбъекта) Тогда
	//	Если Лев(ИмяКнопки, 1) = ""$"" Тогда
	//		ВариантПоискаОбъекта = ""011"";
	//	Иначе
	//		ВариантПоискаОбъекта = ""100"";
	//	КонецЕсли;
	//КонецЕсли;
	//
	//НажимаемыйОбъект = СцТ_ГлавнаяФорма.СцТ_НайтиИнтерактивныйОбъектТестируемогоПриложения(
	//	ИнтерактивныйОбъект,
	//	ВариантПоискаОбъекта,
	//	Тип(""ТестируемаяКнопкаФормы""),
	//	ИмяКнопки,
	//	ЗаголовокОбъекта,
	//	УзелПути);
	//
	//Если ТипЗнч(НажимаемыйОбъект) = Тип(""Строка"") Тогда
	//	ТекстСообщения = НСтр(""ru = 'Ошибка при поиске нажимаемого объекта: '"")
	//		+ НажимаемыйОбъект;
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Если НажимаемыйОбъект = Неопределено Тогда
	//	ТекстСообщения = НСтр(""ru = 'Не найден нажимаемый объект'"");
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//ОписаниеВидаНажимаемоегоОбъекта = СцТ_ГлавнаяФорма.СцТ_ПолучитьВидОбъекта(НажимаемыйОбъект);
	//
	//ФактическийВидОбъекта = ОписаниеВидаНажимаемоегоОбъекта.Вид;
	//
	//Если ФактическийВидОбъекта <> ""КнопкаКоманднойПанели""
	//	И ФактическийВидОбъекта <> ""ОбычнаяКнопка""
	//	И ФактическийВидОбъекта <> ""Гиперссылка""
	//	И ФактическийВидОбъекта <> ""Картинка""
	//	И ФактическийВидОбъекта <> ""Надпись""
	//	И ФактическийВидОбъекта <> ""ПолеФлажка"" Тогда
	//	
	//	ТекстСообщения = НСтр(""ru = 'Найденый объект приложения не является нажимаемым объектом (%1)'"");
	//	ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ОписаниеВидаНажимаемоегоОбъекта.Синоним);
	//	Возврат Ложь;
	//	
	//КонецЕсли;
	//
	//
	//Попытка
	//	НажимаемыйОбъект.Нажать();
	//Исключение
	//КонецПопытки;
	//
	////// ""Включить"" и ""Отключить"" пока не поддерживается
	////// на данном этапе проверка уже выполнена
	////Если ДействиеСКнопкой = ""Нажать"" Тогда
	////	
	////	Попытка
	////		НажимаемыйОбъект.Активизировать();
	////	Исключение
	////	КонецПопытки;
	////	
	////	Попытка
	////		
	////		Если ОписаниеВидаНажимаемоегоОбъекта.Вид <> ""ПолеФлажка"" Тогда
	////			НажимаемыйОбъект.Нажать();
	////		Иначе
	////			НажимаемыйОбъект.УстановитьОтметку();
	////		КонецЕсли;
	////		
	////	Исключение
	////		
	////		ТекстСообщения = НСтр(""ru = 'Не удалось выполнить нажатие объекта """"%1"""": %2'"");
	////		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ПредставлениеКнопки);
	////		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ОписаниеОшибки());
	////		Возврат Ложь;
	////		
	////	КонецПопытки;
	////	
	////ИначеЕсли ДействиеСКнопкой = ""Включить"" Тогда
	////	
	////	ТекстСообщения = НСтр(""ru = 'Действие """"Включить"""" на текущий момент не поддерживается'"");
	////	// Не поддерживается платформой
	////	
	////ИначеЕсли ДействиеСКнопкой = ""Отключить"" Тогда
	////	
	////	ТекстСообщения = НСтр(""ru = 'Действие """"Отключить"""" на текущий момент не поддерживается'"");
	////	// Не поддерживается платформой
	////	
	////ИначеЕсли ДействиеСКнопкой <> ""Проверить"" Тогда
	////	
	////	ТекстСообщения = НСтр(""ru = 'Неизвестное действие: """"%1""""'"");
	////	ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ДействиеСКнопкой);
	////	Возврат Ложь;
	////	
	////Иначе
	////	
	////	Если ФактическийВидОбъекта <> ВидОбъекта Тогда
	////		ТекстСообщения = НСтр(""ru = 'Не совпадает вид эталонного и существующего объекта: """"%1"""" и """"%2"""". '"");
	////		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", СцТ_СинонимВидаИнтерактивногоОбъекта(ВидОбъекта));
	////		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ОписаниеВидаНажимаемоегоОбъекта.Синоним);
	////	КонецЕсли;
	////	
	////	ФактическийЗаголовок = СцТ_ГлавнаяФорма.СцТ_ЗаголовокИнтерактивногоОбъекта(НажимаемыйОбъект);
	////	Если ВРег(СокрЛП(ЗаголовокОбъекта)) <> ВРег(СокрЛП(ФактическийЗаголовок)) Тогда
	////		
	////		ТекстСообщения = ТекстСообщения + НСтр(""ru = 'Не совпадает заголовок эталонного и текущего объекта: """"%1"""" и """"%2""""'"");
	////		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ЗаголовокОбъекта);
	////		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%2"", ФактическийЗаголовок);
	////		
	////	КонецЕсли;
	////	
	////	Возврат ПустаяСтрока(ТекстСообщения);
	////	
	////КонецЕсли;
	//
	//Возврат Истина;

	//	
	//	
	//	
	//	
	//	
	//	/////////////////////////////////////////////////////////////////////////////////////
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//КонецЕсли;
	//
	//Возврат Истина;

	
КонецФункции

&НаКлиенте
Процедура ОбработкаКомандыЗапускаТестируемогоПриложения() Экспорт
	
// Проверка, что запущен менеджер тестирования
	Если НЕ ЭтоМенеджерТестирования Тогда
		ПоказатьПредупреждение(, НСтр(""ru = 'Запуск тестируемого приложения невозможен, т.к. текущий клиент
											|не является менеджером тестирования.
											|Для запуска клиента в режиме менеджера тестирования необходимо использовать
											|дополнительный параметр запуска информационной базы """"/TESTMANAGER""""'""));
		Возврат;
	КонецЕсли;
	
	Если СцТ_ТестируемоеПриложениеАктивно() Тогда
		
		ТекстСообщения = НСтр(""ru = 'Тестируемое приложение уже запущено.
									|Для запуска нового тестируемого приложения необходимо
									|завершить работу текущего тестируемого приложения'"");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	СцТ_ТестируемоеПриложение();
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_СостояниеТП() Экспорт
	
	Если СцТ_Контроллер = Неопределено Тогда
		Элементы.СтраницыСостоянияТП.ТекущаяСтраница = Элементы.СтраницаТПОткл;
	Иначе
		Элементы.СтраницыСостоянияТП.ТекущаяСтраница = Элементы.СтраницаТПВкл;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ЗаписатьJSONвФайл(ЗаписываемаяСтрокаJSON) Экспорт
	
	Если СцТ_РежимВыполнения Тогда
		
		ИмяФайла = ИмяФайлаПротокола;
		
		Если НЕ ЗаписанЗаголовокВФайлПротокола Тогда
			Попытка
				
				ЗаписьВФайлПротокола = Новый ЗаписьТекста(ИмяФайла, , , Ложь);
				ЗаписьВФайлПротокола.ЗаписатьСтроку(""["");  // Начало массива
				ЗаписьВФайлПротокола.Закрыть();
				СцТ_ПерезаписатьФайлПротокола = Ложь;
				
				ЗаписанЗаголовокВФайлПротокола = Истина;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		ЗаписьВФайлПротокола = Новый ЗаписьТекста(ИмяФайла, , , Истина);
		ЗаписьВФайлПротокола.ЗаписатьСтроку(ЗаписываемаяСтрокаJSON);
		ЗаписьВФайлПротокола.Закрыть();
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ИнформационноеСообщение(КодСостояния, ТекстСообщенияВФайл, ТекстСообщенияПользователю, КакПредупреждение = Истина) Экспорт
	
	Если СцТ_ВнешнееУправлениеОбработкой = ""ПосредствомФайлов"" Тогда
		
		СчетчикСообщений = СчетчикСообщений + 1;
		ПутьКФайлуСообщения = ПутьКаталогаСообщений
			+ ""m""
			+ Прав(""000000000"" + Формат(СчетчикСообщений, ""ЧГ = 0""), 10)
			+ "".txt"";
			
		Попытка
			ЗаписьСообщения = Новый ЗаписьТекста(ПутьКФайлуСообщения);
			ЗаписьСообщения.Записать(""""
				+ КодСостояния
				+ Символы.ПС
				+ Строка(ТекущаяДата())
				+ Символы.ПС
				+ ТекстСообщенияВФайл
				+ ""$end"");
			ЗаписьСообщения.Закрыть();
			
		Исключение
		КонецПопытки;
		
	Иначе
		
		Если НЕ ПустаяСтрока(ТекстСообщенияПользователю) Тогда
			Если КакПредупреждение И СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"" Тогда
				ПоказатьПредупреждение(, ТекстСообщенияПользователю);
			Иначе
				Если КодСостояния = ""ERR"" Тогда
					ТЗ = НСтр(""ru = 'Ошибка'"");
				Иначе
					ТЗ = НСтр(""ru = 'Информация'"");
				КонецЕсли;
				
				ПоказатьОповещениеПользователя(ТЗ,, ТекстСообщенияПользователю, КартинкаИнформация32);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПоказатьИнформационноеСообщение(
	МассивИнфоСообщений,
	ТекущиеДанные = Неопределено,
	ФормаШагов = Неопределено,
	ПоказателиПроизводительности = Неопределено,
	ВремяВыполненияШага = Неопределено,
	РазличияСрвниваемыхТаблиц = Неопределено,
	ОбработчикОповещения = Неопределено,
	ЭтоПротокол = Ложь) Экспорт
	
	Если СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует""
		И (СцТ_ВыполнениеТеста = ""АвтоматическийРежим""
			ИЛИ СцТ_ВыполнениеТеста = ""ПошаговыйРежим""
			ИЛИ ЭтоПротокол) Тогда
		
		Если СцТ_ВыполнениеТеста = ""АвтоматическийРежим"" И НЕ ЭтоПротокол Тогда
			// Выводится только причина остановки
			ОтображаемыеТипы = Новый СписокЗначений;
			ОтображаемыеТипы.Добавить(0);
			ОтображаемыеТипы.Добавить(1);
		Иначе
			// Выводятся все информационные сообщения
			ОтображаемыеТипы = Новый СписокЗначений;
			ОтображаемыеТипы.Добавить(0);
			ОтображаемыеТипы.Добавить(1);
			ОтображаемыеТипы.Добавить(2);
			ОтображаемыеТипы.Добавить(3);
			ОтображаемыеТипы.Добавить(4);
			ОтображаемыеТипы.Добавить(5);
		КонецЕсли;
		
		// СУК - СтруктураУпарвляющихКнопок
		СУК = Новый Структура;
		СУК.Вставить(""СледующийШаг"", Истина);
		СУК.Вставить(""Выполнить""   , Истина);
		СУК.Вставить(""Закрыть""     , Истина);
		
		Если СцТ_ВыполнениеТеста <> ""АвтоматическийРежим"" Тогда
			СУК.Выполнить = Ложь;
		КонецЕсли;
		
		Если ЭтоПротокол Тогда
			СУК.СледующийШаг = Ложь;
			СУК.Выполнить    = Ложь;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить(""МассивИнфоСообщений"", МассивИнфоСообщений);
		ПараметрыФормы.Вставить(""ОтображаемыеТипы""   , ОтображаемыеТипы);
		ПараметрыФормы.Вставить(""ОтображатьТипОшибки"", НЕ ЭтоПротокол);
		
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТипЗнч(ТекущиеДанные) = Тип(""Структура"") Тогда
				ПараметрыФормы.Вставить(""ШагСценария_Идентификатор"", 0);
			Иначе
				ПараметрыФормы.Вставить(""ШагСценария_Идентификатор"", ТекущиеДанные.ПолучитьИдентификатор());
			КонецЕсли;
			ПараметрыФормы.Вставить(""ШагСценария_Номер""        , ТекущиеДанные.НомерШага);
			ПараметрыФормы.Вставить(""ШагСценария_Наименование"" , ТекущиеДанные.Наименование);
		Иначе
			ПараметрыФормы.Вставить(""ШагСценария_Идентификатор"", """");
			ПараметрыФормы.Вставить(""ШагСценария_Номер""        , """");
			ПараметрыФормы.Вставить(""ШагСценария_Наименование"" , """");
		КонецЕсли;
		
		ПараметрыФормы.Вставить(""РазличияСрвниваемыхТаблиц"", РазличияСрвниваемыхТаблиц);
		ПараметрыФормы.Вставить(""ПутьКФормам""              , ПутьКФормам);
		
		ПараметрыФормы.Вставить(""СУК""                      , СУК);
		
		ФормаСообщенияОбОшибке = ОткрытьФорму(ПутьКФормам + ""СообщениеОбОшибкеВыполнения"", ПараметрыФормы, ЭтотОбъект,,,,ОбработчикОповещения);
		
		ФормаСообщенияОбОшибке.ФормаШага        = ФормаШагов;
		ФормаСообщенияОбОшибке.СцТ_ГлавнаяФорма = ЭтотОбъект;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ОпределитьЗначение_НаКлиенте(Знач Значение) Экспорт
	
	Если ТипЗнч(Значение) <> Тип(""Строка"") Тогда
		Возврат Значение;
	КонецЕсли;
	
	// Значение с типом строка требует дополнительных проверок, так как может быть параметром
	// если строка начинается с & она считается параметром
	Если НЕ Найти(Значение, ""&"") Тогда
		// Это точно не параметр и не содержит параметров
		Возврат Значение;
	КонецЕсли;
	
	// Во всех шагах могут содержаться только простые типы параметров
	// Любые вычисления выполняеются в шаге ""Выполнить клиентскую процедуру""
	
	Если Лев(Значение, 1) = ""&"" И Лев(Значение, 2) <> ""&&"" Тогда
		
		Если ТипЗнч(ГлобальныеПараметры)  = Тип(""Структура"") Тогда
			
			ИмяХранимогоПараметра = Сред(Значение, 2);
			
			НужноеЗначение = Неопределено;
			Если НЕ ГлобальныеПараметры.Свойство(ИмяХранимогоПараметра, НужноеЗначение) Тогда
				// Найти значение не удалось, видимо оно еще неизвестно
				// ВЫДАТЬ СООБЩЕНИЕ ОБ ОШИБКЕ
				Возврат Неопределено;
				
			КонецЕсли;
			
		Иначе
			Если ТипЗнч(ГлобальныеПараметры) <> Тип(""Структура"") Тогда
				ГлобальныеПараметры = Новый Структура;
			КонецЕсли;
			
			// Это ошибка использован параметр, который еще неизвестен
			// ВЫДАТЬ СООБЩЕНИЕ ОБ ОШИБКЕ
			Возврат Неопределено;
			
		КонецЕсли;
		
		Возврат НужноеЗначение;
		
	ИначеЕсли Лев(Значение, 2) = ""&&"" Тогда
		// Это не параметр - нужно убрать дублирующий символ
		Возврат Сред(Значение, 2);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция СформироватьКонтрольныйПример(СтруктураПараметров) Экспорт
	
	МассивВыделенныхСтрок = Элементы.БлокСценария.ВыделенныеСтроки;
	
	СтруктураНастроек = СтруктураПараметров.СтруктураНастроек;
	
	// ВМС - ВозвращаемыйМассивСтруктур
	ВМС = Новый Массив;
	
	Если СтруктураПараметров.ТолькоДляВыделенныхШагов Тогда
		
		ИтерационныйВыводДанных(БлокСценария, СтруктураНастроек, ВМС, МассивВыделенныхСтрок);
		
		// Цикл по выделенным строкам использовать нельзя, так как строки идут в порядке выделения
		
	Иначе
		
		ИтерационныйВыводДанных(БлокСценария, СтруктураНастроек, ВМС, Неопределено);
		
	КонецЕсли;
	
	Возврат ВМС;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ПрименитьИзмененияВШаге(ВызвавшаяФорма, РедактируемыйШаг, ВозвращеннаяСтруктура) Экспорт
	
	Если ТипЗнч(ВозвращеннаяСтруктура) <> Тип(""Структура"") Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактируемыйШаг = Неопределено Тогда
		ТекстПредупреждения = НСтр(""ru = 'Не найден редактируемый шаг. Возможно он был перемещен или удален. Сохранение невозможно.'"");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхШага = ВозвращеннаяСтруктура.СтруктураДанныхШага;
	
	РедактируемыйШаг.Наименование = ВозвращеннаяСтруктура.Наименование;
	
	СписокКопируемыхСвойств = ""ТипМетаданных,ИмяМетаданных,Автоописание,Описание,ЗаголовокФормы,ОбСсылка,
	|ПредставлениеОбъекта,ВыполнитьВручную,Комментарий,ИмяФормы,ПредставлениеИмениМетаданных,ДанныеКартинки"";
	
	ЗаполнитьЗначенияСвойств(РедактируемыйШаг, СтруктураДанныхШага, СписокКопируемыхСвойств);
	
	РедактируемыйШаг.НеВыводитьАвтоописание = СтруктураДанныхШага.СкрытьАвтоописание;
	
	СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(РедактируемыйШаг.Значение, СтруктураДанныхШага.ДеревоЗначения);
	
	Если РедактируемыйШаг.Активность <> ВозвращеннаяСтруктура.Активность Тогда
		РедактируемыйШаг.Активность = ВозвращеннаяСтруктура.Активность;
		СцТ_УстановитьФлагиУРодителей(РедактируемыйШаг);
		СцТ_УстановитьФлагиУДочерних(РедактируемыйШаг);
	КонецЕсли;
	
	// В отличие от создания новых шагов (так как у новых не может быть подчиненных)
	// при редактировании для групповых шагов нужно оповещать
	// об изменениях в групповых шагах. 
	Если СцТ_ЭтоГрупповойШаг(РедактируемыйШаг.ТипШага) Тогда
		Оповестить(""СцТ_ОбновленыДанныеГрупповогоШага"", РедактируемыйШаг.ПолучитьИдентификатор());
	КонецЕсли;
	
	// Изменение таблицы ссылок
	Если    ВозвращеннаяСтруктура.ТипШага = ""АвтоГруппа""
		ИЛИ ВозвращеннаяСтруктура.ТипШага = ""Воспроизвести""
		ИЛИ ВозвращеннаяСтруктура.ТипШага = ""СравнитьСЭталоном""
		ИЛИ ВозвращеннаяСтруктура.ТипШага = ""СравнитьДвижения""
		ИЛИ ВозвращеннаяСтруктура.ТипШага = ""ВыполнитьЗапрос""
		ИЛИ ВозвращеннаяСтруктура.ТипШага = ""ЗаменаСсылки""
		ИЛИ ВозвращеннаяСтруктура.ТипШага = ""ВыполнитьПроцедуру"" Тогда
		
		ИзменитьИлиДобавитьСсылкиШага(ВозвращеннаяСтруктура.СсылкиШага, РедактируемыйШаг.УИШ, АдресТаблицыСсылок);
		
	КонецЕсли;
	
	ВызвавшаяФорма.Элементы.БлокСценария.ТекущаяСтрока = РедактируемыйШаг.ПолучитьИдентификатор();
	
	// Описание
	ТекстОписания = СтруктураДанныхШага.Описание;
	
	Если НЕ СтруктураДанныхШага.СкрытьАвтоописание Тогда
		ТекстОписания = СцТ_ДобавитьПодстроку(ТекстОписания, СтруктураДанныхШага.Автоописание, Символы.ПС);
	КонецЕсли;
	
	ОписаниеШага = ТекстОписания;
	// Конец описания
	
	ВызвавшаяФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_СохранитьНовыйШаг(ВызвавшаяФорма, ВозвращеннаяСтруктура) Экспорт
	
	Если ТипЗнч(ВозвращеннаяСтруктура) <> Тип(""Структура"") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписательПоложенияШагаВДереве = ВозвращеннаяСтруктура.ОписательПоложенияШагаВДереве;
	
	// Поиск узла дерева
	ИдентификаторРодителя = ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя;
	Если ИдентификаторРодителя = Неопределено Тогда
		РодительскийУзел = ВызвавшаяФорма.БлокСценария;
	Иначе
		РодительскийУзел = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ИдентификаторРодителя)
	КонецЕсли;
	
	Если РодительскийУзел = Неопределено Тогда
		ТекстПредупреждения = НСтр(""ru = 'Не найден родительский узел шага. Возможно ветка была перемещена или удалена. Сохранение невозможно.'"");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Неопределено;
	КонецЕсли;
	
	// Добавление нового узла
	
	ИндексВставки = ОписательПоложенияШагаВДереве.ИндексВставки;
	Если ИндексВставки > РодительскийУзел.ПолучитьЭлементы().Количество() Тогда
		// Подстраховка, если изменилось количество дочерних узлов
		ИндексВставки = РодительскийУзел.ПолучитьЭлементы().Количество();
	КонецЕсли;
	РедактируемыйШаг = РодительскийУзел.ПолучитьЭлементы().Вставить(ИндексВставки);
	РедактируемыйШаг.УИШ     = ОписательПоложенияШагаВДереве.ИдентификаторШага;
	РедактируемыйШаг.ТипШага = ВозвращеннаяСтруктура.ТипШага;
	
	СцТ_ПронумероватьШаги_НаКлиенте(,, ВызвавшаяФорма);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""УИШ"", ОписательПоложенияШагаВДереве.ИдентификаторШага);
	СтруктураПараметров.Вставить(""ДанныеШага"", РедактируемыйШаг);
	
	// Заполнение данными
	СтруктураДанныхШага = ВозвращеннаяСтруктура.СтруктураДанныхШага;
	
	РедактируемыйШаг.Наименование = ВозвращеннаяСтруктура.Наименование;
	
	СписокКопируемыхСвойств = ""ТипМетаданных,ИмяМетаданных,Автоописание,Описание,ЗаголовокФормы,ОбСсылка,
	|ПредставлениеОбъекта,ВыполнитьВручную,Комментарий,ИмяФормы,ПредставлениеИмениМетаданных,ДанныеКартинки"";
	
	ЗаполнитьЗначенияСвойств(РедактируемыйШаг, СтруктураДанныхШага, СписокКопируемыхСвойств);
	
	РедактируемыйШаг.НеВыводитьАвтоописание = СтруктураДанныхШага.СкрытьАвтоописание;
	
	СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(РедактируемыйШаг.Значение, СтруктураДанныхШага.ДеревоЗначения);
	
	// Установка активности
	РедактируемыйШаг.Активность = ВозвращеннаяСтруктура.Активность;
	СцТ_УстановитьФлагиУРодителей(РедактируемыйШаг);
	СцТ_УстановитьФлагиУДочерних(РедактируемыйШаг);
	
	// Изменение таблицы ссылок
	Если    ВозвращеннаяСтруктура.ТипШага = ""АвтоГруппа""
		ИЛИ ВозвращеннаяСтруктура.ТипШага = ""Воспроизвести""
		ИЛИ ВозвращеннаяСтруктура.ТипШага = ""СравнитьСЭталоном""
		ИЛИ ВозвращеннаяСтруктура.ТипШага = ""СравнитьДвижения""
		ИЛИ ВозвращеннаяСтруктура.ТипШага = ""ВыполнитьЗапрос""
		ИЛИ ВозвращеннаяСтруктура.ТипШага = ""ЗаменаСсылки""
		ИЛИ ВозвращеннаяСтруктура.ТипШага = ""ВыполнитьПроцедуру"" Тогда
		
		ИзменитьИлиДобавитьСсылкиШага(ВозвращеннаяСтруктура.СсылкиШага, РедактируемыйШаг.УИШ, АдресТаблицыСсылок);
		
	КонецЕсли;
	
	ВызвавшаяФорма.Элементы.БлокСценария.ТекущаяСтрока = РедактируемыйШаг.ПолучитьИдентификатор();
	
	// Описание
	ТекстОписания = СтруктураДанныхШага.Описание;
	
	Если НЕ СтруктураДанныхШага.СкрытьАвтоописание Тогда
		ТекстОписания = СцТ_ДобавитьПодстроку(ТекстОписания, СтруктураДанныхШага.Автоописание, Символы.ПС);
	КонецЕсли;
	
	ОписаниеШага = ТекстОписания;
	// Конец описания
	
	ВызвавшаяФорма.Модифицированность = Истина;
	
	Если ВозвращеннаяСтруктура.ТипШага = ""ИнтерактивнаяАвтоГруппа"" Тогда
		// Добавление шага ""НайтиФорму""
		
		ОписательПоложенияШагаВДереве = ПолучитьОписательПоложенияНовогоШагаВДереве(ВызвавшаяФорма, РедактируемыйШаг);
		
		// СДНШ - Структура параметров нового шага
		СДНШ = СцТ_ПодготовитьСтруктуруДанныхНовогоШага(
			""НайтиФорму"",
			ОписательПоложенияШагаВДереве,,,
			ВызвавшаяФорма);
			
		// Форму открывать ненужно, так как для пользователя это неочевидное поведение
		
		ПолнаяСтруктураДанныхШага = Новый Структура;
		ПолнаяСтруктураДанныхШага.Вставить(""ОписательПоложенияШагаВДереве"", ОписательПоложенияШагаВДереве);
		ПолнаяСтруктураДанныхШага.Вставить(""ТипШага""                      , ""НайтиФорму"");
		ПолнаяСтруктураДанныхШага.Вставить(""Наименование""                 , СДНШ.Наименование);
		ПолнаяСтруктураДанныхШага.Вставить(""Активность""                   , Истина);
		ПолнаяСтруктураДанныхШага.Вставить(""СтруктураДанныхШага""          , СДНШ);
		ПолнаяСтруктураДанныхШага.Вставить(""СсылкиШага""                   , Неопределено);
		
		СцТ_СохранитьНовыйШаг(ВызвавшаяФорма, ПолнаяСтруктураДанныхШага);
		
	КонецЕсли;
	
	Возврат РедактируемыйШаг;
	
КонецФункции

&НаКлиенте
Функция СцТ_ДобавитьПодстроку(Знач ПерваяЧасть, Знач ВтораяЧасть, Знач Разделитель = "" "", Знач ВКавычках = Ложь) Экспорт
	
	ВозвращаемыйТекст = ПерваяЧасть;
	
	Если НЕ ПустаяСтрока(ВозвращаемыйТекст) И НЕ ПустаяСтрока(ВтораяЧасть) Тогда
		ВозвращаемыйТекст = ВозвращаемыйТекст + Разделитель;
	КонецЕсли;
	
	Если НЕ  ПустаяСтрока(ВтораяЧасть) Тогда
		Если ВКавычках Тогда
			ВозвращаемыйТекст = ВозвращаемыйТекст + """""""" + ВтораяЧасть + """""""";
		Иначе
			ВозвращаемыйТекст = ВозвращаемыйТекст + ВтораяЧасть;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемыйТекст;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьПараметрыШагаДляПоискаОбъектаИБ(ДанныеШага) Экспорт
	
	Если ДанныеШага.ТипШага <> ""АвтоГруппа"" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипМД     = ДанныеШага.ТипМетаданных;
	ИмяМД     = ДанныеШага.ИмяМетаданных;
	СинонимМД = ДанныеШага.ПредставлениеИмениМетаданных;
	УИШ       = ДанныеШага.УИШ;
	
	УзелКлючаЗаписиРегистра = СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, ""Имя"", ""ИСТЗ_КлючЗаписиИБ"");
	Если ТипМД = ""РегистрыСведений"" И УзелКлючаЗаписиРегистра <> Неопределено Тогда
		
		МассивКлючаЗаписи = Новый Массив;
		Если УзелКлючаЗаписиРегистра <> Неопределено Тогда
			Для каждого СтрокаКлюча Из УзелКлючаЗаписиРегистра.ПолучитьЭлементы() Цикл
				СтруктураСтроки = Новый Структура;
				СтруктураСтроки.Вставить(""Имя""     , СтрокаКлюча.Имя);
				СтруктураСтроки.Вставить(""Значение"", СтрокаКлюча.Значение);
				СтруктураСтроки.Вставить(""Тип""     , СтрокаКлюча.ТипУзла);
				МассивКлючаЗаписи.Добавить(СтруктураСтроки);
			КонецЦикла;
		КонецЕсли;
		
		ОсновнойПараметр = МассивКлючаЗаписи;
		ТипПараметра = ""Массив"";
		
	Иначе
		ОсновнойПараметр = ДанныеШага.ОбСсылка;
		Если Найти(ОсновнойПараметр, ""{""""#"""""") > 0 Тогда
			// Старый тип
			ТипПараметра = Неопределено;
		Иначе
			// новый тип
			ТипПараметра = ""Ссылка"";
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить(""ТипМД""           , ТипМД);
	СтруктураОтвета.Вставить(""ИмяМД""           , ИмяМД);
	СтруктураОтвета.Вставить(""СинонимМД""       , СинонимМД);
	СтруктураОтвета.Вставить(""ОсновнойПараметр"", ОсновнойПараметр);
	СтруктураОтвета.Вставить(""ТипПараметра""    , ТипПараметра);
	СтруктураОтвета.Вставить(""УИШ""             , УИШ);
	
	Возврат СтруктураОтвета;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРУТКРОЙ ИДЕНТИФИКАЦИИ В ФОРМАХ НАСТРОЙКИ ШАГА

&НаКлиенте
Функция СцТ_ПолучитьСтруктуруИдентификацииСсылки(ИдентификаторСсылки, ТаблицаСсылокШага, Представление) Экспорт
	
	СтруктураПоиска = Новый Структура(""СтрокаИдентификатора"", ИдентификаторСсылки);
	НайденныеСтроки = ТаблицаСсылокШага.НайтиСтроки(СтруктураПоиска);
	л_СтруктураИдентификации = Новый Массив;
	Если НайденныеСтроки.Количество() > 0 Тогда
		л_ТипМД                  = НайденныеСтроки[0].ТипМД;
		л_ИмяМД                  = НайденныеСтроки[0].ИмяМД;
		л_СинонимМД              = НайденныеСтроки[0].СинонимМД;
		л_Представление          = НайденныеСтроки[0].Представление;
		л_Идентификатор          = НайденныеСтроки[0].СтрокаИдентификатора;
		//л_СтруктураИдентификации = НайденныеСтроки[0].СтруктураИдентификации;
		л_ПоискПоЗапросу         = НайденныеСтроки[0].ПоискПоЗапросу;
		л_ТекстЗапроса           = НайденныеСтроки[0].ТекстЗапроса;
		Для каждого СтрИ Из НайденныеСтроки[0].СтруктураИдентификации Цикл
			СИ = Новый Структура;
			СИ.Вставить(""Имя""            , СтрИ.Имя);
			СИ.Вставить(""Представление""  , СтрИ.Представление);
			СИ.Вставить(""Значение""       , СтрИ.Значение);
			СИ.Вставить(""СокрТипЗначения"", СтрИ.СокрТипЗначения);
			л_СтруктураИдентификации.Добавить(СИ);
		КонецЦикла;
		
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруИдентификацииПоОбщейТаблице(АдресТаблицыСсылок, ИдентификаторСсылки);
		
		Если СтруктураОтвета <> Неопределено Тогда
			л_ТипМД                  = СтруктураОтвета.ТипМД;
			л_ИмяМД                  = СтруктураОтвета.ИмяМД;
			л_СинонимМД              = СтруктураОтвета.СинонимМД;
			л_Представление          = СтруктураОтвета.Представление;
			л_Идентификатор          = СтруктураОтвета.Идентификатор;
			л_ПоискПоЗапросу         = СтруктураОтвета.ПоискПоЗапросу;
			л_ТекстЗапроса           = СтруктураОтвета.ТекстЗапроса;
			Для каждого СтрИ Из СтруктураОтвета.СтруктураИдентификации Цикл
				СИ = Новый Структура;
				СИ.Вставить(""Имя""            , СтрИ.Имя);
				СИ.Вставить(""Представление""  , СтрИ.Представление);
				СИ.Вставить(""Значение""       , СтрИ.Значение);
				СИ.Вставить(""СокрТипЗначения"", СтрИ.СокрТипЗначения);
				л_СтруктураИдентификации.Добавить(СИ);
			КонецЦикла;
		Иначе
		
			л_ТипМД                  = """";
			л_ИмяМД                  = """";
			л_СинонимМД              = """";
			л_Представление          = Представление;
			л_Идентификатор          = ИдентификаторСсылки;
			//л_СтруктураИдентификации = Неопределено;
			л_ПоискПоЗапросу         = Ложь;
			л_ТекстЗапроса           = """";
		КонецЕсли;
	КонецЕсли;
	
	СтрИдентификации = Новый Структура;
	СтрИдентификации.Вставить(""ТипМД""                 , л_ТипМД);
	СтрИдентификации.Вставить(""ИмяМД""                 , л_ИмяМД);
	СтрИдентификации.Вставить(""Идентификатор""         , л_Идентификатор);
	СтрИдентификации.Вставить(""СинонимМД""             , л_СинонимМД);
	СтрИдентификации.Вставить(""Представление""         , л_Представление);
	СтрИдентификации.Вставить(""СтруктураИдентификации"", л_СтруктураИдентификации);
	СтрИдентификации.Вставить(""АдресТаблицыКлючей""    , АдресТаблицыКлючей);
	СтрИдентификации.Вставить(""ПоискПоЗапросу""        , л_ПоискПоЗапросу);
	СтрИдентификации.Вставить(""ТекстЗапроса""          , л_ТекстЗапроса);
	СтрИдентификации.Вставить(""СтруктураПараметров""   , ГлобальныеПараметры);
	
	Возврат СтрИдентификации;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ДобавитьВСтруктуруИдентификацииШагаСведенияОНовойСсылке(ИдентификаторСсылки, ТаблицаСсылокШага, СтрИдентификации) Экспорт
	
	СтруктураПоиска = Новый Структура(""СтрокаИдентификатора"", ИдентификаторСсылки);
	НайденныеСтроки = ТаблицаСсылокШага.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НужнаяСтрока = НайденныеСтроки[0];
	Иначе
		НужнаяСтрока = ТаблицаСсылокШага.Добавить();
		НужнаяСтрока.СтрокаИдентификатора = ИдентификаторСсылки;
	КонецЕсли;
	
	НужнаяСтрока.ТипМД          = СтрИдентификации.ТипМД;
	НужнаяСтрока.ИмяМД          = СтрИдентификации.ИмяМД;
	НужнаяСтрока.СинонимМД      = СтрИдентификации.СинонимМД;
	НужнаяСтрока.Представление  = СтрИдентификации.Представление;
	НужнаяСтрока.ПоискПоЗапросу = СтрИдентификации.ПоискПоЗапросу;
	НужнаяСтрока.ТекстЗапроса   = СтрИдентификации.ТекстЗапроса;
	
	НужнаяСтрока.СтруктураИдентификации.Очистить();
	Для каждого СтрИдент Из СтрИдентификации.СтруктураИдентификации Цикл
		НовыйКлюч = НужнаяСтрока.СтруктураИдентификации.Добавить();
		НовыйКлюч.Имя             = СтрИдент.Имя;
		НовыйКлюч.Значение        = СтрИдент.Значение;
		НовыйКлюч.СокрТипЗначения = СтрИдент.СокрТипЗначения;
		// Представления может и не быть
	КонецЦикла;
	
	

	
	
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_УпаковатьВМассивТаблицуСсылокШага(Знач ДанныеФормы_ТаблицаСсылокШага) Экспорт
	
	// МТИ - массив таблицы идентификации
	МТИ = Новый Массив;
	
	Для каждого СтрТабл Из ДанныеФОрмы_ТаблицаСсылокШага Цикл
		
		// МСИ - массив структур идентификации
		МСИ = Новый Массив;
		СтрТабл.СтруктураИдентификации.Сортировать(""Имя"");
		Для каждого СтрИдентификации Из СтрТабл.СтруктураИдентификации Цикл
			// СИ - структура идентификации
			СИ = Новый Структура;
			СИ.Вставить(""Имя""            , СтрИдентификации.Имя);
			СИ.Вставить(""Представление""  , СтрИдентификации.Представление);
			СИ.Вставить(""Значение""       , СтрИдентификации.Значение);
			СИ.Вставить(""СокрТипЗначения"", СтрИдентификации.СокрТипЗначения);
			МСИ.Добавить(СИ);
		КонецЦикла;
		
		СтрСсылки = Новый Структура;
		СтрСсылки.Вставить(""СтруктураИдентификации"", МСИ);
		СтрСсылки.Вставить(""СтрокаИдентификатора""  , СтрТабл.СтрокаИдентификатора);
		СтрСсылки.Вставить(""Представление""         , СтрТабл.Представление);
		СтрСсылки.Вставить(""ТипМД""                 , СтрТабл.ТипМД);
		СтрСсылки.Вставить(""ИмяМД""                 , СтрТабл.ИмяМД);
		СтрСсылки.Вставить(""СинонимМД""             , СтрТабл.СинонимМД);
		СтрСсылки.Вставить(""ПоискПоЗапросу""        , СтрТабл.ПоискПоЗапросу);
		СтрСсылки.Вставить(""ТекстЗапроса""          , СтрТабл.ТекстЗапроса);
		
		МТИ.Добавить(СтрСсылки);
		
	КонецЦикла;
	
	Возврат МТИ;
	
КонецФункции

&НаКлиенте
Процедура ИтерационноеЗаполнениеСпискаСсылок(ВеткаДерева, СписокСсылок) Экспорт
	
	Для каждого УзелДерева Из ВеткаДерева.ПолучитьЭлементы() Цикл
	
		Если (ТипЗнч(УзелДерева.Значение) = Тип(""Строка"") И Лев(УзелДерева.Значение, 4) = ""{""""#"""""")
			ИЛИ (УзелДерева.ТипУзла = ""Ссылка"" И НЕ ПустаяСтрока(УзелДерева.Значение)) Тогда
			
			Если СписокСсылок.НайтиПоЗначению(УзелДерева.Значение) = Неопределено Тогда
				СписокСсылок.Добавить(УзелДерева.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
		ИтерационноеЗаполнениеСпискаСсылок(УзелДерева, СписокСсылок);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьОбъектМетаданныхПоИмениФормы(Знач ИмяУправляемойФормы) Экспорт
	
	Если      Лев(ИмяУправляемойФормы, 11) = ""Справочник."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 12);
		ТипМД = ""Справочники"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 9)  = ""Документ."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 10);
		ТипМД = ""Документы"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 5)  = ""Роль."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 6);
		ТипМД = ""Роли"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 11) = ""ОбщаяФорма."" Тогда
		Возврат Неопределено;
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 17) = ""ЖурналДокументов."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 18);
		ТипМД = ""ЖурналыДокументов"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 13) = ""Перечисление."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 14);
		ТипМД = ""Перечисления"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 6)  = ""Отчет."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 7);
		ТипМД = ""Отчеты"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 10) = ""Обработка."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 11);
		ТипМД = ""Обработки"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 23) = ""ПланВидовХарактеристик."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 24);
		ТипМД = ""ПланыВидовХарактеристик"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 11) = ""ПланСчетов."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 12);
		ТипМД = ""ПланыСчетов"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 17) = ""ПланВидовРасчета."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 18);
		ТипМД = ""ПланыВидовРасчета"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 16) = ""РегистрСведений."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 17);
		ТипМД = ""РегистрыСведений"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 18) = ""РегистрНакопления."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 19);
		ТипМД = ""РегистрыНакопления"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 19) = ""РегистрБухгалтерии."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 20);
		ТипМД = ""РегистрыБухгалтерии"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 15) = ""РегистрРасчета."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 16);
		ТипМД = ""РегистрыРасчета"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 14) = ""БизнесПроцесс."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 15);
		ТипМД = ""БизнесПроцессы"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 7)  = ""Задача."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 8);
		ТипМД = ""Задачи"";
		
	ИначеЕсли Лев(ИмяУправляемойФормы, 22) = ""ВнешнийИсточникДанных."" Тогда
		ИмяУправляемойФормы = Сред(ИмяУправляемойФормы, 23);
		ТипМД = ""ВнешниеИсточникиДанных"";
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПозицияТочки = Найти(ИмяУправляемойФормы, ""."");
	Если ПозицияТочки = 0 Тогда
		// Точка должна быть, так как везде кроме Общих форм должна быть вторая точка
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяМД = Сред(ИмяУправляемойФормы, 1, ПозицияТочки - 1);
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить(""ТипМД"", ТипМД);
	СтруктураОтвета.Вставить(""ИмяМД"", ИмяМД);
	
	Возврат СтруктураОтвета;
	
	
КонецФункции

&НаКлиенте
Процедура СцТ_ОтложенныйВызовСледующегоШага(УказательНаФорму) Экспорт
	
	СцТ_ФормаВыполнения = УказательНаФорму;
	
	ПодключитьОбработчикОжидания(""СцТ_ПодготовитьсяКВыполнениюШага"", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ВыполнитьШагПауза(УказательНаФорму, ВремяПаузы) Экспорт
	
	СцТ_ФормаВыполнения = УказательНаФорму;
	
	СцТ_ВремяОжиданияОстаток = ВремяПаузы;
	
	// Выполнение основной процедуры ожидания
	ПодключитьОбработчикОжидания(""СцТ_ЗакончитьВыполнениеШага_Пауза"", ВремяПаузы, Истина);
	
	// Периодическое оповещение пользователя об ожидании
	ПодключитьОбработчикОжидания(""СцТ_ОбработчикОповещенияОбОжидании"", 5, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОтложенноОткрытьФормуМакрошагаДляВыполнения(УказательНаФорму) Экспорт
	
	СцТ_ФормаВыполнения = УказательНаФорму;
	
	ПодключитьОбработчикОжидания(""СцТ_ОткрытьФормуМакрошагаДляВыполнения"", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма, ИдентификаторУзла) Экспорт
	
	Возврат ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ИдентификаторУзла);
	
КонецФункции


#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПрил = СистемнаяИнформация.ВерсияПриложения;
	ПозицияТочки = Найти(ВерсияПрил, ""."");
	Если ПозицияТочки > 1 Тогда
		РедакцияСтр = Сред(ВерсияПрил, 1, ПозицияТочки - 1);
		ВерсияПрил = Сред(ВерсияПрил, ПозицияТочки + 1);
		Попытка
			Редакция = Число(РедакцияСтр);
		Исключение
			Редакция = 0;
		КонецПопытки;
		
		ПозицияТочки = Найти(ВерсияПрил, ""."");
		Если ПозицияТочки > 1 Тогда
			ПодРедакцияСтр = Сред(ВерсияПрил, 1, ПозицияТочки - 1);
			ВерсияПрил = Сред(ВерсияПрил, ПозицияТочки + 1);
			Попытка
				Подредакция = Число(ПодРедакцияСтр);
			Исключение
				Подредакция = 0;
			КонецПопытки;
			
			ПозицияТочки = Найти(ВерсияПрил, ""."");
			Если ПозицияТочки > 1 Тогда
				ВерсияСтр = Сред(ВерсияПрил, 1, ПозицияТочки - 1);
				Попытка
					Версия = Число(ВерсияСтр);
				Исключение
					Версия = 0;
				КонецПопытки;
				
			Иначе
				Версия = 0;
			КонецЕсли;
			
		Иначе
			Подредакция = 0;
			Версия = 0;
		КонецЕсли;
	Иначе
		Редакция = 0;
		Подредакция = 0;
		Версия = 0;
		
	КонецЕсли;
	
	Если Редакция >= 8
		И Подредакция >= 3
		И Версия >= 8
		И (Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать) Тогда
		
		РежимСовместимости838 = Истина;
		
	Иначе
		РежимСовместимости838 = Ложь;
	КонецЕсли;
	
	Если РежимСовместимости838 Тогда
		УстановитьДействие(""ПередЗакрытием"", ""ПередЗакрытиеБезРежимаСовместимости"");
	КонецЕсли;
	
	ЗапускИзУправляющейКонфигурации = Параметры.ЗапускИзУправляющейКонфигурации;
	
	СцТ_УстановленБезопасныйРежим = БезопасныйРежим();
	
	// Определение параметров совместимости
	ПараметрыСовместимости = Новый Структура;
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СцТ_ВерсияПриложенияСплошная(СисИнфо.ВерсияПриложения);
	Если ВерсияПриложения < ""0008000300030000"" Тогда
		ВызватьИсключение НСтр(""ru = 'Для работы с инструментом необходима версия платформы 1С:Предприятия не ниже 8.3.3'"");
	КонецЕсли;
	
	ПараметрыСовместимости.Вставить(""ОжидатьФормированиеСпискаВыбора"",
		(ВерсияПриложения > ""0008000300040000""));
	
	// Некоторые настройки по-умолчанию
	ГлобальныеПараметры                = Новый Структура;
	
	ТаймаутПоискаИнтерактивныхОбъектов = 4; // По умолчанию 4 сек.
	ПортТестируемогоКлиента            = 1538;
	КомпьютерИБ                        = ""127.0.0.1"";
	ДругаяИБ                           = 0;
	СтрокаПодключенияКИБ               = """";
	ДопПараметрыКоманднойСтроки        = """";
	URLИБ                              = """";
	Объект.ПарольПользователяИБ        = """";
	
	// Определение служебных переменных
	ЭтаОбработка = РеквизитФормыВЗначение(""Объект"");
	
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + "".Форма."";
	
	БлокироватьГлавноеОкно = (ХранилищеОбщихНастроек.Загрузить(""СцТ_БлокироватьГлавноеОкно"") = Истина);
	РежимОткрытияОкна = ?(БлокироватьГлавноеОкно,
						  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца,
						  РежимОткрытияОкнаФормы.Независимый);
	
	Объект.Наименование = НСтр(""ru = 'Новый сценарий'"");
	
	// Если обработка открыта в конфигурации СцТ, то имя пользователя определять не нужно
	Попытка
		Если Метаданные.Имя = ""СценарноеТестирование"" Тогда
			Объект.ИмяПользователя = """";
		Иначе
			Объект.ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
		КонецЕсли;
	Исключение
		Объект.ИмяПользователя = """";
	КонецПопытки;
	
	СцТ_ЗаполнитьСписокШагов();
	
	// Пока дерево сценария еще пустое преобразуем его в шаблон для дерева макрошагов
	ДеревоМакрошаговДляИнициализации = РеквизитФормыВЗначение(""БлокСценария"");
	АдресДереваМакрошаговДляИнициализации = ПоместитьВоВременноеХранилище(ДеревоМакрошаговДляИнициализации, Новый УникальныйИдентификатор);
	АдресДереваМакрошагов = СцТ_ИнициализироватьДеревоМакрошагов_НаСервере(АдресДереваМакрошаговДляИнициализации);
	
	// При загрузке окно эталонной базы не отображается
	// Заполнение и синхронизация дерева эталонной базы выполняется
	// при первом обращении
	Элементы.ПоказатьОкноЭталоннойБазы.Пометка = Ложь;
	Элементы.СвертываемаяГруппаЭталоннойБазы.Видимость = Элементы.ПоказатьОкноЭталоннойБазы.Пометка;
	
	СцТ_ДобавитьНедостающиеСтрокиВТаблНачальныхУстановокШагов(АдресНачальныхУстановокШагов);
	АдресТаблицыКлючей = СцТ_ИнициализироватьТаблицуКлючей_НаСервере();
	
	СцТ_НастроитьВнешнийВидФормы_НаСервере();
	СцТ_УстановитьПредставлениеИмениФайла(ЭтотОбъект);
	КартинкаИнформация32 = Новый Картинка(ЭтаОбработка.ПолучитьМакет(""КартинкаИнформация32""));
	
	// Определение параметров соединения с информационной базой
	// используется для определения параметров подключения к веб-клиенту.
	// Если это клиент-серверная информационная база, тогда подключение необходимо
	// устанавливать к кластеру серверов информационной базы
	ПараметрыСоединенияСИБ = Новый Структура;
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	Если Метаданные.Имя = ""СценарноеТестирование"" Тогда
		ПараметрыСоединенияСИБ.Вставить(""КлиентСерверная"", Ложь);
	Иначе
		Если ВРег(Лев(СтрокаСоединения, 6)) <> ""SRVR="""""" Тогда
			ПараметрыСоединенияСИБ.Вставить(""КлиентСерверная"", Ложь);
		Иначе
			ПараметрыСоединенияСИБ.Вставить(""КлиентСерверная"", Истина);
			ПраваяЧасть = Сред(СтрокаСоединения, 7);
			ПозицияКовычки = Найти(ПраваяЧасть, """""""");
			Если ПозицияКовычки = 0 Тогда
				АдресКластера = ПраваяЧасть;
			Иначе
				АдресКластера = Лев(ПраваяЧасть, ПозицияКовычки - 1);
			КонецЕсли;
			
			ПозицияДвоеточия = Найти(АдресКластера, "":"");
			Если ПозицияДвоеточия = 0 Тогда
				ПараметрыСоединенияСИБ.Вставить(""Кластер"", АдресКластера);
				ПараметрыСоединенияСИБ.Вставить(""Порт""   , 1541);
			Иначе
				ПараметрыСоединенияСИБ.Вставить(""Кластер"", Лев(АдресКластера, ПозицияДвоеточия - 1));
				ПортСтр = Сред(АдресКластера, ПозицияДвоеточия + 1);
				Если ПустаяСтрока(ПортСтр) Тогда
					ПараметрыСоединенияСИБ.Вставить(""Порт"", 1541);
				Иначе
					Попытка
						ПортЧисло = Число(ПортСтр);
						ПараметрыСоединенияСИБ.Вставить(""Порт"", ПортЧисло);
					Исключение
						ПараметрыСоединенияСИБ.Вставить(""Порт"", 1541);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СцТ_СостояниеТП();
	
	СцТ_РежимВыполнения = Ложь;
	СцТ_УправлениеРежимомВыполнения();
	
	РазделительПутиКлиента = ПолучитьРазделительПути();
	
	// Проверки возможности дальнейшей работы
	
	// в качестве менеджера тестированяи не могут выступать веб-клиент
	// или обычное (неуправляемое) приложение
	#Если НЕ ТонкийКлиент И НЕ ТолстыйКлиентУправляемоеПриложение Тогда
		Отказ = Истина;
		ТекстОповещения = НСтр(""ru = 'Работа с инструментом недоступна в текущем клиенте'"");
		
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Макрошаг выполнен'""),, ТекстОповещения, КартинкаИнформация32);
		Возврат;
	#КонецЕсли
	
	#Если НЕ ВебКлиент Тогда
	Если СцТ_УстановленБезопасныйРежим Тогда
		
		Отказ = Истина;
		
		ТекстДляФайла = НСтр(""ru = 'Обработка сценарного тестирования открыта в безопасном режиме.
							|Продолжение работы невозможно'"");
		
		ТекстДляПользователя = НСтр(""ru = 'Инструмент сценарного тестирования не может использоваться в безопасном режиме.
									|Рекомндуется запустить сеанс от имени администратора'"");
		
		СцТ_ИнформационноеСообщение(""ERR"", ТекстДляФайла, ТекстДляПользователя);
		
		СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Проверка: запущен ли сеанс в режиме менеджера тестирования;
	Попытка
		ФиктивнаяПеременная = Тип(""ТестируемоеПриложение"");
		ЭтоМенеджерТестирования = Истина;
	Исключение
		ЭтоМенеджерТестирования = Ложь;
	КонецПопытки;
	
	Если НЕ ЭтоМенеджерТестирования
		И (СцТ_ДоступныйНаборШаговДляВыполнения = ""ВсеШаги""
		ИЛИ СцТ_ДоступныйНаборШаговДляВыполнения = ""ТолькоИнтерактивныеШаги""
		ИЛИ Объект.ТипБлока = ""Смешанный""
		ИЛИ Объект.ТипБлока = ""Интерактивный"") Тогда
		
		
		ТекстДляФайла = НСтр(""ru = 'Обработка открыта не в менеджере тестирования. Продолжение работы невозможно'"");
		
		ТекстДляПользователя = НСтр(""ru = 'Обработка открыта не в менеджере тестирования. Работа с интерактивными шагами будет недоступна.
								|Рекомендуется перезапустить информационную базу с параметром """"/TESTMANAGER""""'"");
		
		СцТ_ИнформационноеСообщение(""ERR"", ТекстДляФайла, ТекстДляПользователя);
		
		СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Инициализация клиентских переменных
	РазделительПутиКлиента = ПолучитьРазделительПутиКлиента();
	
	СцТ_ФормыТестируемогоПриложения = Новый Соответствие;
	СцТ_ОткрытыеФормыНастройкиШагов = Новый Соответствие;
	
	// Идентификатор веб-клиента обновляется при каждом открытии обработки
	// Или загрузке нового сценария
	ИдентификаторВебКлиента = ""WCID"" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), ""-"", """");
	
	СцТ_УстановитьЗаголовокФормы_НаКлиенте();
	
	// Установка каталога и файла протокола на клиентском компьютере
	СцТ_ОбновитьИмяФайлаПротокола();
	
	
	// Заполнение переменных по данным строки запуска
	Если (Лев(ПараметрЗапуска, 9) = ""AutoTest="") Тогда
		СцТ_ВнешнееУправлениеОбработкой = ""ПосредствомФайлов"";
		Объект.РабочийКаталог = Сред(ПараметрЗапуска, 10);
		ПутьКаталогаСообщений = Объект.РабочийКаталог + РазделительПутиКлиента
			+ ""messages"" + РазделительПутиКлиента;
		
		СцТ_ДоступныйНаборШаговДляВыполнения = ""ВсеШаги"";
		
		Если СцТ_ОстановленИзКонфигурацииСТ() Тогда
			СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
			Возврат;
		КонецЕсли;
		
		ВыполнитьУказанияКомандногоФайла();
		
	ИначеЕсли (Лев(ПараметрЗапуска, 16) = ""AutoBusinesTest="") Тогда
		СцТ_ВнешнееУправлениеОбработкой = ""ПосредствомФайлов"";
		Объект.РабочийКаталог = Сред(ПараметрЗапуска, 17);
		ПутьКаталогаСообщений = Объект.РабочийКаталог + РазделительПутиКлиента
			+ ""messages"" + РазделительПутиКлиента;
		
		СцТ_ДоступныйНаборШаговДляВыполнения = ""ТолькоШагиБизнесЛогики"";
		
		ВыполнитьУказанияКомандногоФайла();
		
	ИначеЕсли (Лев(ПараметрЗапуска, 21) = ""OpenScriptForExecute="") Тогда
		
		СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"";
		Объект.РабочийКаталог = КаталогДокументов() + ""Temp"" + РазделительПутиКлиента;
		ПутьКаталогаСообщений = Объект.РабочийКаталог + РазделительПутиКлиента
			+ ""messages"" + РазделительПутиКлиента;
		
		СцТ_ДоступныйНаборШаговДляВыполнения = ""ВсеШаги"";
		
		ПутьФайлаСценария = Сред(ПараметрЗапуска, 22);
		
		ПутьФайлаСценарияДляАвтоОткрытия = ПутьФайлаСценария;
		ПодключитьОбработчикОжидания(""СцТ_ОткрытьСценарийАвто"", 0.1, Истина);
		
		// Выход из процедуры
		
	ИначеЕсли (Лев(ПараметрЗапуска, 21) = ""OpenScriptForEditing="") Тогда
		СцТ_ВидДействияАвтоматическогоЗапуска = ""ОткрытьСценарийВРежимеЗаписи"";
		
		СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"";
		Объект.РабочийКаталог = КаталогДокументов() + ""Temp"" + РазделительПутиКлиента;
		ПутьКаталогаСообщений = Объект.РабочийКаталог + РазделительПутиКлиента
			+ ""messages"" + РазделительПутиКлиента;
		
		СцТ_ДоступныйНаборШаговДляВыполнения = ""ВсеШаги"";
		
		ПутьФайлаСценария = Сред(ПараметрЗапуска, 22);
		
		ПутьФайлаСценарияДляАвтоОткрытия = ПутьФайлаСценария;
		ПодключитьОбработчикОжидания(""СцТ_ОткрытьСценарийАвто"", 0.1, Истина);
		
		// Выход из процедуры
		
	Иначе
		СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"";
		Объект.РабочийКаталог = КаталогДокументов();
		ПутьКаталогаСообщений = Объект.РабочийКаталог + РазделительПутиКлиента
			+ ""messages"" + РазделительПутиКлиента;
		
		СцТ_ДоступныйНаборШаговДляВыполнения = ""ВсеШаги"";
		
		// Открытие формы типовых действий
		Если НЕ ЗапускИзУправляющейКонфигурации Тогда
			ФормаБыстрогоСтарта = ОткрытьФорму(ПутьКФормам + ""БыстрыйСтарт"",, ЭтотОбъект);
			ФормаБыстрогоСтарта.СцТ_ГлавнаяФорма = ЭтотОбъект;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ""ИзменениеИВыборШаблонаШагов"" Тогда
		СцТ_ОбработатьИзмененияИВыборШаблонаШагов(Параметр);
		
	ИначеЕсли ИмяСобытия = ""ОбновитьТаблицуКлючейИдентификации"" Тогда
		АдресТаблицыКлючей = Параметр.АдресТаблицыКлючей;
		
	ИначеЕсли ИмяСобытия = ""ПрименитьИзмененияНастроекЭталоннойБазы"" Тогда
		АдресДереваНастроекЭталоннойБазы = Параметр.АдресДереваНастройки;
		СцТ_ОтобразитьДеревоЭталоннойБазы_НаКлиенте();
		
	ИначеЕсли ИмяСобытия = ""ИзменениеДереваНачальныхУстановокШагов"" Тогда
		АдресНачальныхУстановокШагов = Параметр;
		
	ИначеЕсли ИмяСобытия = ""ОбновитьДанныеОСценарииПослеСохранения"" Тогда
		Объект.Наименование       = Параметр.Наименование;
		Объект.Описание           = Параметр.Описание;
		Объект.Автор              = Параметр.Автор;
		Объект.ИмяФайлаБлокаТеста = Параметр.ФайлСценария;
		
		СцТ_УстановитьПредставлениеИмениФайла(ЭтотОбъект);
		СцТ_УстановитьЗаголовокФормы_НаКлиенте();
		Модифицированность = Ложь;
		
		СцТ_ВыполнитьСледующееДействиеПослеСохранения(Параметр.СледДействие);
		
	ИначеЕсли  ИмяСобытия = ""СохранениеСценария"" Тогда
		Объект.Наименование       = Параметр.Наименование;
		Объект.Автор              = Параметр.Автор;
		Объект.ИмяФайлаБлокаТеста = Параметр.ИмяФайлаБлокаТеста;
		Объект.Описание           = Параметр.Описание;
		
		СцТ_УстановитьПредставлениеИмениФайла(ЭтотОбъект);
		СцТ_УстановитьЗаголовокФормы_НаКлиенте();
		
		Модифицированность = Ложь;
		
		СцТ_ВыполнитьСледующееДействиеПослеСохранения(Параметр.СледДействие);
		
	ИначеЕсли ИмяСобытия = ""ИзменениеНастроекТеста"" Тогда
		
		ИзмененыХранимыеВСценарииНастройки =
			    Объект.Автор                       <> Параметр.Автор
			ИЛИ Объект.Наименование                <> Параметр.Наименование
			ИЛИ Объект.НачальнаяДата               <> Параметр.НачальнаяДата
			ИЛИ Объект.РабочийКаталог              <> Параметр.РабочийКаталог
			ИЛИ Объект.Описание                    <> Параметр.Описание
			ИЛИ Объект.ИмяПользователя             <> Параметр.ИмяПользователя
			ИЛИ Объект.ПарольПользователяИБ        <> Параметр.ПарольПользователяИБ
			ИЛИ ВидТестируемогоКлиента             <> Параметр.ВидТестируемогоКлиента
			ИЛИ ПортТестируемогоКлиента            <> Параметр.ПортТестируемогоКлиента
			ИЛИ КомпьютерИБ                        <> Параметр.КомпьютерИБ
			ИЛИ ДругаяИБ                           <> Параметр.ДругаяИБ
			ИЛИ СтрокаПодключенияКИБ               <> Параметр.СтрокаПодключенияКИБ
			ИЛИ ДопПараметрыКоманднойСтроки        <> Параметр.ДопПараметрыКоманднойСтроки
			ИЛИ URLИБ                              <> Параметр.URLИБ
			ИЛИ ТаймаутПоискаИнтерактивныхОбъектов <> Параметр.ТаймаутПоискаИнтерактивныхОбъектов
			ИЛИ ВыполнятьЗамерПроизводительности   <> Параметр.ВыполнятьЗамерПроизводительности
			ИЛИ ВыполнятьПреобразованиеСсылочныхТипов <> Параметр.ВыполнятьПреобразованиеСсылочныхТипов;
			
		Если ИзмененыХранимыеВСценарииНастройки Тогда
			
			Объект.Автор                       = Параметр.Автор;
			Объект.Наименование                = Параметр.Наименование;
			Объект.НачальнаяДата               = Параметр.НачальнаяДата;
			Объект.РабочийКаталог              = Параметр.РабочийКаталог;
			Объект.Описание                    = Параметр.Описание;
			Объект.ИмяПользователя             = Параметр.ИмяПользователя;
			Объект.ПарольПользователяИБ        = Параметр.ПарольПользователяИБ;
			ВидТестируемогоКлиента             = Параметр.ВидТестируемогоКлиента;
			ПортТестируемогоКлиента            = Параметр.ПортТестируемогоКлиента;
			КомпьютерИБ                        = Параметр.КомпьютерИБ;
			ДругаяИБ                           = Параметр.ДругаяИБ;
			СтрокаПодключенияКИБ               = Параметр.СтрокаПодключенияКИБ;
			ДопПараметрыКоманднойСтроки        = Параметр.ДопПараметрыКоманднойСтроки;
			URLИБ                              = Параметр.URLИБ;
			ТаймаутПоискаИнтерактивныхОбъектов = Параметр.ТаймаутПоискаИнтерактивныхОбъектов;
			ВыполнятьЗамерПроизводительности   = Параметр.ВыполнятьЗамерПроизводительности;
			ВыполнятьПреобразованиеСсылочныхТипов = Параметр.ВыполнятьПреобразованиеСсылочныхТипов;
			
			// Флаг модифицированности требуется взводить только в случае, если
			// изменены настройки, хранимые в файле сценария и в тесте есть шаги.
			
			Модифицированность = Модифицированность ИЛИ (БлокСценария.ПолучитьЭлементы().Количество() > 0);
			
		КонецЕсли;
		
		ИмяФайлаПротокола             = Параметр.ИмяФайлаПротокола;
		СцТ_ПерезаписатьФайлПротокола = Параметр.ПерезаписатьФайлПротокола;
		ОбновлятьИндексППД            = Параметр.ОбновлятьИндексППД;
		
		Если БлокироватьГлавноеОкно <> Параметр.БлокироватьГлавноеОкно Тогда
			БлокироватьГлавноеОкно = Параметр.БлокироватьГлавноеОкно;
			СцТ_ОбработатьНастройкиТестаНаСервере(Параметр);
		КонецЕсли;
		
		СцТ_УстановитьЗаголовокФормы_НаКлиенте();
		
	ИначеЕсли ИмяСобытия = ""ПреобразоватьДатыВУсловныйФормат"" Тогда
		СцТ_ПреобразоватьДаты_НаКлиенте(Параметр);
		
	ИначеЕсли ИмяСобытия = ""СцТ_ИмпортШаговСценария"" И Источник = ЭтотОбъект Тогда
		СцТ_ИмпортироватьШагиСценария(Параметр, ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = ""СцТ_ИзменениеНачальнойДатыСценария"" Тогда
		Объект.НачальнаяДата = Параметр;
		Модифицированность = Истина;
		
	ИначеЕсли ИмяСобытия = ""СцТ_ИзменениеДереваМакрошагов"" Тогда
		АдресДереваМакрошагов = Параметр;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"" Тогда
		Если НЕ СцТ_УстановленБезопасныйРежим И СцТ_СценарийМодифицирован() Тогда
			Отказ = Истина;
			СцТ_ОбработатьСохранениеСценария(1);
		КонецЕсли;
	Иначе
		// Попытка закрыть все открытые формы обработки
		Оповестить(""СцТ_ПринудительноеЗакрытиеВсехФормОбработки"");
	КонецЕсли;
	
	
	Если НЕ СцТ_УстановленБезопасныйРежим Тогда
		
		БлокСценария.ПолучитьЭлементы().Очистить();
		МассивАдресов = Новый Массив;
		МассивАдресов.Добавить(АдресДереваНастроекЭталоннойБазы);
		МассивАдресов.Добавить(АдресНачальныхУстановокШагов);
		МассивАдресов.Добавить(АдресТаблицыКлючей);
		МассивАдресов.Добавить(АдресТаблицыСсылок);
		МассивАдресов.Добавить(АдресШаблоновШагов);
		Попытка
			СцТ_УдалитьЗначенияИзВременногоХранилищаНаСервере(МассивАдресов);
		Исключение
		КонецПопытки;
		

		// Конец удаление лишних данных из памяти
		ТекстСообщения = НСтр(""ru = 'Закрытие обработки сценарного тестирования'"");
		СцТ_ИнформационноеСообщение(""EXIT"", ТекстСообщения, ТекстСообщения, Ложь);
		
		// Завершение работы тестируемого приложения
		Если СцТ_ТестируемоеПриложениеАктивно() И СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"" Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения(""СцТ_ЗакрытьГлавноеОкноТПИРазорватьСоединение"", ЭтотОбъект),
				НСтр(""ru = 'Тестируемое приложение все еще активно. Завершить работу тестируемого приложения?'""),
				РежимДиалогаВопрос.ДаНет);
				
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытиеБезРежимаСовместимости(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда
		Если СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"" Тогда
			Если НЕ СцТ_УстановленБезопасныйРежим И СцТ_СценарийМодифицирован() Тогда
				Отказ = Истина;
				СцТ_ОбработатьСохранениеСценария(1);
			КонецЕсли;
		Иначе
			// Попытка закрыть все открытые формы обработки
			Оповестить(""СцТ_ПринудительноеЗакрытиеВсехФормОбработки"");
		КонецЕсли;
		
		
		Если НЕ СцТ_УстановленБезопасныйРежим Тогда
			
			БлокСценария.ПолучитьЭлементы().Очистить();
			МассивАдресов = Новый Массив;
			МассивАдресов.Добавить(АдресДереваНастроекЭталоннойБазы);
			МассивАдресов.Добавить(АдресНачальныхУстановокШагов);
			МассивАдресов.Добавить(АдресТаблицыКлючей);
			МассивАдресов.Добавить(АдресТаблицыСсылок);
			МассивАдресов.Добавить(АдресШаблоновШагов);
			Попытка
				СцТ_УдалитьЗначенияИзВременногоХранилищаНаСервере(МассивАдресов);
			Исключение
			КонецПопытки;
			

			// Конец удаление лишних данных из памяти
			ТекстСообщения = НСтр(""ru = 'Закрытие обработки сценарного тестирования'"");
			СцТ_ИнформационноеСообщение(""EXIT"", ТекстСообщения, ТекстСообщения, Ложь);
			
			// Завершение работы тестируемого приложения
			Если СцТ_ТестируемоеПриложениеАктивно() И СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"" Тогда
				
				ПоказатьВопрос(Новый ОписаниеОповещения(""СцТ_ЗакрытьГлавноеОкноТПИРазорватьСоединение"", ЭтотОбъект),
					НСтр(""ru = 'Тестируемое приложение все еще активно. Завершить работу тестируемого приложения?'""),
					РежимДиалогаВопрос.ДаНет);
					
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
		ТекстПредупреждения = НСтр(""ru = 'Работа со сценарием не закончена - это может приветси к потере несохраненных данных'"");
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	//Если НЕ СцТ_УстановленБезопасныйРежим Тогда
	//	
	//	БлокСценария.ПолучитьЭлементы().Очистить();
	//	МассивАдресов = Новый Массив;
	//	МассивАдресов.Добавить(АдресДереваНастроекЭталоннойБазы);
	//	МассивАдресов.Добавить(АдресНачальныхУстановокШагов);
	//	МассивАдресов.Добавить(АдресТаблицыКлючей);
	//	МассивАдресов.Добавить(АдресТаблицыСсылок);
	//	МассивАдресов.Добавить(АдресШаблоновШагов);
	//	Попытка
	//		СцТ_УдалитьЗначенияИзВременногоХранилищаНаСервере(МассивАдресов);
	//	Исключение
	//	КонецПопытки;
	//	

	//	// Конец удаление лишних данных из памяти
	//	ТекстСообщения = НСтр(""ru = 'Закрытие обработки сценарного тестирования'"");
	//	СцТ_ИнформационноеСообщение(""EXIT"", ТекстСообщения, ТекстСообщения, Ложь);
	//	
	//	// Завершение работы тестируемого приложения
	//	Если СцТ_ТестируемоеПриложениеАктивно() И СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"" Тогда
	//		
	//		ПоказатьВопрос(Новый ОписаниеОповещения(""СцТ_ЗакрытьГлавноеОкноТПИРазорватьСоединение"", ЭтотОбъект),
	//			НСтр(""ru = 'Тестируемое приложение все еще активно. Завершить работу тестируемого приложения?'""),
	//			РежимДиалогаВопрос.ДаНет);
	//		Возврат;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	СцТ_ФормыТестируемогоПриложения   = Неопределено;
	СцТ_ТаблицыТестируемогоПриложения = Неопределено;
	СцТ_Контроллер                    = Неопределено;
	СцТ_СостояниеТП();
	
	Если СцТ_JSONЗапись<> Неопределено Тогда
		СцТ_JSONЗапись.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ОбработчикиСобытийЭталоннойБазы

&НаКлиенте
Процедура ДеревоСправочниковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Блокировка возможности добавления с клавиатуры
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСправочниковПередУдалением(Элемент, Отказ)
	
	// Подмена удаления операцией пометки на удаление
	СцТ_ОбработчикПометитьНаУдалениеЭлементЭталоннойБазы_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСправочниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СцТ_ОбработчикВыбораИлиРедактированияДереваЭталоннойБазы_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипМетаданныхЭталоннойБазыПриИзменении(Элемент)
	
	СцТ_ОтобразитьДеревоЭталоннойБазы_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСправочниковОтметкаПриИзменении(Элемент)
	
	ТаблицаФормы  = СцТ_ПолучитьТаблицуФормыЭталоннойБазы_НаКлиенте();
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	СцТ_УстановитьФлагиПодчиненныхСтрок_НаКлиенте(ТекущиеДанные, ТекущиеДанные.Отметка, ""Отметка"");
	СцТ_УстановитьФлагиРодительскихСтрок_НаКлиенте(ТекущиеДанные.ПолучитьРодителя(), , , ""Отметка"");
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийБлокаСценария

&НаКлиенте
Процедура БлокСценарияПриАктивизацииСтроки(Элемент)
	
	// Настройку доступности кнопок нужно выполнить сразу
	// Это необходимо для правильного отображения контекстного меню
	ТекущиеДанныеШага = Элемент.ТекущиеДанные;
	
	СцТ_ОбновитьДоступностьПовышенияИлиПониженияУровня(ТекущиеДанныеШага, ЭтотОбъект);
	
	// Дерево не заполнено
	Если ТекущиеДанныеШага = Неопределено Тогда
		// Командная панель
		Элементы.СкопироватьШаг.Доступность        = Ложь;
		Элементы.ИзменитьШаг.Доступность           = Ложь;
		Элементы.УдалитьШаг.Доступность            = Ложь;
		Элементы.РазвернутьВсеУзлы.Доступность     = Ложь;
		Элементы.СвернутьВсеУзлы.Доступность       = Ложь;
		Элементы.ПереместитьУзелВверх.Доступность  = Ложь;
		Элементы.ПереместитьУзелВниз.Доступность   = Ложь;
		Элементы.ВыполнитьСценарий.Доступность     = Ложь;
		Элементы.ВыполнитьОтдельныйШаг.Доступность = Ложь;
		
		// Контекстное меню
		Элементы.КМБСкопироватьШаг.Доступность                 = Ложь;
		Элементы.КМБИзменитьШаг.Доступность                    = Ложь;
		Элементы.КМБУдалитьШаг.Доступность                     = Ложь;
		Элементы.КМБПереместитьВверх.Доступность               = Ложь;
		Элементы.КМБПереместитьВниз.Доступность                = Ложь;
		Элементы.КМБДобавитьВШаблонШагов.Доступность           = Ложь;
		Элементы.КМБПрименитьОсновнойШаблон.Доступность        = Ложь;
		Элементы.КМБВыбратьИПрименитьШаблон.Доступность        = Ложь;
		Элементы.КМБПрименитьШаблонПоУмолчанию.Доступность     = Ложь;
		Элементы.КМБПрименитьИсключенияИзШаблона.Доступность   = Ложь;
		Элементы.КМБОбновитьДанныеШагов.Доступность            = Ложь;
		Элементы.КМБСтруктураИдентификации.Доступность         = Ложь;
		Элементы.КМБВыполнитьСценарий.Доступность              = Ложь;
		Элементы.КМБВыполнитьШаг.Доступность                   = Ложь;
		Элементы.КМБОтметитьВыполнение.Доступность             = Ложь;
		Элементы.КМБСброситьВыполнение.Доступность             = Ложь;
		Элементы.КМБТочкаОстановаУстановитьСнять.Доступность   = Ложь;
		Элементы.КМБПривязатьАвтогруппуКФорме.Доступность      = Ложь;
		Элементы.КМБАктивизироватьТестируемуюФорму.Доступность = Ложь;
		Элементы.КМБЦветАвто.Доступность                       = Ложь;
		Элементы.КМБЦветКрасный.Доступность                    = Ложь;
		Элементы.КМБЦветЗеленый.Доступность                    = Ложь;
		Элементы.КМБЦветСиний.Доступность                      = Ложь;
		Элементы.КМБЦветОранжевый.Доступность                  = Ложь;
		Элементы.КМБЦветФиолетовый.Доступность                 = Ложь;
		
		Элементы.КМБМакрошагОткрыть.Доступность                   = Ложь;
		Элементы.КМБМакрошагиДобавитьГруппуВМакрошаг.Доступность  = Ложь;
		Элементы.КМБМакрошагиСоздатьНаОснованииГруппы.Доступность = Ложь;
		
		Элементы.КМБАктивностьШаговУстановить.Доступность      = Ложь;
		Элементы.КМБАктивностьШаговСбросить.Доступность        = Ложь;
		
		Возврат;
	КонецЕсли;
	
	// Дерево заполнено - установка доступности кнопок, не зависящих
	// от режима работы и типа шага
	
	// Командная панель
	Элементы.СкопироватьШаг.Доступность        = Истина;
	Элементы.ИзменитьШаг.Доступность           = Истина;
	Элементы.УдалитьШаг.Доступность            = Истина;
	Элементы.РазвернутьВсеУзлы.Доступность     = Истина;
	Элементы.СвернутьВсеУзлы.Доступность       = Истина;
	Элементы.ПереместитьУзелВверх.Доступность  = Истина;
	Элементы.ПереместитьУзелВниз.Доступность   = Истина;
	Элементы.ВыполнитьСценарий.Доступность     = Истина;
	Элементы.ВыполнитьОтдельныйШаг.Доступность = Истина;
	
	// Контекстное меню
	Элементы.КМБСкопироватьШаг.Доступность               = Истина;
	Элементы.КМБИзменитьШаг.Доступность                  = Истина;
	Элементы.КМБУдалитьШаг.Доступность                   = Истина;
	Элементы.КМБАктивностьШаговУстановить.Доступность    = Истина;
	Элементы.КМБАктивностьШаговСбросить.Доступность      = Истина;
	Элементы.КМБПереместитьВверх.Доступность             = Истина;
	Элементы.КМБПереместитьВниз.Доступность              = Истина;
	Элементы.КМБВыполнитьСценарий.Доступность            = Истина;
	Элементы.КМБВыполнитьШаг.Доступность                 = Истина;
	Элементы.КМБОтметитьВыполнение.Доступность           = Истина;
	Элементы.КМБСброситьВыполнение.Доступность           = Истина;
	
	// временная мера до исправления ошибки видимости кнопок КМ
	Элементы.КМБТочкаОстановаУстановитьСнять.Доступность = СцТ_РежимВыполнения;
	
	Элементы.КМБЦветАвто.Доступность                     = Истина;
	Элементы.КМБЦветКрасный.Доступность                  = Истина;
	Элементы.КМБЦветЗеленый.Доступность                  = Истина;
	Элементы.КМБЦветСиний.Доступность                    = Истина;
	Элементы.КМБЦветОранжевый.Доступность                = Истина;
	Элементы.КМБЦветФиолетовый.Доступность               = Истина;
	
	// Управление доступностью кнопок, зависящих от типа шага и режима работы
	
	ТекущийТипШага = ТекущиеДанныеШага.ТипШага;
	
	// Кнопки, работающие для текущей строки
	ЭтоИнтерактивнаяГруппа = (ТекущийТипШага = ""ИнтерактивнаяАвтоГруппа"");
	Элементы.КМБПривязатьАвтогруппуКФорме.Доступность      = ЭтоИнтерактивнаяГруппа;
	Элементы.КМБАктивизироватьТестируемуюФорму.Доступность = ЭтоИнтерактивнаяГруппа;
	
	Элементы.КМБСтруктураИдентификации.Доступность         = (ТекущийТипШага = ""АвтоГруппа""
		И ТекущиеДанныеШага.ТипМетаданных <> ""РегистрыСведений"");
	
	Если СцТ_РежимВыполнения Тогда
		
		Элементы.КМБДобавитьВШаблонШагов.Доступность         = Ложь;
		Элементы.КМБПрименитьОсновнойШаблон.Доступность      = Ложь;
		Элементы.КМБВыбратьИПрименитьШаблон.Доступность      = Ложь;
		Элементы.КМБПрименитьШаблонПоУмолчанию.Доступность   = Ложь;
		Элементы.КМБПрименитьИсключенияИзШаблона.Доступность = Ложь;
		Элементы.КМБОбновитьДанныеШагов.Доступность          = Ложь;
		
		
	Иначе
		
		// Кнопки, работающие для текущей строки
		Если ТекущийТипШага = ""АвтоГруппа"" Тогда
			Элементы.КМБДобавитьВШаблонШагов.Доступность   = Истина;
		Иначе
			Элементы.КМБДобавитьВШаблонШагов.Доступность   = Ложь;
		КонецЕсли;
		
		// Кнопки, которые работают для выделенных строк
		Элементы.КМБПрименитьОсновнойШаблон.Доступность      = Истина;
		Элементы.КМБВыбратьИПрименитьШаблон.Доступность      = Истина;
		Элементы.КМБПрименитьШаблонПоУмолчанию.Доступность   = Истина;
		Элементы.КМБПрименитьИсключенияИзШаблона.Доступность = Истина;
		Элементы.КМБОбновитьДанныеШагов.Доступность          = Истина;
		
		Элементы.КМБМакрошагиДобавитьГруппуВМакрошаг.Доступность  = Истина;
		Элементы.КМБМакрошагиСоздатьНаОснованииГруппы.Доступность = Истина;
		
	КонецЕсли;
	
	
	Элементы.КМБМакрошагОткрыть.Доступность = (ТекущийТипШага = ""ВыполнитьМакрошаг"");
	
	// Всё отображение не связанное с кнопками меню
	ПодключитьОбработчикОжидания(""СцТ_ОтобразитьСостояниеТекущегоШагаПослеОжидания"", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.БлокСценария.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = ""БлокСценарияТочкаОстанова"" Тогда
		ТекДанные.ТочкаОстанова = (1 - ТекДанные.ТочкаОстанова);
	Иначе
		СцТ_ОткрытьФормуНастройкиШага(ВыбраннаяСтрока[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьНовыйШаг(ЭтотОбъект, Элемент, Копирование);
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьОписательПоложенияНовогоШагаВДереве(Знач УпрФ, Знач ТекущийУзел, Знач ПринудительноРядом = Ложь) Экспорт
	
	Если ТекущийУзел = Неопределено Тогда
		
		// Добавление выполняется в конец корня дерева
		ИдентификаторУзлаРодителя = Неопределено;
		ИндексВставки             = УпрФ.БлокСценария.ПолучитьЭлементы().Количество();
		ТипРодителя               = Неопределено;
		
	ИначеЕсли СцТ_ЭтоГрупповойШаг(ТекущийУзел.ТипШага) И НЕ ПринудительноРядом Тогда
		// Текущий узел групповой - добавление в конец подчиненных шагов
		ИдентификаторУзлаРодителя = ТекущийУзел.ПолучитьИдентификатор();
		ИндексВставки             = ТекущийУзел.ПолучитьЭлементы().Количество();
		ТипРодителя               = ТекущийУзел.ТипШага;
		
	Иначе
		// вставка выполняется сразу после узла, на которой стоит курсор
		РодительскийУзел = ТекущийУзел.ПолучитьРодителя();
		Если РодительскийУзел = Неопределено Тогда
			ИдентификаторУзлаРодителя = Неопределено;
			РодительскийУзел = УпрФ.БлокСценария;
			ТипРодителя               = Неопределено;
		Иначе
			ИдентификаторУзлаРодителя = РодительскийУзел.ПолучитьИдентификатор();
			ТипРодителя               = РодительскийУзел.ТипШага;
		КонецЕсли;
		
		ИндексВставки = РодительскийУзел.ПолучитьЭлементы().Индекс(ТекущийУзел) + 1;
		
	КонецЕсли;
	
	ОписательПоложенияШагаВДереве = Новый Структура;
	ОписательПоложенияШагаВДереве.Вставить(""ИдентификаторУзлаРодителя"", ИдентификаторУзлаРодителя);
	ОписательПоложенияШагаВДереве.Вставить(""ИндексВставки""            , ИндексВставки);
	ОписательПоложенияШагаВДереве.Вставить(""ИдентификаторШага""        , Строка(Новый УникальныйИдентификатор));
	ОписательПоложенияШагаВДереве.Вставить(""ТипРодителя""              , ТипРодителя);
	
	Возврат ОписательПоложенияШагаВДереве;
	
КонецФункции

&НаКлиенте
Процедура БлокСценарияПриИзменении(Элемент)
	
	ТекДанные = Элементы.БлокСценария.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СцТ_ПронумероватьШаги_НаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ПоказатьВопрос(Новый ОписаниеОповещения(""СцТ_УдалитьШагиСценарияПоЗапросуНаУдаление"", ЭтотОбъект),
		НСтр(""ru = 'Удалить шаги сценария?'""),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.БлокСценария.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипШага = ""ИнтерактивнаяАвтоГруппа""
		И ТипЗнч(ВыбранноеЗначение) = Тип(""Структура"") Тогда
		
		// Это привязка формы к интерактивной автогруппе
		ОписаниеВыбраннойФормы = ВыбранноеЗначение;
		
		Если ОписаниеВыбраннойФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СцТ_ФормыТестируемогоПриложения[ТекущиеДанные.ПолучитьИдентификатор()] =
			Новый Структура(""ФормаОбъект,ОкноОбъект,ТипОкна"",
				ОписаниеВыбраннойФормы.Объект,
				ОписаниеВыбраннойФормы.ОкноОбъект,
				ОписаниеВыбраннойФормы.ТипОкна);
		
		ТекущиеДанные.ЗаголовокФормы = ОписаниеВыбраннойФормы.Заголовок;
		ТекущиеДанные.ИмяФормы       = ОписаниеВыбраннойФормы.Имя;
		
		Если ПустаяСтрока(ТекущиеДанные.ЗаголовокФормы) Тогда
			ТекущиеДанные.ПредставлениеОбъекта = НСтр(""ru = '<без заголовка>'"");
			Если НЕ ПустаяСтрока(ТекущиеДанные.ИмяФормы) Тогда
				ТекущиеДанные.ПредставлениеОбъекта = ТекущиеДанные.ПредставлениеОбъекта
					+ "" ("" + ТекущиеДанные.ИмяФормы + "")"";
			КонецЕсли;
		Иначе
			ТекущиеДанные.ПредставлениеОбъекта = ТекущиеДанные.ЗаголовокФормы;
		КонецЕсли;
		
		Если ОписаниеВыбраннойФормы.ОписаниеРодительскогоОбъекта <> Неопределено Тогда
			СцТ_ДобавитьУзелВДеревоЗначения(
				ТекущиеДанные.Значение,
				""ЗаголовокОкнаФормы"",
				ОписаниеВыбраннойФормы.ОписаниеРодительскогоОбъекта.Заголовок);
		КонецЕсли;
		
		Если НЕ СцТ_ЗначениеВДереве(ТекущиеДанные.Значение, ""ИСТЗ_НаименованиеРучное"", Ложь, , Ложь) Тогда
			ТекущиеДанные.Наименование = НСтр(""ru = 'Форма """"'"")
				+ ?(ПустаяСтрока(ТекущиеДанные.ЗаголовокФормы), НСтр(""ru = '<без заголовка>'""), ТекущиеДанные.ЗаголовокФормы)
				+ """""""";
		КонецЕсли;
		
		ТекущиеДанные.АвтоОписание = НСтр(""ru = 'Интерактивная работа с формой """"'"")
			+ ?(ПустаяСтрока(ТекущиеДанные.ЗаголовокФормы), НСтр(""ru = '<без заголовка>'""), ТекущиеДанные.ЗаголовокФормы)
			+ """""""";
		
		СцТ_ОбновитьПодчиненныеШагиАвтоГруппы(ТекущиеДанные);
		
		СцТ_ОбновитьАвтоОписаниеШагаВДеревеБлокаСценария(ТекущиеДанные, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	МассивУзлов = СцТ_УзлыВерхнегоУровня(СцТ_ПреобразоватьВУзлыИзИдентификаторов(ПараметрыПеретаскивания.Значение, БлокСценария));
	Для каждого Узел Из МассивУзлов Цикл
		Если    Узел.ТипШага = ""Воспроизвести""
			ИЛИ Узел.ТипШага = ""СравнитьСЭталоном""
			ИЛИ Узел.ТипШага = ""СравнитьДвижения""
			ИЛИ Узел.ТипШага = ""ЗаменаСсылки"" Тогда
			Выполнение = Ложь;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип(""ДанныеФормыЭлементДерева"") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	
	УзелНазначения = СцТ_УзелБлокаСценария(Строка, ЭтотОбъект);
	Если  УзелНазначения         <> БлокСценария
		И УзелНазначения.ТипШага <> ""Группа""
		И УзелНазначения.ТипШага <> ""АвтоГруппа""
		И УзелНазначения.ТипШага <> ""ИнтерактивнаяАвтоГруппа""
		И УзелНазначения.ТипШага <> ""АвтоГруппаТаблицаФормы"" Тогда
		УзелНазначения = СцТ_УзелБлокаСценария(УзелНазначения.ПолучитьРодителя(), ЭтотОбъект);
	КонецЕсли;
	
	МассивУзлов = СцТ_УзлыВерхнегоУровня(
		СцТ_ПреобразоватьВУзлыИзИдентификаторов(ПараметрыПеретаскивания.Значение, БлокСценария));
	Для каждого Узел Из МассивУзлов Цикл
		
		РодительУзла = СцТ_УзелБлокаСценария(Узел.ПолучитьРодителя(), ЭтотОбъект);
		Если СцТ_УзелНаходитсяВИерархииУзла(УзелНазначения, Узел)
			ИЛИ УзелНазначения = РодительУзла
			ИЛИ Узел = УзелНазначения Тогда
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			Возврат;
		КонецЕсли;
		
		Если УзелНазначения = БлокСценария
			ИЛИ УзелНазначения.ТипШага = ""Группа""
			ИЛИ УзелНазначения.ТипШага = ""АвтоГруппа"" Тогда
			
			Если    Узел.ТипШага = ""НайтиФорму""
				ИЛИ Узел.ТипШага = ""ЗаполнитьОдинРеквизитФормы""
				ИЛИ Узел.ТипШага = ""ЗаполнитьРеквизитыФормы""
				ИЛИ Узел.ТипШага = ""ЗаполнитьКолонкуТаблицы""
				ИЛИ Узел.ТипШага = ""ЗаполнитьСтрокуТаблицы""
				ИЛИ Узел.ТипШага = ""НажатьКнопку""
				ИЛИ Узел.ТипШага = ""ПроверитьТабличныйДокумент""
				ИЛИ Узел.ТипШага = ""ЗакрытьКлиентскоеОкноФормы""
				ИЛИ Узел.ТипШага = ""АвтоГруппаТаблицаФормы""
				ИЛИ Узел.ТипШага = ""НайтиСтрокуТаблицы""
				ИЛИ Узел.ТипШага = ""АвтоГруппаТабличныйДокумент""
				ИЛИ Узел.ТипШага = ""ДействиеСТаблицей"" Тогда
				ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
				Возврат;
			КонецЕсли;
			
		ИначеЕсли РодительУзла <> БлокСценария Тогда
			
			Если УзелНазначения.ТипШага = РодительУзла.ТипШага Тогда
				ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип(""Число"") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеИсточника = БлокСценария.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
		
		ИдентификаторПриемника = Строка;
		ИдентификаторИсточника = ПараметрыПеретаскивания.Значение[0];
		
		Если ДанныеИсточника.ТипШага <> ""Группа""
			И ДанныеИсточника.ТипШага <> ""АвтоГруппа"" Тогда
			
			Элементы.БлокСценария.ТекущаяСтрока = ИдентификаторИсточника
			
		КонецЕсли;
		
		Если ИдентификаторПриемника = Неопределено Тогда
			ПриемникРодитель = БлокСценария;
			ИндексВставки = ПриемникРодитель.ПолучитьЭлементы().Количество();
		Иначе
			ДанныеПриемника = БлокСценария.НайтиПоИдентификатору(ИдентификаторПриемника);
			Если ДанныеПриемника.ТипШага <> ""Группа""
				И ДанныеПриемника.ТипШага <> ""АвтоГруппа"" Тогда
				
				ПриемникРодитель = ДанныеПриемника.ПолучитьРодителя();
				Если ПриемникРодитель = Неопределено Тогда
					ПриемникРодитель = БлокСценария;
				КонецЕсли;
				ИндексВставки = ПриемникРодитель.ПолучитьЭлементы().Индекс(ДанныеПриемника) + 1;
			Иначе
				ПриемникРодитель = ДанныеПриемника;
				ИндексВставки = ПриемникРодитель.ПолучитьЭлементы().Количество();
			КонецЕсли;
			
			Если ПриемникРодитель = Неопределено Тогда
				ПриемникРодитель = БлокСценария;
				ИндексВставки = ПриемникРодитель.ПолучитьЭлементы().Количество();
			КонецЕсли;
		
		КонецЕсли;
		
		СцТ_СкопироватьУзелСценария(ДанныеИсточника, ПриемникРодитель, ИндексВставки, Истина,,,,,,, ЭтотОбъект);
		
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ИдентификаторНовойСтроки = Неопределено;
		Для каждого СтрокаИсточника Из ПараметрыПеретаскивания.Значение Цикл
			СозданнаяСтрока = СцТ_ИтерационнойСозданиеУзловВДеревеСценария_НаКлиенте(СтрокаИсточника, Строка,,, ЭтотОбъект);
			Если СозданнаяСтрока <> Неопределено Тогда
				ИдентификаторНовойСтроки = СозданнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторНовойСтроки <> Неопределено Тогда
			Элементы.БлокСценария.ТекущаяСтрока = СозданнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность  = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияАктивностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БлокСценария.ТекущиеДанные;
	ЗначениеАктивности = ТекущиеДанные.Активность;
	Если ЗначениеАктивности = 2 Тогда
		ЗначениеАктивности       = 0;
		ТекущиеДанные.Активность = 0;
	КонецЕсли;
	
	СцТ_УстановитьФлагиУРодителей(ТекущиеДанные);
	СцТ_УстановитьФлагиУДочерних(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияВыполнитьВручнуюНажатие(Элемент, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	ДанныеКартинки = ДанныеСтроки.ВыполнитьВручную;
	
	Если ДанныеКартинки <> 2 Тогда
		ДанныеКартинки = НЕ ДанныеКартинки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДругихЭлементовФормы

&НаКлиенте
Процедура ТестируемоеПриложениеВыключеноНажатие(Элемент)
	
	ОбработкаКомандыЗапускаТестируемогоПриложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестируемоеПриложениеПодключеноНажатие(Элемент)
	
	Если НЕ СцТ_ТестируемоеПриложениеАктивно() Тогда
		ТекстОповещения = НСтр(""ru = 'Нет активного соединения с тестируемым приложением'"");
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Не удалось закрыть приложение'""),,ТекстОповещения,КартинкаИнформация32);
		СцТ_СостояниеТП();
		
	Иначе
		
		ПоказатьВопрос(Новый ОписаниеОповещения(""СцТ_ЗакрытьГлавноеОкноТПИРазорватьСоединение"", ЭтотОбъект),
			НСтр(""ru = 'Завершить работу тестируемого приложения?'""),
			РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОповещений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОПОВЕЩЕНИЙ

// Обрабатывает решение пользователя (да/нет) об удалении записи регистра сведений
// Параметры
//	КодВозврата - код нажатой клавиши в диалоге запроса на уделение записи РС;
//	ОписаниеЗаписи - ключ и имя метаданных удаляемой записи РС;
//
&НаКлиенте
Процедура СцТ_ОбработатьРешениеПользователяОбУдаленииЗаписиРегистра(КодВозврата, ОписаниеЗаписи) Экспорт
	
	Если КодВозвратаДиалога.Да Тогда
		СцТ_УдалитьЗаписьРегистра_НаСервере(ОписаниеЗаписи.Значение, ОписаниеЗаписи.ИмяМетаданных);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает решение пользователя (да/нет) об инвертировании пометки на
// удаление объекта данных
// Параметры
//	КодВозврата - Код кнопки, нажатой пользователем в диалоге запроса об инвертировании ПУ;
//	
&НаКлиенте
Процедура СцТ_ОбработатьРешениеПользователяОбИнвертированииПУ(КодВозврата, Ссылка) Экспорт
	
	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОперации = СцТ_ИнвертироватьПометкуУдаления_НаСервере(Ссылка);
	Если НЕ РезультатОперации Тогда
		ТекстСообщения = НСтр(""ru='Не удалось выполнить Пометку удаления'"");
		ПоказатьПредупреждение(, ТекстСообщения, 0, НСтр(""ru='Ошибка'""));
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает ввод пользователем числа для перехода к шагу с заданным номером номеру
// Параметры
//	НомерШагаЧисло - номер шага, к которому требуется выполнить переход;
//	ДопПараметры - дополнительные параметры;
//
&НаКлиенте
Процедура СцТ_ОбработатьПереходКШагуПоНомеру(НомерШагаЧисло, ДопПараметры) Экспорт
	
	Если НомерШагаЧисло = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденыйУзел = СцТ_НайтиУзелШагаПоНомеру(НомерШагаЧисло);
	
	Если НайденыйУзел = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр(""ru = 'Шаг с указанным номером не найден'""));
	Иначе
		СцТ_РазвернутьУзлыНаПутиОтУзлаККорню(НайденыйУзел, Элементы.БлокСценария);
		Элементы.БлокСценария.ТекущаяСтрока = НайденыйУзел.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

// Сбрасывает настройки активности реквизитов шагов БЛ
// Параметры
//	КодВозврата - код возврата диалога запроса разрешения на сброс настроек;
//	ШагиДляОбновления - данные обноавляемых шагов;
//
&НаКлиенте
Процедура СцТ_СброситьАктивностьРеквизитов(КодВозврата, ДопПараметры) Экспорт
	
	
	ШагиДляОбновления = ДопПараметры.ШагиДляОбновления;
	ВызвавшаяФорма    = ДопПараметры.ВызвавшаяФорма;
	
	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СериализованныеШаги = Новый Соответствие;
	Для каждого ИдентификаторУзла Из ШагиДляОбновления Цикл
		УзелШага = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ИдентификаторУзла);
		СериализованныеШаги[ИдентификаторУзла] = СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(УзелШага);
	КонецЦикла;
	
	СцТ_ПрименитьИсключенияКШагамБЛ_НаСервере(СериализованныеШаги, АдресНачальныхУстановокШагов);
	
	Для каждого КлючЗначение Из СериализованныеШаги Цикл
		УзелШага = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(КлючЗначение.Ключ);
		СцТ_ЗаполнитьШагНаКлиентеПоСтруктуре_НаКлиенте(УзелШага, КлючЗначение.Значение);
	КонецЦикла;
	
	ПодключитьОбработчикОжидания(""СцТ_ОтобразитьСостояниеТекущегоШагаПослеОжидания"", 0.1, Истина);
	
	ПоказатьОповещениеПользователя(
		НСтр(""ru = 'Применение исключений'""),
		,
		НСтр(""ru = 'Исключения применены к выбранным шагам бизнес-логики'""),
		КартинкаИнформация32);
	
КонецПроцедуры

// Выполняет запуск тестируемого приложения по оповещению.
//	ПараметрыПриложения (Структура) - параметры требуемого приложения;
//	ДоПараметры (Произвольный) - дополнительные параметры;
//
&НаКлиенте
Процедура СцТ_ЗапуститьТребуемоеПриложениеПоКомандеИнтерфейса(ПараметрыПриложения, ДопПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыПриложения) <> Тип(""Структура"") Тогда
		
		СцТ_СостояниеТП();
		
		Возврат;
		
	КонецЕсли;
	
	РежимЗапуска = ПараметрыПриложения.РежимЗапуска;
	
	
	Если РежимЗапуска = ""ИзменитьНастройкиЗапуска"" Тогда
		
		ОткрытьФорму(ПутьКФормам + ""ПараметрыЗапускаТестируемогоКлиента"",
			ДопПараметры.ТранзитныеПараметры.ПараметрыЗапуска,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения(""СцТ_ЗапуститьТребуемоеПриложениеПоКомандеИнтерфейса"", ЭтотОбъект, ДопПараметры));
			
		СцТ_СостояниеТП();
		
		Возврат;
		
	ИначеЕсли РежимЗапуска = ""ПодключитьСуществующий"" Тогда
		
		СцТ_Контроллер = ДопПараметры.ТранзитныеПараметры.ОписаниеЗапущеногоПриложения.СцТ_Контроллер;
		СцТ_ПрименитьИзмененияПараметровЗапускаТП(ДопПараметры.ТранзитныеПараметры.ПараметрыЗапуска);
		
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Подключение к тестируемому приложению'""),
			,
			НСтр(""ru = 'Установлено подключение к существущему тестируемому приложению'""),
			КартинкаИнформация32);
			
		СцТ_СостояниеТП();
		
		Если ДопПараметры.Свойство(""ТекущиеДанные"") И ДопПараметры.Свойство(""УпрФорма"") Тогда
			ДопПараметры.УпрФорма.ПродолжениеПодготовкиКВыполнениюШага(ДопПараметры.ТекущиеДанные);
		КонецЕсли;
		
		Возврат;
		
	Иначе
		//РежимЗапуска = ""Запуск"";
		
		Если ПараметрыПриложения.ПараметрыЗапуска.Свойство(""ВыполнятьЗамерПроизводительности"") Тогда
			ВыполнятьЗамерПроизводительности = ПараметрыПриложения.ПараметрыЗапуска.ВыполнятьЗамерПроизводительности;
		КонецЕсли;
		
		Если ПараметрыПриложения.Свойство(""ОписаниеЗапущеногоПриложения"") Тогда
			
			ПараметрыФормыВопроса = Новый Структура;
			ПараметрыФормыВопроса.Вставить(""ЗаголовокОкнаПриложения"",
				ПараметрыПриложения.ОписаниеЗапущеногоПриложения.ЗаголовокОкна);
			ПараметрыФормыВопроса.Вставить(""ПортТестируемогоКлиента"",
				ПараметрыПриложения.ПараметрыЗапуска.ПортТестируемогоКлиента);
			//ПараметрыФормыВопроса.Вставить(""ТранзитныеПараметры"", ПараметрыПриложения);
			
			Если ДопПараметры = Неопределено Тогда
				ДопПараметры = Новый Структура;
			КонецЕсли;
			ДопПараметры.Вставить(""ТранзитныеПараметры"", ПараметрыПриложения);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(""СцТ_ЗапуститьТребуемоеПриложениеПоКомандеИнтерфейса"",
				ЭтотОбъект,
				ДопПараметры);
			
			ФормаВопроса = ОткрытьФорму(ПутьКФормам + ""ВопросОПодключенииКСуществующемуТП"",
				ПараметрыФормыВопроса,
				ЭтотОбъект,,,,
				ОписаниеОповещения);
			
			ФормаВопроса.ОсновноеОкно = ПараметрыПриложения.ОписаниеЗапущеногоПриложения.ОсновноеОкно;
			
			Возврат;
			
		Иначе
			
			СцТ_ЗапуститьТребуемоеПриложение(ПараметрыПриложения.ПараметрыЗапуска,,, ДопПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет подключение к веб-клиенту.
// Параметры:
//	URL (Строка) - URL веб-клиента;
//	ДопПараметры (Произвольный) - дополнительные параметры;
//
&НаКлиенте
Функция СцТ_ПодключитьсяКВебКлиенту(URL, АвтоматическийЗапуск = Неопределено) Экспорт
	
	Если URL = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АвтоматическийЗапуск = Истина Тогда
		СцТ_Контроллер = СцТ_УстановитьПодключениеКТестируемомуКлиенту(120);
	Иначе
		СцТ_Контроллер = СцТ_УстановитьПодключениеКТестируемомуКлиенту();
	КонецЕсли;
	
	Если ТипЗнч(СцТ_Контроллер) = Тип(""Строка"") Тогда
		
		Если АвтоматическийЗапуск <> Истина Тогда
			ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, СцТ_Контроллер, КартинкаИнформация32);
			СцТ_Контроллер = Неопределено;
		Иначе
			ТекстСообщения = СцТ_Контроллер;
			СцТ_Контроллер = Неопределено;
			Возврат СцТ_Контроллер;
		КонецЕсли;
		
	ИначеЕсли СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр(""ru = 'Не удалось запустить тестируемое приложение из-за ошибки подключения.
			|Возможно, неверно указаны параметры тестируемого приложения'"");
		Если АвтоматическийЗапуск <> Истина Тогда
			ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),, ТекстСообщения, КартинкаИнформация32);
		Иначе
			Возврат ТекстСообщения;
		КонецЕсли;
	ИначеЕсли АвтоматическийЗапуск <> Истина Тогда
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Тестируемое приложение запущено'""),,, КартинкаИнформация32);
	КонецЕсли;
	
	Возврат СцТ_Контроллер;
	
КонецФункции

// Обрабатывает выбор пользователем шага при добавлении
// Параметры
//	ВыбранныйЭлемент - выбранный элемент списка типов шагов;
//	ДопПараметры - дополнительные параметры;
//
&НаКлиенте
Процедура СцТ_ОбработатьВыборТипаДобавляемогоШага(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ТипЗнч(ДопПараметры) = Тип(""Структура"") И ДопПараметры.Свойство(""ВызвавшаяФорма"") Тогда
		ВызвавшаяФорма = ДопПараметры.ВызвавшаяФорма;
	Иначе
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ВызвавшаяФорма.Элементы.БлокСценария.ВыделенныеСтроки.Очистить();
		
		НовыйШаг = СцТ_ВставитьШаг_НаКлиенте(
			ВызвавшаяФорма.Элементы.БлокСценария.ТекущиеДанные,
			ВыбранныйЭлемент.Значение,
			ВызвавшаяФорма);
		
		Если НовыйШаг = Неопределено Тогда
			// Если при добавлении шага прозошла ошибка,
			// тогда прервать добавление шага
			Возврат;
		Иначе
			
			ИдентификаторДобавленнойСтроки      = НовыйШаг.ПолучитьИдентификатор();
			ВызвавшаяФорма.Элементы.БлокСценария.ТекущаяСтрока = ИдентификаторДобавленнойСтроки;
			ВызвавшаяФорма.Модифицированность       = Истина;
			
		КонецЕсли;
		
		СцТ_ПронумероватьШаги_НаКлиенте(,, ВызвавшаяФорма);
		СцТ_ОбновитьАвтоОписаниеШагаВДеревеБлокаСценария(ВызвавшаяФорма.Элементы.БлокСценария.ТекущиеДанные, ВызвавшаяФорма);
		
		СцТ_ОткрытьФормуНастройкиШага(ИдентификаторДобавленнойСтроки, ВызвавшаяФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОбработатьВыборТипаНовогоШага(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	//Если ТипЗнч(ДопПараметры) = Тип(""Структура"") И ДопПараметры.Свойство(""ВызвавшаяФорма"") Тогда
	//	ВызвавшаяФорма = ДопПараметры.ВызвавшаяФорма;
	//Иначе
	//	ТекстПредупреждения = НСтр(""ru = 'Ошибка инструмента'"");
	//КонецЕсли;
	//
	//Если ВыбранныйЭлемент = Неопределено Тогда
	//	// пользователь отказался от выбора шага
	//	Возврат;
	//КонецЕсли;
	//
	//// СДНШ - Структура параметров нового шага
	//СДНШ = СцТ_ПодготовитьСтруктуруДанныхНовогоШага(
	//	ВыбранныйЭлемент.Значение,
	//	ДопПараметры.ОписательПоложенияШагаВДереве,,,ДопПараметры.ВызвавшаяФорма);
	//
	//СцТ_ПодготовитьИОткрытьФормуНовогоШага(
	//	ДопПараметры.ВызвавшаяФорма,
	//	СДНШ,
	//	ДопПараметры.ОписательПоложенияШагаВДереве);
	
	Если ТипЗнч(ДопПараметры) = Тип(""Структура"") И ДопПараметры.Свойство(""ВызвавшаяФорма"") Тогда
		ВызвавшаяФорма = ДопПараметры.ВызвавшаяФорма;
	Иначе
		ТекстПредупреждения = НСтр(""ru = 'Ошибка инструмента'"");
	КонецЕсли;
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		// пользователь отказался от выбора шага
		Возврат;
	КонецЕсли;
	
	// СДНШ - Структура параметров нового шага
	СДНШ = СцТ_ПодготовитьСтруктуруДанныхНовогоШага(
		ВыбранныйЭлемент,
		ДопПараметры.ОписательПоложенияШагаВДереве,,,ДопПараметры.ВызвавшаяФорма);
	
	СцТ_ПодготовитьИОткрытьФормуНовогоШага(
		ДопПараметры.ВызвавшаяФорма,
		СДНШ,
		ДопПараметры.ОписательПоложенияШагаВДереве);

	
КонецПроцедуры

// Выполняет обновление данных шагов бизнес-логики после выбора пользователем
// соответствующих настроек
// Параметры
//	НастройкаОбновления - настройка обновления шагов БЛ;
//	ШагиДляОбновления - идентификаторы шагов, которые необходимо обновить;
//
&НаКлиенте
Процедура СцТ_ВыполнитьОбновлениеШаговБЛ(НастройкаОбновления, ШагиДляОбновления) Экспорт
	
	Если ТипЗнч(НастройкаОбновления) <> Тип(""Структура"") Тогда
		Возврат;
	КонецЕсли;
	
	СериализованныеШаги = Новый Соответствие;
	Для каждого ИдентификаторУзла Из ШагиДляОбновления Цикл
		УзелШага = БлокСценария.НайтиПоИдентификатору(ИдентификаторУзла);
		СериализованныеШаги[ИдентификаторУзла] = СцТ_ПреобразоватьСтрокуСценарияВСтруктуруДляОбновления(УзелШага);
	КонецЦикла;
	
	ПротоколОбновления = """";
	СцТ_ОбновитьДанныеШаговБЛ_НаСервере(
		СериализованныеШаги,
		АдресНачальныхУстановокШагов,
		НастройкаОбновления,
		ПротоколОбновления,
		ГлобальныеПараметры,
		АдрестаблицыСсылок,
		АдресТаблицыКлючей);
	
	Для каждого КлючЗначение Из СериализованныеШаги Цикл
		УзелШага = БлокСценария.НайтиПоИдентификатору(КлючЗначение.Ключ);
		СцТ_ЗаполнитьШагНаКлиентеПоСтруктуре_НаКлиенте(УзелШага, КлючЗначение.Значение);
	КонецЦикла;
	
	//Если ПустаяСтрока(ПротоколОбновления) Тогда
	//	ПоказатьПредупреждение(, НСтр(""ru = 'Данные шагов бизнес-логики не нуждаются в обновлении'""));
	//Иначе
	//	СцТ_ОбновитьАвтоОписаниеШагаВДеревеБлокаСценария(Элементы.БлокСценария.ТекущиеДанные);
	//	Модифицированность = Истина;
	//	ТекДок = Новый ТекстовыйДокумент;
	//	ТекДок.УстановитьТекст(ПротоколОбновления);
	//	ТекДок.Показать(НСтр(""ru = 'Протокол обновления шагов бизнес-логики'""));
	//КонецЕсли;
	ПоказатьПредупреждение(, НСтр(""ru = 'Данные успешно обновлены'""));
	
КонецПроцедуры

// Выполняет обработку загрузки нового сценария
// Параметры
//	СтруктураСАдресами - структура с адресами необходимых данных;
//	ДействиеОткрытия (Строка) - действие, для которого выполняется открытие сценария;
//
&НаКлиенте
Процедура СцТ_ОбработатьЗагрузкуНовогоСценария(СтруктураСАдресами, ДействиеОткрытия) Экспорт
	
	Если ТипЗнч(СтруктураСАдресами) <> Тип(""Структура"") Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ФормыТестируемогоПриложения = Новый Соответствие;
	ГлобальныеПараметры             = Новый Структура;
	
	СцТ_Контроллер = Неопределено;
	
	Если СцТ_JSONЗапись<> Неопределено Тогда
		СцТ_JSONЗапись.Закрыть();
		СцТ_JSONЗапись = Неопределено;
	КонецЕсли;
	
	СцТ_РежимВыполнения = (ДействиеОткрытия = ""Выполнение"");
	СцТ_УправлениеРежимомВыполнения();
	
	Сообщения = """";
	// Необходимо очистить дерево блока сценария,
	// чтобы не оно не передавалось на сервер при серверном вызове
	БлокСценария.ПолучитьЭлементы().Очистить();
	СцТ_ОбновитьОбработкуПослеЗагрузкиНовогоСценария(СтруктураСАдресами, Сообщения);
	
	СцТ_ИтерационноУстановитьФлагВыполненоУВетки();
	
	СцТ_УстановитьЗаголовокФормы_НаКлиенте();
	
	Если НЕ СцТ_РежимВыполнения Тогда
		
		// Установка начального шага по УИШ начального шага
		НачальныйШаг = СцТ_НайтиНужныйШагПоУИШ_НаКлиенте(БлокСценария, СтруктураСАдресами.НомерШагаДляНачальнойУстановки);
		Если НачальныйШаг <> Неопределено Тогда
			СцТ_РазвернутьУзлыНаПутиОтУзлаККорню(НачальныйШаг, Элементы.БлокСценария);
			Элементы.БлокСценария.ТекущаяСтрока = НачальныйШаг.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	Если СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"" И НЕ ПустаяСтрока(Сообщения) Тогда
		ОткрытьФорму(ПутьКФормам + ""Сообщения"",
			Новый Структура(""ЗаголовокФормы,ТекстСообщения,ПутьКФормам"",
				НСтр(""ru = 'Предупреждение'""),
				Сообщения,
				ПутьКФормам),
			ЭтотОбъект);
	КонецЕсли;
	
	СцТ_ОбновитьИмяФайлаПротокола();
	
	// Новый идентификатор веб-клиента
	ИдентификаторВебКлиента = ""WCID"" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), ""-"", """");
	
	Состояние();
	
	Если СцТ_ВидДействияАвтоматическогоЗапуска = ""ОткрытьСценарийВРежимеЗаписи"" Тогда
		// Обработка открыта в режиме записи, на этом выполнение автоматического
		// действия завершается
		ТекстСообщения = НСтр(""ru = 'Сценарий успешно открыт в режиме записи'"");
		СцТ_ИнформационноеСообщение(""OK"", ТекстСообщения, """");
		
		// Далее работа пользователя выполняется в обычном режиме
		СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"";
		
	ИначеЕсли СцТ_ВидДействияАвтоматическогоЗапуска = ""ОткрытьСценарийВРежимеВыполнения"" Тогда
		// Обработка открыта в режиме выполнения, на этом выполнение автоматического
		// действия завершается
		ТекстСообщения = НСтр(""ru = 'Сценарий успешно открыт в режиме выполнения'"");
		СцТ_ИнформационноеСообщение(""OK"", ТекстСообщения, """");
		
		// Далее работа пользователя выполняется в обычном режиме
		СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"";
		
	ИначеЕсли СцТ_ВидДействияАвтоматическогоЗапуска = ""ОткрытьСценарийДляВыполнения"" Тогда
		// Обработка открыта в режиме выполнения, на этом выполнение автоматического
		// действия завершается
		ТекстСообщения = НСтр(""ru = 'Сценарий успешно открыт в режиме выполнения'"");
		СцТ_ИнформационноеСообщение(""OK"", ТекстСообщения, """");
		
		
	ИначеЕсли СцТ_ВидДействияАвтоматическогоЗапуска = ""ВыполнитьИнтерактивныеШаги""
		ИЛИ СцТ_ВидДействияАвтоматическогоЗапуска = ""ВыполнитьСценарий"" Тогда
		
		// Запуск выполнения в автоматическом режиме.
		// Тестируемое приложение будет запущено при первой необходимости
		// в процессе выполнения шагов сценария.
		
		ШагиСценарияПервогоУровня = БлокСценария.ПолучитьЭлементы();
		Если ШагиСценарияПервогоУровня.Количество() = 0 Тогда
			ТекстСообщения = НСтр(""ru = 'Сценарий не содержит шагов'"");
			СцТ_ИнформационноеСообщение(""ERR"", ТекстСообщения, ТекстСообщения);
			СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
			Возврат;
			
		Иначе
			ТекстСообщения = НСтр(""ru = 'Файл сценария открыт успешно'"");
			СцТ_ИнформационноеСообщение(""OK"", ТекстСообщения, ТекстСообщения);
			
			// Выполнение автоматического запуска сценария
			
			СцТ_ИдентификаторТекущегоШагаСценария = ШагиСценарияПервогоУровня[0].ПолучитьИдентификатор();
			
			СцТ_ОстановкаПоИнициативеПользователя = Ложь;
			СцТ_ВыполнениеТеста                   = ""АвтоматическийРежим"";
			
			СцТ_ТаблицыТестируемогоПриложения = Новый Соответствие;
			Элементы.ОстановитьВыполнение.Доступность = Истина;
			
			ПолучитьФормуВыполненияИВыполнить();
			
		КонецЕсли;
		
	Иначе
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Загружен сценарий'""),
			,
			СтруктураСАдресами.ФайлСценария,
			КартинкаИнформация32);
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыГлобальныхПараметров(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ГлобальныеПараметры = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеЗакрытияОкнаВыбораМакрошага(Результат, ДопПараметры) Экспорт
	
	// В результате возвращается идентификатор макрошага
	
	Если Результат <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить(""Действие""             , ""ДобавитьШаги"");
		ПараметрыФормы.Вставить(""УИШ""                  , Результат);
		ПараметрыФормы.Вставить(""АдресДереваМакрошагов"", АдресДереваМакрошагов);
		ПараметрыФормы.Вставить(""ПутьКФормам""          , ПутьКФормам);
		ПараметрыФормы.Вставить(""РежимПрогона""         , СцТ_РежимВыполнения);
		
		ПараметрыФормы.Вставить(""РежимСовместимости838"", РежимСовместимости838);
		
		ФормаМакрошага = ОткрытьФорму(
			ПутьКФормам + ""Макрошаг"",
			ПараметрыФормы,
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.Независимый);
			
		ФормаМакрошага.СцТ_ГлавнаяФорма = ЭтотОбъект;
		//ФормаМакрошага.СцТ_ФормыТестируемогоПриложения = Новый Соответствие;
		ФормаМакрошага.СцТ_ДобавитьДанныеУзлаВМакрошаг(
			ДопПараметры.ДанныеДобавляемогоШага,
			ФормаМакрошага.БлокСценария);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеИзмененияСтруктурыИдентификацииВШагеГруппы(Результат, РедактируемаяСтрока) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НужнаяСтруктура = Новый Структура(""СтруктураИдентификации, СтрокаИдентификатора, Представление, ТипМД, ИмяМД, СинонимМД, ПоискПоЗапросу, ТекстЗапроса"");
	
	НужнаяСтруктура.СтрокаИдентификатора = Результат.Идентификатор;
	НужнаяСтруктура.Представление        = Результат.Представление;
	НужнаяСтруктура.ТипМД                = Результат.ТипМД;
	НужнаяСтруктура.ИмяМД                = Результат.ИмяМД;
	НужнаяСтруктура.СинонимМД            = Результат.СинонимМД;
	НужнаяСтруктура.ПоискПоЗапросу       = Результат.ПоискПоЗапросу;
	НужнаяСтруктура.ТекстЗапроса         = Результат.ТекстЗапроса;
	
	НужнаяСтруктура.СтруктураИдентификации = Новый Массив;
	Для каждого СтрИдент Из Результат.СтруктураИдентификации Цикл
		НовыйКлюч = Новый Структура;;
		НовыйКлюч.Вставить(""Имя""            , СтрИдент.Имя);
		НовыйКлюч.Вставить(""Значение""       , СтрИдент.Значение);
		НовыйКлюч.Вставить(""СокрТипЗначения"", СтрИдент.СокрТипЗначения);
		НовыйКлюч.Вставить(""Представление""  , """");
		
		НужнаяСтруктура.СтруктураИдентификации.Добавить(НовыйКлюч);
		// Представления может и не быть
	КонецЦикла;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(НужнаяСтруктура);
	
	ИзменитьИлиДобавитьСсылкиШага(МассивПараметров, РедактируемаяСтрока.УИШ, АдресТаблицыСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИнициализацииФайлаПротокола(РезультатИнициализации, ДопПараметры) Экспорт
	
	Если РезультатИнициализации <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(""ПослеПроверкиСуществованияФайлаПротокола"", ЭтотОбъект);
		РезультатИнициализации.НачатьПроверкуСуществования(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаПротокола(РезультатПроверки, ДопПараметры) Экспорт
	
	Если НЕ РезультатПроверки Тогда
		ТекстВопроса = НСтр(""ru = 'Файл протокола не найден. Выбрать файл вручную?'"");
		ОписаниеОповещения = Новый ОписаниеОповещения(""ПослеОтветаНаВопросОбОтсутствииФайлаПротокола"", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		СцТ_ОткрытьПротокол(ИмяФайлаПротокола);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбОтсутствииФайлаПротокола(РезультатДиалога, ДопПараметры) Экспорт
	
	Если РезультатДиалога = КодВозвратаДиалога.Да Тогда
		ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		МаскаВсеФайлы = ПолучитьМаскуВсеФайлы();
		ДВФ.Фильтр = НСтр(""ru = 'Файлы протокола (*.json)|*.json|Все файлы|"" + МаскаВсеФайлы + ""'"");
		ДВФ.МножественныйВыбор          = Ложь;
		ДВФ.ПроверятьСуществованиеФайла = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(""СцТ_ПослеВыбораФайлаПротокола"", ЭтотОбъект);
		
		ДВФ.Показать(ОписаниеОповещения);
		
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеВыбораФайлаПротокола(МассивВыбранныхФайлов, ДопПараметры) Экспорт
	
	Если МассивВыбранныхФайлов <> Неопределено И МассивВыбранныхФайлов.Количество() > 0 Тогда
		ИмяФайлаПротокола = МассивВыбранныхФайлов[0];
		СцТ_ОткрытьПротокол(ИмяФайлаПротокола);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПриПомещенииФайлаСценария(
	Результат,
	АдресФайла,
	ВыбранноеИмяФайла,
	ДействиеОткрытия) Экспорт
	
	Если СцТ_ОстановленИзКонфигурацииСТ() Тогда
		СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке  = """";
	СтруктураСАдресами = ФормаОткрытия.СцТ_ЗагрузкаСценария(АдресФайла, СообщениеОбОшибке);
	
	Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
		
		ТекстСообщения = НСтр(""ru = 'Ошибка при чтении файла сценария: %1'"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", СообщениеОбОшибке);
		СцТ_ИнформационноеСообщение(""ERR"", ТекстСообщения, ТекстСообщения);
		СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
		Возврат;
		
	КонецЕсли;
	
	Если СцТ_ОстановленИзКонфигурацииСТ() Тогда
		СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
		Возврат;
	КонецЕсли;
	
	СтруктураСАдресами.Вставить(""ФайлСценария"", ВыбранноеИмяФайла);
	
	СцТ_ОбработатьЗагрузкуНовогоСценария(СтруктураСАдресами, ДействиеОткрытия);
	
	Если СцТ_ВнешнееУправлениеОбработкой = ""Непосредственное"" Тогда
		Оповестить(""СцТ_ВОбработкуЗагруженСценарийДляАвтоматичсекогоВыполнения"",, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиКоманд

#Область КомандыДляЭталоннойБазы

&НаКлиенте
Процедура ОкноЭталоннойБазы(Команда)
	
	Элементы.ПоказатьОкноЭталоннойБазы.Пометка = НЕ Элементы.ПоказатьОкноЭталоннойБазы.Пометка;
	Элементы.СвертываемаяГруппаЭталоннойБазы.Видимость = Элементы.ПоказатьОкноЭталоннойБазы.Пометка;

	Если Элементы.ПоказатьОкноЭталоннойБазы.Пометка Тогда
		ПоказатьОповещениеПользователя(
			НСтр(""ru = 'Ждите ...'""),,
			НСтр(""ru = 'Выполняется подготовка данных эталонной базы'""));
		
		СцТ_ОтобразитьДеревоЭталоннойБазы_НаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	СцТ_УправлениеОтметкамиЭталоннойБазы_НаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	СцТ_УправлениеОтметкамиЭталоннойБазы_НаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеЭталоннойБазы(Команда)
	
	// Подготовка данных
	ПараметрыФормыНастройкиЭталоннойБазы = Новый Структура;
	ПараметрыФормыНастройкиЭталоннойБазы.Вставить(""АдресДереваНастройки""         , АдресДереваНастроекЭталоннойБазы);
	ПараметрыФормыНастройкиЭталоннойБазы.Вставить(""ЗакрыватьПриЗакрытииВладельца"", Истина);
	ПараметрыФормыНастройкиЭталоннойБазы.Вставить(""ТипМетаданныхЭталоннойБазы""   , ТипМетаданныхЭталоннойБазы);
	
	// Открытие формы настройки эталонной базы
	ФормаНастройкиШаговПоУмолчанию = ОткрытьФорму(ПутьКФормам + ""НастройкаЭталоннойБазы"",
		ПараметрыФормыНастройкиЭталоннойБазы,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОтмеченныеВСценарий(Команда)
	
	ТаблицаЭталоннойБазы = СцТ_ПолучитьДанныеЭталоннойБазы_НаКлиенте();
	
	Для каждого ВеткаДерева Из ТаблицаЭталоннойБазы.ПолучитьЭлементы() Цикл
		
		Если ВеткаДерева.Отметка Тогда
			СцТ_АвтоматическиСоздатьСценарийДляЭлемента_НаКлиенте(ВеткаДерева, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВСценарий(Команда)
	
	СцТ_АвтоматическиСоздатьСценарийДляЭлемента_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуЭталоннойБазы(Команда)
	
	СцТ_ОтобразитьДеревоЭталоннойБазы_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлементДереваЭталоннойБазы(Команда)
	
	СцТ_ОбработчикВыбораИлиРедактированияДереваЭталоннойБазы_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЭлементЭталоннойБазы(Команда)
	
	СцТ_ОбработчикПометитьНаУдалениеЭлементЭталоннойБазы_НаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область КомандыДляСценария

&НаКлиенте
Процедура ДобавитьГрупповойШаг(Команда)
	
	ТекущиеДанные = Элементы.БлокСценария.ТекущиеДанные;
	
	ОписательПоложенияШагаВДереве = ПолучитьОписательПоложенияНовогоШагаВДереве(ЭтотОбъект, ТекущиеДанные);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(""ОписательПоложенияШагаВДереве"", ОписательПоложенияШагаВДереве);
	ДопПараметры.Вставить(""ВызвавшаяФорма""               , ЭтотОбъект);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(""СцТ_ОбработатьВыборТипаНовогоШага"", ЭтотОбъект, ДопПараметры);
	
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ТипШага <> ""Группа""
		И ТекущиеДанные.ТипШага <> ""АвтоГруппа""
		И ТекущиеДанные.ТипШага <> ""ИнтерактивнаяАвтоГруппа""
		И ТекущиеДанные.ТипШага <> ""Повторение""
		И ТекущиеДанные.ТипШага <> ""Условие"" Тогда
		
		ДанныеШага = ТекущиеДанные.ПолучитьРодителя();
			
	Иначе
		ДанныеШага = ТекущиеДанные;
		
	КонецЕсли;
	
	Если ДанныеШага = Неопределено Тогда
		
		ТипГруппы     = ""Группа"";
		
	Иначе
		
		ТипГруппы     = ДанныеШага.ТипШага;
		
	КонецЕсли;
	
	ПФ = Новый Структура;
	ПФ.Вставить(""ТипРодителя""    , ТипГруппы);
	ПФ.Вставить(""ТипМД""          , """");
	ПФ.Вставить(""ДляМакрошага""   , Ложь);
	ПФ.Вставить(""ВставитьГруппу"" , Истина);
	
	// Открытие формы настройки эталонной базы
	ФормаВыбораТипаШага = ОткрытьФорму(ПутьКФормам + ""ВыборТипаШага"",
		ПФ,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
		
	
КонецПроцедуры

&НаКлиенте
Процедура АктивностьШаговУстановить(Команда)
	
	ТекДанные = Элементы.БлокСценария.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзлыВерхнегоУровня = СцТ_УзлыВерхнегоУровня(
		СцТ_ПреобразоватьВУзлыИзИдентификаторов(Элементы.БлокСценария.ВыделенныеСтроки, БлокСценария));
	
	Для каждого Узел Из УзлыВерхнегоУровня Цикл
		СцТ_УстановитьАктивностьШага(Узел, 1);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивностьШаговСбросить(Команда)
	
	ТекДанные = Элементы.БлокСценария.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзлыВерхнегоУровня = СцТ_УзлыВерхнегоУровня(
		СцТ_ПреобразоватьВУзлыИзИдентификаторов(Элементы.БлокСценария.ВыделенныеСтроки, БлокСценария));
	
	Для каждого Узел Из УзлыВерхнегоУровня Цикл
		СцТ_УстановитьАктивностьШага(Узел, 0);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовыситьУровень(Команда)
	
	ТекущийУзел = Элементы.БлокСценария.ТекущиеДанные;
	Если НЕ СцТ_ПовышениеУровняУзлаВозможно(ТекущийУзел, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ПовыситьУровеньУзла_НаКлиенте(ТекущийУзел, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияИзменить(Команда)
	
	Если Элементы.БлокСценария.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ОткрытьФормуНастройкиШага(Элементы.БлокСценария.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровень(Команда)
	
	ТекущийУзел = Элементы.БлокСценария.ТекущиеДанные;
	Если НЕ СцТ_ПонижениеУровняУзлаВозможно(ТекущийУзел, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ПонизитьУровеньУзла_НаКлиенте(ТекущийУзел, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьБлокСценария(Команда)
	
	СцТ_ОбработатьСохранениеСценария(0, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьБлокСценарияКак(Команда)
	
	СцТ_ОбработатьСохранениеСценария(0, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБлокСценария(Команда)
	
	СцТ_ОбработатьСохранениеСценария(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБлокСценарияДляПрогона(Команда)
	
	СцТ_ОбработатьСохранениеСценария(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШагиИзСценария(Команда)
	
	СцТ_ОткрытьФайлСценария(""ИмпортШагов"");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШагиПоУмолчанию(Команда)
	
	// Подготовка данных
	ПараметрыФормыНастройкиШагов = Новый Структура;
	ПараметрыФормыНастройкиШагов.Вставить(""АдресХранилищаДереваНастроек"" , АдресНачальныхУстановокШагов);
	ПараметрыФормыНастройкиШагов.Вставить(""СписокТиповШагов""             , СписокТиповШагов);
	ПараметрыФормыНастройкиШагов.Вставить(""ЗакрыватьПриЗакрытииВладельца"", Истина);
	
	ПараметрыФормыНастройкиШагов.Вставить(""РежимСовместимости838"", РежимСовместимости838);
	
	ФормаНастройкиШаговПоУмолчанию = ОткрытьФорму(ПутьКФормам + ""НастройкаШаговПоУмолчанию"",
		ПараметрыФормыНастройкиШагов,
		ЭтотОбъект);
		
	ФормаНастройкиШаговПоУмолчанию.СцТ_ГлавнаяФорма = ЭтотОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныШагов(Команда)
	
	ПараметрыФормыНастройкиШагов = Новый Структура;
	ПараметрыФормыНастройкиШагов.Вставить(""АдресХранилищаТаблицыШаблоновШагов"", АдресШаблоновШагов);
	ПараметрыФормыНастройкиШагов.Вставить(""РежимОткрытия""                     , ""Просмотр"");
	ПараметрыФормыНастройкиШагов.Вставить(""ЗакрыватьПриЗакрытииВладельца""     , Истина);
	
	ПараметрыФормыНастройкиШагов.Вставить(""РежимСовместимости838""     , РежимСовместимости838);
	
	ТекущийШаг = Элементы.БлокСценария.ТекущиеДанные;
	Если ТекущийШаг <> Неопределено Тогда
		Если НЕ ПустаяСтрока(ТекущийШаг.ИмяМетаданных) И  НЕ ПустаяСтрока(ТекущийШаг.ТипМетаданных) Тогда
			ПараметрыФормыНастройкиШагов.Вставить(""ТипМетаданных"", ТекущийШаг.ТипМетаданных);
			ПараметрыФормыНастройкиШагов.Вставить(""ИмяМетаданных"", ТекущийШаг.ИмяМетаданных);
		КонецЕсли;
	КонецЕсли;
	
	ФормаНастройкиШаговПоУмолчанию = ОткрытьФорму(ПутьКФормам + ""СписокШаблоновШагов"", ПараметрыФормыНастройкиШагов, ЭтотОбъект);
	ФормаНастройкиШаговПоУмолчанию.СцТ_ГлавнаяФорма = ЭтотОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИПрименитьШаблонКВыделеннымСтрокам(Команда)
	
	ТекущийШаг = Элементы.БлокСценария.ТекущаяСтрока;
	Если ТекущийШаг = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.БлокСценария.ТекущиеДанные;
	
	Если ТекущиеДанные.Типшага <> ""АвтоГруппа"" Тогда
		ПоказатьПредупреждение(, НСтр(""ru='В шаблон шагов могут быть добавлены только групповые шаги для элемента/группы справочника, документа, основной формы отчета и записи регистра сведений'""));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыНастройкиШагов = Новый Структура();
	ПараметрыФормыНастройкиШагов.Вставить(""РежимОткрытия"", ""Выбор"");
	
	ПараметрыФормыНастройкиШагов.Вставить(""ТипМетаданных"", ТекущиеДанные.ТипМетаданных);
	ПараметрыФормыНастройкиШагов.Вставить(""ИмяМетаданных"", ТекущиеДанные.ИмяМетаданных);
	
	ПараметрыФормыНастройкиШагов.Вставить(""АдресХранилищаТаблицыШаблоновШагов"", АдресШаблоновШагов);
	ПараметрыФормыНастройкиШагов.Вставить(""Модифицированность"", Ложь);
	
	ПараметрыФормыНастройкиШагов.Вставить(""РежимСовместимости838""     , РежимСовместимости838);
	
	ФормаНастройкиШаговПоУмолчанию = ОткрытьФорму(ПутьКФормам + ""СписокШаблоновШагов"", ПараметрыФормыНастройкиШагов, ЭтотОбъект);
	ФормаНастройкиШаговПоУмолчанию.СцТ_ГлавнаяФорма = ЭтотОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИдентификации(Команда)
	
	ТекущиеДанные = Элементы.БлокСценария.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипШага <> ""АвтоГруппа"" Тогда
		ПоказатьПредупреждение(, НСтр(""ru='Данная команда применима только для группового шага проверки бизнес-логики'""));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипМетаданных = ""РегистрыСведений"" Тогда
		ПоказатьПредупреждение(, НСтр(""ru='Эта группа предназначена для работы с записью регистра сведений. Просмотр структуры идентификации доступен только для объектных данных'""));
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ОбСсылка) Тогда
		ПоказатьПредупреждение(, НСтр(""ru='Идентификатор ссылки еще не заполнен. Откройте форму настройки шага и выполните настройку.'""));
		Возврат;
	КонецЕсли;
	
	СтруктураОтвета = ПолучитьСтруктуруИдентификацииПоОбщейТаблице(АдресТаблицыСсылок, ТекущиеДанные.ОбСсылка);
	
	МСИ = Новый Массив; // Массив структуры идентификации
	Для каждого СтрИ Из СтруктураОтвета.СтруктураИдентификации Цикл
		СИ = Новый Структура;
		СИ.Вставить(""Имя""            , СтрИ.Имя);
		СИ.Вставить(""Представление""  , СтрИ.Представление);
		СИ.Вставить(""Значение""       , СтрИ.Значение);
		СИ.Вставить(""СокрТипЗначения"", СтрИ.СокрТипЗначения);
		МСИ.Добавить(СИ);
	КонецЦикла;
	
	ПараметрыФормыИдентификации = Новый Структура;
	ПараметрыФормыИдентификации.Вставить(""ТипМД""                 , СтруктураОтвета.ТипМД);
	ПараметрыФормыИдентификации.Вставить(""ИмяМД""                 , СтруктураОтвета.ИмяМД);
	ПараметрыФормыИдентификации.Вставить(""Идентификатор""         , СтруктураОтвета.Идентификатор);
	ПараметрыФормыИдентификации.Вставить(""СинонимМД""             , СтруктураОтвета.СинонимМД);
	ПараметрыФормыИдентификации.Вставить(""Представление""         , СтруктураОтвета.Представление);
	ПараметрыФормыИдентификации.Вставить(""СтруктураИдентификации"", МСИ);
	ПараметрыФормыИдентификации.Вставить(""АдресТаблицыКлючей""    , АдресТаблицыКлючей);
	ПараметрыФормыИдентификации.Вставить(""ПоискПоЗапросу""        , СтруктураОтвета.ПоискПоЗапросу);
	ПараметрыФормыИдентификации.Вставить(""ТекстЗапроса""          , СтруктураОтвета.ТекстЗапроса);
	ПараметрыФормыИдентификации.Вставить(""СтруктураПараметров""   , ГлобальныеПараметры);
	ПараметрыФормыИдентификации.Вставить(""ЗапретИзмененияИд""     , Истина);
	
	ПараметрыФормыИдентификации.Вставить(""РежимСовместимости838"" , РежимСовместимости838);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		""СцТ_ПослеИзмененияСтруктурыИдентификацииВШагеГруппы"",
		ЭтотОбъект,
		ТекущиеДанные);
	
	ФормаИдентификации = ОткрытьФорму(ПутьКФормам + ""КлючиИдентификации"",
		ПараметрыФормыИдентификации,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
		
	ФормаИдентификации.СцТ_ГлавнаяФорма = ЭтотОбъект;

	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТаблицуСсылок(Команда)
	
	СцТ_ПронумероватьШаги_НаКлиенте(,, ЭтотОбъект);
	
	СцТ_ОткрытьФормуТаблицыСсылок(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйБлокСценария(Команда)
	
	СцТ_ОбработатьСохранениеСценария(4);
	
КонецПроцедуры

&НаКлиенте
Процедура ПронумероватьШаги(Команда)
	
	СцТ_ПронумероватьШаги_НаКлиенте(,, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьШаблонПоУмолчаниюКВыделеннымСтрокам(Команда)
	
	ВыделенныеСтроки = Элементы.БлокСценария.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущаяАвтогруппа Из ВыделенныеСтроки Цикл
		
		СцТ_ПрименитьКАвтогруппеНастройкуПоУмолчанию(БлокСценария.НайтиПоИдентификатору(ТекущаяАвтогруппа));
		
	КонецЦикла;
	
	СцТ_ПронумероватьШаги_НаКлиенте(,, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИсключенияИзШаблонаПоУмолчаниюКВыделеннымСтрокам(Команда)
	
	Если Элементы.БлокСценария.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сначала нужно определить, выделены ли шаги,
	// к которым можно применить обновление
	
	ШагиДляОбновления = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из Элементы.БлокСценария.ВыделенныеСтроки Цикл
		
		УзелШага = БлокСценария.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если УзелШага.ТипШага <> ""Воспроизвести""
			И УзелШага.ТипШага <> ""СравнитьСЭталоном""
			И УзелШага.ТипШага <> ""СравнитьДвижения"" Тогда
			Продолжить;
		Иначе
			ШагиДляОбновления.Добавить(ИдентификаторСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ШагиДляОбновления.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр(""ru = 'Применение исключений шагов бизнес-логики доступно только для шагов вида:
			|""""Воспроизвести"""", """"Сравнить с эталоном"""" и """"Сравнить движения""""'""));
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура(""ШагиДляОбновления, ВызвавшаяФорма"", ШагиДляОбновления, ЭтотОбъект);
	
	ПоказатьВопрос(Новый ОписаниеОповещения(""СцТ_СброситьАктивностьРеквизитов"", ЭтотОбъект, ДопПараметры),
		НСтр(""ru = 'Сбросить активность реквизитов в соответствии с настройками исключений?'""),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""РежимПрогона""                      , СцТ_РежимВыполнения);
	ПараметрыФормы.Вставить(""Автор""                             , Объект.Автор);
	ПараметрыФормы.Вставить(""Наименование""                      , Объект.Наименование);
	ПараметрыФормы.Вставить(""НачальнаяДата""                     , Объект.НачальнаяДата);
	ПараметрыФормы.Вставить(""РабочийКаталог""                    , Объект.РабочийКаталог);
	ПараметрыФормы.Вставить(""Цель""                              , Объект.Описание);
	ПараметрыФормы.Вставить(""ИмяПользователя""                   , Объект.ИмяПользователя);
	ПараметрыФормы.Вставить(""ПарольПользователяИБ""              , Объект.ПарольПользователяИБ);
	ПараметрыФормы.Вставить(""ВидТестируемогоКлиента""            , ВидТестируемогоКлиента);
	ПараметрыФормы.Вставить(""URLИБ""                             , URLИБ);
	ПараметрыФормы.Вставить(""ПортТестируемогоКлиента""           , ПортТестируемогоКлиента);
	ПараметрыФормы.Вставить(""КомпьютерИБ""                       , КомпьютерИБ);
	ПараметрыФормы.Вставить(""ДругаяИБ""                          , ДругаяИБ);
	ПараметрыФормы.Вставить(""СтрокаПодключенияКИБ""              , СтрокаПодключенияКИБ);
	ПараметрыФормы.Вставить(""ДопПараметрыКоманднойСтроки""       , ДопПараметрыКоманднойСтроки);
	ПараметрыФормы.Вставить(""БлокироватьГлавноеОкно""            , БлокироватьГлавноеОкно);
	ПараметрыФормы.Вставить(""ИмяФайлаПротокола""                 , ИмяФайлаПротокола);
	ПараметрыФормы.Вставить(""ЗакрыватьПриЗакрытииВладельца""     , Истина);
	ПараметрыФормы.Вставить(""ТаймаутПоискаИнтерактивныхОбъектов"", ТаймаутПоискаИнтерактивныхОбъектов);
	ПараметрыФормы.Вставить(""ОбновлятьИндексППД""                , ОбновлятьИндексППД);
	ПараметрыФормы.Вставить(""ВыполнятьЗамерПроизводительности""  , ВыполнятьЗамерПроизводительности);
	
	ПараметрыФормы.Вставить(""ВыполнятьПреобразованиеСсылочныхТипов"", ВыполнятьПреобразованиеСсылочныхТипов);
	
	
	ОткрытьФорму(ПутьКФормам + ""НастройкаСценария"", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарий(Команда)
	
	Если СцТ_ВнешнееУправлениеОбработкой <> ""Отсутствует"" Тогда
		СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"";
		ТекстПояснения = НСтр(""ru = 'При окончании или остановке выполнения не забудьте загрузить протокол в информационную базу'"");
		ПоказатьПредупреждение(, ТекстПояснения);
	КонецЕсли;
	
	СцТ_ИдентификаторТекущегоШагаСценария = Элементы.БлокСценария.ТекущаяСтрока;
	
	Если СцТ_ИдентификаторТекущегоШагаСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ОстановкаПоИнициативеПользователя = Ложь;
	СцТ_ВыполнениеТеста                   = ""АвтоматическийРежим"";
	
	СцТ_ТаблицыТестируемогоПриложения = Новый Соответствие;
	Элементы.ОстановитьВыполнение.Доступность = Истина;
	
	ПолучитьФормуВыполненияИВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьШаг(Команда)
	
	СцТ_ИдентификаторТекущегоШагаСценария = Элементы.БлокСценария.ТекущаяСтрока;
	
	Если СцТ_ИдентификаторТекущегоШагаСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	СцТ_ОстановкаПоИнициативеПользователя = Ложь;
	СцТ_ВыполнениеТеста                   = ""ПошаговыйРежим"";
	
	СцТ_ТаблицыТестируемогоПриложения = Новый Соответствие;
	ПолучитьФормуВыполненияИВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьВыполнение(Команда)
	
	Если СцТ_ВнешнееУправлениеОбработкой <> ""Отсутствует"" Тогда
		СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"";
		ТекстПояснения = НСтр(""ru = 'Автоматическое управление процессом тестирования остановлено по инициативе пользователя'"");
		ПоказатьПредупреждение(, ТекстПояснения);
	КонецЕсли;
	
	СцТ_ОстановкаПоИнициативеПользователя     = Истина;
	Элементы.ОстановитьВыполнение.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьАвтогруппуКОткрытойФорме(Команда)
	
	Если Элементы.БлокСценария.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СцТ_ТестируемоеПриложениеАктивно() Тогда
		ПоказатьПредупреждение(, НСтр(""ru = 'Нет активного соединения с тестируемым приложением'""));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные   = Элементы.БлокСценария.ТекущиеДанные;
	ФормаПриложения = СцТ_ПолучитьФормуДляИнтерактивногоШага(ТекущиеДанные);
	
	Если ФормаПриложения = Неопределено Тогда
		ОписаниеТекущейФормы = Неопределено;
	Иначе
		ОписаниеТекущейФормы = Новый Структура;
		ОписаниеТекущейФормы.Вставить(""Тип""             , Тип(""ТестируемаяФорма""));
		ОписаниеТекущейФормы.Вставить(""ЗаголовокОбъекта"", ТекущиеДанные.ЗаголовокФормы);
		ОписаниеТекущейФормы.Вставить(""Имя""             , """");
	КонецЕсли;
	
	СписокОтображаемыхОбъектов = Новый СписокЗначений;
	СписокОтображаемыхОбъектов.Добавить(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
	ОписаниеВыбраннойФормы = СцТ_ВыбратьОбъектыТестируемогоПриложения(
		СцТ_Контроллер,
		Тип(""ТестируемаяФорма""),
		СписокОтображаемыхОбъектов,
		ОписаниеТекущейФормы,
		,
		Элементы.БлокСценария);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьФормуСвязаннуюСАвтогруппой(Команда)
	
	Если Элементы.БлокСценария.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаПриложения = СцТ_ПолучитьФормуДляИнтерактивногоШага(Элементы.БлокСценария.ТекущиеДанные);
	
	Попытка
		ФормаПриложения.Активизировать();
	Исключение
		ТекстОповещения = НСтр(""ru = 'Не удалось активизировать форму тестируемого приложения. Форма не обнаружена'"");
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Ошибка'""),,ТекстОповещения,КартинкаИнформация32);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыполнение(Команда)
	
	УзлыВерхнегоУровня = СцТ_УзлыВерхнегоУровня(
		СцТ_ПреобразоватьВУзлыИзИдентификаторов(Элементы.БлокСценария.ВыделенныеСтроки, БлокСценария));
	
	Для каждого Узел Из УзлыВерхнегоУровня Цикл
		СцТ_ИтерационноУстановитьФлагВыполненоУВетки(Узел, 1);
		РодительУзла = Узел.ПолучитьРодителя();
		Пока РодительУзла <> Неопределено Цикл
			СцТ_УстановитьФлагВыполненияУГрупповогоУзла(РодительУзла);
			РодительУзла = РодительУзла.ПолучитьРодителя();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВыполнение(Команда)
	
	УзлыВерхнегоУровня = СцТ_УзлыВерхнегоУровня(
		СцТ_ПреобразоватьВУзлыИзИдентификаторов(Элементы.БлокСценария.ВыделенныеСтроки, БлокСценария));
	
	Для каждого Узел Из УзлыВерхнегоУровня Цикл
		СцТ_ИтерационноУстановитьФлагВыполненоУВетки(Узел);
		РодительУзла = Узел.ПолучитьРодителя();
		Пока РодительУзла <> Неопределено Цикл
			СцТ_УстановитьФлагВыполненияУГрупповогоУзла(РодительУзла);
			РодительУзла = РодительУзла.ПолучитьРодителя();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаОстановаУстановитьСнять(Команда)
	
	Если НЕ СцТ_РежимВыполнения Тогда
		Возврат;
	КонецЕсли;
	
	ТекШаг = Элементы.БлокСценария.ТекущиеДанные;
	
	Если ТекШаг = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекШаг.ТочкаОстанова = 1 - ТекШаг.ТочкаОстанова;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаОстановаУдалитьВсе(Команда)
	
	Если НЕ СцТ_РежимВыполнения Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ОбойтиДеревоСценарияИСнятьВсеТочкиОстанова();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТестируемогоКлиента(Команда)
	
	ОбработкаКомандыЗапускаТестируемогоПриложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьТестируемыйКлиент(Команда)
	
	Если НЕ СцТ_ТестируемоеПриложениеАктивно() Тогда
		ТекстОповещения = НСтр(""ru = 'Нет активного соединения с тестируемым приложением'"");
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Не удалось закрыть приложение'""),,ТекстОповещения,КартинкаИнформация32);
		СцТ_Контроллер = Неопределено;
		СцТ_СостояниеТП();
		
	Иначе
		
		ПоказатьВопрос(Новый ОписаниеОповещения(""СцТ_ЗакрытьГлавноеОкноТПИРазорватьСоединение"", ЭтотОбъект),
			НСтр(""ru = 'Завершить работу тестируемого приложения?'""),
			РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗавершитьЗапись(Команда)
	
	СцТ_ЗаписатьЖурналДействийПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьФайлЖурналаВыполнения(Команда)
	
	Если СцТ_РежимВыполнения И НЕ ПустаяСтрока(ИмяФайлаПротокола) Тогда
		// Попытка найти существующий файл
		ПроверочныйФайл = Новый Файл();
		ОписаниеОповещения = Новый ОписаниеОповещения(""ПослеИнициализацииФайлаПротокола"", ЭтотОбъект);
		ПроверочныйФайл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайлаПротокола);
		
	Иначе
		// Выбор файла
		ПослеПроверкиСуществованияФайлаПротокола(Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеШаговБЛИзИБ(Команда)
	
	Если Элементы.БлокСценария.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сначала нужно определить, выделены ли шаги,
	// к которым можно применить обновление
	
	ШагиДляОбновления = Новый Массив;
	
	ОбновлениеРеквизитов = Ложь;
	ОбновлениеТЧ         = Ложь;
	ОбновлениеДвижений   = Ложь;
	Для каждого ИдентификаторСтроки Из Элементы.БлокСценария.ВыделенныеСтроки Цикл
		
		УзелШага = БлокСценария.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если УзелШага.ТипШага = ""Воспроизвести"" ИЛИ УзелШага.ТипШага = ""СравнитьСЭталоном"" Тогда
			ОбновлениеРеквизитов = Истина;
			ОбновлениеТЧ         = ОбновлениеТЧ ИЛИ (УзелШага.ТипМетаданных <> ""РегистрыСведений"");
		ИначеЕсли УзелШага.ТипШага = ""СравнитьДвижения"" Тогда
			ОбновлениеДвижений = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ШагиДляОбновления.Добавить(ИдентификаторСтроки);
		
	КонецЦикла;
	
	Если ШагиДляОбновления.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр(""ru = 'Обновление из информационной базы доступно только для шагов бизнес-логики:
							|""""Воспроизвести"""", """"Сравнить с эталоном"""" и """"Сравнить движения""""'""));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""ОтображатьСтраницуРеквизитов"", ОбновлениеРеквизитов);
	ПараметрыФормы.Вставить(""ОтображатьСтраницуТЧ""        , ОбновлениеТЧ);
	ПараметрыФормы.Вставить(""ОтображатьСтраницуДвижений""  , ОбновлениеДвижений);
	
	ОткрытьФорму(ПутьКФормам + ""НастройкаОбновленияРеквизитов"",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения(""СцТ_ВыполнитьОбновлениеШаговБЛ"", ЭтотОбъект, ШагиДляОбновления));
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветАвто(Команда)
	
	СцТ_УстановитьЦветТекстаУВыделенных("""");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветКрасный(Команда)
	
	СцТ_УстановитьЦветТекстаУВыделенных(""Красный"");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветЗеленый(Команда)
	
	СцТ_УстановитьЦветТекстаУВыделенных(""Зеленый"");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветСиний(Команда)
	
	СцТ_УстановитьЦветТекстаУВыделенных(""Синий"");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветОранжевый(Команда)
	
	СцТ_УстановитьЦветТекстаУВыделенных(""Оранжевый"");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветФиолетовый(Команда)
	
	СцТ_УстановитьЦветТекстаУВыделенных(""Фиолетовый"");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуПоНомеру(Команда)
	
	НомерШагаЧисло = 1;
	Если Элементы.БлокСценария.ТекущиеДанные <> Неопределено Тогда
		НомерШагаЧисло = Элементы.БлокСценария.ТекущиеДанные.НомерШага;
	КонецЕсли;
	
	ПоказатьВводЧисла(
		Новый ОписаниеОповещения(""СцТ_ОбработатьПереходКШагуПоНомеру"", ЭтотОбъект),
		НомерШагаЧисло,
		НСтр(""ru = 'Перейти к шагу №:'""),
		5,
		0);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	СцТ_СвернутьРекурсивно(БлокСценария);
	//Для каждого Узел Из БлокСценария.ПолучитьЭлементы() Цикл
	//	Элементы.БлокСценария.Свернуть(Узел.ПолучитьИдентификатор());
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для каждого Узел Из БлокСценария.ПолучитьЭлементы() Цикл
		Элементы.БлокСценария.Развернуть(Узел.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОсновнойШаблонКВыделеннымСтрокам(Команда)
	
	ВыделенныеСтроки = Элементы.БлокСценария.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущаяАвтогруппа Из ВыделенныеСтроки Цикл
		
		ДанныеАвтогруппы = БлокСценария.НайтиПоИдентификатору(ТекущаяАвтогруппа);
		
		Если ДанныеАвтогруппы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеАвтогруппы.ТипШага <> ""АвтоГруппа"" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураШаблонов = СцТ_ПолучитьСтруктуруШаблонов_НаСервере(
			ДанныеАвтогруппы.ТипМетаданных,
			ДанныеАвтогруппы.ИмяМетаданных,
			АдресШаблоновШагов,
			АдресНачальныхУстановокШагов);
		
		Если СтруктураШаблонов.МассивШаблоновШага.Количество() > 0 Тогда
			// Найден основной персональный шаблон шагов
			СцТ_ПрименитьШаблонКАвтоГруппе(ДанныеАвтогруппы, СтруктураШаблонов.МассивШаблоновШага, Истина);
		Иначе
			ТекстПредупреждения = НСтр(""ru = 'Для шага %1 не найден основной шаблон'"");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, ""%1"", Строка(ДанныеАвтогруппы.НомерШага));
			Сообщить(ТекстПредупреждения);
		КонецЕсли;
		
	КонецЦикла;
	
	СцТ_ПронумероватьШаги_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВШаблонШагов(Команда)
	
	// Добавление выполняется в этой форме
	// Форма списка открывается только для редактирования имени и т.п.
	
	ТекущийШаг = Элементы.БлокСценария.ТекущаяСтрока;
	Если ТекущийШаг = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.БлокСценария.ТекущиеДанные;
	
	Если ТекущиеДанные.Типшага <> ""АвтоГруппа"" Тогда
		ПоказатьПредупреждение(, НСтр(""ru='В шаблон шагов могут быть добавлены только групповые шаги для проверки бизнес-логики'""));
		Возврат;
	КонецЕсли;
	
	СтруктураНовогоШаблона = Новый Структура;
	СтруктураНовогоШаблона.Вставить(""ТипМетаданных"", ТекущиеДанные.ТипМетаданных);
	СтруктураНовогоШаблона.Вставить(""ИмяМетаданных"", ТекущиеДанные.ИмяМетаданных);
	
	МассивШагов = Новый Массив;
	Для каждого ПодчиненныйШаг Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		//Если Найти(ПодчиненныйШаг.ТипШага, ""Группа"") Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если ПодчиненныйШаг.ТипШага <> ""Воспроизвести""
			И ПодчиненныйШаг.ТипШага <> ""СравнитьСЭталоном""
			И ПодчиненныйШаг.ТипШага <> ""СравнитьДвижения""
			И ПодчиненныйШаг.ТипШага <> ""ВыполнитьЗапрос""
			И ПодчиненныйШаг.ТипШага <> ""ВыполнитьПроцедуру""
			И ПодчиненныйШаг.ТипШага <> ""ЗаменаСсылки"" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураШага = Новый Структура;
		СтруктураШага.Вставить(""Наименование""          , ПодчиненныйШаг.Наименование);
		СтруктураШага.Вставить(""ТипШага""               , ПодчиненныйШаг.ТипШага);
		СтруктураШага.Вставить(""Описание""              , ПодчиненныйШаг.Описание);
		СтруктураШага.Вставить(""НеВыводитьАвтоописание"", ПодчиненныйШаг.НеВыводитьАвтоописание);
		СтруктураШага.Вставить(""Активность""            , ПодчиненныйШаг.Активность);
		СтруктураШага.Вставить(""ВыполнитьВручную""      , ПодчиненныйШаг.ВыполнитьВручную);
		СтруктураШага.Вставить(""Цвет""                  , ПодчиненныйШаг.Цвет);
		СтруктураШага.Вставить(""Комментарий""           , ПодчиненныйШаг.Комментарий);
		
		МассивКолонок = Новый Массив;
		МассивКолонок.Добавить(""Имя"");
		МассивКолонок.Добавить(""Синоним"");
		МассивКолонок.Добавить(""Активность"");
		МассивКолонок.Добавить(""Действие"");
		МассивКолонок.Добавить(""Скрипт"");
		МассивКолонок.Добавить(""ТипУзла"");
		МассивКолонок.Добавить(""Кл"");
		
		СтруктураШага.Вставить(""Значение""           , СцТ_ДеревоформыВДеревоСтруктур(ПодчиненныйШаг.Значение, МассивКолонок));
		
		МассивШагов.Добавить(СтруктураШага);
		
	КонецЦикла;
	
	СтруктураНовогоШаблона.Вставить(""МассивШагов""                       , МассивШагов);
	СтруктураНовогоШаблона.Вставить(""АдресХранилищаТаблицыШаблоновШагов"", АдресШаблоновШагов);
	СтруктураНовогоШаблона.Вставить(""Модифицированность""                , Истина);
	СтруктураНовогоШаблона.Вставить(""РежимОткрытия""                     , ""Новый"");
	СтруктураНовогоШаблона.Вставить(""РежимСовместимости838""             , РежимСовместимости838);
	
	ФормаНастройкиШаговПоУмолчанию = ОткрытьФорму(ПутьКФормам + ""СписокШаблоновШагов"", СтруктураНовогоШаблона, ЭтотОбъект);
	ФормаНастройкиШаговПоУмолчанию.СцТ_ГлавнаяФорма = ЭтотОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура Макрошаги(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""АдресДереваМакрошагов""                , АдресДереваМакрошагов);
	ПараметрыФормы.Вставить(""АдресДереваМакрошаговДляИнициализации"", АдресДереваМакрошаговДляИнициализации);
	ПараметрыФормы.Вставить(""ПутьКФормам""                          , ПутьКФормам);
	ПараметрыФормы.Вставить(""РежимОткрытия""                        , ""Обычный"");
	ПараметрыФормы.Вставить(""РежимПрогона""                         , СцТ_РежимВыполнения);
	
	ФормаМакрошага = ОткрытьФорму(ПутьКФормам + ""СписокМакрошагов"", ПараметрыФормы, ЭтотОбъект);
	ФормаМакрошага.СцТ_ГлавнаяФорма = ЭтотОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГлобальныеПараметры(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""СтруктураГлобальныхПараметров"", ГлобальныеПараметры);
	СтруктураПараметров.Вставить(""РежимСовместимости838""        ,РежимСовместимости838);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(""ПослеЗакрытияФормыГлобальныхПараметров"", ЭтотОбъект);
	
	ФормаПеременных = ОткрытьФорму(ПутьКФормам + ""ФормаГлобальныхпараметров"",
		СтруктураПараметров,
		ЭтотОбъект,,,,ОписаниеОповещения);
		
	ФормаПеременных.СцТ_ГлавнаяФорма = ЭтотОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура МакрошагиДобавитьГруппуВМакрошаг(Команда)
	
	ДанныеДобавляемогоШага = Элементы.БлокСценария.ТекущиеДанные;
	
	Если ДанныеДобавляемогоШага = Неопределено Тогда
		ТекстПредупреждения = НСтр(""ru = 'Не выбран добавляемый шаг. Выберите шаг в сценарии и повторите операцию'"");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтаВеткаСодержитТолькоИнтерактивныеШаги(ДанныеДобавляемогоШага, СцТ_СписокИнтерактивныхШагов()) Тогда
		ТекстПредупреждения = НСтр(""ru = 'Отмеченный узел содержит недопустимые шаги для использования в макрошаге'"");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Открытие формы макрошагов для выбора
	ДопПараметры = Новый Структура(""ДанныеДобавляемогоШага"", ДанныеДобавляемогоШага);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(""СцТ_ПослеЗакрытияОкнаВыбораМакрошага"", ЭтотОбъект, ДопПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""АдресДереваМакрошагов""                , АдресДереваМакрошагов);
	ПараметрыФормы.Вставить(""АдресДереваМакрошаговДляИнициализации"", АдресДереваМакрошаговДляИнициализации);
	ПараметрыФормы.Вставить(""ПутьКФормам""                          , ПутьКФормам);
	ПараметрыФормы.Вставить(""РежимОткрытия""                        , ""Выбор"");
	ПараметрыФормы.Вставить(""РежимПрогона""                         , СцТ_РежимВыполнения);
	
	ФормаМакрошагов = ОткрытьФорму(
		ПутьКФормам + ""СписокМакрошагов"",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	ФормаМакрошагов.СцТ_ГлавнаяФорма = ЭтотОбъект;
	
	// ДальнейШие действия выполняются в обработчике оповещения
	
КонецПроцедуры

&НаКлиенте
Процедура МакрошагиСоздатьНаОснованииГруппы(Команда)
	
	ДанныеДобавляемогоШага = Элементы.БлокСценария.ТекущиеДанные;
	
	Если ДанныеДобавляемогоШага = Неопределено Тогда
		ТекстПредупреждения = НСтр(""ru = 'Не выбран добавляемый шаг. Выберите шаг в сценарии и повторите операцию'"");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтаВеткаСодержитТолькоИнтерактивныеШаги(ДанныеДобавляемогоШага, СцТ_СписокИнтерактивныхШагов()) Тогда
		ТекстПредупреждения = НСтр(""ru = 'Отмеченный узел содержит недопустимые шаги для использования в макрошаге'"");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""Действие""             , ""Новый"");
	ПараметрыФормы.Вставить(""АдресДереваМакрошагов"", АдресДереваМакрошагов);
	ПараметрыФормы.Вставить(""ПутьКФормам""          , ПутьКФормам);
	ПараметрыФормы.Вставить(""РежимПрогона""         , СцТ_РежимВыполнения);
	
	ПараметрыФормы.Вставить(""РежимСовместимости838"", РежимСовместимости838);
	
	ФормаМакрошага = ОткрытьФорму(ПутьКФормам + ""Макрошаг"", ПараметрыФормы, ЭтотОбъект);
	ФормаМакрошага.СцТ_ГлавнаяФорма                = ЭтотОбъект;
	//ФормаМакрошага.СцТ_ФормыТестируемогоПриложения = Новый Соответствие;
	ФормаМакрошага.СцТ_ДобавитьДанныеУзлаВМакрошаг(ДанныеДобавляемогоШага, ФормаМакрошага.БлокСценария);
	
КонецПроцедуры

&НаКлиенте
Процедура МакрошагОткрыть(Команда)
	
	ТекущиеДанные = Элементы.БлокСценария.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.ТипШага <> ""ВыполнитьМакрошаг"" Тогда
		Возврат;
	КонецЕсли;
	
	УзелИмениМакрошага = СцТ_НайтиУзелДереваФормы(ТекущиеДанные.Значение, ""Имя"", ""ИмяМакрошага"");
	
	Если УзелИмениМакрошага = Неопределено Тогда
		ТекстСообщения = НСтр(""ru='Не известно имя макрошага. Внутренняя ошибка инструмента'"");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяМакрошага = УзелИмениМакрошага.Значение;
	Если ТипЗнч(ИмяМакрошага) <> Тип(""Строка"") ИЛИ ПустаяСтрока(ИмяМакрошага) Тогда
		ТекстСообщения = НСтр(""ru='Не известно имя макрошага. Внутренняя ошибка инструмента'"");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить(""Действие""             , ""Редактирование"");
		ПараметрыФормы.Вставить(""НаименованиеШага""     , ИмяМакрошага);
		ПараметрыФормы.Вставить(""АдресДереваМакрошагов"", АдресДереваМакрошагов);
		ПараметрыФормы.Вставить(""ПутьКФормам""          , ПутьКФормам);
		ПараметрыФормы.Вставить(""РежимПрогона""         , СцТ_РежимВыполнения);
		
		ПараметрыФормы.Вставить(""РежимСовместимости838"", РежимСовместимости838);
		
		ФормаМакрошага = ОткрытьФорму(
			ПутьКФормам + ""Макрошаг"",
			ПараметрыФормы,
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.Независимый);
			
		Если ФормаМакрошага <> Неопределено Тогда
			ФормаМакрошага.СцТ_ГлавнаяФорма = ЭтотОбъект;
			//ФормаМакрошага.СцТ_ФормыТестируемогоПриложения = Новый Соответствие;
		КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеШага(Команда)
	
	ТекущаяСтрока = Элементы.БлокСценария.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ОтобразитьДанныеШага(ТекущаяСтрока, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиИЗаменить(Команда)
	
	ФормаПоиска = ОткрытьФорму(ПутьКФормам + ""ПоискИЗамена"",, ЭтотОбъект);
	
	ФормаПоиска.СцТ_ГлавнаяФорма = ЭтотОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныйПример(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""ТолькоВыделенные"", (Элементы.БлокСценария.ВыделенныеСтроки.Количество() > 1));
	
	ФормаОтчета = ОткрытьФорму(ПутьКФормам + ""КонтрольныйПример"",, ЭтотОбъект);
	
	ФормаОтчета.СцТ_ГлавнаяФорма = ЭтотОбъект;
	
	ФормаОтчета.ЗаполнитьТаблицуНастройкиЗначениямиПоУмолчанию();
	
	ФормаОтчета.СформироватьИВывестиКонтрольныйПример();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

#Область СозданиеШагов


&НаКлиенте
Функция СцТ_ПодготовитьСтруктуруДанныхНовогоШага(
	ТипШага,
	ОписательПоложенияШагаВДереве,
	СтруктураШаблонаШагов = Неопределено,
	ПрименениеШаблона = Ложь,
	ВызвавшаяФорма)
	
	// Общие шаги
	// СДШ - структура данных шага
	СДШ = СцТ_СоздатьБазовуюСтруктуруДанныхШага(ОписательПоложенияШагаВДереве, ТипШага, СтруктураШаблонаШагов);
	
	Если ТипШага = ""Группа"" Тогда
		СцТ_ДоработатьДанныеШага_Группа_НаКлиенте(СДШ);
		
	ИначеЕсли ТипШага = ""ВыполнитьВРучную"" Тогда
		СцТ_ДоработатьДанныеШага_ВыполнитьВРучную(СДШ);
		
	ИначеЕсли ТипШага = ""Комментарий"" Тогда
		СцТ_ДоработатьДанныеШага_Комментарий(СДШ);
	
	// Шаги проверки бизнес-логики
	ИначеЕсли ТипШага = ""АвтоГруппа"" Тогда
		СцТ_ДоработатьДанныеШага_АвтоГруппа(СДШ);
		
	ИначеЕсли ТипШага = ""Воспроизвести"" ИЛИ ТипШага = ""СравнитьСЭталоном"" Тогда
		СцТ_ДоработатьДанныеШага_Воспроизвести(СДШ, ТипШага, СтруктураШаблонаШагов, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""СравнитьДвижения"" Тогда
		СцТ_ДоработатьДанныеШага_СравнитьДвижения(СДШ, ОписательПоложенияШагаВДереве, ТипШага, СтруктураШаблонаШагов, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""ВыполнитьЗапрос"" Тогда
		СцТ_ДоработатьДанныеШага_ВыполнитьЗапрос(СДШ);
		
	ИначеЕсли ТипШага = ""ЗаменаСсылки"" Тогда
		СцТ_ДоработатьДанныеШага_ЗаменаСсылки(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""ВыполнитьПроцедуру"" Тогда
		СцТ_ДоработатьДанныеШага_ВыполнитьПроцедуру(СДШ);
		
	// Интерактивные шаги
		
	ИначеЕсли ТипШага = ""ИнтерактивнаяАвтоГруппа"" Тогда
		СцТ_ДоработатьДанныеШага_ИнтерактивнаяАвтоГруппа_НаКлиенте(СДШ, ОписательПоложенияШагаВДереве);
		
	ИначеЕсли ТипШага = ""НайтиФорму"" Тогда
		СцТ_ДоработатьДанныеШага_НайтиФорму(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
	
	ИначеЕсли ТипШага = ""НажатьКнопкуКИ"" Тогда
		СцТ_ДоработатьДанныеШага_НажатьКнопкуКИ(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""ВыполнитьИнтерактивнуюКоманду"" Тогда
		СцТ_ДоработатьДанныеШага_ВыполнитьИнтерактивнуюКоманду(СДШ);
		
	ИначеЕсли ТипШага = ""ВыполнитьИнтерактивныйСкрипт"" Тогда
		СцТ_ДоработатьДанныеШага_ВыполнитьИнтерактивныйСкрипт(СДШ);
		
	ИначеЕсли ТипШага = ""ПроверитьФорму"" Тогда
		СцТ_ДоработатьДанныеШага_ПроверитьФорму(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""НайтиЭлементФормы"" Тогда
		СцТ_ДоработатьДанныеШага_НайтиЭлементФормы(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""НажатьКнопку"" Тогда
		СцТ_ДоработатьДанныеШага_НажатьКнопку(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""ЗаполнитьОдинРеквизитФормы"" ИЛИ ТипШага = ""ЗаполнитьКолонкуТаблицы"" Тогда
		СцТ_ДоработатьДанныеШага_ЗаполнитьОдинРеквизитФормы(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""ЗаполнитьРеквизитыФормы"" ИЛИ ТипШага = ""ЗаполнитьСтрокуТаблицы"" Тогда
		СцТ_ДоработатьДанныеШага_ЗаполнитьРеквизитыФормы(СДШ, ТипШага, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""АвтоГруппаТабличныйДокумент"" Тогда
		СцТ_ДоработатьДанныеШага_АвтоГруппаТабличныйДокумент(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""ПроверитьТабличныйДокумент"" Тогда
		СцТ_ДоработатьДанныеШага_ПроверитьТабличныйДокумент(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""ДействиеСТабДокументом"" Тогда
		СцТ_ДоработатьДанныеШага_ДействиеСТабДокументом(СДШ);
		
	ИначеЕсли ТипШага = ""ДействиеСЯчейкойТД"" Тогда
		СцТ_ДоработатьДанныеШага_ДействиеСЯчейкойТД(СДШ);
		
	ИначеЕсли ТипШага = ""ЗакрытьКлиентскоеОкноФормы"" Тогда
		СцТ_ДоработатьДанныеШага_ЗакрытьКлиентскоеОкноФормы(СДШ);
		
	ИначеЕсли ТипШага = ""ЗавершитьРаботуТестируемогоКлиента"" Тогда
		СцТ_ДоработатьДанныеШага_ЗавершитьРаботуТестируемогоКлиента(СДШ);
		
	ИначеЕсли ТипШага = ""АвтоГруппаТаблицаФормы"" Тогда
		СцТ_ДоработатьДанныеШага_АвтоГруппаТаблицаФормы(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""НайтиСтрокуТаблицы"" Тогда
		СцТ_ДоработатьДанныеШага_НайтиСтрокуТаблицы(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	ИначеЕсли ТипШага = ""ДействиеСТаблицей"" Тогда
		СцТ_ДоработатьДанныеШага_ДействиеСТаблицей(СДШ);
		
	ИначеЕсли ТипШага = ""Пауза"" Тогда
		СцТ_ДоработатьДанныеШага_Пауза(СДШ);
		
	ИначеЕсли ТипШага = ""ВыполнитьКлиентскуюПроцедуру"" Тогда
		СцТ_ДоработатьДанныеШага_ВыполнитьКлиентскуюПроцедуру(СДШ);
		
	ИначеЕсли ТипШага = ""Повторение"" Тогда
		СцТ_ДоработатьДанныеШага_Повторение(СДШ);
		
	ИначеЕсли ТипШага = ""Условие"" Тогда
		СцТ_ДоработатьДанныеШага_Условие(СДШ);
		
	ИначеЕсли ТипШага = ""ВыполнитьМакрошаг"" Тогда
		СцТ_ДоработатьДанныеШага_ВыполнитьМакрошаг(СДШ);
		
	ИначеЕсли ТипШага = ""ПроверитьТекстОшибки"" Тогда
		СцТ_ДоработатьДанныеШага_ПроверитьТекстОшибки(СДШ);
		
	ИначеЕсли ТипШага = ""ВыбратьСообщениеПользователю"" Тогда
		СцТ_ДоработатьДанныеШага_ВыбратьСообщениеПользователю(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма);
		
	Иначе
		// Ничего не нужно делать
		
	КонецЕсли;
	
	Возврат СДШ;
	
КонецФункции

&НаКлиенте
Функция СцТ_СоздатьБазовуюСтруктуруДанныхШага(
	Знач ОписательПоложенияШагаВДереве,
	Знач ТипШага,
	Знач СтруктураШаблона = Неопределено)
	
	// Значение локальных переменных по умолчанию и шаблонные
	Если СтруктураШаблона = Неопределено Тогда
		// Настройки по умолчанию
		ЛП_Активность             = 1;
		ЛП_СкрытьАвтоописание     = Ложь;
		ЛП_Описание               = """";
		ЛП_Комментарий            = """";
		ЛП_Цвет                   = 0;
		ЛП_ВыполнитьВРучную       = 0;
		
	Иначе
		// Копирование настроек
		ЛП_Активность             = СтруктураШаблона.Активность;
		ЛП_СкрытьАвтоописание     = СтруктураШаблона.НеВыводитьАвтоописание;
		ЛП_Описание               = СтруктураШаблона.Описание;
		ЛП_Комментарий            = СтруктураШаблона.Комментарий;
		ЛП_Цвет                   = СтруктураШаблона.Цвет;
		ЛП_ВыполнитьВРучную       = СтруктураШаблона.ВыполнитьВРучную;
		
	КонецЕсли;
	
	СДШ = Новый Структура;
	СДШ.Вставить(""УИШ""                         , ОписательПоложенияШагаВДереве.ИдентификаторШага);
	СДШ.Вставить(""ТипШага""                     , ТипШага);
	СДШ.Вставить(""ТипМетаданных""               , """");
	СДШ.Вставить(""ИмяМетаданных""               , """");
	СДШ.Вставить(""ОбСсылка""                    , """");
	СДШ.Вставить(""ПредставлениеОбъекта""        , """");
	СДШ.Вставить(""ИмяФормы""                    , """");
	СДШ.Вставить(""ПредставлениеИмениМетаданных"", """");
	СДШ.Вставить(""ЗаголовокФормы""              , """");
	СДШ.Вставить(""Наименование""                , """");
	СДШ.Вставить(""АвтоОписание""                , """");
	СДШ.Вставить(""Активность""                  , ЛП_Активность);
	СДШ.Вставить(""СкрытьАвтоописание""          , ЛП_СкрытьАвтоописание);
	СДШ.Вставить(""Описание""                    , ЛП_Описание);
	СДШ.Вставить(""Комментарий""                 , ЛП_Комментарий);
	СДШ.Вставить(""ВыполнитьВРучную""            , ЛП_ВыполнитьВРучную);
	СДШ.Вставить(""НомерШага""                   , 0);
	СДШ.Вставить(""Выполнено""                   , 0);
	СДШ.Вставить(""Цвет""                        , ЛП_Цвет);
	
	ДанныеКартинки = СцТ_ПолучитьДанныеКартинки_НаКлиенте(СДШ);
	СДШ.Вставить(""ДанныеКартинки""        , ДанныеКартинки);
	
	СДШ.Вставить(""ДеревоЗначения""  , СцТ_ДеревоформыВДеревоСтруктур(Неопределено));
	СДШ.Вставить(""МассивСсылокШага"", Новый Массив);
	
	Возврат СДШ;
	
КонецФункции

#Область ФункцииПервогоУровняСозданиеШагов

// Настройка шагов ""Пользовательская группа""
//
// Параметры
//	СДШ    - структура данных шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_Группа_НаКлиенте(СДШ, Знач НаименованиеГруппы = """")
	
	Если ПустаяСтрока(НаименованиеГруппы) Тогда
		НаименованиеГруппы = НСтр(""ru = 'Пользовательская группа'"");
	КонецЕсли;
	
	СДШ.Наименование = НаименованиеГруппы;
	
КонецПроцедуры

// Настройка шагов ""Ручная операция""
//
// Параметры
//	СДШ    - структура данных шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ВыполнитьВРучную(СДШ)
	
	СДШ.Наименование     = НСтр(""ru = 'Ручная операция'"");
	СДШ.ВыполнитьВРучную = 1;
	
КонецПроцедуры

// Настройка шагов ""Ручная операция""
//
// Параметры
//	СДШ    - структура данных шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_Комментарий(СДШ)
	
	СДШ.СкрытьАвтоописание = Истина;
	СДШ.Наименование       = НСтр(""ru = 'Комментарий'"");
	
КонецПроцедуры

// Добавление в сценарий шагов ""Автогруппа для проверки бизнеслогики""
// Параметры
//	СДШ              - структура данных шага,
//	ОбСсылка         - строка - ссылка в строке внутр
//	ТипМетаданных    - тип метаданных
//	ИмяМетаданных    - имя метаданных
//	РазместитьРядом  - признак, что ветку нужно разместить в том же уровне
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_АвтоГруппа(
	СДШ,
	Знач ОбСсылка                     = """",
	Знач ТипМетаданных                = """",
	Знач ИмяМетаданных                = """",
	ИдентификаторыСсылок              = Неопределено)
	
	Если НЕ ПустаяСтрока(ОбСсылка) И НЕ ПустаяСтрока(ТипМетаданных) Тогда
		ДоработатьСтруктуруШагаАвтогруппаНаСервере(СДШ, ОбСсылка, ТипМетаданных, ИмяМетаданных, ИдентификаторыСсылок, АдресТаблицыКлючей);
	КонецЕсли;
	
	//СДШ.ТипМетаданных                = ТипМетаданных;
	//СДШ.ИмяМетаданных                = ИмяМетаданных;
	//СДШ.ОбСсылка                     = ОбСсылка;
	//СДШ.ПредставлениеОбъекта         = ПредставлениеОбъекта;
	//СДШ.ПредставлениеИмениМетаданных = ПредставлениеИмениМетаданных;
	
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_АвтоГруппа(СДШ, Ложь);
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_АвтоГруппа(СДШ, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДоработатьСтруктуруШагаАвтогруппаНаСервере(СДШ, Знач ОбСсылка, Знач ТипМетаданных, Знач ИмяМетаданных, МассивИдентификации, Знач АдресТаблицыКлючей)
	
	СинонимМД = """";
	Попытка
		ОбъектМетаданных = Метаданные[ТипМетаданных][ИмяМетаданных];
		СинонимМД = ОбъектМетаданных.Синоним;
	Исключение
	КонецПопытки;
	
	СДШ.ПредставлениеИмениМетаданных = СинонимМД;
	
	МодульЭтойОбработки = СцТ_ПолучитьЭтуОбработку();
	
	МассивИдентификации = Новый Массив;
	
	Если ТипМетаданных = ""РегистрыСведений"" Тогда
		Попытка
			СтруктураКлюча = ЗначениеИзСтрокиВнутр(ОбСсылка);
		Исключение
			Возврат;
		КонецПопытки;
		
		СДШ.ТипМетаданных        = ТипМетаданных;
		СДШ.ИмяМетаданных        = ИмяМетаданных;
		
		/////////////////////////////////////////////
		
		// Заполнение дерева структурой идентификации
		УзелКлючаЗаписиИБ = СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
			СДШ.ДеревоЗначения,
			""ИСТЗ_КлючЗаписиИБ"",
			Истина);
			
		Для каждого СтрокаКлюча Из СтруктураКлюча Цикл
			
			Попытка
				ИстинноеЗначение = ЗначениеИзСтрокиВнутр(СтрокаКлюча.Значение);
			Исключение
				ИстинноеЗначение = СтрокаКлюча.Значение;
			КонецПопытки;
			
			ОписаниеЗначения = МодульЭтойОбработки.СцТ_ПолучитьОписаниеЗначения(ИстинноеЗначение);
				
			СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
				УзелКлючаЗаписиИБ,
				СтрокаКлюча.Ключ,
				ОписаниеЗначения.ВнутрЗначение,
				СтрокаКлюча.Ключ,
				Истина,
				ОписаниеЗначения.Представление,,,
				ОписаниеЗначения.ТипЗначения);
				
			Если ОписаниеЗначения.ТипЗначения = ""Ссылка"" Тогда
				МодульЭтойОбработки.СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(
					ИстинноеЗначение,
					МассивИдентификации,,,,
					АдресТаблицыКлючей,
					ОписаниеЗначения.ВнутрЗначение);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Попытка
			ИстиннаяСсылка = ЗначениеИзСтрокиВнутр(ОбСсылка);
		Исключение
			Возврат;
		КонецПопытки;
		
		СДШ.ПредставлениеОбъекта = Строка(ИстиннаяСсылка);
		
		СДШ.ТипМетаданных                = ТипМетаданных;
		СДШ.ИмяМетаданных                = ИмяМетаданных;
		СДШ.ОбСсылка                     = Строка(ИстиннаяСсылка.УникальныйИдентификатор());
		
		МодульЭтойОбработки.СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(
			ИстиннаяСсылка,
			МассивИдентификации,
			ТипМетаданных,
			ИмяМетаданных,
			СинонимМД,
			АдресТаблицыКлючей);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавление в сценарий шага ""Воспроизвести объект""
// Параметры
//	СДШ                           - структура данных шага,
//	ТипШага                       - Тип шага,
//	СтруктураШаблона              - структура хранения шаблона,
//	ОписательПоложенияШагаВДереве - Структура, описывающая положение шага в дереве
//	ВызвавшаяФорма                - указатель на форму, в которой находится дерево
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_Воспроизвести(
	СДШ,
	Знач ТипШага,
	Знач СтруктураШаблона = Неопределено,
	Знач ОписательПоложенияШагаВДереве,
	Знач ВызвавшаяФорма   = Неопределено)
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;;
	КонецЕсли;
	
	Если ТипШага = ""Воспроизвести"" Тогда
		СДШ.Наименование = НСтр(""ru = 'Воспроизвести объект или запись информационной базы'"");
	Иначе
		СДШ.Наименование = НСтр(""ru = 'Сравнить с эталонным объектом или записью информационной базы'"");
	КонецЕсли;
	
	// Заполнение дерева данными
	
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Если ДанныеРодительскогоУзла.ТипШага <> ""АвтоГруппа"" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляПолученияОбъектаИБ = СцТ_ПолучитьПараметрыШагаДляПоискаОбъектаИБ(ДанныеРодительскогоУзла);
	
	МассивСсылокШага = Новый Массив;
	
	СтруктураДерева = ПолучитьСтруктуруОбъектаИлиЗаписиИБ_НаСервере(
		ТипШага,
		ДанныеРодительскогоУзла.ТипМетаданных,
		ДанныеРодительскогоУзла.ИмяМетаданных,
		СДШ.ДеревоЗначения,
		ПараметрыДляПолученияОбъектаИБ,
		АдресТаблицыСсылок,
		СтруктураШаблона,
		АдресНачальныхУстановокШагов,
		ГлобальныеПараметры,
		МассивСсылокШага,
		АдресТаблицыКлючей);
	
	СДШ.ДеревоЗначения   = СтруктураДерева;
	СДШ.МассивСсылокШага = МассивСсылокШага;
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ДействиеПриОшибке"",
		""Остановить"",
		НСтр(""ru = 'Действие при ошибке'""),
		Ложь);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ПеременнаяПриОшибке"",
		"""",
		НСтр(""ru = 'Переменная результата выполнения шага'""),
		Ложь);
	
	// Заполнение Наименования и Автоописания
	Если ТипШага = ""Воспроизвести"" Тогда
		СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_Воспроизвести(СДШ, Ложь  , ДанныеРодительскогоУзла);
		СДШ.Наименование = СцТ_ПолучитьОписаниеШага_Воспроизвести(СДШ, Истина, ДанныеРодительскогоУзла);
	Иначе
		СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_СравнитьСЭталоном(СДШ, Ложь  , ДанныеРодительскогоУзла);
		СДШ.Наименование = СцТ_ПолучитьОписаниеШага_СравнитьСЭталоном(СДШ, Истина, ДанныеРодительскогоУзла);
	КонецЕсли;
	
КонецПроцедуры

// Добавление в сценарий шагов ""Сравнить движение документа с эталоном""
// Параметры
//	СДШ                           - структура данных шага,
//	ТипШага                       - Тип шага,
//	СтруктураШаблона              - структура хранения шаблона,
//	ОписательПоложенияШагаВДереве - Структура, описывающая положение шага в дереве
//	ВызвавшаяФорма                - указатель на форму, в которой находится дерево
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_СравнитьДвижения(
	СДШ,
	Знач ОписательПоложенияШагаВДереве,
	Знач ТипШага,
	Знач СтруктураШаблона = Неопределено,
	Знач ВызвавшаяФорма   = Неопределено)
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;;
	КонецЕсли;
	
	СДШ.Наименование = НСтр(""ru = 'Сравнить движения документа'"");
	
	// Заполнение дерева данными
	
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Если ДанныеРодительскогоУзла.ТипШага <> ""АвтоГруппа"" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляПолученияОбъектаИБ = СцТ_ПолучитьПараметрыШагаДляПоискаОбъектаИБ(ДанныеРодительскогоУзла);
	
	МассивСсылокШага = Новый Массив;
	
	СтруктураДерева = СцТ_ЗаполнитьДеревоДвижений_НаСервере(
		ТипШага,
		ДанныеРодительскогоУзла.ТипМетаданных,
		ДанныеРодительскогоУзла.ИмяМетаданных,
		СДШ.ДеревоЗначения,
		ПараметрыДляПолученияОбъектаИБ,
		АдресТаблицыСсылок,
		СтруктураШаблона,
		АдресНачальныхУстановокШагов,
		ГлобальныеПараметры,
		МассивСсылокШага,
		АдресТаблицыКлючей);
	
	СДШ.ДеревоЗначения = СтруктураДерева;
	СДШ.МассивСсылокШага = МассивСсылокШага;
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеПриОшибке""  , ""Остановить"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПеременнаяПриОшибке"", """");
	
	// Заполнение Наименования и Автоописания
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_СравнитьДвижения(СДШ, Ложь  , ДанныеРодительскогоУзла);
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_СравнитьДвижения(СДШ, Истина, ДанныеРодительскогоУзла);
	
КонецПроцедуры

// Добавление в сценарий шагов ""Выполнить запрос""
// Параметры
//	СДШ                           - структура данных шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ВыполнитьЗапрос(СДШ)
	
	// Заполнение дерева данными
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ТекстЗапроса""    , """", ""Текст запроса"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПараметрыЗапроса"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""РезультатЗапроса"");
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеПриОшибке""  , ""Остановить"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПеременнаяПриОшибке"", """");
	
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_ВыполнитьЗапрос(Ложь);
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_ВыполнитьЗапрос(Истина);
	
КонецПроцедуры

// Добавление в сценарий шагов ""Использовать существующий объект""
// Параметры
//	СДШ                           - структура данных шага
//	ОписательПоложенияШагаВДереве - Структура, описывающая положение шага в дереве
//	ВызвавшаяФорма                - указатель на форму, в которой находится дерево
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ЗаменаСсылки(
	СДШ,
	Знач ОписательПоложенияШагаВДереве,
	Знач ВызвавшаяФорма   = Неопределено)
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;;
	КонецЕсли;
	
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Если ДанныеРодительскогоУзла.ТипШага <> ""АвтоГруппа"" Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение дерева данными
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ТекстЗапроса""    , """", ""Текст запроса"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПараметрыЗапроса"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""РезультатЗапроса"");
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеПриОшибке""  , ""Остановить"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПеременнаяПриОшибке"", """");
	
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_ЗаменаСсылки(, ДанныеРодительскогоУзла);
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_ЗаменаСсылки(, ДанныеРодительскогоУзла);
	
КонецПроцедуры

// Добавление в сценарий шагов ""Выполнить процедуру""
// Параметры
//	СДШ                           - структура данных шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ВыполнитьПроцедуру(СДШ)
	
	// Заполнение дерева данными
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ТекстПроцедуры""    , """", ""Текст процедуры"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПараметрыПроцедуры"", """", ""Параметры процедуры"");
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеПриОшибке""  , ""Остановить"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПеременнаяПриОшибке"", """");
	
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_ВыполнитьПроцедуру();
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_ВыполнитьПроцедуру();
	
КонецПроцедуры

// Добавление в сценарий шагов ""Интерактивная автогруппа""
//
// Параметры
//	УИТекущегоУзла - идентификатор текущей строки
//	ШаблонШага      - указатель на шаблон текущего шага
//	ТипМетаданных   - строка типа метаданных
//	ИмяМетаданных  - строка имени метаданных
//	РазместитьРядом - признак, что шаг нужно разместить на том же уровне
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ИнтерактивнаяАвтоГруппа_НаКлиенте(
	СДШ,
	Знач ОписательПоложенияШагаВДереве)
	
	///////////////////////////////////
	// Попытка найти текущую открытую форму в тестируемом приложении
	Если СцТ_Контроллер <> Неопределено Тогда
		Попытка
			
			АктивнаяФорма = Неопределено;
			АктивноеОкно  = СцТ_Контроллер.ПолучитьАктивноеОкно();
			
			Если ТипЗнч(АктивноеОкно) = Тип(""ТестируемоеОкноКлиентскогоПриложения"") Тогда
				ФормыАктивногоОкна = АктивноеОкно.НайтиОбъекты(Тип(""ТестируемаяФорма""));
				Если ТипЗнч(ФормыАктивногоОкна) = Тип(""ФиксированныйМассив"")
					И ФормыАктивногоОкна.Количество() > 0 Тогда
					АктивнаяФорма = ФормыАктивногоОкна[0];
				КонецЕсли;
			КонецЕсли;
			
			Если АктивнаяФорма <> Неопределено Тогда
				
				СДШ.ЗаголовокФормы = СцТ_ЗаголовокИнтерактивногоОбъекта(АктивнаяФорма);
				СДШ.ИмяФормы       = СцТ_ИмяИнтерактивногоОбъекта(АктивнаяФорма);
				
				СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
					СДШ.ДеревоЗначения,
					""ЗаголовокОкнаФормы"",
					АктивноеОкно.Заголовок); 
					
				СтруктураОтвета = ОпределитьОбъектМетаданныхПоИмениФормы(СДШ.ИмяФормы);
				Если СтруктураОтвета <> Неопределено Тогда
					СДШ.ИмяМетаданных = СтруктураОтвета.ИмяМД;
					СДШ.ТипМетаданных = СтруктураОтвета.ТипМД;
				КонецЕсли;
				
				// Регистрация формы в соответствии
				СцТ_ФормыТестируемогоПриложения[ОписательПоложенияШагаВДереве.ИдентификаторШага] = 
					Новый Структура(""ФормаОбъект,ОкноОбъект,ТипОкна"",
						АктивнаяФорма,
						АктивноеОкно,
						?(АктивноеОкно.Основное, 1, 2));
				
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	//////////////////////////////////
	
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_ИнтерактивнаяАвтоГруппа(СДШ, Ложь);
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_ИнтерактивнаяАвтоГруппа(СДШ, Истина);
	
КонецПроцедуры

// Добавление в сценарий шагов ""Найти форму""
//
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
// Возвращаемое значение - данные нового шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_НайтиФорму(
	СДШ,
	Знач ОписательПоложенияШагаВДереве,
	Знач ВызвавшаяФорма   = Неопределено)
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;;
	КонецЕсли;
	
	///////////////////////////////////
	
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Если ДанныеРодительскогоУзла.ТипШага <> ""ИнтерактивнаяАвтоГруппа"" Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокФормы = ДанныеРодительскогоУзла.ЗаголовокФормы;
	// Для соответствия шаблонам поиска
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, ""*"", ""**"");
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, ""?"", ""??"");
	СДШ.ЗаголовокФормы = ЗаголовокФормы;
	
	СДШ.ИмяФормы = ДанныеРодительскогоУзла.ИмяФормы;
	
	ЗаголовокОкнаФормы = СцТ_ЗначениеВДереве(ДанныеРодительскогоУзла.Значение, ""ЗаголовокОкнаФормы"", """");
	// Для соответствия шаблонам поиска
	ЗаголовокОкнаФормы = СтрЗаменить(ЗаголовокОкнаФормы, ""*"", ""**"");
	ЗаголовокОкнаФормы = СтрЗаменить(ЗаголовокОкнаФормы, ""?"", ""??"");
	
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ЗаголовокОкнаФормы"", ЗаголовокОкнаФормы);
	
	ИскатьПоИмени = НЕ ПустаяСтрока(СДШ.ИмяФормы);
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ИскатьПоИмени""    , ИскатьПоИмени);
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ИскатьПоЗаголовку"", Истина);
	
	ИскатьПоЗаголовкуОкна = НЕ ПустаяСтрока(ЗаголовокОкнаФормы);
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ИскатьПоЗаголовкуОкна"", ИскатьПоЗаголовкуОкна);
	
	// Для поиска по элементам
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ЭлементыФормы"",,
		НСтр(""ru = 'Элементы, по которым ищется форма'""),
		Ложь);
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""УсловиеВыполнения"",
		""Найдена"",
		НСтр(""ru = 'Условие выполнения шага'""),
		Ложь);
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ДействиеПриОшибке"",
		""Остановить"",
		НСтр(""ru = 'Действие при ошибке'""),
		Ложь);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ПеременнаяПриОшибке"",
		"""",
		НСтр(""ru = 'Переменная результата выполнения шага'""),
		Ложь);
		
	
	// СДО - Структура для описания
	СДО = Новый Структура;
	СДО.Вставить(""УсловиеВыполнения""     , ""Найдена"");
	СДО.Вставить(""ЗаголовокФормы""        , СДШ.ЗаголовокФормы);
	СДО.Вставить(""ИмяФормы""              , СДШ.ИмяФормы);
	СДО.Вставить(""ЗаголовокОкнаФормы""    , ЗаголовокОкнаФормы);
	СДО.Вставить(""ИскатьПоИмени""         , ИскатьПоИмени);
	СДО.Вставить(""ИскатьПоЗаголовку""     , Истина);
	СДО.Вставить(""ИскатьПоЗаголовкуОкна"" ,ИскатьПоЗаголовкуОкна);
	СДО.Вставить(""ИскатьПоЭлементамФормы"", Ложь);
	
	
	
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_НайтиФорму(СДО, Ложь);
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_НайтиФорму(СДО, Истина);
	
КонецПроцедуры

// Добавление в сценарий шагов ""Нажать кнопку командного интерфейса""
//
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
// Возвращаемое значение - данные нового шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_НажатьКнопкуКИ(
	СДШ,
	Знач ОписательПоложенияШагаВДереве,
	Знач ВызвавшаяФорма   = Неопределено)
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;;
	КонецЕсли;
	
	///////////////////////////////////
	
	Если ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя = Неопределено Тогда
		ВладелецКИ = ""1"";
	Иначе
		ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
		Если ДанныеРодительскогоУзла <> Неопределено И ДанныеРодительскогоУзла.ТипШага = ""ИнтерактивнаяАвтоГруппа"" Тогда
			ВладелецКИ = ""2"";
		Иначе
			ВладелецКИ = ""1"";
		КонецЕсли;
	КонецЕсли;
	
	// 
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ОписаниеКнопкиКИ"",,,,,,,,
		ВладелецКИ);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ВариантПоискаОбъекта"",
		""011"");
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ДействиеПриОшибке"",
		""Остановить"",
		НСтр(""ru = 'Действие при ошибке'""),
		Ложь);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ПеременнаяПриОшибке"",
		"""",
		НСтр(""ru = 'Переменная результата выполнения шага'""),
		Ложь);
		
	СДШ.Наименование = НСтр(""ru = 'Нажать кнопку КИ'"");
	СДШ.АвтоОписание = НСтр(""ru = 'Нажать кнопку командного интерфейса'"");
	
КонецПроцедуры

// Добавление в сценарий шагов ""Перейти по навигационной ссылке""
//
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
// Возвращаемое значение - данные нового шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ВыполнитьИнтерактивнуюКоманду(СДШ)
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""НавигационнаяСсылка"",
		"""");
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ДействиеПриОшибке"",
		""Остановить"",
		НСтр(""ru = 'Действие при ошибке'""),
		Ложь);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ПеременнаяПриОшибке"",
		"""",
		НСтр(""ru = 'Переменная результата выполнения шага'""),
		Ложь);
		
	СДШ.Наименование = НСтр(""ru = 'Перейти по навигационной ссылке'"");
	СДШ.АвтоОписание = НСтр(""ru = 'Перейти по навигационной ссылке'"");
	
КонецПроцедуры

// Добавление в сценарий шагов ""выполнить интерактивный скрипт""
//
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
// Возвращаемое значение - данные нового шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ВыполнитьИнтерактивныйСкрипт(СДШ)
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ТекстСкрипта"",
		"""");
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ДействиеПриОшибке"",
		""Остановить"",
		НСтр(""ru = 'Действие при ошибке'""),
		Ложь);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ПеременнаяПриОшибке"",
		"""",
		НСтр(""ru = 'Переменная результата выполнения шага'""),
		Ложь);
		
	СДШ.Наименование = НСтр(""ru = 'Выполнить действия из журнала действий пользователя'"");
	СДШ.АвтоОписание = НСтр(""ru = 'Выполнить действия из журнала действий пользователя'"");
	
КонецПроцедуры

// Добавление в сценарий шагов ""Проверить текущую форму""
//
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
// Возвращаемое значение - данные нового шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ПроверитьФорму(
	СДШ,
	Знач ОписательПоложенияШагаВДереве,
	Знач ВызвавшаяФорма   = Неопределено)
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;;
	КонецЕсли;
	
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Если ДанныеРодительскогоУзла.ТипШага <> ""ИнтерактивнаяАвтоГруппа"" Тогда
		Возврат;
	КонецЕсли;
	
	ОписательФормы = СцТ_ФормыТестируемогоПриложения[ДанныеРодительскогоУзла.УИШ];
	
	// Проверка закрыта форма или нет
	ФормаЗакрыта = Ложь;
	Если ОписательФормы = Неопределено Тогда
		ФормаЗакрыта = Истина;
	Иначе
		Попытка
			ФормаЗакрыта = ОписательФормы.ФормаОбъект.ОжидатьЗакрытие(0);
		Исключение
			ФормаЗакрыта = Истина;
		КонецПопытки;
	КонецЕсли;
	
	// Для открытой формы проверяется модифицированность
	ФормаМодифицирована = Ложь;
	Если НЕ ФормаЗакрыта Тогда
		ФормаМодифицирована = ОписательФормы.ФормаОбъект.ТекущаяМодифицированность();
	КонецЕсли;
	
	// Для открытой формы проверяется наличие сообщений пользователю
	ЕстьСообщенияПользователю = Ложь;
	Если НЕ ФормаЗакрыта Тогда
		ОкноФормы = ОписательФормы.ОкноОбъект;
		Если ОкноФормы <> Неопределено Тогда
			Если ОкноФормы.ПолучитьТекстыСообщенийПользователю().Количество() > 0 Тогда
				ЕстьСообщенияПользователю = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Определение действия проверки по умолчанию - по приоритетности
	Если ФормаЗакрыта Тогда
		ДействиеПроверки = ""ПроверитьФормаЗакрыта"";
		ЗначениеПроверки = """";
	Иначе
		Если ЕстьСообщенияПользователю Тогда
			ДействиеПроверки = ""ЗакрытьОкноСообщений"";
			ЗначениеПроверки = """";
		Иначе
			Если ФормаМодифицирована Тогда
				ДействиеПроверки = ""ПроверитьМодифицированность"";
				ЗначениеПроверки = ""Модифицирована"";
			Иначе
				// Значит по умолчанию можно только проверить что форма открыта
				ДействиеПроверки = ""ПроверитьФормаОткрыта"";
				ЗначениеПроверки = """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""СостояниеФормы"",
		ЗначениеПроверки,
		НСтр(""ru = 'Описание проверки'""),
		Истина,
		ЗначениеПроверки,
		ДействиеПроверки);
	
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ДействиеПриОшибке"",
		""Остановить"",
		НСтр(""ru = 'Действие при ошибке'""),
		Ложь);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ПеременнаяПриОшибке"",
		"""",
		НСтр(""ru = 'Переменная результата выполнения шага'""),
		Ложь);
		
	// Описание шага
	СДО = Новый Структура;
	СДО.Вставить(""Действие"", ДействиеПроверки);
	СДО.Вставить(""Значение"", ЗначениеПроверки);
	
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_ПроверитьФорму(СДО, Истина);
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_ПроверитьФорму(СДО, Ложь);
	
КонецПроцедуры

// Добавление в сценарий шагов ""Проверить текущую форму""
//
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
// Возвращаемое значение - данные нового шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_НайтиЭлементФормы(
	СДШ,
	Знач ОписательПоложенияШагаВДереве,
	Знач ВызвавшаяФорма   = Неопределено)
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;;
	КонецЕсли;
	
	///////////////////////////////////
	
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	ТестируемаяФормаИлиТаблица = СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(ДанныеРодительскогоУзла);
	
	// Определение теущего элемента
	ОписательТекущегоЭлемента = Неопределено;
	Если ТестируемаяФормаИлиТаблица <> Неопределено Тогда
		
		Попытка
			ТекущийТестируемыйЭлемент = ТестируемаяФормаИлиТаблица.ПолучитьТекущийЭлемент();
		Исключение
			ТекущийТестируемыйЭлемент = Неопределено;
		КонецПопытки;
		
		Если ТекущийТестируемыйЭлемент <> Неопределено Тогда
			ИмяТекущегоЭлемента = СцТ_ИмяИнтерактивногоОбъекта(ТекущийТестируемыйЭлемент);
			
			ЭлементыТестируемойФормы = СцТ_ВыбратьОбъектыТестируемогоПриложения(
				ТестируемаяФормаИлиТаблица,,,,,,,
				Истина,
				Истина);
			
			Для каждого ОписательЭлемента Из ЭлементыТестируемойФормы Цикл
				Если ОписательЭлемента.Имя = ИмяТекущегоЭлемента Тогда
					ОписательТекущегоЭлемента = ОписательЭлемента;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписательТекущегоЭлемента = Неопределено Тогда
		
		СцТ_ТипОбъекта = 3;
		СцТ_ИмяОбъекта = """";
		СцТ_Заголовок  = """";
		СцТ_ПредставлениеОбъекта = """";
		СцТ_ПредставлениеРодителя = """";
		
		СцТ_Видимость      = Ложь;
		СцТ_Доступность    = Ложь;
		СцТ_ТолькоПросмотр = Ложь;
		СцТ_ТекстПодсказки = """";
		
	Иначе
		
		СцТ_ТипОбъекта           = СцТ_ТипТестируемогоОбъектаВСтроку(ОписательТекущегоЭлемента.Тип);
		СцТ_ИмяОбъекта           = ОписательТекущегоЭлемента.Имя;
		СцТ_Заголовок            = ОписательТекущегоЭлемента.Заголовок;
		СцТ_ПредставлениеОбъекта = ОписательТекущегоЭлемента.ПредставлениеОбъектаПриложения;
		
		Если ТипЗнч(ТестируемаяФормаИлиТаблица) = Тип(""ТестируемаяТаблицаФормы"")
			И ОписательТекущегоЭлемента.ОписаниеРодительскогоОбъекта <> Неопределено Тогда
			СцТ_ПредставлениеРодителя =  ОписательТекущегоЭлемента.ОписаниеРодительскогоОбъекта.ПредставлениеОбъектаПриложения;
		Иначе
			СцТ_ПредставлениеРодителя = """";
		КонецЕсли;
		
		СвойстваОбъекта = СцТ_АтрибутыДоступностиИнтерактивногоОбъекта(ОписательТекущегоЭлемента.Объект);
		
		Попытка
			СцТ_ТекстПодсказки = ТекущийТестируемыйЭлемент.ПолучитьТекстПодсказки();
		Исключение
			СцТ_ТекстПодсказки = """";
		КонецПопытки;
		
		
		СцТ_Видимость      = СвойстваОбъекта.Видимость;
		СцТ_Доступность    = СвойстваОбъекта.Доступность;
		Если СцТ_ТипОбъекта <> 5 И СцТ_ТипОбъекта <> 6 Тогда
			СцТ_ТолькоПросмотр = СвойстваОбъекта.ТолькоПросмотр;
		Иначе
			СцТ_ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ТипОбъекта""           , СцТ_ТипОбъекта);
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ИмяОбъекта""           , СцТ_ИмяОбъекта, СцТ_Заголовок);
	
	УзелСвойств = СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""СвойстваОбъекта"");
		СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелСвойств, ""Видимость""     , СцТ_Видимость);
		СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелСвойств, ""Доступность""   , СцТ_Доступность);
		СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелСвойств, ""ТолькоПросмотр"", СцТ_Видимость);
		СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелСвойств, ""Заголовок""     , СцТ_Заголовок);
		СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелСвойств, ""ТекстПодсказки"", СцТ_ТекстПодсказки);
		
	Если ОписательТекущегоЭлемента <> Неопределено Тогда
		СцТ_ДобавитьВСТруктуруУзелПутиПоискаОбъекта(СДШ.ДеревоЗначения, ОписательТекущегоЭлемента.ПутьКОбъекту);
	КонецЕсли;
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ВариантПоискаОбъекта""    , ""100"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеСОбъектом""       , ""ПроверитьЧтоТекущий"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ИскатьТолькоСредиВидимых"", Истина);
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ДействиеПриОшибке"",
		""Остановить"",
		НСтр(""ru = 'Действие при ошибке'""),
		Ложь);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ПеременнаяПриОшибке"",
		"""",
		НСтр(""ru = 'Переменная результата выполнения шага'""),
		Ложь);
		
	// Описание шага
	СДО = Новый Структура;
	СДО.Вставить(""ДействиеСОбъектом"", ""ПроверитьЧтоТекущий"");
	СДО.Вставить(""Тип""              , СцТ_ТипОбъекта);
	СДО.Вставить(""Имя""              , СцТ_ИмяОбъекта);
	СДО.Вставить(""Заголовок""        , СцТ_Заголовок);
	СДО.Вставить(""Видимость""        , СцТ_Видимость);
	СДО.Вставить(""Доступность""      , СцТ_Доступность);
	СДО.Вставить(""ТолькоПросмотр""   , СцТ_Видимость);
	СДО.Вставить(""Заголовок""        , СцТ_Заголовок);
	СДО.Вставить(""ТекстПодсказки""   , СцТ_ТекстПодсказки);
	СДО.Вставить(""ВариантПоиска""    , ""100"");
	
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_НайтиЭлементФормы(СДО, Истина);
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_НайтиЭлементФормы(СДО, Ложь);
	
КонецПроцедуры

// Добавление в сценарий шагов ""Нажать кнопку""
// 
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
//	ИдентификаторШаблонаШага - идентификатор шаблона шагов
// Возвращаемое значение - данные нового шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_НажатьКнопку(
	СДШ,
	Знач ОписательПоложенияШагаВДереве,
	Знач ВызвавшаяФорма   = Неопределено)
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;;
	КонецЕсли;
	
	///////////////////////////////////
	
	ИменаКнопокПоУмолчанию = Новый СписокЗначений;
	ИменаКнопокПоУмолчанию.Добавить(""ФормаПровестиИЗакрыть"" );
	ИменаКнопокПоУмолчанию.Добавить(""ФормаЗаписатьИЗакрыть"" );
	ИменаКнопокПоУмолчанию.Добавить(""ФормаСохранитьИЗакрыть"");
	ИменаКнопокПоУмолчанию.Добавить(""ФормаСформировать""     );
	ИменаКнопокПоУмолчанию.Добавить(""ФормаОК""               );
	
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	ТестируемаяФормаИлиТаблица = СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(ДанныеРодительскогоУзла);
	
	// Подбор кнопки
	ОписаниеКнопкиФормы = Неопределено;
	Если ТестируемаяФормаИлиТаблица <> Неопределено Тогда
		
		ТипыВыбираемыхОбъектов = Новый СписокЗначений;
		ТипыВыбираемыхОбъектов.Добавить(""КнопкаКоманднойПанели"");
		ТипыВыбираемыхОбъектов.Добавить(""ОбычнаяКнопка"");
		
		ТипыОтображаемых = Новый СписокЗначений;
		ТипыОтображаемых.Добавить(""КоманднаяПанель"");
		ТипыОтображаемых.Добавить(""Подменю"");
		ТипыОтображаемых.Добавить(""Страница"");
		
		КнопкиФормы = СцТ_ВыбратьОбъектыТестируемогоПриложения(
			ТестируемаяФормаИлиТаблица,
			ТипыВыбираемыхОбъектов,
			ТипыОтображаемых,,,,,
			Истина);
			
		КнопкаПоУмолчаниюПоИменам = Неопределено;
		Если КнопкиФормы.Количество() = 1 Тогда
			ОписаниеКнопкиФормы = КнопкиФормы[0];
		Иначе
			
			Для каждого Кнопка Из КнопкиФормы Цикл
				Если Кнопка.КнопкаПоУмолчанию Тогда
					ОписаниеКнопкиФормы = Кнопка;
					Прервать;
				ИначеЕсли ИменаКнопокПоУмолчанию.НайтиПоЗначению(Кнопка.Имя) <> Неопределено Тогда
					КнопкаПоУмолчаниюПоИменам = Кнопка;
				КонецЕсли;
			КонецЦикла;
			
			Если ОписаниеКнопкиФормы = Неопределено Тогда
				ОписаниеКнопкиФормы = КнопкаПоУмолчаниюПоИменам;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПодменю          = """";
	ЗаголовокПодменю    = """";
	ИмяКоманднойПанели  = """";
	ИмяКонтекстногоМеню = """";
	
	ИмяКнопки          = """";
	ЗаголовокКнопки    = """";
	ВидКнопки          = ""КнопкаКоманднойПанели"";
	
	Если ОписаниеКнопкиФормы <> Неопределено Тогда
		
		ИмяКнопки          = ОписаниеКнопкиФормы.Имя;
		ЗаголовокКнопки    = ОписаниеКнопкиФормы.Заголовок;
		ВидКнопки          = ОписаниеКнопкиФормы.Вид;
		
	КонецЕсли;
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ВидОбъекта"",
		ВидКнопки,
		НСтр(""ru = 'Вид нажимаемого объекта'""));
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ИмяКнопки"",
		ИмяКнопки,
		ЗаголовокКнопки);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеСКнопкой""    , ""Нажать"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ВариантПоискаОбъекта"", ""100"", """");
	
	СцТ_ПутьККнопке = Неопределено;
	Если ОписаниеКнопкиФормы <> Неопределено Тогда
		СцТ_ДобавитьВСТруктуруУзелПутиПоискаОбъекта(СДШ.ДеревоЗначения, ОписаниеКнопкиФормы.ПутьКОбъекту);
		СцТ_ПутьККнопке = ОписаниеКнопкиФормы.ПутьКОбъекту;
	КонецЕсли;
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ДействиеПриОшибке"",
		""Остановить"",
		НСтр(""ru = 'Действие при ошибке'""),
		Ложь);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ПеременнаяПриОшибке"",
		"""",
		НСтр(""ru = 'Переменная результата выполнения шага'""),
		Ложь);
		
	// Описание шага
	СДО = Новый Структура;
	СДО.Вставить(""Вид""              , ВидКнопки);
	СДО.Вставить(""Имя""              , ИмяКнопки);
	СДО.Вставить(""Заголовок""        , ЗаголовокКнопки);
	СДО.Вставить(""ПутьКЭлементу""    , СцТ_ПутьККнопке);
	
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_НажатьКнопку(СДО, Истина);
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_НажатьКнопку(СДО, Ложь);
	
КонецПроцедуры

// Добавление в сценарий шагов ""Заполнить один реквизит шапки формы""
// или ""Заполнить ячейку""
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
//	ТипШага - строка типа шага
// Возвращаемое значение - данные нового шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ЗаполнитьОдинРеквизитФормы(
	СДШ,
	Знач ОписательПоложенияШагаВДереве,
	Знач ВызвавшаяФорма   = Неопределено)
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;;
	КонецЕсли;
	
	ОписательТекущегоЭлемента = Неопределено;
	
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	ТестируемаяФормаИлиТаблица = СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(ДанныеРодительскогоУзла);
	
	ТипОбъекта = ТипЗнч(ТестируемаяФормаИлиТаблица);
	Если ТипОбъекта = Тип(""ТестируемаяФорма"")
		ИЛИ ТипОбъекта = Тип(""ТестируемаяТаблицаФормы"") Тогда
		
		Попытка
			ТестируемаяФормаИлиТаблица.Активизировать();
		Исключение
		КонецПопытки;
		
		Попытка
			ТекЭлемент = ТестируемаяФормаИлиТаблица.ПолучитьТекущийЭлемент();
			Если ТекЭлемент <> Неопределено Тогда
				ИмяТекЭлемента = СцТ_ИмяИнтерактивногоОбъекта(ТекЭлемент);
			КонецЕсли;
		Исключение
			ТекЭлемент = Неопределено;
		КонецПопытки;
		
		// Подготовка к определению описания текущего элемента
		ТипыВыбираемыхОбъектов = Новый СписокЗначений;
		ТипыВыбираемыхОбъектов.Добавить(""ПолеВвода"");
		ТипыВыбираемыхОбъектов.Добавить(""ПолеКалендаря"");
		ТипыВыбираемыхОбъектов.Добавить(""ПолеПереключателя"");
		ТипыВыбираемыхОбъектов.Добавить(""ПолеТекстовогоДокумента"");
		ТипыВыбираемыхОбъектов.Добавить(""ПолеФлажка"");
		ТипыВыбираемыхОбъектов.Добавить(
			Новый Структура(""ТипОбъекта, ВидОбъекта"",
							Тип(""ТестируемоеПолеФормы""),
							""Надпись""));
		
		ПоляФормы = СцТ_ВыбратьОбъектыТестируемогоПриложения(
			ТестируемаяФормаИлиТаблица,
			ТипыВыбираемыхОбъектов,
			Новый СписокЗначений,,,,,
			Истина,
			Истина); // Игнорировать поля ввода таблицы формы
		
		ОписательТекущегоЭлемента = Неопределено;
		Для каждого ОписаниеПоляФормы Из ПоляФормы Цикл
			Если ОписаниеПоляФормы.Имя = ИмяТекЭлемента Тогда
				ОписательТекущегоЭлемента = ОписаниеПоляФормы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ОписательТекущегоЭлемента = Неопределено И ПоляФормы.Количество() = 1 Тогда
			ОписательТекущегоЭлемента = ПоляФормы[0];
		КонецЕсли;
		
	КонецЕсли;
	
	УзелОписанияРеквизита = СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""РеквизитФормы"",
		"""",
		НСтр(""ru = 'Реквизит формы'""));
		
	СцТ_ИмяЭлемента       = """";
	СцТ_ЗаголовокЭлемента = """";
	СцТ_ЗначениеЭлемента  = """";
	СцТ_ВидЭлемента       = """";
	СцТ_Представление     = """";
	СцТ_Тип               = ""ТестируемоеПолеФормы"";
	ДействиеДляРеквизита  = ""ВводПоСтроке"";
	
	Если ОписательТекущегоЭлемента <> Неопределено Тогда
		
		СцТ_ИмяЭлемента       = ОписательТекущегоЭлемента.Имя;
		СцТ_ЗаголовокЭлемента = ОписательТекущегоЭлемента.Заголовок;
		СцТ_ЗначениеЭлемента  = ОписательТекущегоЭлемента.Значение;
		СцТ_ВидЭлемента       = ОписательТекущегоЭлемента.Вид;
		СцТ_Представление     = ОписательТекущегоЭлемента.ПредставлениеОбъектаПриложения;
		СцТ_Тип               = СцТ_ТипТестируемогоОбъектаВСтроку(ОписательТекущегоЭлемента.Тип);
		
		ДействиеДляРеквизита = СцТ_ДействиеПоУмолчаниюДляПоляФормы(ОписательТекущегоЭлемента.Вид);
		
	КонецЕсли;
	
	УзелРеквизита = СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		УзелОписанияРеквизита,
		СцТ_ИмяЭлемента,
		СцТ_ЗначениеЭлемента,
		?(ПустаяСтрока(СцТ_ЗаголовокЭлемента), СцТ_ИмяЭлемента, СцТ_ЗаголовокЭлемента),,
		СцТ_Представление,
		ДействиеДляРеквизита,,
		СцТ_ВидЭлемента);
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		УзелРеквизита,
		""ТипОбъекта"",
		СцТ_ТипТестируемогоОбъектаВСтроку(СцТ_Тип));
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		УзелРеквизита,
		""ВариантПоискаОбъекта"",
		""100"");
		
	Если ОписательТекущегоЭлемента <> Неопределено Тогда
		СцТ_ДобавитьВСТруктуруУзелПутиПоискаОбъекта(УзелРеквизита, ОписательТекущегоЭлемента.ПутьКОбъекту);
	КонецЕсли;
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ДействиеПриОшибке"",
		""Остановить"",
		НСтр(""ru = 'Действие при ошибке'""),
		Ложь);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ПеременнаяПриОшибке"",
		"""",
		НСтр(""ru = 'Переменная результата выполнения шага'""),
		Ложь);
		
	// Описание шага
	СДО = Новый Структура;
	СДО.Вставить(""ДействиеСОбъектом"", ДействиеДляРеквизита);
	СДО.Вставить(""Имя""              , СцТ_ИмяЭлемента);
	СДО.Вставить(""Заголовок""        , СцТ_ЗаголовокЭлемента);
	СДО.Вставить(""Значение""         , СцТ_ЗначениеЭлемента);
	СДО.Вставить(""ВариантПоиска""    , ""100"");
	
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_ЗаполнитьЭлементФормы(СДО, Истина);
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_ЗаполнитьЭлементФормы(СДО, Ложь);
	
КонецПроцедуры

// Добавление в сценарий шагов ""Заполнить все реквизит шапки формы""
// или ""Заполнить строку таблицы""
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
//	ТипШага - строка типа шага
// Возвращаемое значение - данные нового шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ЗаполнитьРеквизитыФормы(
	СДШ,
	ТипШага,
	Знач ОписательПоложенияШагаВДереве,
	Знач ВызвавшаяФорма   = Неопределено)
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;;
	КонецЕсли;
	
	УзелРеквизитов = СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""Реквизиты"",
		"""");
		
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	ТестируемаяФормаИлиТаблица = СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(ДанныеРодительскогоУзла);
	
	ПоляФормы = Новый Массив;
	ТипОбъекта = ТипЗнч(ТестируемаяФормаИлиТаблица);
	
	Если ТипОбъекта = Тип(""ТестируемаяФорма"")
		ИЛИ ТипОбъекта = Тип(""ТестируемаяТаблицаФормы"") Тогда
		
		РаботаСтаблицей = Ложь;
		ТипыВыбираемыхОбъектов = Новый СписокЗначений;
		ТипыВыбираемыхОбъектов.Добавить(""ПолеВвода"");
		ТипыВыбираемыхОбъектов.Добавить(""ПолеКалендаря"");
		ТипыВыбираемыхОбъектов.Добавить(""ПолеПереключателя"");
		ТипыВыбираемыхОбъектов.Добавить(""ПолеТекстовогоДокумента"");
		ТипыВыбираемыхОбъектов.Добавить(""ПолеФлажка"");
		ТипыВыбираемыхОбъектов.Добавить(
			Новый Структура(""ТипОбъекта, ВидОбъекта"",
							Тип(""ТестируемоеПолеФормы""),
							""Надпись""));
		
		Попытка
			ПоляФормы = СцТ_ВыбратьОбъектыТестируемогоПриложения(
				ТестируемаяФормаИлиТаблица,
				ТипыВыбираемыхОбъектов,
				Новый СписокЗначений,,,,,
				Истина,
				Истина);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	// Описание формируется одновременно с заполнением дерева
	АвтоОписание = ?(ТипШага = ""ЗаполнитьСтрокуТаблицы"",
					НСтр(""ru = 'Действия с ячейками текущей строки:'""),
					НСтр(""ru = 'Действия с полями формы:'""));
	
	Для каждого ОписаниеПоляФормы Из ПоляФормы Цикл
		
		ДействиеНадРеквизитом = СцТ_ДействиеПоУмолчаниюДляПоляФормы(ОписаниеПоляФормы.Вид);
		
		Если НЕ ЗначениеЗаполнено(ДействиеНадРеквизитом) Тогда
			Продолжить;
		КонецЕсли;
		
		УзелРеквизита = СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
			УзелРеквизитов,
			ОписаниеПоляФормы.Имя,
			ОписаниеПоляФормы.Значение,
			?(ПустаяСтрока(ОписаниеПоляФормы.Заголовок), ОписаниеПоляФормы.Имя, ОписаниеПоляФормы.Заголовок),
			(ВРег(ОписаниеПоляФормы.Имя) <> ""КОД""
			 И ВРег(Прав(ОписаниеПоляФормы.Имя, 11)) <> ""НОМЕРСТРОКИ""
			 И ВРег(ОписаниеПоляФормы.Имя) <> ""НОМЕР""
			 И СцТ_ЗначениеВПолеФормыЗаполнено(ОписаниеПоляФормы.Значение)),
			ОписаниеПоляФормы.ПредставлениеДанных,
			СцТ_ДействиеПоУмолчаниюДляПоляФормы(ОписаниеПоляФормы.Вид),
			,
			ОписаниеПоляФормы.Вид,
			Истина,
			Ложь);
		
		СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
			УзелРеквизита,
			""ТипОбъекта"",
			СцТ_ТипТестируемогоОбъектаВСтроку(ОписаниеПоляФормы.Тип));
		
		СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
			УзелРеквизита,
			""ВариантПоискаОбъекта"",
			""100"");
		
		СцТ_ДобавитьВСТруктуруУзелПутиПоискаОбъекта(УзелРеквизита, ОписаниеПоляФормы.ПутьКОбъекту);
		
		Если НЕ УзелРеквизита.Активность Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеРеквизита = ?(ПустаяСтрока(ОписаниеПоляФормы.Заголовок), ОписаниеПоляФормы.Имя, ОписаниеПоляФормы.Заголовок)
			+ "": ""
			+ СцТ_НачатьСоСтрочногоСимвола(УзелРеквизита.Действие)
			+ ?(УзелРеквизита.Действие <> НСтр(""ru = 'Открыть'"")
				И УзелРеквизита.Действие <> НСтр(""ru = 'Очистить'"")
				И УзелРеквизита.Действие <> НСтр(""ru = 'Перейти на год вперед'"")
				И УзелРеквизита.Действие <> НСтр(""ru = 'Перейти на год назад'"")
				И УзелРеквизита.Действие <> НСтр(""ru = 'Перейти на месяц вперед'"")
				И УзелРеквизита.Действие <> НСтр(""ru = 'Перейти на месяц назад'"")
				И УзелРеквизита.Действие <> НСтр(""ru = 'Увеличить значение'"")
				И УзелРеквизита.Действие <> НСтр(""ru = 'Уменьшить значение'""),
				"" """""" + ОписаниеПоляФормы.Значение + """""""",
				"""");
			
		АвтоОписание = АвтоОписание + Символы.ПС + ОписаниеРеквизита;
		
	КонецЦикла;
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ДействиеПриОшибке"",
		""Остановить"",
		НСтр(""ru = 'Действие при ошибке'""),
		Ложь);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ПеременнаяПриОшибке"",
		"""",
		НСтр(""ru = 'Переменная результата выполнения шага'""),
		Ложь);
	
	Если ТипШага = ""ЗаполнитьСтрокуТаблицы"" Тогда
		Наименование = НСтр(""ru = 'Все ячейки текущей строки'"");
	Иначе
		Наименование = НСтр(""ru = 'Все поля формы'"");
	КонецЕсли;
	
	СДШ.Наименование = Наименование;
	СДШ.АвтоОписание = АвтоОписание;
	
КонецПроцедуры

// Доработка структуры нового шага ""Пауза""
//
// Параметры
//	СДШ - структура данных шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_Пауза(СДШ)
	
	СДШ.Наименование = НСтр(""ru = 'Подождать 0 сек.'"");
	СДШ.АвтоОписание = НСтр(""ru = 'Подождать 0 сек.'"");
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПродолжительностьПаузы"", 0);
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеПриОшибке""  , ""Остановить"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПеременнаяПриОшибке"", """");
	
КонецПроцедуры

// Доработка структуры нового шага ""Выполнить клиентскую процедуру""
//
// Параметры
//	СДШ - структура данных шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ВыполнитьКлиентскуюПроцедуру(СДШ)
	
	СДШ.Наименование = НСтр(""ru = 'Выполнить процедуру на стороне клиента'"");
	СДШ.АвтоОписание = НСтр(""ru = 'Выполнить процедуру на стороне клиента'"");
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ТекстПроцедуры"", """");
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеПриОшибке""  , ""Остановить"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПеременнаяПриОшибке"", """");
	
КонецПроцедуры

// Доработка структуры нового шага Повторение
//
// Параметры
//	СДШ - структура данных шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_Повторение(СДШ)
	
	СДШ.Наименование = НСтр(""ru = 'Повторить 1 раз'"");
	СДШ.АвтоОписание = НСтр(""ru = 'Повторить 1 раз'"");
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ТекстПроцедуры"", """");
	
	// Заполнение параметров цикла для простого повтора
	УзелОписанияЦикла = СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ОписаниеПовтора"");
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелОписанияЦикла, ""ТипЦикла""          , ""Счетный"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелОписанияЦикла, ""НачальноеЗначение"" , 1);
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелОписанияЦикла, ""КонечноеЗначение""  , 2);
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелОписанияЦикла, ""КоличествоПовторов"", 1);
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелОписанияЦикла, ""Шаг""               , 1);
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелОписанияЦикла, ""ИмяПеременной""     , ""ПеременнаяЦикла"");
	// В цикле переменная всегда сохраняется как параметр.
	// это выполняется автоматически. Переменную не нужно помещать
	// в таблицу сохраняемых параметров
	
КонецПроцедуры

// Доработка структуры нового шага Условие
//
// Параметры
//	СДШ - структура данных шага
&НаКлиенте
Функция СцТ_ДоработатьДанныеШага_Условие(СДШ)
	
	// Заполнение параметров цикла для простого повтора
	УзелОписанияУсловия = СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ОписаниеУсловия"");
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелОписанияУсловия, ""ЗначениеПеременной"", Истина);
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелОписанияУсловия, ""ИмяПеременной""     , ""ПеременнаяУсловия"");
		
	// В условии переменная всегда сохраняется как параметр.
	// это выполняется автоматически. Переменную не нужно помещать
	// в таблицу сохраняемых параметров
	
	СДШ.АвтоОписание = НСтр(""ru = 'Если значение переменной ПеременнаяУсловия равно ИСТИНА, тогда выполнить подчиненные шаги'"");
	СДШ.Наименование = НСтр(""ru = 'Проверить условие'"");
	
КонецФункции

// Доработка структуры нового шага Выполнить макрошаг
//
// Параметры
//	СДШ - структура данных шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ВыполнитьМакрошаг(СДШ)
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ИмяМакрошага"", """");
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеПриОшибке""  , ""Остановить"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПеременнаяПриОшибке"", """");
	
	СДШ.Наименование = НСтр(""ru = 'Выполнить макрошаг'"");
	СДШ.АвтоОписание = НСтр(""ru = 'Выполнить макрошаг'"");
	
КонецПроцедуры

// Доработка структуры нового шага Проверить текст ошибки
//
// Параметры
//	СДШ - структура данных шага
&НаКлиенте
Функция СцТ_ДоработатьДанныеШага_ПроверитьТекстОшибки(СДШ)
	
	// Попытка прочитать текст ошибки
	Попытка
		Если СцТ_Контроллер = Неопределено Тогда
			ИмяМодуля       = """";
			ИсходнаяСтрока  = """";
			НомерСтроки     = 0;
			ОписаниеОшибки  = """";
			ВариантПроверки = ""ОшибкаПодробно"";
		Иначе
			ИнформацияОбОшибке = СцТ_Контроллер.ПолучитьТекущуюИнформациюОбОшибке();
			Если ИнформацияОбОшибке = Неопределено Тогда
				ИмяМодуля       = """";
				ИсходнаяСтрока  = """";
				НомерСтроки     = 0;
				ОписаниеОшибки  = """";
				ВариантПроверки = ""ОшибокНет"";
			Иначе
				ИмяМодуля       = ИнформацияОбОшибке.ИмяМодуля;
				ИсходнаяСтрока  = ИнформацияОбОшибке.ИсходнаяСтрока;
				НомерСтроки     = ИнформацияОбОшибке.НомерСтроки;
				ОписаниеОшибки  = ИнформацияОбОшибке.Описание;
				ВариантПроверки = ""ОшибкаПодробно"";
			КонецЕсли;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	УзелИнформацииОбОшибке = СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ИнформацияОбОшибке"");
	
	Если НомерСтроки = Неопределено Тогда
		НомерСтроки = 0;
	КонецЕсли;
	
	// Детализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелИнформацииОбОшибке, ""ВариантПроверки"", ВариантПроверки);
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелИнформацииОбОшибке, ""ИмяМодуля""      , ИмяМодуля     ,, (НЕ ПустаяСтрока(ИмяМодуля)));
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелИнформацииОбОшибке, ""ИсходнаяСтрока"" , ИсходнаяСтрока,, (НЕ ПустаяСтрока(ИсходнаяСтрока)));
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелИнформацииОбОшибке, ""НомерСтроки""    , НомерСтроки   ,, (НомерСтроки > 0));
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(УзелИнформацииОбОшибке, ""Описание""       , ОписаниеОшибки,, (НЕ ПустаяСтрока(ОписаниеОшибки)));
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""Действие""   , ""Сведения"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ЗакрытьОкно"", Истина);
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеПриОшибке""  , ""Остановить"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПеременнаяПриОшибке"", """");
	
	СДО = Новый Структура;
	СДО.Вставить(""ВариантПроверки"", ВариантПроверки);
	СДО.Вставить(""ИмяМодуля""      , ИмяМодуля);
	СДО.Вставить(""ОписаниеОшибки"" , ОписаниеОшибки);
	СДО.Вставить(""НомерСтроки""    , НомерСтроки);
	СДО.Вставить(""ИсходнаяСтрока"" , ИсходнаяСтрока);
	
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_ПроверитьТекстОшибки(СДО, Истина);
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_ПроверитьТекстОшибки(СДО, Ложь);
	
КонецФункции

// Доработка структуры нового шага ""Закрыть окно клиентского приложения""
//
// Параметры
//	СДШ - структура данных шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ЗакрытьКлиентскоеОкноФормы(СДШ)
	
	СДШ.Наименование = НСтр(""ru = 'Закрыть окно текущей формы'"");
	СДШ.АвтоОписание = НСтр(""ru = 'Закрыть окно, в котором располагается текущая форма'"");
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеПриОшибке""  , ""Остановить"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПеременнаяПриОшибке"", """");
	
КонецПроцедуры

// Доработка структуры нового шага ""Завершить работу тестируемого приложения""
// 
// Параметры
//	СДШ - структура данных шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ЗавершитьРаботуТестируемогоКлиента(СДШ)
	
	СДШ.Наименование = НСтр(""ru = 'Закрыть тестируемое приложение'"");
	СДШ.АвтоОписание = НСтр(""ru = 'Закрыть главное окно тестируемого приложения'"");
	
	// Универсализация шага
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеПриОшибке""  , ""Остановить"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ПеременнаяПриОшибке"", """");
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_АвтоГруппаТабличныйДокумент(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма)
	
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	ТестируемаяФорма = СцТ_ПолучитьФормуДляИнтерактивногоШага(ДанныеРодительскогоУзла);
	
	Если ТестируемаяФорма <> Неопределено Тогда
		
		ТипыВыбираемыхОбъектов = Новый СписокЗначений;
		ТипыВыбираемыхОбъектов.Добавить(""ПолеТабличногоДокумента"");
		
		ТДокументы = СцТ_ВыбратьОбъектыТестируемогоПриложения(
			ТестируемаяФорма,
			ТипыВыбираемыхОбъектов,
			Новый СписокЗначений,,,,,
			Истина,
			Истина);
			
		// Выбор текущего
		ТД = Неопределено;
		Для каждого ТДокумент Из ТДокументы Цикл
			Если ТДокумент.ЭтоТекущийЭлемент Тогда
				ТД = ТДокумент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Если текущего нет, то подбор единственного
		Если ТД = Неопределено И ТДокументы.Количество() = 1 Тогда
			ТД = ТДокументы[0];
		КонецЕсли;
		
		ИмяТД           = """";
		ЗаголовокТД     = """";
		ПредставлениеТД = """";
		
		Если ТД <> Неопределено Тогда
			
			ИмяТД           = ТД.Имя;
			ЗаголовокТД     = ТД.Заголовок;
			ПредставлениеТД = ?(ПустаяСтрока(ЗаголовокТД),
								ИмяТД,
								ЗаголовокТД);
			
			// Данные в табличный документ будут считаны в настройке шага
			// так как нет смысла выполнять чтение у фрагмента, который по сути неизвестен
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	УзелОписанияТД = СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ТабличныйДокумент"",
		ИмяТД,
		ЗаголовокТД,,
		ПредставлениеТД,,,
		""ТабличныйДокумент""
		);
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ВариантПоискаОбъекта"", ""100"");
		
	Если ТД <> Неопределено Тогда
		СцТ_ДобавитьВСТруктуруУзелПутиПоискаОбъекта(УзелОписанияТД, ТД.ПутьКОбъекту);
	КонецЕсли;
	
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага_АвтоГруппаТабличныйДокумент(ПредставлениеТД, Истина);
	СДШ.АвтоОписание = СцТ_ПолучитьОписаниеШага_АвтоГруппаТабличныйДокумент(ПредставлениеТД, Ложь);
	
КонецПроцедуры

// Добавление в сценарий шагов ""Проверить табличный документ""
// 
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
// Возвращаемое значение - данные нового шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ПроверитьТабличныйДокумент(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма)
	
	// Шаг оставлен только для совместимости с предыдущими версиями
	// Создание новых шагов этого типа запрещено
	
	ТекстПредупреждения = НСтр(""ru = 'Этот шаг оставлен только для совместимости с предыдущими версиями. Создание новых шагов этого типа запрещено.'"");
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
	СДШ = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ДействиеСТабДокументом(СДШ)
	
	СДШ.Наименование = НСтр(""ru = 'Проверить весь табличный документ'"");
	СДШ.Автоописание = НСтр(""ru = 'Проверить весь табличный документ'"");
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеСТаблДок"", ""Проверить"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ВариантОбласти""  , ""ВесьТД"");
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ДействиеСЯчейкойТД(СДШ)
	
	СДШ.Наименование = НСтр(""ru = 'В ячейке с адресом R1C1 проверить значение <пустое значение>'"");
	СДШ.Автоописание = НСтр(""ru = 'В ячейке с адресом R1C1 проверить значение <пустое значение>'"");
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""Действие""   , ""Проверить"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""Адрес""      , ""R1C1"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ТекстЯчейки"", """");
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ДоработатьДанныеШага_ВыбратьСообщениеПользователю(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма)
	
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	ТестируемоеОкно = СцТ_ПолучитьТестируемуюФормуДляИнтерактивнойАвторгруппы(ДанныеРодительскогоУзла,,, Истина);
	
	///
	Если ТестируемоеОкно = Неопределено Тогда
		ПервыйТекст = """"
	Иначе
		МассивТекстовСообщений = ТестируемоеОкно.ПолучитьТекстыСообщенийПользователю();
		Если МассивТекстовСообщений.Количество() = 0 Тогда
			ПервыйТекст = """";
		Иначе
			ПервыйТекст = МассивТекстовСообщений[0];
		КонецЕсли;
	КонецЕсли;
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""ВыбранноеСообщениеПользователю"",
		ПервыйТекст,
		НСтр(""ru = 'Выбранное сообщение пользователю'""),
		Истина);
		
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
		СДШ.ДеревоЗначения,
		""Действие"",
		""Сведения"",
		НСтр(""ru = 'Действие'""),
		Истина);
		
	// Формирование описания и наименования	
	ТекстНаименования = НСтр(""ru = 'Получить сведения о выборе сообщения пользователю'"");
	
	СДШ.Наименование = ТекстНаименования;
	СДШ.АвтоОписание = СцТ_ДобавитьПодстроку(ТекстНаименования, ПервыйТекст, "":"" +Символы.ПС);
	
КонецФункции

// Добавление в сценарий автогруппы для работы с таблицей формы
// 
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
// Возвращаемое значение - данные нового шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_АвтоГруппаТаблицаФормы(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма)
	
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	
	ТестируемаяФорма = СцТ_ПолучитьФормуДляИнтерактивногоШага(ДанныеРодительскогоУзла);
	
	ИмяТаблицы       = """";
	ЗаголовокТаблицы = """";
	Представление    = """";
	
	Если ТестируемаяФорма <> Неопределено Тогда
		
		ТипыВыбираемыхОбъектов = Новый СписокЗначений;
		ТипыВыбираемыхОбъектов.Добавить(""ТаблицаФормы"");
		
		ТаблицыФормы = СцТ_ВыбратьОбъектыТестируемогоПриложения(
			ТестируемаяФорма,
			ТипыВыбираемыхОбъектов,
			Новый СписокЗначений,,,,,
			Истина,
			Истина); // Игнорировать поля ввода таблицы формы
		
		ТаблицаФормы = Неопределено;
		Для каждого Таблица Из ТаблицыФормы Цикл
			Если Таблица.ЭтоТекущийЭлемент Тогда
				ТаблицаФормы = Таблица;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаФормы = Неопределено И ТаблицыФормы.Количество() = 1 Тогда
			ТаблицаФормы = ТаблицыФормы[0];
		КонецЕсли;
		
		Если ТаблицаФормы <> Неопределено Тогда
			
			ИмяТаблицы       = ТаблицаФормы.Имя;
			ЗаголовокТаблицы = ТаблицаФормы.Заголовок;
			
			Если ПустаяСтрока(ЗаголовокТаблицы) Тогда
				Представление = ИмяТаблицы;
			Иначе
				Представление = ЗаголовокТаблицы;
			КонецЕсли;
			
			СцТ_ДобавитьВСТруктуруУзелПутиПоискаОбъекта(СДШ.ДеревоЗначения, ТаблицаФормы.ПутьКОбъекту);
			
			СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ВариантПоискаОбъекта""    , ""100"");
			
		КонецЕсли;
		
	КонецЕсли;
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ОписаниеТаблицы"", ИмяТаблицы, ЗаголовокТаблицы,, Представление);
	
	СДО = Новый Структура;
	СДО.Вставить(""ИмяТаблицы""      , ИмяТаблицы);
	СДО.Вставить(""ЗаголовокТаблицы"", ЗаголовокТаблицы);
	
	СДШ.Наименование = СцТ_ПолучитьОписаниеШага__АвтоГруппаТаблицаФормы(СДО, Истина);
	СДШ.Автоописание = СцТ_ПолучитьОписаниеШага__АвтоГруппаТаблицаФормы(СДО, Ложь);
	
КонецПроцедуры

// Добавление в сценарий шагов ""Выполнение действий с таблицей""
// 
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
// Возвращаемое значение - данные нового шага
&НаКлиенте
Процедура СцТ_ДоработатьДанныеШага_ДействиеСТаблицей(СДШ)
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ДействиеСТаблицей""   , ""ПерейтиВНачалоТаблицы"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""КоличествоПовторений"", 1);
	
	СДШ.Наименование = НСтр(""ru = 'Перейти в начало'"");
	СДШ.Автоописание = НСтр(""ru = 'Перейти в начало'"");
	
КонецПроцедуры

// Добавление в сценарий шагов ""Найти нужную строку таблицы""
// 
// Параметры
//	ТекущаяСтрокаСценария - указатель на текущую строку сценария
// Возвращаемое значение - данные нового шага
&НаКлиенте
Функция СцТ_ДоработатьДанныеШага_НайтиСтрокуТаблицы(СДШ, ОписательПоложенияШагаВДереве, ВызвавшаяФорма)
	
	ДанныеРодительскогоУзла = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	ТаблицаНаФорме = СцТ_ПолучитьТаблицуДляИнтерактивногоШага(ДанныеРодительскогоУзла);
	
	
	УзелКолонок = СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""КолонкиВСтроке"");
	
	МассивКолонок = Новый Массив;
	Если ТаблицаНаФорме <> Неопределено Тогда
		Попытка
			МассивКолонок = СцТ_ПолучитьОписаниеТекущейСтрокиТаблицыФормы(ТаблицаНаФорме);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ТекстАвтоописания = """";
	Для каждого ОписательКолонки Из МассивКолонок Цикл
		
		Если  ОписательКолонки.Вид <> ""ПолеВвода""
			И ОписательКолонки.Вид <> ""ПолеФлажка""
			И ОписательКолонки.Вид <> ""Надпись"" Тогда
			Продолжить;
		КонецЕсли;
		
		СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
			УзелКолонок,
			ОписательКолонки.Имя,
			ОписательКолонки.Текст,
			ОписательКолонки.Представление,,
			ОписательКолонки.Заголовок,,,
			ОписательКолонки.Вид);
			
		АвтоописаниеЗначения = СцТ_ДобавитьПодстроку(ОписательКолонки.Представление, ОписательКолонки.Текст, "": "", Истина);
		ТекстАвтоописания = СцТ_ДобавитьПодстроку(ТекстАвтоописания, АвтоописаниеЗначения, "";"" + Символы.ПС);
		
	КонецЦикла;
	
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""НазначениеШага""           , ""СделатьТекущейСтрокой"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ОбластьПоиска""            , ""СНачалаТаблицы"");
	СцТ_ДобавитьУзелВСтруктуруДереваЗначения(СДШ.ДеревоЗначения, ""ИскатьВПодчиненныхСтроках"", Ложь);
	
	СДШ.Наименование = НСтр(""ru = 'Найти строку таблицы'"");
	
	СДШ.Автоописание = НСтр(""ru = 'Найти строку таблицы и сделать ее текущей.
								 |Область поиска: от начала таблицы вниз'"");
								 
	Если НЕ ПустаяСтрока(ТекстАвтоописания) Тогда
		СДШ.Автоописание = СДШ.Автоописание
			+ Символы.ПС
			+ Символы.ПС
			+ НСтр(""ru = 'Значения в строке:'"")
			+ Символы.ПС
			+ ТекстАвтоописания;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПредставлениеТМ(СтрокаВоМножественномЧисле)
	
	Если СтрокаВоМножественномЧисле = ""Справочники"" Тогда
		Возврат НСтр(""ru='Справочник'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""Документы"" Тогда
		Возврат НСтр(""ru='Документ'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""РегистрыСведений"" Тогда
		Возврат НСтр(""ru='Запись регистра сведений'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""Отчеты"" Тогда
		Возврат НСтр(""ru='Отчет'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""Обработки"" Тогда
		Возврат НСтр(""ru='Обработка'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""ЖурналыДокументов"" Тогда
		Возврат НСтр(""ru='Журнал документов'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""РегистрыНакопления"" Тогда
		Возврат НСтр(""ru='Регистр накопления'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""РегистрыБухгалтерии"" Тогда
		Возврат НСтр(""ru='Регистр бухгалтерии'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""РегистрыРасчета"" Тогда
		Возврат НСтр(""ru='Регистр расчета'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""ПланыСчетов"" Тогда
		Возврат НСтр(""ru='План счетов'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""ПланыВидовРасчета"" Тогда
		Возврат НСтр(""ru='План видов расчета'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""ПланыВидовХарактеристик"" Тогда
		Возврат НСтр(""ru='План видов характеристик'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""ОбщаяФорма"" Тогда
		Возврат НСтр(""ru='Общая форма'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""БизнесПроцессы"" Тогда
		Возврат НСтр(""ru='Бизнес-процесс'"");
		
	ИначеЕсли СтрокаВоМножественномЧисле = ""Задачи"" Тогда
		Возврат НСтр(""ru='Задача'"");
		
	Иначе
		// Если попали сюда - это ошибка
		Возврат """";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеШага_СравнитьДвижения_НаСервере(СтруктураДерева)
	
	МодульОбъекта = СцТ_ПолучитьЭтуОбработку();
	
	ДеревоШага = МодульОбъекта.СцТ_ДеревоЗначенийИзСтруктурыДерева(СТруктураДерева);
	
	Возврат МодульОбъекта.СцТ_ПолучитьОписаниеШага_СравнитьДвижения_НаСервере(ДеревоШага);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеШага_СравнитьСЭталоном_НаСервере(ТипМД, СинонимМД, СтруктураДерева)
	
	МодульОбъекта = СцТ_ПолучитьЭтуОбработку();
	
	ДеревоШага = МодульОбъекта.СцТ_ДеревоЗначенийИзСтруктурыДерева(СТруктураДерева);
	
	Возврат МодульОбъекта.СцТ_ПолучитьОписаниеШага_СравнитьСЭталоном_НаСервере(ТипМД, СинонимМД, ДеревоШага);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеШага_Воспроизвести_НаСервере(ТипМД, СинонимМД, СтруктураДерева)
	
	МодульОбъекта = СцТ_ПолучитьЭтуОбработку();
	
	ДеревоШага = МодульОбъекта.СцТ_ДеревоЗначенийИзСтруктурыДерева(СтруктураДерева);
	
	Возврат МодульОбъекта.СцТ_ПолучитьОписаниеШага_Воспроизвести_НаСервере(ТипМД, СинонимМД, ДеревоШага);
	
КонецФункции

#КонецОбласти

#Область АвтоописаниеШагов

////////////////////////////////////////////////////////////////////////////////
// АВТООПИСАНИЕ ШАГОВ

// Функция формирования автоматического описания для шага ""Автогруппа""
// Возвращает текст описания
// 
// Параметры
//   СтруктураШага - структура со всеми данными шага
&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_АвтоГруппа(Знач СтруктураШага, Краткое = Истина) Экспорт
	
	Если ПустаяСтрока(СтруктураШага.ПредставлениеОбъекта) Тогда
		СтрокаОписания = """";
	Иначе
		СтрокаОписания = СтруктураШага.ПредставлениеОбъекта;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтруктураШага.ТипМетаданных) И НЕ ПустаяСтрока(СтруктураШага.ИмяМетаданных) Тогда
		Подстрока = ПредставлениеТМ(СтруктураШага.ТипМетаданных);
		Если ПустаяСтрока(СтруктураШага.ПредставлениеИмениМетаданных) Тогда
			Подстрока = Подстрока + "" "" + СтруктураШага.ИмяМетаданных;
		Иначе
			Подстрока = Подстрока + "" "" + СтруктураШага.ПредставлениеИмениМетаданных;
		КонецЕсли;
		
		СтрокаОписания = СтрокаОписания + "" "" + ""("" + Подстрока + "")"";
	КонецЕсли;
	
	Если НЕ Краткое И НЕ ПустаяСтрока(СтрокаОписания) Тогда
		ШаблонОписания = НСтр(""ru = 'Автогруппа работы с объектом информационной базы """"%1""""'"");
		
		СтрокаОписания = СтрЗаменить(ШаблонОписания, ""%1"", СтрокаОписания);
		
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаОписания) Тогда
		СтрокаОписания = НСтр(""ru = 'Новая автогруппа проверки бизнес-логики'"");
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_Воспроизвести(Знач СтруктураШага, Краткое = Истина, ДанныеРодительскогоУзла = Неопределено) Экспорт
	
	Если Краткое Тогда
		
		Если ДанныеРодительскогоУзла = Неопределено Тогда
			СтрокаОписания = НСтр(""ru = 'Воспроизвести объект или запись информационной базы'"");
		Иначе
			Если ДанныеРодительскогоУзла.ТипМетаданных = ""РегистрыСведений"" Тогда
				СтрокаОписания = НСтр(""ru = 'Воспроизвести запись регистра сведений'"");
			ИначеЕсли НЕ ПустаяСтрока(ДанныеРодительскогоУзла.ТипМетаданных) И НЕ ПустаяСтрока(ДанныеРодительскогоУзла.ИмяМетаданных) Тогда
				Если ПустаяСтрока(ДанныеРодительскогоУзла.ПредставлениеОбъекта) Тогда
					СтрокаОписания = НСтр(""ru = 'Воспроизвести объект'"");
				Иначе
					СтрокаОписания = НСтр(""ru = 'Воспроизвести'"") + "" "" + ДанныеРодительскогоУзла.ПредставлениеОбъекта;
				КонецЕсли;
				
				Подстрока = ПредставлениеТМ(ДанныеРодительскогоУзла.ТипМетаданных);
				Если ПустаяСтрока(ДанныеРодительскогоУзла.ПредставлениеИмениМетаданных) Тогда
					Подстрока = Подстрока + "" "" + ДанныеРодительскогоУзла.ИмяМетаданных;
				Иначе
					Подстрока = Подстрока + "" "" + ДанныеРодительскогоУзла.ПредставлениеИмениМетаданных;
				КонецЕсли;
				
				СтрокаОписания = СтрокаОписания + "" "" + ""("" + Подстрока + "")"";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаОписания = ПолучитьОписаниеШага_Воспроизвести_НаСервере(
			ДанныеРодительскогоУзла.ТипМетаданных,
			ДанныеРодительскогоУзла.ПредставлениеИмениМетаданных,
			СтруктураШага.ДеревоЗначения)
		
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_СравнитьСЭталоном(Знач СтруктураШага, Краткое = Истина, ДанныеРодительскогоУзла = Неопределено) Экспорт
	
	Если Краткое Тогда
		
		Если ДанныеРодительскогоУзла = Неопределено Тогда
			СтрокаОписания = НСтр(""ru = Сравнить с эталоном объект или запись информационной базы'"");
		Иначе
			Если ДанныеРодительскогоУзла.ТипМетаданных = ""РегистрыСведений"" Тогда
				СтрокаОписания = НСтр(""ru = 'Сравнить с эталоном запись регистра сведений'"");
			ИначеЕсли НЕ ПустаяСтрока(ДанныеРодительскогоУзла.ТипМетаданных) И НЕ ПустаяСтрока(ДанныеРодительскогоУзла.ИмяМетаданных) Тогда
				Если ПустаяСтрока(ДанныеРодительскогоУзла.ПредставлениеОбъекта) Тогда
					СтрокаОписания = НСтр(""ru = 'Сравнить с эталоном объект'"");
				Иначе
					СтрокаОписания = НСтр(""ru = 'Сравнить с эталоном'"") + "" "" + ДанныеРодительскогоУзла.ПредставлениеОбъекта;
				КонецЕсли;
				
				Подстрока = ПредставлениеТМ(ДанныеРодительскогоУзла.ТипМетаданных);
				Если ПустаяСтрока(ДанныеРодительскогоУзла.ПредставлениеИмениМетаданных) Тогда
					Подстрока = Подстрока + "" "" + ДанныеРодительскогоУзла.ИмяМетаданных;
				Иначе
					Подстрока = Подстрока + "" "" + ДанныеРодительскогоУзла.ПредставлениеИмениМетаданных;
				КонецЕсли;
				
				СтрокаОписания = СтрокаОписания + "" "" + ""("" + Подстрока + "")"";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаОписания = ПолучитьОписаниеШага_СравнитьСЭталоном_НаСервере(
			ДанныеРодительскогоУзла.ТипМетаданных,
			ДанныеРодительскогоУзла.ПредставлениеИмениМетаданных,
			СтруктураШага.ДеревоЗначения)
		
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_СравнитьДвижения(Знач СтруктураШага, Краткое = Истина, ДанныеРодительскогоУзла = Неопределено) Экспорт
	
	Если Краткое Тогда
		
		Если ДанныеРодительскогоУзла = Неопределено Тогда
			СтрокаОписания = НСтр(""ru = 'Сравнить движения документа с эталонными'"");
		Иначе
			СтрокаОписания = НСтр(""ru = 'Сравнить движения документа'"");
			
			Если ПустаяСтрока(ДанныеРодительскогоУзла.ПредставлениеИмениМетаданных) Тогда
				Подстрока = СтрокаОписания + "" "" + ДанныеРодительскогоУзла.ИмяМетаданных;
			Иначе
				Подстрока = СтрокаОписания + "" "" + ДанныеРодительскогоУзла.ПредставлениеИмениМетаданных;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ДанныеРодительскогоУзла.ПредставлениеОбъекта) Тогда
				СтрокаОписания = СтрокаОписания + "" "" + ДанныеРодительскогоУзла.ПредставлениеОбъекта;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаОписания = ПолучитьОписаниеШага_СравнитьДвижения_НаСервере(СтруктураШага.ДеревоЗначения)
		
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_ВыполнитьЗапрос(Краткое = Ложь) Экспорт
	
	Если Краткое Тогда
		СтрокаОписания = НСтр(""ru = 'Выполнить запрос и сравнить результат запроса с эталонным'"");
	Иначе
		СтрокаОписания = НСтр(""ru = 'Выполнить запрос и сравнить его результат с приложенной к шагу таблицей'"");
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_ВыполнитьПроцедуру(Краткое = Ложь) Экспорт
	
	Если Краткое Тогда
		СтрокаОписания = НСтр(""ru = 'Выполнить на сервере процедуру'"");
	Иначе
		СтрокаОписания = НСтр(""ru = 'Выполнить на сервере процедуру'"");
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_ЗаменаСсылки(Краткое = Истина, ДанныеРодительскогоУзла = Неопределено) Экспорт
	
	Если ДанныеРодительскогоУзла = Неопределено Тогда
		СтрокаОписания = НСтр(""ru = Заменить ссылку существующего объекта информационной базы'"");
	Иначе
		Если ПустаяСтрока(ДанныеРодительскогоУзла.ПредставлениеОбъекта) Тогда
			СтрокаОписания = НСтр(""ru = 'Заменить ссылку существующего объекта информационной базы'"");
		Иначе
			СтрокаОписания = НСтр(""ru = 'Заменить ссылку существующего объекта информационной базы на ссылку'"") + "" "" + ДанныеРодительскогоУзла.ПредставлениеОбъекта;
		КонецЕсли;
		
		Подстрока = ПредставлениеТМ(ДанныеРодительскогоУзла.ТипМетаданных);
		Если ПустаяСтрока(ДанныеРодительскогоУзла.ПредставлениеИмениМетаданных) Тогда
			Подстрока = Подстрока + "" "" + ДанныеРодительскогоУзла.ИмяМетаданных;
		Иначе
			Подстрока = Подстрока + "" "" + ДанныеРодительскогоУзла.ПредставлениеИмениМетаданных;
		КонецЕсли;
		
		СтрокаОписания = СтрокаОписания + "" "" + ""("" + Подстрока + "")"";
		
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_ИнтерактивнаяАвтоГруппа(Знач СДШ, Краткое = Ложь) Экспорт
	
	Если Краткое Тогда
		СтрокаОписания = НСтр(""ru = 'Форма'"");
	Иначе
		СтрокаОписания = НСтр(""ru = 'Интерактивная работа с формой'"");
	КонецЕсли;
	
	Если ПустаяСтрока(СДШ.ЗаголовокФормы) Тогда
		
		Представление = НСтр(""ru = '<без заголовка>'"");
		Если НЕ ПустаяСтрока(СДШ.ИмяФормы) Тогда
					Представление = Представление + "" "" + ""("" + СДШ.ИмяФормы + "")"";
		КонецЕсли;
	Иначе
		Представление = СДШ.ЗаголовокФормы;
	КонецЕсли;
	
	СтрокаОписания = СтрокаОписания + "" "" + """""""" + Представление + """""""";
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_НайтиФорму(СДО, Краткое = Ложь) Экспорт
	
	Если СДО.УсловиеВыполнения = ""Найдена"" Тогда
		Если Краткое Тогда
			СтрокаОписания = НСтр(""ru = 'Найти форму'"");
		Иначе
			СтрокаОписания = НСтр(""ru = 'Среди открытых форм найти форму'"");
		КонецЕсли;
	Иначе
		Если Краткое Тогда
			СтрокаОписания = НСтр(""ru = 'Проверить отсутствие формы'"");
		Иначе
			СтрокаОписания = НСтр(""ru = 'Проверить отсутствие формы среди открытых'"");
		КонецЕсли;
	КонецЕсли;
	
	Если Краткое Тогда
		Возврат СтрокаОписания;
	КонецЕсли;
	
	Если  НЕ СДО.ИскатьПоИмени
		И НЕ СДО.ИскатьПоЗаголовку
		И НЕ СДО.ИскатьПоЗаголовкуОкна
		И НЕ СДО.ИскатьПоЭлементамФормы Тогда
		
		СтрокаОписания = СтрокаОписания + Символы.ПС + НСтр(""ru = 'Параметры поиска не заданы.'"");
	Иначе
		СтрокаОписания = СтрокаОписания + Символы.ПС + НСтр(""ru = 'Поиск выполнить:'"");
		
		Если СДО.ИскатьПоИмени Тогда
			Подстрока =  НСтр(""ru = '- По имени формы: %1'"");
			Подстрока = СтрЗаменить(Подстрока, ""%1"", СДО.ИмяФормы);
			СтрокаОписания = СцТ_ДобавитьПодстроку(СтрокаОписания, Подстрока, Символы.ПС);
		КонецЕсли;
		
		Если СДО.ИскатьПоЗаголовку Тогда
			Подстрока =  НСтр(""ru = '- По шаблону заголовка формы: %1'"");
			Подстрока = СтрЗаменить(Подстрока, ""%1"", СДО.ЗаголовокФормы);
			СтрокаОписания = СцТ_ДобавитьПодстроку(СтрокаОписания, Подстрока, Символы.ПС);
		КонецЕсли;
		
		Если СДО.ИскатьПоЗаголовкуОкна Тогда
			Подстрока =  НСтр(""ru = '- По шаблону заголовка окна: %1'"");
			Подстрока = СтрЗаменить(Подстрока, ""%1"", СДО.ЗаголовокОкнаФормы);
			СтрокаОписания = СцТ_ДобавитьПодстроку(СтрокаОписания, Подстрока, Символы.ПС);
		КонецЕсли;
		
		Если СДО.ИскатьПоЭлементамФормы Тогда
			Подстрока =  НСтр(""ru = '- По наличию на форме указанных в шаге элементов'"");
			СтрокаОписания = СцТ_ДобавитьПодстроку(СтрокаОписания, Подстрока, Символы.ПС);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_НайтиЭлементФормы(СДО, Кратко = Истина) Экспорт
	
	Если СДО.ДействиеСОбъектом = ""ПроверитьЧтоТекущий"" Тогда
		Если Кратко Тогда
			СтрокаОписания = НСтр(""ru = 'Проверить текущий элемент формы'"");
		Иначе
			СтрокаОписания = НСтр(""ru = 'Проверить, что элемент формы является текущим'"");
		КонецЕсли;
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""ПроверитьСуществование"" Тогда
		СтрокаОписания = НСтр(""ru = 'Проверить что элемент существует на форме'"");
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""ПроверитьСвойства"" Тогда
		Если Кратко Тогда
			СтрокаОписания = НСтр(""ru = 'Проверить свойства элемента формы'"");
		Иначе
			СтрокаОписания = НСтр(""ru = 'Проверить свойства элемента формы'"");
			
			СтрокаСвойств = """";
			Если СДО.Видимость = Истина Тогда
				СтрСвойства = НСтр(""ru = 'Видимость - Истина'"");
			ИначеЕсли СДО.Видимость = Ложь Тогда
				СтрСвойства = НСтр(""ru = 'Видимость - Ложь'"");
			Иначе
				// Неопределено
				СтрСвойства = """";
			КонецЕсли;
			СтрокаСвойств = СцТ_ДобавитьПодстроку(СтрокаСвойств, СтрСвойства, "","" + Символы.ПС);
			
			Если СДО.Доступность = Истина Тогда
				СтрСвойства = НСтр(""ru = 'Доступность - Истина'"");
			ИначеЕсли СДО.Доступность = Ложь Тогда
				СтрСвойства = НСтр(""ru = 'Доступность - Ложь'"");
			Иначе
				// Неопределено
				СтрСвойства = """";
			КонецЕсли;
			СтрокаСвойств = СцТ_ДобавитьПодстроку(СтрокаСвойств, СтрСвойства, "","" + Символы.ПС);
			
			Если СДО.Заголовок <> Неопределено Тогда
				СтрСвойства = НСтр(""ru = 'Заголовок - """"%1""""'"");
				СтрСвойства = СтрЗаменить(СтрСвойства, ""%1"", СДО.Заголовок);
				СтрокаСвойств = СцТ_ДобавитьПодстроку(СтрокаСвойств, СтрСвойства, "","" + Символы.ПС);
			КонецЕсли;
			
			Если СДО.ТекстПодсказки <> Неопределено Тогда
				СтрСвойства = НСтр(""ru = 'Текст подсказки - """"%1""""'"");
				СтрСвойства = СтрЗаменить(СтрСвойства, ""%1"", СДО.ТекстПодсказки);
				СтрокаСвойств = СцТ_ДобавитьПодстроку(СтрокаСвойств, СтрСвойства, "","" + Символы.ПС);
			КонецЕсли;
			
			СтрокаОписания = СцТ_ДобавитьПодстроку(СтрокаОписания, СтрокаСвойств, "":"" + Символы.ПС);
			
		КонецЕсли;
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""ПроверитьОтсутствие"" Тогда
		СтрокаОписания = НСтр(""ru = 'Проверить отсутствие элемента формы'"");
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""Активизировать"" Тогда
		СтрокаОписания = НСтр(""ru = 'Найти и активизировать элемент формы'"");
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""НажатьКнопку"" Тогда
		Если Кратко Тогда
			СтрокаОписания = НСтр(""ru = 'Нажать кнопку управления элемента формы'"");
		Иначе
			СтрокаОписания = НСтр(""ru = 'Нажать кнопку на командной панели элемента или кнопку контекстного меню'"");
		КонецЕсли;
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""Свернуть"" Тогда
		СтрокаОписания = НСтр(""ru = 'Свернуть группу формы'"");
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""Развернуть"" Тогда
		СтрокаОписания = НСтр(""ru = 'Развернуть группу формы'"");
		
	Иначе
		СтрокаОписания = """";
	КонецЕсли;
	
	//СДО.Вставить(""ДействиеСОбъектом"", ""ПроверитьЧтоТекущий"");
	//СДО.Вставить(""Тип""              , СцТ_ТипОбъекта);
	//СДО.Вставить(""Имя""              , СцТ_ИмяОбъекта);
	//СДО.Вставить(""Заголовок""        , СцТ_Заголовок);
	//СДО.Вставить(""Видимость""        , СцТ_Видимость);
	//СДО.Вставить(""Доступность""      , СцТ_Доступность);
	//СДО.Вставить(""ТолькоПросмотр""   , СцТ_Видимость);
	//СДО.Вставить(""Заголовок""        , СцТ_Заголовок);
	//СДО.Вставить(""ТекстПодсказки""   , СцТ_ТекстПодсказки);
	//СДО.Вставить(""ВариантПоиска""    , ""100"");
	Если НЕ Кратко Тогда
	
		Если СДО.ВариантПоиска = ""100"" Тогда
			КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по имени """"%1""""'"");
			
		ИначеЕсли СДО.ВариантПоиска = ""110"" Тогда
			КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по имени """"%1"""" и по заголовку """"%2""""'"");
			
		ИначеЕсли СДО.ВариантПоиска = ""111"" Тогда
			КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по имени """"%1"""" и по заголовку """"%2"""" с учетом расположения на форме'"");
			
		ИначеЕсли СДО.ВариантПоиска = ""011"" Тогда
			КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по заголовку """"%2"""" с учетом расположения на форме'"");
			
		ИначеЕсли СДО.ВариантПоиска = ""010"" Тогда
			КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по заголовку """"%2""""'"");
			
		КонецЕсли;
		
		КритерииПоиска = СтрЗаменить(КритерииПоиска, ""%1"", СДО.Имя);
		КритерииПоиска = СтрЗаменить(КритерииПоиска, ""%2"", СДО.Заголовок);
		
		СтрокаОписания = СцТ_ДобавитьПодстроку(СтрокаОписания, КритерииПоиска, ""."" + Символы.ПС);
		
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_ПроверитьФорму(СДО, Краткое = Ложь) Экспорт
	
	Если СДО.Действие = ""ПроверитьФормаЗакрыта"" Тогда
		СтрокаОписания  = НСтр(""ru = 'Проверить, что текущая форма закрыта'"");
		
	ИначеЕсли СДО.Действие = ""ПроверитьФормаОткрыта"" Тогда
		СтрокаОписания  = НСтр(""ru = 'Проверить, что текущая форма открыта'"");
		
	ИначеЕсли СДО.Действие = ""Активизировать"" Тогда
		
		Если Краткое Тогда
			СтрокаОписания  = НСтр(""ru = 'Активизировать текущую форму'"");
		Иначе
			СтрокаОписания  = НСтр(""ru = 'Активизировать форму, заданную в групповом шаге'"");
		КонецЕсли;
		
	ИначеЕсли СДО.Действие = ""ПроверитьЗаголовок"" Тогда
		
		Если Краткое Тогда
			СтрокаОписания  = НСтр(""ru = 'Проверить заголовок'"");
		Иначе
			СтрокаОписания  = НСтр(""ru = 'Проверить, что текущая форма имеет заголовок """"%1""""'"");
			СтрокаОписания = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
		КонецЕсли;
		
	ИначеЕсли СДО.Действие = ""ПроверитьМодифицированность"" Тогда
		
		Если Краткое Тогда
			СтрокаОписания  = НСтр(""ru = 'Проверить модифицированность текущей формы'"");
		Иначе
			Если СДО.Значение = ""НЕМодифицирована"" Тогда
				СтрокаОписания  = НСтр(""ru = 'Проверить, что текущая форма НЕ модифицирована'"");
			Иначе // ""Модифицирована""
				СтрокаОписания  = НСтр(""ru = 'Проверить, что текущая форма модифицирована'"");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СДО.Действие = ""ПерейтиКСледующемуЭлементу"" Тогда
		СтрокаОписания  = НСтр(""ru = 'Перейти к следующему элементу формы'"");
		
	ИначеЕсли СДО.Действие = ""ПерейтиКПредыдущемуЭлементу"" Тогда
		СтрокаОписания  = НСтр(""ru = 'Перейти к предыдущему элементу формы'"");
		
	ИначеЕсли СДО.Действие = ""ЗакрытьОкноСообщений"" Тогда
		СтрокаОписания  = НСтр(""ru = 'Закрыть окно сообщений'"");
		
	Иначе
		СтрокаОписания = НСтр(""ru = 'Проверить состояние текущей формы'"");
		
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_НажатьКнопку(СДО, Кратко = Истина) Экспорт
	
	ИмяКП       = """";
	ЗаголовокКП = """";
	ИмяКМ       = """";
	ЗаголовокКМ = """";
	ИмяПМ       = """";
	ЗаголовокПМ = """";
	
	Если ТипЗнч(СДО.ПутьКЭлементу) = Тип(""Массив"") Тогда
		
		Для каждого СтруктураПути Из СДО.ПутьКЭлементу Цикл
			Если СтруктураПути.ВидОбъекта = ""Подменю"" Тогда
				ИмяПМ       = СтруктураПути.ИмяОбъекта;
				ЗаголовокПМ = СтруктураПути.ЗаголовокОбъекта;
				
			ИначеЕсли СтруктураПути.ВидОбъекта = ""КонтекстноеМеню"" Тогда
				ИмяКМ       = СтруктураПути.ИмяОбъекта;
				ЗаголовокКМ = СтруктураПути.ЗаголовокОбъекта;
				
			ИначеЕсли СтруктураПути.ВидОбъекта = ""КоманднаяПанель"" ИЛИ СтруктураПути.ЗаголовокОбъекта = ""КоманднаяПанель"" ИЛИ СтруктураПути.ЗаголовокОбъекта = ""Командная панель"" Тогда
				ИмяКП       = СтруктураПути.ИмяОбъекта;
				ЗаголовокКП = СтруктураПути.ЗаголовокОбъекта;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПустаяСтрока(СДО.Заголовок) Тогда
		ПредставдениеКнопки = СДО.Имя;
	Иначе
		ПредставдениеКнопки = """""""" + СДО.Заголовок + """""""";
	КонецЕсли;
	
	//ПредставдениеКнопки = ОписаниеКнопкиФормы.ПредставлениеОбъектаПриложения;
	Если НЕ ПустаяСтрока(ИмяПМ) Тогда
		ПредставдениеКнопки = ПредставдениеКнопки
			+ НСтр(""ru = ' в подменю """"'"") + ИмяПМ + """""""";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяКП) Тогда
		ПредставдениеКнопки = ПредставдениеКнопки
			+ НСтр(""ru = ' на командной панели """"'"") + ИмяКП + """""""";
	ИначеЕсли НЕ ПустаяСтрока(ИмяКМ) Тогда
		ПредставдениеКнопки = ПредставдениеКнопки
			+ НСтр(""ru = ' в контекстном меню """"'"") + ИмяКМ + """""""";
	КонецЕсли;
	
	СтрокаОписания = СцТ_ДобавитьПодстроку(НСтр(""ru = 'Нажать кнопку'""), ПредставдениеКнопки, "" "");
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_ЗаполнитьЭлементФормы(СДО, Кратко = Истина) Экспорт
	
	Если СДО.ДействиеСОбъектом = ""ВвестиТекст"" Тогда
		
		Если Кратко Тогда
			СтрокаОписания = НСтр(""ru = 'Ввести текст в поле ввода'"");
		Иначе
			СтрокаОписания  = НСтр(""ru = 'Ввести текст """"%1"""" в поле ввода'"");
			СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
		КонецЕсли;
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""ВводПоСтроке"" Тогда
		
		Если Кратко Тогда
			СтрокаОписания = НСтр(""ru = 'Ввод текста по строке'"");
		Иначе
			СтрокаОписания  = НСтр(""ru = 'Ввести текст """"%1"""" в поле ввода и выбрать первое значение из выпадающего списка'"");
			СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
		КонецЕсли;
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""ВыбратьИзВыпадающегоСписка"" Тогда
		
		Если Кратко Тогда
			СтрокаОписания = НСтр(""ru = 'Выбрать значение из выпадающего списка'"");
		Иначе
			СтрокаОписания  = НСтр(""ru = 'Выбрать значение """"%1"""" из выпадающего списка'"");
			СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
		КонецЕсли;
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""ВыбратьИзСпискаВыбора"" Тогда
		
		Если Кратко Тогда
			СтрокаОписания = НСтр(""ru = 'Выбрать значение из списка выбора'"");
		Иначе
			СтрокаОписания  = НСтр(""ru = 'Выбрать значение """"%1"""" из списка выбора'"");
			СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
		КонецЕсли;
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""Открыть"" Тогда
		
		СтрокаОписания = НСтр(""ru = 'Открыть значение'"");
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""Очистить"" Тогда
		
		СтрокаОписания = НСтр(""ru = 'Очистить значение'"");
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""НажатьКнопкуВыбора"" Тогда
		
		СтрокаОписания = НСтр(""ru = 'Нажать кнопку выбора (F4)'"");
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""Создать"" Тогда
		
		СтрокаОписания = НСтр(""ru = 'Нажать кнопку """"Создать""""'"");
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""ПерейтиКДате"" Тогда
		
		СтрокаОписания = НСтр(""ru = 'Перейти к дате %1'"");
		СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""ВыбратьВариант"" Тогда
		
		СтрокаОписания = НСтр(""ru = 'Выбрать вариант """"%1""""'"");
		СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""УстановитьОтметку"" Тогда
		
		СтрокаОписания = НСтр(""ru = 'Установить отметку """"%1""""'"");
		СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""Проверить"" Тогда
		
		СтрокаОписания = НСтр(""ru = 'Проверить значение """"%1""""'"");
		СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""УвеличитьЗначение"" Тогда
		
		СтрокаОписания = НСтр(""ru = 'Увеличить значение'"");
		
	ИначеЕсли СДО.ДействиеСОбъектом = ""УменьшитьЗначение"" Тогда
		
		СтрокаОписания = НСтр(""ru = 'Уменьшить значение'"");
		
	Иначе
		
		СтрокаОписания = СДО.ДействиеСОбъектом;
		
	КонецЕсли;
	
	Если Кратко Тогда
		Если СДО.ВариантПоиска = ""100"" Тогда
			КритерииПоиска = НСтр(""ru = 'элемента """"%1""""'"");
			
		ИначеЕсли СДО.ВариантПоиска = ""110""
			ИЛИ   СДО.ВариантПоиска = ""111""
			ИЛИ   СДО.ВариантПоиска = ""011""
			ИЛИ   СДО.ВариантПоиска = ""010"" Тогда
			КритерииПоиска = НСтр(""ru = 'элемента """"%2""""'"");
			
		КонецЕсли;
		
		КритерииПоиска = СтрЗаменить(КритерииПоиска, ""%1"", СДО.Имя);
		КритерииПоиска = СтрЗаменить(КритерииПоиска, ""%2"", СДО.Заголовок);
		
		СтрокаОписания = СцТ_ДобавитьПодстроку(СтрокаОписания, КритерииПоиска, "" "");
		
		
	Иначе
		Если СДО.ВариантПоиска = ""100"" Тогда
			КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по имени """"%1""""'"");
			
		ИначеЕсли СДО.ВариантПоиска = ""110"" Тогда
			КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по имени """"%1"""" и по заголовку """"%2""""'"");
			
		ИначеЕсли СДО.ВариантПоиска = ""111"" Тогда
			КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по имени """"%1"""" и по заголовку """"%2"""" с учетом расположения на форме'"");
			
		ИначеЕсли СДО.ВариантПоиска = ""011"" Тогда
			КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по заголовку """"%2"""" с учетом расположения на форме'"");
			
		ИначеЕсли СДО.ВариантПоиска = ""010"" Тогда
			КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по заголовку """"%2""""'"");
			
		КонецЕсли;
		
		КритерииПоиска = СтрЗаменить(КритерииПоиска, ""%1"", СДО.Имя);
		КритерииПоиска = СтрЗаменить(КритерииПоиска, ""%2"", СДО.Заголовок);
		
		СтрокаОписания = СцТ_ДобавитьПодстроку(СтрокаОписания, КритерииПоиска, ""."" + Символы.ПС);
		
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_ЗаполнитьЭлементыФормы(СДО, Кратко = Истина) Экспорт
	
	СтрокаОписания = """";
	
	//	Если УзелРеквизита.Действие = ""ВвестиТекст"" Тогда
	//		
	//		АтоописаниеРеквизита = УзелРеквизита.Представление
	//			+ НСтр(""ru = ': ввести текст '"")
	//			+ """""""" + УзелРеквизита.Значение + """""""";
	//		
	//	ИначеЕсли УзелРеквизита.Действие = ""ПерейтиКДате"" Тогда
	//		
	//		АтоописаниеРеквизита = УзелРеквизита.Представление
	//			+ НСтр(""ru = ': перейти к дате '"")
	//			+ """""""" + УзелРеквизита.Значение + """""""";
	//		
	//	ИначеЕсли УзелРеквизита.Действие = ""ВыбратьВариант"" Тогда
	//		
	//		АтоописаниеРеквизита = УзелРеквизита.Представление
	//			+ НСтр(""ru = ': выбрать вариант '"")
	//			+ """""""" + УзелРеквизита.Значение + """""""";
	//		
	//	ИначеЕсли УзелРеквизита.Действие = ""УстановитьОтметку"" Тогда
	//		
	//		АтоописаниеРеквизита = УзелРеквизита.Представление
	//			+ НСтр(""ru = ': установить отметку '"")
	//			+ """""""" + УзелРеквизита.Значение + """""""";
	//	ИначеЕсли УзелРеквизита.Действие = ""Проверить"" Тогда
	//		
	//		АтоописаниеРеквизита = УзелРеквизита.Представление
	//			+ НСтр(""ru = ': проверить '"")
	//			+ """""""" + УзелРеквизита.Значение + """""""";
	//		
	//	Иначе
	//		
	//		АтоописаниеРеквизита = УзелРеквизита.Представление + "": "" + УзелРеквизита.Действие;
	//		
	//	КонецЕсли;
	//	
	//	НовыйШаг.Автоописание = НовыйШаг.Автоописание
	//		+ Символы.ПС
	//		+ АтоописаниеРеквизита;
	
	
	
	
	
	
	//Если СДО.ДействиеСОбъектом = ""ВвестиТекст"" Тогда
	//	
	//	Если Кратко Тогда
	//		СтрокаОписания = НСтр(""ru = 'Ввести текст в поле ввода'"");
	//	Иначе
	//		СтрокаОписания  = НСтр(""ru = 'Ввести текст """"%1"""" в поле ввода'"");
	//		СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
	//	КонецЕсли;
	//	
	//ИначеЕсли СДО.ДействиеСОбъектом = ""ПерейтиКДате"" Тогда
	//	
	//	СтрокаОписания = НСтр(""ru = 'Перейти к дате %1'"");
	//	СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
	//	
	//ИначеЕсли СДО.ДействиеСОбъектом = ""ВыбратьВариант"" Тогда
	//	
	//	СтрокаОписания = НСтр(""ru = 'Выбрать вариант """"%1""""'"");
	//	СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
	//	
	//ИначеЕсли СДО.ДействиеСОбъектом = ""УстановитьОтметку"" Тогда
	//	
	//	СтрокаОписания = НСтр(""ru = 'Установить отметку """"%1""""'"");
	//	СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
	//	
	//ИначеЕсли СДО.ДействиеСОбъектом = ""Проверить"" Тогда
	//	
	//	СтрокаОписания = НСтр(""ru = 'Проверить значение """"%1""""'"");
	//	СтрокаОписания  = СтрЗаменить(СтрокаОписания, ""%1"", СДО.Значение);
	//	
	//Иначе
	//	
	//	СтрокаОписания = СДО.ДействиеСОбъектом;
	//	
	//КонецЕсли;
	//
	//Если НЕ Кратко Тогда
	//
	//	Если СДО.ВариантПоиска = ""100"" Тогда
	//		КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по имени """"%1""""'"");
	//		
	//	ИначеЕсли СДО.ВариантПоиска = ""110"" Тогда
	//		КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по имени """"%1"""" и по заголовку """"%2""""'"");
	//		
	//	ИначеЕсли СДО.ВариантПоиска = ""111"" Тогда
	//		КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по имени """"%1"""" и по заголовку """"%2"""" с учетом расположения на форме'"");
	//		
	//	ИначеЕсли СДО.ВариантПоиска = ""011"" Тогда
	//		КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по заголовку """"%2"""" с учетом расположения на форме'"");
	//		
	//	ИначеЕсли СДО.ВариантПоиска = ""010"" Тогда
	//		КритерииПоиска = НСтр(""ru = 'Поиск элемента выполнить по заголовку """"%2""""'"");
	//		
	//	КонецЕсли;
	//	
	//	КритерииПоиска = СтрЗаменить(КритерииПоиска, ""%1"", СДО.Имя);
	//	КритерииПоиска = СтрЗаменить(КритерииПоиска, ""%2"", СДО.Заголовок);
	//	
	//	СтрокаОписания = СцТ_ДобавитьПодстроку(СтрокаОписания, КритерииПоиска, ""."" + Символы.ПС);
	//	
	//КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_ПроверитьТекстОшибки(СДО, Кратко = Истина) Экспорт
	
	// Формирование описания и наименования	
	Если СДО.ВариантПроверки = ""ОшибокНет"" Тогда
		СтрокаОписания = НСтр(""ru = 'Получить сведения об отсутствии ошибки'"");
		Если НЕ Кратко Тогда
			СтрокаОписания = СтрокаОписания + "" "" + НСтр(""ru = 'и при необходимости закрыть окно ошибки'"");
		КонецЕсли;
		
	Иначе
		СтрокаОписания = НСтр(""ru = 'Получить подробные сведения об ошибке'"");
		
		Если НЕ Кратко Тогда
			СтрокаОписания = СтрокаОписания + "" "" + НСтр(""ru = 'и закрыть окно ошибки'"");
			
			Если НЕ ПустаяСтрока(СДО.ОписаниеОшибки) Тогда
				СтрокаОписания = СтрокаОписания + Символы.ПС;
				СтрокаОписания = СтрокаОписания + СДО.ОписаниеОшибки;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СДО.ИмяМодуля) Тогда
				СтрокаОписания = СтрокаОписания + Символы.ПС;
				СтрокаОписания = СтрокаОписания + НСтр(""ru = 'Модуль:'"") + "" "" + СДО.ИмяМодуля;
			КонецЕсли;
			
			Если СДО.НомерСтроки > 0 Тогда
				СтрокаОписания = СтрокаОписания + Символы.ПС;
				СтрокаОписания = СтрокаОписания + НСтр(""ru = 'Строка:'"") + "" "" + Строка(СДО.НомерСтроки);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СДО.ИсходнаяСтрока) Тогда
				СтрокаОписания = СтрокаОписания + Символы.ПС;
				СтрокаОписания = СтрокаОписания + ""("" + СДО.ИсходнаяСтрока + "")"";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага_АвтоГруппаТабличныйДокумент(Представление, Кратко = Истина) Экспорт
	
	Если Кратко Тогда
		СтрокаОписания = НСтр(""ru = 'Табличный документ'"")
	Иначе
		СтрокаОписания = НСтр(""ru = 'Работа с табличным документом'"")
	КонецЕсли;
	
	СтрокаОписания = СцТ_ДобавитьПодстроку(СтрокаОписания, Представление, "" "", Истина);
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьОписаниеШага__АвтоГруппаТаблицаФормы(СДО, Краткое = Ложь) Экспорт
	
	Если ПустаяСтрока(СДО.ЗаголовокТаблицы) Тогда
		Представление = СДО.ИмяТаблицы;
	Иначе
		Представление = СДО.ЗаголовокТаблицы;
	КонецЕсли;
	
	Если Краткое Тогда
		СтрокаОписания = НСтр(""ru = 'Таблица формы'"");
	Иначе
		СтрокаОписания = НСтр(""ru = 'Работа с таблицей формы'"");
	КонецЕсли;
	
	СтрокаОписания = СцТ_ДобавитьПодстроку(СтрокаОписания, Представление, "" "", Истина);
	
	Возврат СтрокаОписания;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеПроцедурыИФункцииСозданияШагов

// Создание шагов бизнес-логики по данным дерева
// эталонной базы
// Параметры:
//	ДанныеИсточника - данные дерева эталонной базы,
//	ИдентификаторСтрокиПриемника - идентификатор строки приемника,
//	ТолькоОтмеченные - признак выполнения действий только с отмеченными элементами
//                     эталонной базы
//	РазместитьРядом - признак, что группу нужно размещать в сценарии рядом с текущей
&НаКлиенте
Функция СцТ_ИтерационнойСозданиеУзловВДеревеСценария_НаКлиенте(
	ДанныеИсточника,
	ИдентификаторСтрокиПриемника,
	ТолькоОтмеченные = Ложь,
	РазместитьРядом = Ложь,
	ВызвавшаяФорма)
	
	Если ТолькоОтмеченные И НЕ ДанныеИсточника.Отметка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Добавление группового шага для группировок эталонной базы
	Если ДанныеИсточника.Свойство(""ТипШага"") И ДанныеИсточника.ТипШага = ""Группа""
		ИЛИ ДанныеИсточника.Свойство(""ТипУзла"") И ДанныеИсточника.ТипУзла = ""Группа"" Тогда
		
		Если ИдентификаторСтрокиПриемника = Неопределено Тогда
			ОписательПоложенияШагаВДереве = ПолучитьОписательПоложенияНовогоШагаВДереве(ВызвавшаяФорма, Неопределено);
		Иначе
			ДанныеСтрокиПриемника = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ИдентификаторСтрокиПриемника);
			ОписательПоложенияШагаВДереве = ПолучитьОписательПоложенияНовогоШагаВДереве(ВызвавшаяФорма, ДанныеСтрокиПриемника, Истина);
		КонецЕсли;
		
		СДНШ = СцТ_СоздатьБазовуюСтруктуруДанныхШага(ОписательПоложенияШагаВДереве, ""Группа"");
		СцТ_ДоработатьДанныеШага_Группа_НаКлиенте(СДНШ, ДанныеИсточника.Элемент);
		
		ПолнаяСтруктураДанныхШага = Новый Структура;
		ПолнаяСтруктураДанныхШага.Вставить(""ОписательПоложенияШагаВДереве"", ОписательПоложенияШагаВДереве);
		ПолнаяСтруктураДанныхШага.Вставить(""ТипШага""                      , ""Группа"");
		ПолнаяСтруктураДанныхШага.Вставить(""Наименование""                 , СДНШ.Наименование);
		ПолнаяСтруктураДанныхШага.Вставить(""Активность""                   , Истина);
		ПолнаяСтруктураДанныхШага.Вставить(""СтруктураДанныхШага""          , СДНШ);
		ПолнаяСтруктураДанныхШага.Вставить(""СсылкиШага""                   , Неопределено);
		
		НовыйШаг = СцТ_СохранитьНовыйШаг(ВызвавшаяФорма, ПолнаяСтруктураДанныхШага);
		
	Иначе
		// Создание автогруппы для шага содержащего ссылку на объект (запись) информационной базы
		
		Если ИдентификаторСтрокиПриемника = Неопределено Тогда
			ОписательПоложенияШагаВДереве = ПолучитьОписательПоложенияНовогоШагаВДереве(ВызвавшаяФорма, Неопределено);
		Иначе
			ДанныеСтрокиПриемника = ВызвавшаяФорма.БлокСценария.НайтиПоИдентификатору(ИдентификаторСтрокиПриемника);
			ОписательПоложенияШагаВДереве = ПолучитьОписательПоложенияНовогоШагаВДереве(ВызвавшаяФорма, ДанныеСтрокиПриемника, Ложь);
		КонецЕсли;
		
		СтруктураШаблонов = СцТ_ПолучитьСтруктуруШаблонов_НаСервере(
			ДанныеИсточника.ТипМетаданных,
			ДанныеИсточника.ИмяМетаданных,
			АдресШаблоновШагов,
			АдресНачальныхУстановокШагов);
		
		СДНШ = СцТ_СоздатьБазовуюСтруктуруДанныхШага(ОписательПоложенияШагаВДереве, ""АвтоГруппа"", Неопределено);
		
		ИдентификаторыСсылок = Неопределено;
		СцТ_ДоработатьДанныеШага_АвтоГруппа(СДНШ, ДанныеИсточника.Значение, ДанныеИсточника.ТипМетаданных, ДанныеИсточника.ИмяМетаданных, ИдентификаторыСсылок);
		
		ПолнаяСтруктураДанныхШага = Новый Структура;
		ПолнаяСтруктураДанныхШага.Вставить(""ОписательПоложенияШагаВДереве"", ОписательПоложенияШагаВДереве);
		ПолнаяСтруктураДанныхШага.Вставить(""ТипШага""                      , СДНШ.ТипШага);
		ПолнаяСтруктураДанныхШага.Вставить(""Наименование""                 , СДНШ.Наименование);
		ПолнаяСтруктураДанныхШага.Вставить(""Активность""                   , Истина);
		ПолнаяСтруктураДанныхШага.Вставить(""СтруктураДанныхШага""          , СДНШ);
		ПолнаяСтруктураДанныхШага.Вставить(""СсылкиШага""                   , ИдентификаторыСсылок);
		
		НовыйШаг = СцТ_СохранитьНовыйШаг(ВызвавшаяФорма, ПолнаяСтруктураДанныхШага);
		
		////////////////////////////////////////////
		
		СтруктураШаблонов = СцТ_ПолучитьСтруктуруШаблонов_НаСервере(
			ДанныеИсточника.ТипМетаданных,
			ДанныеИсточника.ИмяМетаданных,
			АдресШаблоновШагов,
			АдресНачальныхУстановокШагов);
		
		Если СтруктураШаблонов.МассивШаблоновШага.Количество() > 0 Тогда
			// Найден основной персональный шаблон шагов
			СцТ_ПрименитьШаблонКАвтоГруппе(НовыйШаг, СтруктураШаблонов.МассивШаблоновШага, Ложь);
			// PS: Подчиненные шаги удалять не нужно, так как их еще нет
		Иначе
			//Основного персонального шаблона нет
			// построение шагов по шаблону по-умолчанию
			СцТ_ПрименитьКАвтогруппеНастройкуПоУмолчанию(НовыйШаг, СтруктураШаблонов.МассивШагов, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	//////////////////////////////
	
	// Рекурсивный обход подчиненных строк в дереве эталонной базы
	// Узел в сценарий добавляется полностью
	Для каждого ПодчиненныйУзел Из ДанныеИсточника.ПолучитьЭлементы() Цикл
		
		СцТ_ИтерационнойСозданиеУзловВДеревеСценария_НаКлиенте(
			ПодчиненныйУзел,
			НовыйШаг.ПолучитьИдентификатор(),
			ТолькоОтмеченные,,
			ВызвавшаяФорма);
		
	КонецЦикла;
	
	СцТ_ПронумероватьШаги_НаКлиенте(,, ВызвавшаяФорма);
	
	Возврат НовыйШаг;
	
КонецФункции

// Вызов процедуры применения к автогруппе шаблона шагов
// Параметры:
// 	ШагАвтогруппы - данные шага автогруппы
// 	МассивСтруктурШаблоновШагов - массив, содержащий структуры, описывающие шаблон шага
// 	УдалятьПодчиненныеШаги - Признак, указывающий, что подчиненные шаги нужно удалять
&НаКлиенте
Процедура СцТ_ПрименитьШаблонКАвтоГруппе(
	ШагАвтогруппы,
	МассивСтруктурШаблоновШагов,
	УдалятьПодчиненныеШаги = Ложь,
	ВызвавшаяФорма = Неопределено)
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	Если УдалятьПодчиненныеШаги Тогда
		// Убить все подчиненные шаги в узле (если есть групповые узлы, то их не трогать)
		КоличествоСтрок = ШагАвтогруппы.ПолучитьЭлементы().Количество();
		Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
			ДочерняяСтрока = ШагАвтогруппы.ПолучитьЭлементы()[КоличествоСтрок - ОбратныйИндекс];
			// Вложенные группы не удаляются
			Если Найти(ДочерняяСтрока.ТипШага, ""Группа"") = 0 Тогда
				ШагАвтогруппы.ПолучитьЭлементы().Удалить(ДочерняяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Строки добавляются в конец узла
	
	// Для каждой строки шаблона создать нужный шаг
	Для каждого СтруктураШаблонаШага Из МассивСтруктурШаблоновШагов Цикл
		
		// если тип шага не используется тогда продолжить
		Если СписокТиповШагов.НайтиПоЗначению(СтруктураШаблонаШага.ТипШага) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавленныйШаг = СцТ_ВставитьШаг_НаКлиенте(ШагАвтогруппы, СтруктураШаблонаШага.ТипШага, ВызвавшаяФорма);
		
	КонецЦикла;
	
	СцТ_ПронумероватьШаги_НаКлиенте();
	
КонецПроцедуры

// Процедура применения к автогруппе начальных установок шагов
// Параметры
//	ШагАвтогруппы - данные шага автогруппы
//	МассивСпискаШагов - массив добавляемых шагов
//	УдалятьПодчиненныеШаги - признак, что подчиненные шаги в автогруппе нужно удалять
&НаКлиенте
Процедура СцТ_ПрименитьКАвтогруппеНастройкуПоУмолчанию(
	ШагАвтогруппы,
	МассивСпискаШагов = Неопределено,
	УдалятьПодчиненныеШаги = Ложь,
	ВызвавшаяФорма = Неопределено)
	
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	Если УдалятьПодчиненныеШаги Тогда
		// Убить все подчиненные шаги в узле (если есть групповые узлы, то их не трогать)
		КоличествоСтрок = ШагАвтогруппы.ПолучитьЭлементы().Количество();
		Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
			ДочерняяСтрока = ШагАвтогруппы.ПолучитьЭлементы()[КоличествоСтрок - ОбратныйИндекс];
			// Вложенные группы не удаляются
			Если Найти(ДочерняяСтрока.ТипШага, ""Группа"") = 0 Тогда
				ШагАвтогруппы.ПолучитьЭлементы().Удалить(ДочерняяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСпискаШагов = Неопределено Тогда
		МассивСпискаШагов = СцТ_ПолучитьСтруктуруНастроекПоУмолчанию_НаСервере(
			ШагАвтогруппы.ТипМетаданных,
			ШагАвтогруппы.ИмяМетаданных,
			АдресНачальныхУстановокШагов);
	КонецЕсли;
	
	Для каждого ШагПоУмолчанию Из МассивСпискаШагов Цикл
		СцТ_ВставитьШаг_НаКлиенте(ШагАвтогруппы, ШагПоУмолчанию, ВызвавшаяФорма);
	КонецЦикла
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруОбъектаИлиЗаписиИБ_НаСервере(
	ТипШага,
	ТипМД,
	ИмяМД,
	СтруктураДереваЗначения,
	ПараметрыДляПоискаОбъекта,
	АдресТаблицыСсылок,
	СтруктураШаблона,
	АдресНачальныхУстановокШагов,
	ГлобальныеПараметры,
	МассивИдентификацииСсылок,
	АдресТаблицыКлючей,
	НастройкаОбновления = Неопределено,
	ПротоколОбновленияШага = """",
	УИШ = """")
	
	МодульЭтойОбработки = СцТ_ПолучитьЭтуОбработку();
	
	ОбъектИлиЗапись = МодульЭтойОбработки.ПолучитьОбъектИлиЗаписьПоСтруктуреПоиска(ПараметрыДляПоискаОбъекта, АдресТаблицыСсылок, ГлобальныеПараметры);

	ДеревоЗначения = МодульЭтойОбработки.СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(СтруктураДереваЗначения);
	ДеревоЗначения.Строки.Очистить();
	
	// Служебные узлы
	УзелРеквизитов = СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
		ДеревоЗначения,
		""Реквизиты"",
		""Реквизиты"",
		""Реквизиты"");
	
	УзелТабличныхЧастей = СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
		ДеревоЗначения,
		""ТабличныеЧасти"",
		""Табличные части"",
		""ТабличныеЧасти"");
	
	Если ТипШага = ""Воспроизвести"" Тогда
		ДействиеПоУмолчанию = ""Заполнить"";
	Иначе
		ДействиеПоУмолчанию = ""Проверить"";
	КонецЕсли;
	
	Если МассивИдентификацииСсылок = Неопределено Тогда
		МассивИдентификацииСсылок = Новый Массив;
	КонецЕсли;
	
	Если ОбъектИлиЗапись = Неопределено Тогда
		Возврат СцТ_ДеревоЗначенияВСтруктуру_НаСервере(ДеревоЗначения);
	КонецЕсли;
	
	Если (ТипМД = ""Справочники"" ИЛИ ТипМД = ""ПланыВидовХарактеристик"")
		И ОбъектИлиЗапись.ЭтоГруппа Тогда
		ДляГруппы = Истина;
		
	ИначеЕсли (ТипМД = ""Справочники""  ИЛИ ТипМД = ""ПланыВидовХарактеристик"")
		И НЕ ОбъектИлиЗапись.ЭтоГруппа Тогда
		ДляГруппы = Ложь;
		
	Иначе
		ДляГруппы = Неопределено;
		
	КонецЕсли;
	
	// ***************************
	// Заполнение реквизитов шапки
	
	СписокРеквизитовОМД = МодульЭтойОбработки.СцТ_ПолучитьСписокВсехАтрибутовОбъектаМетаданных(
		ТипМД,
		ИмяМД,
		ДляГруппы);
		
	// Поиск шаблона
	Если СтруктураШаблона = Неопределено Тогда
		ШаблонРеквизитов = Неопределено;
	Иначе
		Если ТипЗнч(СтруктураШаблона.ДеревоЗначения) = Тип(""Структура"") Тогда
			ШаблонДерева = МодульЭтойОбработки.СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(СтруктураШаблона.ДеревоЗначения);
		ИначеЕсли ТипЗнч(СтруктураШаблона.ДеревоЗначения) = Тип(""ДеревоЗначений"") Тогда
			ШаблонДерева = СтруктураШаблона.ДеревоЗначения;
		Иначе
			ШаблонДерева = Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(ШаблонДерева) = Тип(""ДеревоЗначений"") Тогда
			ШаблонРеквизитов = ШаблонДерева.Строки.Найти(""Реквизиты"", ""Имя"");
			ШаблонТабличныхЧастей = ШаблонДерева.Строки.Найти(""ТабличныеЧасти"", ""Имя"");
		Иначе
			ШаблонРеквизитов = Неопределено;
			ШаблонТабличныхЧастей = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Определение исключений
	СтруктураНастройкиШагаПоУмолчанию = СцТ_ПолучитьНастройкуПоУмолчаниюДляШага(
		ТипМД,
		ТипШага,
		АдресНачальныхУстановокШагов,
		Ложь);
	
	Если СтруктураНастройкиШагаПоУмолчанию = Неопределено Тогда
		УзелИсключений = Неопределено;
	Иначе
		ДеревоНастроекПоУмолчанию = СтруктураНастройкиШагаПоУмолчанию.Значение;
		УзелИсключений = ДеревоНастроекПоУмолчанию.Строки.Найти(""Исключения"", ""Имя"");
	КонецЕсли;
	
	Если УзелИсключений = Неопределено Тогда
		УзелИсключенийРеквизитов = Неопределено;
	Иначе
		УзелИсключенийРеквизитов = УзелИсключений.Строки.Найти(""Реквизиты"", ""Имя"");
	КонецЕсли;
	
	ТипХЗ = Тип(""ХранилищеЗначения"");
	
	Если ШаблонРеквизитов <> Неопределено Тогда
		
		// Заполнение реквизитов выполняется по шаблону
		// Выполняется лишь проверка, на то что реквизит не удален из метаданных
		ПротоколУдаленияРеквизитов = """";
		Для каждого СтрокаШаблона Из ШаблонРеквизитов.Строки Цикл
			
			ЭлементСпискаРеквизитов = СписокРеквизитовОМД.НайтиПоЗначению(СтрокаШаблона.Имя);
			Если ЭлементСпискаРеквизитов = Неопределено Тогда
				СцТ_ДобавитьПодстроку_НаСервере(ПротоколУдаленияРеквизитов,
					НСтр(""ru = 'Удален реквизит """"'"")
						+ СтрокаШаблона.Синоним
						+ """""""");
			Иначе
				// Отметка использованного элемента списка
				ЭлементСпискаРеквизитов.Пометка = Истина;
				
				ОбновленоЗначение = Ложь;
				Если НастройкаОбновления = Неопределено
					ИЛИ НастройкаОбновления.ОбновитьЗначениеСуществующихРеквизитов = Истина Тогда
					
					ЗначениеРеквизита = ОбъектИлиЗапись[ЭлементСпискаРеквизитов.Значение];
					Если ТипЗнч(ЗначениеРеквизита) = ТипХЗ Тогда
						ЗначениеРеквизита = XMLСтрока(ЗначениеРеквизита);
					КонецЕсли;
					
					Если НастройкаОбновления <> Неопределено Тогда
						// Тогда нужно выполнить протоколирование обновления значения реквизита
						ПрежнееЗначениеРеквизита = МодульЭтойОбработки.СцТ_ПолучитьЗначение_НаСервере(СтрокаШаблона.Значение);
						ОбновленоЗначение = (ПрежнееЗначениеРеквизита <> ЗначениеРеквизита);
					КонецЕсли;
					
					ПредставлениеРеквизита = Строка(ЗначениеРеквизита);
					
				Иначе
					ЗначениеРеквизита      = СтрокаШаблона.Значение;
					ПредставлениеРеквизита = СтрокаШаблона.Представление;
					
				КонецЕсли;
				
				Если ОбновленоЗначение Тогда
					ДобавляемаяПодстрока = НСтр(""ru = 'Обновлено значение реквизита """"%1"""". Было """"%2"""", стало """"%3""""'"");
					ДобавляемаяПодстрока = СтрЗаменить(ДобавляемаяПодстрока, ""%1"", ЭлементСпискаРеквизитов.Представление);
					ДобавляемаяПодстрока = СтрЗаменить(ДобавляемаяПодстрока, ""%2"", Строка(ПрежнееЗначениеРеквизита));
					ДобавляемаяПодстрока = СтрЗаменить(ДобавляемаяПодстрока, ""%3"", Строка(ПредставлениеРеквизита));
					СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага, ДобавляемаяПодстрока);
				КонецЕсли;
				
				// Заполнение данными
				
				НовыйУзел = СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
					УзелРеквизитов,
					ЭлементСпискаРеквизитов.Значение,
					СтрокаШаблона.Синоним,
					ЗначениеРеквизита,
					СтрокаШаблона.Активность,
					СтрокаШаблона.Действие,
					СтрокаШаблона.Скрипт,
					0,
					МассивИдентификацииСсылок,
					АдресТаблицыКлючей);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавление новых реквизитов, которые есть в метаданных
		// но отсутствуют в шаблоне
		Если НастройкаОбновления = Неопределено ИЛИ НастройкаОбновления.ДобавитьНовыеРеквизитыШапки = Истина Тогда
			
			Для каждого ЭлементСпискаРеквизитов Из СписокРеквизитовОМД Цикл
				Если НЕ ЭлементСпискаРеквизитов.Пометка Тогда
					
					Если НастройкаОбновления = Неопределено Тогда
						Активность = 1;
					Иначе
						Если НастройкаОбновления.АктивизацияНовыхРеквизитов = 1 Тогда
							Активность = 1;
						ИначеЕсли НастройкаОбновления.АктивизацияНовыхРеквизитов = 2 Тогда
							Активность = 0;
						Иначе
							
							Активность = (УзелИсключенийРеквизитов = Неопределено)
								ИЛИ (УзелИсключенийРеквизитов.Строки.Найти(ЭлементСпискаРеквизитов.Значение, ""Имя"") = Неопределено);
							
						КонецЕсли;
					КонецЕсли;
					
					// Заполнение данными
					НовыйУзел = СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
							УзелРеквизитов,
							ЭлементСпискаРеквизитов.Значение,
							ЭлементСпискаРеквизитов.Представление,
							ОбъектИлиЗапись[ЭлементСпискаРеквизитов.Значение],
							Активность,
							ДействиеПоУмолчанию,
							,
							0,
							МассивИдентификацииСсылок,
							АдресТаблицыКлючей);
					
					СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага,
						НСтр(""ru = 'Добавлен новый реквизит """"'"")
							+ ЭлементСпискаРеквизитов.Представление
							+ """""""");
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПротоколУдаленияРеквизитов) Тогда
			СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага, ПротоколУдаленияРеквизитов);
		КонецЕсли;
		
	Иначе
		// Добавление реквизитов с настройками по умолчанию
		
		// Заполнение сведений о реквизитах шапки
		Для каждого ЭлементСпискаРеквизитов Из СписокРеквизитовОМД Цикл
			
			Если УзелИсключенийРеквизитов <> Неопределено
				И УзелИсключенийРеквизитов.Строки.Найти(ЭлементСпискаРеквизитов.Значение, ""Имя"") <> Неопределено Тогда
				Активность = 0;
			Иначе
				Активность = 1;
			КонецЕсли;
			
			Синоним = ЭлементСпискаРеквизитов.Представление;
			
			НовыйУзел = СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
				УзелРеквизитов,
				ЭлементСпискаРеквизитов.Значение,
				ЭлементСпискаРеквизитов.Представление,
				ОбъектИлиЗапись[ЭлементСпискаРеквизитов.Значение],
				Активность,
				ДействиеПоУмолчанию,
				,
				0,
				МассивИдентификацииСсылок,
				АдресТаблицыКлючей);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипШага = ""Воспроизвести"" Тогда
		// Определение варианта записи воспроизводимого объекта
		Если ТипМД <> ""Документы"" Тогда
			ВариантЗаписи = ""Записать"";
		Иначе
			
			ВариантЗаписи = Неопределено;
			Попытка
				Если ШаблонДерева <> Неопределено Тогда
				УзелВариантаЗаписи = ШаблонДерева.Строки.Найти(""ВариантЗаписи"", ""Имя"");
					Если УзелВариантаЗаписи <> Неопределено Тогда
						ВариантЗаписи = УзелВариантаЗаписи.Значение;
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Если ВариантЗаписи = Неопределено Тогда
				// Определить вариант записи по шаблону шагов по умолчанию
				Если СтруктураНастройкиШагаПоУмолчанию <> Неопределено Тогда
					УзелВариантаЗаписи = СтруктураНастройкиШагаПоУмолчанию.Значение.Строки.Найти(""ВариантЗаписи"", ""Имя"");
					Если УзелВариантаЗаписи <> Неопределено Тогда
						ВариантЗаписи = УзелВариантаЗаписи.Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если ВариантЗаписи <> ""Записать""
					И ВариантЗаписи <> ""Провести"" Тогда
					ВариантЗаписи = ?(ОбъектИлиЗапись.Проведен, ""Провести"", ""Записать"");
				КонецЕсли;
				
				Если ВариантЗаписи = ""Провести"" Тогда
					ВариантЗаписи = ""ПровестиНеоперативно"";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УзелВариантаЗаписи = СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
			ДеревоЗначения,
			""ВариантЗаписи"",
			""Вариант записи"",
			""ВариантЗаписи"",
			ВариантЗаписи);
		
	КонецЕсли;
	
	// ***************************
	// Заполнение реквизитов табличных частей
	Если ТипМД = ""РегистрыСведений"" Тогда
		Возврат СцТ_ДеревоЗначенияВСтруктуру_НаСервере(ДеревоЗначения);
	КонецЕсли;
	
	//Все попавшие сюда объекты метаданных могут иметь табличные части
	
	МассивРеквизитовИсключений = Новый Массив;
	Если УзелИсключений <> Неопределено Тогда
		УзелИсключенийРеквизитовТЧ = УзелИсключений.Строки.Найти(""РеквизитыТЧ"", ""Имя"");
		Для каждого СтрокаИсключения Из УзелИсключенийРеквизитовТЧ.Строки Цикл
			МассивРеквизитовИсключений.Добавить(СтрокаИсключения.Имя);
		КонецЦикла;
	КонецЕсли;
	
	СписокТЧ = Новый СписокЗначений;
	// Список значений используется исключительно для отбора разрешенных и сортировки
	Для каждого ТабличнаяЧасть Из ОбъектИлиЗапись.Метаданные().ТабличныеЧасти Цикл
		
		Если ДляГруппы <> Неопределено
			И (ДляГруппы 
			И ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента
			ИЛИ НЕ ДляГруппы
			И ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
			
			Продолжить;
		КонецЕсли;
		
		СписокТЧ.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Синоним);
		
	КонецЦикла;
	
	СписокТЧ.СортироватьПоПредставлению();
	
	ПротоколАктивацииСуществующихТЧ = """";
	Для каждого ЭлементСпискаТЧ Из СписокТЧ Цикл
		
		Если ШаблонТабличныхЧастей <> Неопределено Тогда
			ШаблонТабличнойЧасти = ШаблонТабличныхЧастей.Строки.Найти(ЭлементСпискаТЧ.Значение, ""Имя"");
		Иначе
			ШаблонТабличнойЧасти = Неопределено;
		КонецЕсли;
		
		ЭтоНоваяТЧ               = Ложь;
		Если ШаблонТабличнойЧасти = Неопределено Тогда
			
			// Это новая ТЧ
			Если НастройкаОбновления <> Неопределено
				И НастройкаОбновления.ДобавитьНовыеТабличныеЧасти <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Активность = НастройкаОбновления = Неопределено
				ИЛИ (НастройкаОбновления.АктивизацияНовыхТЧ = 0);
			
			ЭтоНоваяТЧ = Истина;
			
			СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага,
				НСтр(""ru = 'Добавлена новая табличная часть """"'"")
					+ ЭлементСпискаТЧ.Представление
					+ """""""");
			
		Иначе
			Активность = ШаблонТабличнойЧасти.Активность;
			
			Если Активность Тогда
				СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага,
					НСтр(""ru = 'Обновлены значения табличной части """"'"")
						+ ЭлементСпискаТЧ.Представление
						+ """""""");
			КонецЕсли;
			
		КонецЕсли;
		
		Таблица = ОбъектИлиЗапись[ЭлементСпискаТЧ.Значение].Выгрузить();
		
		Если НастройкаОбновления <> Неопределено И НЕ ЭтоНоваяТЧ Тогда
			ТаблицаЗаполнена = (Таблица.Количество() > 0);
			Если НастройкаОбновления.АктивизацияСуществующихТЧ = 0 Тогда
				Если ТаблицаЗаполнена И НЕ Активность Тогда
					Активность = Истина;
					СцТ_ДобавитьПодстроку_НаСервере(ПротоколАктивацииСуществующихТЧ,
						НСтр(""ru = 'Установлена активность табличной части """"'"") + ЭлементСпискаТЧ.Представление + """""""");
				ИначеЕсли НЕ ТаблицаЗаполнена И Активность Тогда
					Активность = Ложь;
					СцТ_ДобавитьПодстроку_НаСервере(ПротоколАктивацииСуществующихТЧ,
						НСтр(""ru = 'Сброшена активность табличной части """"'"") + ЭлементСпискаТЧ.Представление + """""""");
				КонецЕсли;
			ИначеЕсли НастройкаОбновления.АктивизацияСуществующихТЧ = 1 Тогда
				Если ТаблицаЗаполнена И НЕ Активность Тогда
					Активность = Истина;
					СцТ_ДобавитьПодстроку_НаСервере(ПротоколАктивацииСуществующихТЧ,
						НСтр(""ru = 'Установлена активность табличной части """"'"") + ЭлементСпискаТЧ.Представление + """""""");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		УзелТабличнойЧасти = СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
			УзелТабличныхЧастей,
			ЭлементСпискаТЧ.Значение,
			ЭлементСпискаТЧ.Представление,
			""ТабличнаяЧасть"",,
			Активность);
		
		Если ТипШага <> ""Воспроизвести"" Тогда
			КлючевыеПоля = Новый Массив;
			КлючевыеПоля.Добавить(""НомерСтроки"");
		Иначе
			КлючевыеПоля = Неопределено;
		КонецЕсли;
		
		ПротоколОбновленияРеквизитовТЧ = """";
		СцТ_ДобавитьТаблицуЗначенийВВеткуДерева_НаСервере(
			УзелТабличнойЧасти,
			Таблица,
			ШаблонТабличнойЧасти,
			МассивРеквизитовИсключений,
			ДействиеПоУмолчанию,
			КлючевыеПоля,
			НастройкаОбновления,
			ПротоколОбновленияРеквизитовТЧ,
			МассивИдентификацииСсылок,
			АдресТаблицыКлючей);
		
		Если НЕ ПустаяСтрока(ПротоколОбновленияРеквизитовТЧ) Тогда
			СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага, ПротоколОбновленияРеквизитовТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ШаблонТабличныхЧастей <> Неопределено Тогда
		Для каждого УзелТЧ Из ШаблонТабличныхЧастей.Строки Цикл
			Если УзелТабличныхЧастей.Строки.Найти(УзелТЧ.Имя, ""Имя"") = Неопределено Тогда
				СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага,
					НСтр(""ru = 'Удалена табличная часть """"'"") + УзелТЧ.Синоним + """""""");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПротоколАктивацииСуществующихТЧ) Тогда
		СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага,
			ПротоколАктивацииСуществующихТЧ);
	КонецЕсли;
	
	Возврат СцТ_ДеревоЗначенияВСтруктуру_НаСервере(ДеревоЗначения);
	
КонецФункции

// Процедура заполнения дерева значения для шага сверки движений
//
// Параметры
//	ДеревоЗначенияШага
//	Документ
//	ТипМетаданных
//	ТипШага
//	ДеревоШаблона
//	АдресХранилищаНастроекПоУмолчанию
//	НастройкаОбновления
//	ПротоколОбновленияШага
//	СтруктураНастройкиШагаПоУмолчанию
&НаСервереБезКонтекста
Функция СцТ_ЗаполнитьДеревоДвижений_НаСервере(
	ТипШага,
	ТипМД,
	ИмяМД,
	СтруктураДереваЗначения,
	ПараметрыДляПоискаОбъекта,
	АдресТаблицыСсылок,
	СтруктураШаблона,
	АдресНачальныхУстановокШагов,
	ГлобальныеПараметры,
	МассивИдентификацииСсылок,
	АдресТаблицыКлючей,
	НастройкаОбновления = Неопределено,
	ПротоколОбновленияШага = """",
	УИШ = """")
	
	МодульЭтойОбработки = СцТ_ПолучитьЭтуОбработку();
	
	ДеревоЗначения = МодульЭтойОбработки.СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(СтруктураДереваЗначения);
	ДеревоЗначения.Строки.Очистить();
	
	УзелДвижений = СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
		ДеревоЗначения,
		""ДвиженияПоРегистрам"",
		""Движения по регистрам"",
		""ДвиженияПоРегистрам"");
	
	Документ = МодульЭтойОбработки.ПолучитьОбъектИлиЗаписьПоСтруктуреПоиска(ПараметрыДляПоискаОбъекта, АдресТаблицыСсылок, ГлобальныеПараметры);
	Если Документ = Неопределено Тогда
		Возврат СцТ_ДеревоЗначенияВСтруктуру_НаСервере(ДеревоЗначения);
	КонецЕсли;
	
	Если МассивИдентификацииСсылок = Неопределено Тогда
		МассивИдентификацииСсылок = Новый Массив;
	КонецЕсли;
	
	// Поиск шаблона
	Если СтруктураШаблона = Неопределено Тогда
		ШаблонДвижений = Неопределено;
	Иначе
		Если ТипЗнч(СтруктураШаблона.ДеревоЗначения) = Тип(""Структура"") Тогда
			ШаблонДерева = МодульЭтойОбработки.СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(СтруктураШаблона.ДеревоЗначения);
		Иначе
			ШаблонДерева = СтруктураШаблона.ДеревоЗначения.Скопировать();
		КонецЕсли;
		
		Если ТипЗнч(ШаблонДерева) = Тип(""ДеревоЗначений"") Тогда
			ШаблонДвижений = ШаблонДерева.Строки.Найти(""ДвиженияПоРегистрам"", ""Имя"");
		Иначе
			ШаблонДвижений = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Получение реальных движений
	ДвиженияДокумента   = Документ.Метаданные().Движения;
	КоличествоРегистров = ДвиженияДокумента.Количество();
	
	Если КоличествоРегистров = 0 Тогда
		УзелДвижений.Строки.Очистить();
		Возврат СцТ_ДеревоЗначенияВСтруктуру_НаСервере(ДеревоЗначения);
	КонецЕсли;
	
	
	// Если используется шаблон, то нужно удалить движения,
	// которых нет в движении документа
		
	МассивИсключений = Новый Массив;
	
	СтруктураНастройкиШагаПоУмолчанию = СцТ_ПолучитьНастройкуПоУмолчаниюДляШага(
		ТипМД,
		ТипШага,
		АдресНачальныхУстановокШагов,
		Ложь);
	
	Если СтруктураНастройкиШагаПоУмолчанию <> Неопределено Тогда
		ДеревоНастроекПоУмолчанию = СтруктураНастройкиШагаПоУмолчанию.Значение;
		УзелИсключений = ДеревоНастроекПоУмолчанию.Строки.Найти(""Исключения"", ""Имя"");
		Если УзелИсключений <> Неопределено Тогда
			УзелИсключенийРеквизитовДвижений = УзелИсключений.Строки.Найти(""РеквизитыДвижений"", ""Имя"");
			Если УзелИсключенийРеквизитовДвижений <> Неопределено Тогда
				Для каждого СтрокаИсключения Из УзелИсключенийРеквизитовДвижений.Строки Цикл
					МассивИсключений.Добавить(СтрокаИсключения.Имя);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Обход движений документа.
	// Все движения, которые отсутствуют в шаблоне считаются новыми
	// для новых движений активность определяется по их заполненности
	ПротоколОбновленияСуществующихДвижений = """";
	Для каждого Движение Из ДвиженияДокумента Цикл
		
		Если НЕ ПравоДоступа(""Чтение"", Движение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ШаблонДвижений <> Неопределено Тогда
			ШаблонНужногоДвижения = ШаблонДвижений.Строки.Найти(Движение.Имя, ""Имя"");
		Иначе
			ШаблонНужногоДвижения = Неопределено;
		КонецЕсли;
		
		Если ШаблонНужногоДвижения <> Неопределено Тогда
			
			ЭтоНовоеДвижение = Ложь;
			
			АктивностьДвижения = ШаблонНужногоДвижения.Активность;
			
			УзелДвижения = СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
				УзелДвижений,
				ШаблонНужногоДвижения.Имя,
				ШаблонНужногоДвижения.Синоним,
				""ДвижениеПоРегистру"",,
				АктивностьДвижения,,,,
				Ложь);
			
			Если ШаблонНужногоДвижения.Активность Тогда
				СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага,
					НСтр(""ru = 'Обновлены значения движения """"'"") + Движение.Синоним + """""""");
			КонецЕсли;
			
		Иначе
			
			ЭтоНовоеДвижение = Истина;
			
			Если НастройкаОбновления = Неопределено ИЛИ НастройкаОбновления.АктивизацияНовыхДвижений = 0 Тогда
				
				ТекстЗапроса = ""
				|ВЫБРАТЬ ПЕРВЫЕ 1 """""" + Движение.Имя +  """""" КАК Имя ИЗ "" 
				+ Движение.ПолноеИмя() + "" ГДЕ Регистратор = &Регистратор"";
				Запрос = Новый Запрос(ТекстЗапроса);
				Запрос.УстановитьПараметр(""Регистратор"", Документ.Ссылка);
				Если Запрос.Выполнить().Пустой() Тогда
					АктивностьДвижения = 0;
				Иначе
					АктивностьДвижения = 1;
				КонецЕсли;
				
			Иначе
				
				АктивностьДвижения = (НастройкаОбновления.АктивизацияНовыхДвижений = 1);
				
			КонецЕсли;
			
			УзелДвижения = СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
				УзелДвижений,
				Движение.Имя,
				Движение.Синоним,
				""ДвижениеПоРегистру"",,
				АктивностьДвижения,,,,
				Ложь);
			
			СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага,
				НСтр(""ru = 'Добавлено новое движение """"'"") + Движение.Синоним + """""""");
			
		КонецЕсли;
		
		НаборРегистра = Документ.Движения.Найти(Движение.Имя);
		НаборРегистра.Отбор.Регистратор.Установить(Документ.Ссылка, Истина);
		НаборРегистра.Прочитать();
		
		// Определяем тип и имя регистра
		ПолноеИмя    = НаборРегистра.Метаданные().ПолноеИмя();
		ПозицияТочки = Найти(ПолноеИмя, ""."");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);
		
		УзелДвижения.Значение      = ТипРегистра;
		УзелДвижения.Представление = Движение.ПолноеИмя();
		
		// Заполнение таблицы движения
		ТаблицаДвижения = НаборРегистра.Выгрузить();
		
		Если НастройкаОбновления <> Неопределено И НЕ ЭтоНовоеДвижение Тогда
			ТаблицаЗаполнена = (ТаблицаДвижения.Количество() > 0);
			Если НастройкаОбновления.АктивизацияСуществующихДвижений = 0 Тогда
				Если ТаблицаЗаполнена И НЕ АктивностьДвижения Тогда
					УзелДвижения.Активность = Истина;
					СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияСуществующихДвижений,
						НСтр(""ru = 'Установлена активность движения """"'"") + УзелДвижения.Синоним + """""""");
				ИначеЕсли НЕ ТаблицаЗаполнена И АктивностьДвижения Тогда
					УзелДвижения.Активность = Ложь;
					СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияСуществующихДвижений,
						НСтр(""ru = 'Сброшена активность движения """"'"") + УзелДвижения.Синоним + """""""");
				КонецЕсли;
			ИначеЕсли НастройкаОбновления.АктивизацияСуществующихДвижений = 1 Тогда
				Если ТаблицаЗаполнена И НЕ АктивностьДвижения Тогда
					УзелДвижения.Активность = Истина;
					СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияСуществующихДвижений,
						НСтр(""ru = 'Установлена активность движения """"'"") + УзелДвижения.Синоним + """""""");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Удаление колонки МоментВремени, т.к. при сравнении движений документа,
		// значение поля не несет смысловой нагрузки
		КолонкаМоментВремени = ТаблицаДвижения.Колонки.Найти(""МоментВремени"");
		Если КолонкаМоментВремени <> Неопределено Тогда
			ТаблицаДвижения.Колонки.Удалить(КолонкаМоментВремени);
		КонецЕсли;
		
		КлючевыеПоля = Новый Массив;
		Для каждого Измерение Из Движение.Измерения Цикл
			КлючевыеПоля.Добавить(Измерение.Имя);
		КонецЦикла;
		
		ПротоколОбновленияТаблицы = """";
		СцТ_ДобавитьТаблицуЗначенийВВеткуДерева_НаСервере(
			УзелДвижения,
			ТаблицаДвижения,
			ШаблонНужногоДвижения,
			МассивИсключений,
			""Проверить"",
			КлючевыеПоля,
			НастройкаОбновления,
			ПротоколОбновленияТаблицы,
			МассивИдентификацииСсылок,
			АдресТаблицыКлючей);
		
		Если НЕ ПустаяСтрока(ПротоколОбновленияТаблицы) Тогда 
			СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага, ПротоколОбновленияТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	//Если ШаблонДвижений <> Неопределено Тогда
	//	Для каждого УзелДвижения Из ШаблонДвижений.Строки Цикл
	//		Если УзелДвижений.Строки.Найти(УзелДвижения.Имя, ""Имя"") = Неопределено Тогда
	//			СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага,
	//				НСтр(""ru = 'Удалено движение """"'"") + УзелДвижения.Синоним + """""""");
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//Если НЕ ПустаяСтрока(ПротоколОбновленияСуществующихДвижений) Тогда
	//	СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияШага,
	//		ПротоколОбновленияСуществующихДвижений);
	//КонецЕсли;
	
	Возврат СцТ_ДеревоЗначенияВСтруктуру_НаСервере(ДеревоЗначения);
	
КонецФункции

// Проверка допустимости символов
// Проверяемая строка - строка в которой проверяются символы
// Допустимые символы - массив допустимых символов
// Возвращаемое значение - результат проверки
&НаКлиенте
Функция СцТ_НедопустимыеСимволыВСтроке(ПроверяемаяСтрока, ДопустимыеСиволы)
	
	Результат = """";
	
	ДлинаСтр = СтрДлина(ПроверяемаяСтрока);
	Для Итератор = 1 По ДлинаСтр Цикл
		ТекущийСимвол = Сред(ПроверяемаяСтрока, Итератор, 1);
		Если Найти(ДопустимыеСиволы, ТекущийСимвол) = 0 Тогда
			Результат = Результат + ?(ПустаяСтрока(Результат), """", "", "") + """""""" + ТекущийСимвол + """""""";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция добавления данных в дерево значения шага
//
// Параметры
//
//	РодительскийУзел - данные формы родительского узла
//	Имя              - имя узла
//	Синоним          - пользовательское представление имени
//	ТипУзла          - строка типа узла. Служебный
//	Значение         - еще не преобразованное для хранения значение узла
//	Активность       - активность. По умолчанию 1 - активно
//	Действие         - строка действия (заполнить, Проверить, Сведения)
//	Скрипт           - скрипт для действия над элементом формы
//	Кл               - вспомогательное поле - признак ключевого значения
//	Принудительно    - булево. признак принудительного обновления всех полей
&НаСервереБезКонтекста
Функция СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
	РодительскийУзел,
	Имя,
	Синоним,
	ТипУзла,
	Значение      = Неопределено,
	Активность    = 1,
	Действие      = """",
	Скрипт        = """",
	Кл            = 0,
	Принудительно = Истина,
	ПредставлениеЗначения = Неопределено,
	СтруктураСсылокШага = Неопределено,
	АдресТаблицыКлючей = """")
	
	НужныйУзел = Неопределено;
	Для каждого ПодчиненныйУзел ИЗ РодительскийУзел.Строки Цикл
		Если ПодчиненныйУзел.Имя = Имя Тогда
			НужныйУзел = ПодчиненныйУзел;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужныйУзел = Неопределено Тогда
		НужныйУзел = РодительскийУзел.Строки.Добавить();
		НужныйУзел.Имя = Имя;
	КонецЕсли;
	
	// Обязательно обновляемые реквизиты
	НужныйУзел.Значение = СцТ_ПреобразоватьЗначениеДляХранения_НаСервере(Значение);
	
	Если ПредставлениеЗначения = Неопределено Тогда
		Если ТипЗнч(Значение) = Тип(""ХранилищеЗначения"") Тогда
			НужныйУзел.Представление = Строка(НужныйУзел.Значение);
		Иначе
			НужныйУзел.Представление = Строка(Значение);
		КонецЕсли;
	Иначе
		НужныйУзел.Представление = ПредставлениеЗначения;
	КонецЕсли;
	
	НужныйУзел.Синоним      = Синоним;
	НужныйУзел.Активность   = Активность;
	НужныйУзел.Действие     = Действие;
	НужныйУзел.Скрипт       = Скрипт;
	НужныйУзел.ТипУзла      = ТипУзла;
	НужныйУзел.Кл           = Кл;
	
	Возврат НужныйУзел;
	
КонецФункции

#КонецОбласти

#Область ПрименениеКШагамШаблонов

// Получение шаблона, представленного в виде структуры
//
// Параметры
//	ТипМетаданных - строка типа метаданных
//	ИмяМетаданных - строка имени метаданных
//	АдресШаблоновШагов - адрес хранения таблицы шаблонов
//	АдресНачальныхУстановокШагов - адрес хранения таблицы начальных установок
// Возвращаемое значение - структура с данными шаблона
&НаСервереБезКонтекста
Функция СцТ_ПолучитьСтруктуруШаблонов_НаСервере(
	ТипМетаданных,
	ИмяМетаданных,
	АдресШаблоновШагов,
	АдресНачальныхУстановокШагов)
	
	// Персональный шаблон
	МассивШаблоновШага = Новый Массив;
	Если НЕ ПустаяСтрока(АдресШаблоновШагов) Тогда 
		ТаблицаШаблоновНаСервере = ПолучитьИзВременногоХранилища(АдресШаблоновШагов);
		Отбор = Новый Структура;
		Отбор.Вставить(""ТипМетаданных"", ТипМетаданных);
		Отбор.Вставить(""ИмяМетаданных"", ИмяМетаданных);
		
		// Здесь всегда выбирается только основной шаблон
		// Основной шаблон может быть только один
		Отбор.Вставить(""Основной""     , Истина);
		
		СтрокиШаблонов = ТаблицаШаблоновНаСервере.НайтиСтроки(Отбор);
		Если СтрокиШаблонов.Количество() > 0 Тогда
			НужныйШаблон = СтрокиШаблонов[0];
			Для каждого СтрокаШаблона Из НужныйШаблон.Значение Цикл
				// чтение шаблона шагов в структуру
				СтруктураШаблонаШагов = СцТ_ПреобразоватьСтрокуШаблонаВСтруктуру_НаСервере(СтрокаШаблона);
				// Добавление структуры в массив
				МассивШаблоновШага.Добавить(СтруктураШаблонаШагов);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Шаблон общик настроек по умолчанию
	
	МассивШагов = СцТ_ПолучитьСтруктуруНастроекПоУмолчанию_НаСервере(
		ТипМетаданных,
		ИмяМетаданных,
		АдресНачальныхУстановокШагов);
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить(""МассивШаблоновШага"", МассивШаблоновШага);
	ВозвращаемаяСтруктура.Вставить(""МассивШагов""       , МассивШагов);
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Получение общих настроек, представленных в виде структуры
//
// Параметры
//	ТипМетаданных - строка типа метаданных
//	ИмяМетаданных - строка имени метаданных
//	АдресНачальныхУстановокШагов - адрес хранилища настроек по умолчанию
// Возвращаемое значение - массив с данными по умолчанию
&НаСервереБезКонтекста
Функция СцТ_ПолучитьСтруктуруНастроекПоУмолчанию_НаСервере(
	ТипМетаданных,
	ИмяМетаданных,
	АдресНачальныхУстановокШагов)
	
	МассивШагов = Новый Массив;
	Если НЕ ПустаяСтрока(АдресНачальныхУстановокШагов) Тогда 
		
		ДеревоНастроекНаСервере = ПолучитьИзВременногоХранилища(АдресНачальныхУстановокШагов);
		
		СтрокаНастроки = ДеревоНастроекНаСервере.Строки.Найти(ТипМетаданных, ""Имя"");
		Если СтрокаНастроки <> Неопределено Тогда
			// Заполнение массива шагов
			МассивШагов = Новый Массив;
			// чтение шаблона по умолчанию в структуру
			ДеревоСпискаШагов = СтрокаНастроки.Значение;
			ВеткаШаговОбъекта = ДеревоСпискаШагов.Строки.Найти(""БезФормы"", ""Имя"", Истина);
			Если ВеткаШаговОбъекта <> Неопределено Тогда
				Для каждого СтрокаШага Из ВеткаШаговОбъекта.Строки Цикл
					МассивШагов.Добавить(СтрокаШага.Имя);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивШагов;
	
КонецФункции

// Получение структуры с данными настроек по умолчанию для выбранного шага
//
// Параметры
//	ТипМетаданных - строка типа метаданных
//	ТипШага - строка типа шага
//	АдресНачальныхУстановокШагов - адрес хранилища начальных установок шагов
//	ПреобразоватьЗначениеВСтруктуру - необходимость пробразования выходного значения в структуру
// Возвращаемое значение - настройки по умолчанию
&НаСервереБезКонтекста
Функция СцТ_ПолучитьНастройкуПоУмолчаниюДляШага(
	ТипМетаданных,
	ТипШага,
	АдресНачальныхУстановокШагов,
	ПреобразоватьЗначениеВСтруктуру = Истина)
	
	СтруктураНастройки = Неопределено;
	
	Если НЕ ПустаяСтрока(АдресНачальныхУстановокШагов) Тогда
		ДеревоНастроекНаСервере = ПолучитьИзВременногоХранилища(АдресНачальныхУстановокШагов);
		УзелНастроекПоТипуМетаданных = ДеревоНастроекНаСервере.Строки.Найти(ТипМетаданных, ""Имя"");
		Если УзелНастроекПоТипуМетаданных <> Неопределено Тогда
			СтрокаНастроекШага = УзелНастроекПоТипуМетаданных.Строки.Найти(ТипШага, ""Имя"");
			
			Если СтрокаНастроекШага <> Неопределено Тогда
				СтруктураНастройки = Новый Структура;
				СтруктураНастройки.Вставить(""ИмяШага""                 , СтрокаНастроекШага.Имя);
				СтруктураНастройки.Вставить(""НеВыводитьАвтоописание""  , СтрокаНастроекШага.НеВыводитьАвтоописание);
				СтруктураНастройки.Вставить(""Активность""              , СтрокаНастроекШага.Активность);
				СтруктураНастройки.Вставить(""ТипУзла""                 , СтрокаНастроекШага.ТипУзла);
				СтруктураНастройки.Вставить(""ПользовательскоеОписание"", СтрокаНастроекШага.ПользовательскоеОписание);
				СтруктураНастройки.Вставить(""Комментарии""             , СтрокаНастроекШага.Комментарии);
				Если ПреобразоватьЗначениеВСтруктуру Тогда
					СтруктураНастройки.Вставить(""Значение"",
						СцТ_ДеревоЗначенияВСтруктуру_НаСервере(СтрокаНастроекШага.Значение));
				Иначе
					СтруктураНастройки.Вставить(""Значение"", СтрокаНастроекШага.Значение);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураНастройки;
	
КонецФункции

// Преобразование в структуру строки шаблона
// Параметры
// СтрокаБлокаСценария - данные автогруппы
// Возвращаемое значение - структура с данными
&НаСервереБезКонтекста
Функция СцТ_ПреобразоватьСтрокуШаблонаВСтруктуру_НаСервере(СтрокаБлокаСценария)
	
	СтруктураДанныхШага = Новый Структура;
	СтруктураДанныхШага.Вставить(""Наименование""                , СтрокаБлокаСценария.Наименование);
	СтруктураДанныхШага.Вставить(""ТипШага""                     , СтрокаБлокаСценария.ТипШага);
	СтруктураДанныхШага.Вставить(""Описание""                    , СтрокаБлокаСценария.Описание);
	СтруктураДанныхШага.Вставить(""НеВыводитьАвтоописание""      , СтрокаБлокаСценария.НеВыводитьАвтоописание);
	СтруктураДанныхШага.Вставить(""Активность""                  , СтрокаБлокаСценария.Активность);
	СтруктураДанныхШага.Вставить(""ВыполнитьВручную""            , СтрокаБлокаСценария.ВыполнитьВручную);
	СтруктураДанныхШага.Вставить(""Цвет""                        , СтрокаБлокаСценария.Цвет);
	СтруктураДанныхШага.Вставить(""Комментарий""                 , СтрокаБлокаСценария.Комментарий);
	СтруктураДанныхШага.Вставить(""ДанныеКартинки""              , СтрокаБлокаСценария.ДанныеКартинки);
	
	СтруктураДанныхШага.Вставить(""Значение"",
		СцТ_ДеревоЗначенияВСтруктуру_НаСервере(СтрокаБлокаСценария.Значение));
	
	Возврат СтруктураДанныхШага;
	
КонецФункции

// Применение исключений к шагам бизнес-логики
//
// Параметры
//	ДанныеШагов (Соответствие) - структура с данными шага в разрезе
//		идентификаторов узлов
//	АдресУстановокШагов - адрес таблицы начальных установок
&НаСервереБезКонтекста
Процедура СцТ_ПрименитьИсключенияКШагамБЛ_НаСервере(ДанныеШагов, АдресУстановокШагов)
	
	ЭтаОбработка = СцТ_ПолучитьЭтуОбработку();
	
	Для каждого КлючЗначение Из ДанныеШагов Цикл
		СтруктураШага = КлючЗначение.Значение;
		
		Если ТипЗнч(СтруктураШага.Значение) <> Тип(""ДеревоЗначений"") Тогда
			ДеревоЗначения = ЭтаОбработка.СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(СтруктураШага.Значение);
		Иначе
			ДеревоЗначения = СтруктураШага.Значение;
		КонецЕсли;
		
		СтруктураНастройкиШагаПоУмолчанию = СцТ_ПолучитьНастройкуПоУмолчаниюДляШага(
			СтруктураШага.ТипМетаданных,
			СтруктураШага.ТипШага,
			АдресУстановокШагов,
			Ложь);
		
		Если СтруктураНастройкиШагаПоУмолчанию = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УзелИсключенией = СтруктураНастройкиШагаПоУмолчанию.Значение.Строки.Найти(""Исключения"", ""Имя"", Ложь);
		
		Если УзелИсключенией = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураШага.ТипШага = ""Воспроизвести""
			ИЛИ СтруктураШага.ТипШага = ""СравнитьСЭталоном"" Тогда
			
			ПрименитьИсключенияРеквизитовОбъектаИТЧ(ДеревоЗначения, УзелИсключенией);
			
		Иначе
			// Применение исключений к движениям
			ПрименитьИсключенияДвиженийДокумента(ДеревоЗначения, УзелИсключенией);
			
		КонецЕсли;
		
		СтруктураШага.Значение     = ДеревоЗначения;
		СтруктураШага.АвтоОписание = ЭтаОбработка.СцТ_ПолучитьОписаниеШага_НаСервере(СтруктураШага);
		СтруктураШага.Значение     = СцТ_ДеревоЗначенияВСтруктуру_НаСервере(СтруктураШага.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

// Применение исключения настроек реквизитов шагов по умолчанию
// Параметры:
//	ЗначениеШага (ДеревоЗначений) - дерево значения шага;
//	УзелИсключенией (СтрокаДереваЗначений) - узел исключений настроек
//		шага по умолчанию
//
&НаСервереБезКонтекста
Процедура ПрименитьИсключенияРеквизитовОбъектаИТЧ(ЗначениеШага, УзелИсключенией)
	
	УзелИсключенийРеквизитов = УзелИсключенией.Строки.Найти(""Реквизиты"", ""Имя"", Ложь);
	
	Если УзелИсключенийРеквизитов <> Неопределено Тогда
		УзелРеквизитов = ЗначениеШага.Строки.Найти(""Реквизиты"", ""Имя"", Ложь);
		Если УзелРеквизитов <> Неопределено Тогда
			Для каждого УзелИсключения Из УзелИсключенийРеквизитов.Строки Цикл
				НайденыйУзел = УзелРеквизитов.Строки.Найти(УзелИсключения.Имя, ""Имя"", Ложь);
				Если НайденыйУзел <> Неопределено Тогда
					НайденыйУзел.Активность = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УзелИсключенийРеквизитыТЧ = УзелИсключенией.Строки.Найти(""РеквизитыТЧ"", ""Имя"", Ложь);
	Если УзелИсключенийРеквизитыТЧ <> Неопределено Тогда
		
		УзелТабличныхЧастей = ЗначениеШага.Строки.Найти(""ТабличныеЧасти"", ""Имя"", Ложь);
		Если УзелТабличныхЧастей <> Неопределено Тогда
			Для каждого УзелТЧ Из УзелТабличныхЧастей.Строки Цикл
				УзелШапки = УзелТЧ.Строки.Найти(""ШапкаТаблицы"", ""Имя"", Ложь);
				Если УзелШапки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого УзелКолонки Из УзелШапки.Строки Цикл
					УзелКолонки.Активность = (УзелКолонки.Активность
						И УзелИсключенийРеквизитыТЧ.Строки.Найти(УзелКолонки.Имя, ""Имя"", Ложь) = Неопределено);
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Примененяет исключения настроек реквизитов движений документа
// Параметры:
//	ЗначениеШага (ДеревоЗначений) - дерево значения шага;
//	УзелИсключенией (СтрокаДереваЗначений) - узел исключений настроек
//		шага по умолчанию
//
&НаСервереБезКонтекста
Процедура ПрименитьИсключенияДвиженийДокумента(ЗначениеШага, УзелИсключенией)
	
	УзелИсключенийРеквизитовДвижений = УзелИсключенией.Строки.Найти(""РеквизитыДвижений"", ""Имя"", Ложь);
	
	Если УзелИсключенийРеквизитовДвижений <> Неопределено Тогда
		
		УзелДвижений = ЗначениеШага.Строки.Найти(""ДвиженияПоРегистрам"", ""Имя"", Ложь);
		Если УзелДвижений <> Неопределено Тогда
			
			Для каждого УзелДвижения Из УзелДвижений.Строки Цикл
				УзелШапки = УзелДвижения.Строки.Найти(""ШапкаТаблицы"", ""Имя"", Ложь);
				Если УзелШапки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого УзелКолонки Из УзелШапки.Строки Цикл
					УзелКолонки.Активность = (УзелКолонки.Активность
						И УзелИсключенийРеквизитовДвижений.Строки.Найти(УзелКолонки.Имя, ""Имя"", Ложь) = Неопределено);
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновление данных шага
//
// Параметры
//	СтруктураШага - структура с данными шага
//	ЭтаОбработка - эта обработка на сервере
//	АдресУстановокШагов - адрес таблицы начальных установок
//	НастройкаОбновления - пользовательская настройка
//	ПротоколОбновления - сообщение о выполнении обновления
&НаСервереБезКонтекста
Процедура СцТ_ОбновитьДанныеШага(
	СтруктураШага,
	ЭтаОбработка,
	АдресУстановокШагов,
	НастройкаОбновления,
	ПротоколОбновления,
	АдресТаблицыСсылок,
	МодульЭтойОбработки,
	ГлобальныеПараметры,
	АдресТаблицыКлючей)
	
	Если ТипЗнч(СтруктураШага.ДеревоЗначения) <> Тип(""ДеревоЗначений"") Тогда
		ДеревоЗначения = МодульЭтойОбработки.СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(СтруктураШага.ДеревоЗначения);
	Иначе
		ДеревоЗначения = СтруктураШага.ДеревоЗначения;
	КонецЕсли;
	
	ОбъектИлиЗапись = МодульЭтойОбработки.ПолучитьОбъектИлиЗаписьПоСтруктуреПоиска(СтруктураШага.ПараметрыДляПолученияОбъектаИБ, АдресТаблицыСсылок, ГлобальныеПараметры);
	
	ДеревоШаблонаЗначения = ДеревоЗначения.Скопировать();
	Шаблон = Новый Структура;
	Шаблон.Вставить(""ДеревоЗначения"", ДеревоШаблонаЗначения);
	ДеревоЗначения.Строки.Очистить();
	
	ПротоколОбновленияТекущегоШага = """";
	
	// Свертка значения реквизитов объекта в структуру дерева
	Если СтруктураШага.ТипШага = ""СравнитьДвижения"" Тогда
		
		МассивСсылокШага = Новый Массив;
		
		СтруктураДерева = СцТ_ЗаполнитьДеревоДвижений_НаСервере(
			СтруктураШага.ТипШага,
			СтруктураШага.ТипМД,
			СтруктураШага.ИмяМД,
			СтруктураШага.ДеревоЗначения,
			СтруктураШага.ПараметрыДляПолученияОбъектаИБ,
			АдресТаблицыСсылок,
			Шаблон,
			Неопределено,
			ГлобальныеПараметры,
			МассивСсылокШага,
			АдресТаблицыКлючей,,,
			СтруктураШага.УИШ);
			
		СтруктураШага.ДеревоЗначения     = СтруктураДерева;
		
	Иначе
		МассивСсылокШага = Новый Массив;
		
		ДеревоЗначения = ПолучитьСтруктуруОбъектаИлиЗаписиИБ_НаСервере(
			СтруктураШага.ТипШага,
			СтруктураШага.ТипМД,
			СтруктураШага.ИмяМД,
			СтруктураШага.ДеревоЗначения,
			СтруктураШага.ПараметрыДляПолученияОбъектаИБ,
			АдресТаблицыСсылок,
			Шаблон,
			Неопределено,
			ГлобальныеПараметры,
			МассивСсылокШага,
			АдресТаблицыКлючей,,,
			СтруктураШага.УИШ);
			
		СтруктураШага.ДеревоЗначения     = СцТ_ДеревоЗначенияВСтруктуру_НаСервере(ДеревоЗначения);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПротоколОбновленияТекущегоШага) Тогда
		СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновления,
			Символы.ПС
				+ НСтр(""ru = 'Шаг №'"")
				+ СтрЗаменить(Строка(СтруктураШага.НомерШага), Символ(160), """")
				+ "":""
				+ Символы.ПС
				+ ПротоколОбновленияТекущегоШага);
	КонецЕсли;
	
	СтруктураШага.АвтоОписание = ЭтаОбработка.СцТ_ПолучитьОписаниеШага_НаСервере(СтруктураШага);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПанельЭталоннойБазы

// Получение данных для активного элемента эталонной базы
// Поиск данных выполняется на основе значения
// ТипМетаданныхЭталоннойБазы
// Возвращаемое значение - указатель на нужное дерево данных
&НаКлиенте
Функция СцТ_ПолучитьДанныеЭталоннойБазы_НаКлиенте()
	
	Если ТипМетаданныхЭталоннойБазы = ""Справочники"" Тогда
		ДеревоЭталоннойБазы = ДеревоСправочников;
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""Документы"" Тогда
		ДеревоЭталоннойБазы = ДеревоДокументов;
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""РегистрыСведений"" Тогда
		ДеревоЭталоннойБазы = ДеревоРегистровСведений;
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""ПланыВидовХарактеристик"" Тогда
		ДеревоЭталоннойБазы = ДеревоПлановВидовХарактеристик;
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""ПланыВидовРасчета"" Тогда
		ДеревоЭталоннойБазы = ДеревоПлановВидовРасчета;
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""БизнесПроцессы"" Тогда
		ДеревоЭталоннойБазы = ДеревоБизнесПроцессов;
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""Задачи"" Тогда
		ДеревоЭталоннойБазы = ДеревоЗадач;
	Иначе
		ДеревоЭталоннойБазы = Неопределено;
	КонецЕсли;
	
	Возврат ДеревоЭталоннойБазы;
	
КонецФункции

// Получение активной таблицы формы окна эталонной базы
// Поиск данных выполняется на основе значения
// ТипМетаданныхЭталоннойБазы
// Возвращаемое значение - нужный элемент формы
&НаКлиенте
Функция СцТ_ПолучитьТаблицуФормыЭталоннойБазы_НаКлиенте()
	
	Если ТипМетаданныхЭталоннойБазы = ""Справочники"" Тогда
		ТаблицаФормы = Элементы.ДеревоСправочников;
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""Документы"" Тогда
		ТаблицаФормы = Элементы.ДеревоДокументов;
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""РегистрыСведений"" Тогда
		ТаблицаФормы = Элементы.ДеревоРегистровСведений;
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""ПланыВидовХарактеристик"" Тогда
		ТаблицаФормы = Элементы.ДеревоПлановВидовХарактеристик;
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""ПланыВидовРасчета"" Тогда
		ТаблицаФормы = Элементы.ДеревоПлановВидовРасчета;
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""БизнесПроцессы"" Тогда
		ТаблицаФормы = Элементы.ДеревоБизнесПроцессов;
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""Задачи"" Тогда
		ТаблицаФормы = Элементы.ДеревоЗадач;
	Иначе
		ТаблицаФормы = Неопределено;
	КонецЕсли;
	
	Возврат ТаблицаФормы;
	
КонецФункции

// Процедура для установки или снятия флажков для выделенных строк
// в таблицах эталонной базы
// Параметры
// 	ЗначениеФлажка - Булево - Устанавливаемое значение флажка
&НаКлиенте
Процедура СцТ_УправлениеОтметкамиЭталоннойБазы_НаКлиенте(ЗначениеФлажка)
	
	// Получение данных активной таблицы
	ДанныеЭталоннойБазы       = СцТ_ПолучитьДанныеЭталоннойБазы_НаКлиенте();
	ТаблицаФормыЭталоннойБазы = СцТ_ПолучитьТаблицуФормыЭталоннойБазы_НаКлиенте();
	
	Если ДанныеЭталоннойБазы = Неопределено
		ИЛИ ТаблицаФормыЭталоннойБазы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = ТаблицаФормыЭталоннойБазы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеВыделеннойСтроки = ДанныеЭталоннойБазы.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ДанныеВыделеннойСтроки.Отметка <> ЗначениеФлажка Тогда
				ДанныеВыделеннойСтроки.Отметка = ЗначениеФлажка;
				СцТ_УстановитьФлагиРодительскихСтрок_НаКлиенте(ДанныеВыделеннойСтроки.ПолучитьРодителя(), , , ""Отметка"");
			КонецЕСли;
		КонецЦикла;
	Иначе
		СцТ_УстановитьФлагиПодчиненныхСтрок_НаКлиенте(ДанныеЭталоннойБазы, ЗначениеФлажка, ""Отметка"");
	КонецЕсли;
	
	ТаблицаФормыЭталоннойБазы.Обновить();
	
КонецПроцедуры

// Универсальная процедура управления флагами в родительских узлах
// таблиц окна эталонной базы
// Параметры
//	РодительскийУзелШага - родительский узел в дереве
//	ИмяКолонкиИсключения = """" - имя колонки, для определени исключений
//	ЗначениеИсключения = Неопределено - значения в колонке исключений, при которых флаг не меняется
//	ИмяКолонкиСФлагом = ""Активность"" - имя колонки в которой выставляются флаги
&НаКлиенте
Процедура СцТ_УстановитьФлагиРодительскихСтрок_НаКлиенте(
	Знач РодительскийУзелШага,
	ИмяКолонкиИсключения = """",
	ЗначениеИсключения = Неопределено,
	ИмяКолонкиСФлагом = ""Активность"")
	
	Если РодительскийУзелШага = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеУзла = Неопределено;
	
	Для каждого СтрокаДерева Из РодительскийУзелШага.ПолучитьЭлементы() Цикл
		
		Если НЕ ПустаяСтрока(ИмяКолонкиИсключения) И СтрокаДерева[ИмяКолонкиИсключения] = ЗначениеИсключения Тогда
			Продолжить;
		КонецЕсли;
		
		Если СостояниеУзла = Неопределено Тогда
			
			СостояниеУзла = СтрокаДерева[ИмяКолонкиСФлагом];
			
		ИначеЕсли СостояниеУзла <> СтрокаДерева[ИмяКолонкиСФлагом] Тогда
			
			// достаточно всего одного неопределенного состояния
			СостояниеУзла = 2;
			Прервать;
			
		// Иначе состояние не изменяется
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если СостояниеУзла = Неопределено И РодительскийУзелШага[ИмяКолонкиСФлагом] = 2 Тогда
		СостояниеУзла = 0;
	КонецЕсли;
	
	РодительскийУзелШага[ИмяКолонкиСФлагом] = СостояниеУзла;
	
	// Новая итерация
	СцТ_УстановитьФлагиРодительскихСтрок_НаКлиенте(
		РодительскийУзелШага.ПолучитьРодителя(),
		ИмяКолонкиИсключения,
		ЗначениеИсключения,
		ИмяКолонкиСФлагом);
	
КонецПроцедуры

// Служебная итерационная процедура для изменения флагов у дочерних строк в дереве
//
// Параметры
// УзелДерева      - узел дерева в котором выполняется изменение значения флага
// ЗначениеОтметки - устанавливаемое значение флага
// ИмяПоляОтметки  - Имя колонки в которой меняется значение
// ИмяКолонкиИсключения - Имя колонки по которой проверяется исключение
// ЗначениеКолонкиИсключения - значение, при котором отметка не ставится
&НаКлиенте
Процедура СцТ_УстановитьФлагиПодчиненныхСтрок_НаКлиенте(
	Знач УзелДерева,
	ЗначениеОтметки,
	ИмяПоляОтметки,
	ИмяКолонкиИсключения = Неопределено,
	ЗначениеКолонкиИсключения = Неопределено)
	
	Для каждого Строка Из УзелДерева.ПолучитьЭлементы() Цикл
		
		Если  ИмяКолонкиИсключения = Неопределено И ЗначениеКолонкиИсключения = Неопределено Тогда
			Строка[ИмяПоляОтметки] = ЗначениеОтметки;
		Иначе
			Если Строка[ИмяКолонкиИсключения] <> ЗначениеКолонкиИсключения Тогда
				Строка[ИмяПоляОтметки] = ЗначениеОтметки;
			КонецЕсли;
		КонецЕсли;
		
		СцТ_УстановитьФлагиПодчиненныхСтрок_НаКлиенте(
			Строка,
			ЗначениеОтметки,
			ИмяПоляОтметки,
			ИмяКолонкиИсключения,
			ЗначениеКолонкиИсключения);
		
	КонецЦикла;
	
КонецПроцедуры

// Создание сценария на основе начальных настроек для элемента
// эталонной базы
// Параметры
//	ТекущаяСтрокаДерева = Неопределено - текущая строка дерева эталонной базы,
//	ТолькоОтмеченные - признак, что нужно использовать только отмеченные
&НаКлиенте
Процедура СцТ_АвтоматическиСоздатьСценарийДляЭлемента_НаКлиенте(
	ТекущаяСтрокаДерева = Неопределено,
	ТолькоОтмеченные = Ложь)
	
	ТаблицаЭталоннойБазы = СцТ_ПолучитьДанныеЭталоннойБазы_НаКлиенте();
	ТаблицаФормы         = СцТ_ПолучитьТаблицуФормыЭталоннойБазы_НаКлиенте();
	
	// Определение и проверка дерева - источника
	Если ТекущаяСтрокаДерева = Неопределено Тогда
		ТекущаяСтрокаДерева = ТаблицаФормы.ТекущиеДанные;
		Если ТекущаяСтрокаДерева = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр(""ru='Не выбран элемент для добавления в сценарий'""));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрокаСценария = Элементы.БлокСценария.ТекущаяСтрока;
	
	// Итерационное создание узла сценария по шаблону
	СозданныйУзел = СцТ_ИтерационнойСозданиеУзловВДеревеСценария_НаКлиенте(
		ТекущаяСтрокаДерева,
		ТекущаяСтрокаСценария,
		ТолькоОтмеченные,
		Истина,
		ЭтотОбъект);
	
	Если СозданныйУзел <> Неопределено Тогда
		Элементы.БлокСценария.ТекущаяСтрока = СозданныйУзел.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

// Инверсия пометки удаления для объектов информационной базы
// и удаление записей регистров сведений текущей таблицы
// эталонной базы
&НаКлиенте
Процедура СцТ_ОбработчикПометитьНаУдалениеЭлементЭталоннойБазы_НаКлиенте()
	
	// Определение текущих данных
	ТаблицаФормы = СцТ_ПолучитьТаблицуФормыЭталоннойБазы_НаКлиенте();
	
	ТекущаяСтрока = ТаблицаФормы.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ТипУзла <> ""Объект"" Тогда
		ТекстСообщения = НСтр(""ru='Не удалось пометить на удаление объект """"<NAME>""""'"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""<NAME>"", ТекущаяСтрока.Элемент);
		ПоказатьПредупреждение(,ТекстСообщения, 0, НСтр(""ru='Ошибка'""));
		Возврат;
	КонецЕсли;
	
	// Выполнение действий
	Если ТипМетаданныхЭталоннойБазы = ""РегистрыСведений"" Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(""СцТ_ОбработатьРешениеПользователяОбУдаленииЗаписиРегистра"",
									 ЭтотОбъект,
									 Новый Структура(""Значение,ИмяМетаданных"",
									 	ТекущаяСтрока.Значение,
										ТекущаяСтрока.ИмяМетаданных)),
			НСтр(""ru='Удалить запись регистра?'""),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		// Для объектных типов выполняется попытка инвертировать пометку удаления
		
		ТекстВопроса = НСтр(""ru='Инвертировать пометку удаления?'"");
		ПоказатьВопрос(
			Новый ОписаниеОповещения(""СцТ_ОбработатьРешениеПользователяОбИнвертированииПУ"",
									 ЭтотОбъект,
									 ТекущаяСтрока.Значение),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для открытия элементов и записей
// эталонной базы при выборе
// Обработчик работает для текущего элемента
&НаКлиенте
Процедура СцТ_ОбработчикВыбораИлиРедактированияДереваЭталоннойБазы_НаКлиенте()
	
	// Определение текущей таблицы
	ТаблицаФормы = СцТ_ПолучитьТаблицуФормыЭталоннойБазы_НаКлиенте();
	Колонки = ТаблицаФормы.ПодчиненныеЭлементы;
	КолонкаОтметки = Элементы[ТаблицаФормы.Имя + ""Отметка""];
	
	ВыбраннаяСтрока = ТаблицаФормы.ТекущаяСтрока;
	
	// Если клик в колонке отметки, то должен выполниться другой обработчик
	Если ТаблицаФормы.ТекущийЭлемент = КолонкаОтметки Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ТаблицаФормы.ТекущиеДанные;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИстинноеЗначение = СцТ_ПолучитьЗначение_НаКлиенте(ТекущаяСтрока.Значение);
	
	// Если это групповой узел, то открывать его не нужно
	Если ТекущаяСтрока.ТипУзла <> ""Объект"" Тогда
		ТекстСообщения = НСтр(""ru='Редактирование узла """"<NAME>"""" не предусмотрено'"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""<NAME>"", ТекущаяСтрока.Элемент);
		ПоказатьПредупреждение(,ТекстСообщения, 0, НСтр(""ru='Редактирование не предусмотрено'""));
		Возврат;
	КонецЕсли;
	
	// Открытие значения
	Если ТипМетаданныхЭталоннойБазы = ""РегистрыСведений"" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура(""Ключ"",
			СцТ_КлючЗаписиРС(
				ТекущаяСтрока.ИмяМетаданных,
				ИстинноеЗначение));
		ИмяОткрываемойФормы = ""РегистрСведений."" + ТекущаяСтрока.ИмяМетаданных + "".ФормаЗаписи"";
		ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыОткрытияФормы, ТаблицаФормы);
		
	Иначе
		ПоказатьЗначение(, ИстинноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

// Изменение отображения текущего дерева эталонной базы
// 
&НаКлиенте
Процедура СцТ_ОтобразитьДеревоЭталоннойБазы_НаКлиенте()
	
	Если ПустаяСтрока(ТипМетаданныхЭталоннойБазы) Тогда
		ТипМетаданныхЭталоннойБазы = ""Справочники"";
	КонецЕсли;
	
	// Сначала выполняется заполнение соответствующего дерева
	// а потом уже его отображение на форме
	
	МассивЭлементовЭталоннойБазы = Новый Массив;
	МассивЭлементовЭталоннойБазы.Добавить(Элементы.ДеревоСправочников);
	МассивЭлементовЭталоннойБазы.Добавить(Элементы.ДеревоДокументов);
	МассивЭлементовЭталоннойБазы.Добавить(Элементы.ДеревоРегистровСведений);
	МассивЭлементовЭталоннойБазы.Добавить(Элементы.ДеревоПлановВидовХарактеристик);
	МассивЭлементовЭталоннойБазы.Добавить(Элементы.ДеревоПлановВидовРасчета);
	МассивЭлементовЭталоннойБазы.Добавить(Элементы.ДеревоБизнесПроцессов);
	МассивЭлементовЭталоннойБазы.Добавить(Элементы.ДеревоЗадач);
	
	СтруктураДерева = СцТ_ПолучитьСтруктуруДанныхДереваЭталоннойБазы_НаСервере(АдресДереваНастроекЭталоннойБазы, ТипМетаданныхЭталоннойБазы);
	
	ТаблицаФормыЭтБ  = СцТ_ПолучитьТаблицуФормыЭталоннойБазы_НаКлиенте();
	ТекущиеДанныеЭтБ = СцТ_ПолучитьДанныеЭталоннойБазы_НаКлиенте();
	ТекущиеДанныеЭтБ.ПолучитьЭлементы().Очистить();
	
	СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(
		ТекущиеДанныеЭтБ,
		СтруктураДерева);
	
	Для каждого ЭлементМассива Из МассивЭлементовЭталоннойБазы Цикл
		
		// Видим только текущий элемент 
		Элементы.СтраницыЭталоннойБазы.ТекущаяСтраница = Элементы[""Страница"" + Сред(ТаблицаФормыЭтБ.Имя, 7)];
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ключ записи РС, необходимый для открытия формы записи.
// Параметры:
//	ИмяРС - имя регистра сведений;
//	ПоляКлюча (Структура) - поля ключа РС;
//
// Возвращаемое значение: РегистрСведенийКлючЗаписи - ключ записи РС
//
&НаСервереБезКонтекста
Функция СцТ_КлючЗаписиРС(ИмяРС, ПоляКлюча)
	
	Возврат РегистрыСведений[ИмяРС].СоздатьКлючЗаписи(ПоляКлюча);
	
КонецФункции

// Процедура синхронизации дерева настроек отображения эталонной базы
// Процедура выполняется только на сервере во время открытия обработки
// или при загрузке нового сценария
//
// Параметры
// АдресДереваНастроекЭталоннойБазы - адрес хранения настроек эталонной панели
&НаСервереБезКонтекста
Процедура СцТ_СинхронизироватьДеревоНастроекЭталоннойБазы_НаСервере(
	АдресДереваНастроекЭталоннойБазы = """",
	Сообщения = """")
	
	Если ПустаяСтрока(АдресДереваНастроекЭталоннойБазы) Тогда
		// Создается новое дерево
		ДеревоНастроекЭталоннойБазыНаСервере = Новый ДеревоЗначений;
		ДеревоНастроекЭталоннойБазыНаСервере.Колонки.Добавить(""Имя""              ,
			Новый ОписаниеТипов(""Строка""));
		ДеревоНастроекЭталоннойБазыНаСервере.Колонки.Добавить(""Представление""    ,
			Новый ОписаниеТипов(""Строка""));
		ДеревоНастроекЭталоннойБазыНаСервере.Колонки.Добавить(""ТипУзла""          ,
			Новый ОписаниеТипов(""Строка""));
		ДеревоНастроекЭталоннойБазыНаСервере.Колонки.Добавить(""Активность""       ,
			Новый ОписаниеТипов(""Число""));
		ДеревоНастроекЭталоннойБазыНаСервере.Колонки.Добавить(""Отборы""           ,
			Новый ОписаниеТипов(""ОтборКомпоновкиДанных""));
		ДеревоНастроекЭталоннойБазыНаСервере.Колонки.Добавить(""ТаблицаРеквизитов"",
			Новый ОписаниеТипов(""СписокЗначений""));
		ДеревоНастроекЭталоннойБазыНаСервере.Колонки.Добавить(""Подчинение""       ,
			Новый ОписаниеТипов(""СписокЗначений""));
		ДеревоНастроекЭталоннойБазыНаСервере.Колонки.Добавить(""ЕстьДоступ""       ,
			Новый ОписаниеТипов(""Булево""));
		ДеревоНастроекЭталоннойБазыНаСервере.Колонки.Добавить(""ТипМетаданных""    ,
			Новый ОписаниеТипов(""Строка""));
		ДеревоНастроекЭталоннойБазыНаСервере.Колонки.Добавить(""ПоляГруппировки""  ,
			Новый ОписаниеТипов(""СписокЗначений""));
		ДеревоНастроекЭталоннойБазыНаСервере.Колонки.Добавить(""ПоляСортировки""   ,
			Новый ОписаниеТипов(""СписокЗначений""));
	Иначе
		// Нужно синхронизировать дерево по составу объектов метаданных
		ДеревоНастроекЭталоннойБазыНаСервере = 
			ПолучитьИзВременногоХранилища(АдресДереваНастроекЭталоннойБазы);
	КонецЕсли;
	
	СписокТиповМетаданных = СцТ_СписокТиповМетаданных();
	
	// Добавление недостающих строк
	
	// Типы метаданных
	Для каждого ЭлементСписка Из СписокТиповМетаданных Цикл
		
		Если ЭлементСписка.Значение = ""ОбщаяФорма"" Тогда
			Продолжить;
		КонецЕсли;
		
		УзелТипаМетаданных = СцТ_ДобавитьУзелВНастройкиЭталоннойБазы_НаСервере(
			ДеревоНастроекЭталоннойБазыНаСервере,
			ЭлементСписка.Значение,
			ЭлементСписка.Представление,
			""ТипМетаданных"",
			ЭлементСписка.Значение);
		
		Если    ЭлементСписка.Значение = ""Отчеты""
			ИЛИ ЭлементСписка.Значение = ""Обработки""
			ИЛИ ЭлементСписка.Значение = ""ЖурналыДокументов""
			ИЛИ ЭлементСписка.Значение = ""РегистрыНакопления""
			ИЛИ ЭлементСписка.Значение = ""РегистрыБухгалтерии""
			ИЛИ ЭлементСписка.Значение = ""РегистрыРасчета"" Тогда
			
			УзелТипаМетаданных.Активность = 0;
			УзелТипаМетаданных.ЕстьДоступ = Ложь;
			
		КонецЕсли;
		
		// Объекты метаданных
		Для каждого ОбъектМетаданных Из Метаданные[ЭлементСписка.Значение] Цикл
			
			УзелОбъектаМетаданных = СцТ_ДобавитьУзелВНастройкиЭталоннойБазы_НаСервере(
				УзелТипаМетаданных,
				ОбъектМетаданных.Имя,
				ОбъектМетаданных.Представление(),
				""ИмяМетаданных"",
				ЭлементСписка.Значение);
			
			УзелОбъектаМетаданных.ТипМетаданных = ЭлементСписка.Значение;
			
			Если НЕ ПравоДоступа(""Чтение"", ОбъектМетаданных)
				ИЛИ ЭлементСписка.Значение = ""Отчеты""
				ИЛИ ЭлементСписка.Значение = ""Обработки""
				ИЛИ ЭлементСписка.Значение = ""ЖурналыДокументов""
				ИЛИ ЭлементСписка.Значение = ""РегистрыНакопления""
				ИЛИ ЭлементСписка.Значение = ""РегистрыБухгалтерии""
				ИЛИ ЭлементСписка.Значение = ""РегистрыРасчета""
				ИЛИ (ЭлементСписка.Значение = ""РегистрыСведений""
					И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
				
				УзелОбъектаМетаданных.Активность = 0;
				УзелОбъектаМетаданных.ЕстьДоступ = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Удаление лишних объектов конфигурации.
	// Такое может случиться, когда шаблон открыт в конфигурации,
	// из которой удалены (заменены) некоторые объекты метаданных
	Для каждого УзелТиповМетаданных Из ДеревоНастроекЭталоннойБазыНаСервере.Строки Цикл
		
		КоличествоСтрокУзла = УзелТиповМетаданных.Строки.Количество();
		Если КоличествоСтрокУзла > 0 Тогда
			
			ТипМетаданных = УзелТиповМетаданных.Имя;
			
			Для ОбратныйИндекс = 1 По КоличествоСтрокУзла Цикл
				СтрокаОбъектаМетаданных = УзелТиповМетаданных.Строки[КоличествоСтрокУзла - ОбратныйИндекс];
				Если Метаданные[ТипМетаданных].Найти(СтрокаОбъектаМетаданных.Имя) = Неопределено Тогда
					
					ТекстСообщения = НСтр(""ru='В конфигурации не обнаружен объект метаданных """"<TYPEMD>: <NAMEMD>"""". Объект удален из шаблона настроек эталонной базы'"");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, ""<NAMEMD>"", СтрокаОбъектаМетаданных.Представление);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, ""<TYPEMD>"", ТипМетаданных);
					Сообщения = Сообщения +
						?(ПустаяСтрока(Сообщения), """", Символы.ПС)
						+ ТекстСообщения;
					
					УзелТиповМетаданных.Строки.Удалить(СтрокаОбъектаМетаданных);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сортировка дерева по синонимам
	Для каждого УзелДерева Из ДеревоНастроекЭталоннойБазыНаСервере.Строки Цикл
		УзелДерева.Строки.Сортировать(""Представление"");
	КонецЦикла;
	
	Если ПустаяСтрока(АдресДереваНастроекЭталоннойБазы) Тогда
		АдресДереваНастроекЭталоннойБазы =
			ПоместитьВоВременноеХранилище(ДеревоНастроекЭталоннойБазыНаСервере, Новый УникальныйИдентификатор);
	Иначе
		ПоместитьВоВременноеХранилище(ДеревоНастроекЭталоннойБазыНаСервере, АдресДереваНастроекЭталоннойБазы);
	КонецЕсли;
	
КонецПроцедуры

// Функция добавления строки в дерево настроек эталонной базы на сервере
// Вспомогательная функция для СцТ_СинхронизироватьДеревоНастроекЭталоннойБазы_НаСервере
//
// Параметры
//	РодительскийУзел - узел дерева значений в который добавляется строка,
//	ИмяУзла - имя узла,
//	ПредставлениеУзла - пользовательское представление узла,
//	ТипУзла - тип узла (Строка),
//	ТипМетаданных - тип метаданных (Строка). Для быстрого определения
// Возвращаемое значение - ссылка на узел дерева
&НаСервереБезКонтекста
Функция СцТ_ДобавитьУзелВНастройкиЭталоннойБазы_НаСервере(
	РодительскийУзел,
	ИмяУзла,
	ПредставлениеУзла,
	ТипУзла,
	ТипМетаданных)
	
	НужныйУзел = Неопределено;
	Для каждого ПодчиненныйУзел Из РодительскийУзел.Строки Цикл
		Если ПодчиненныйУзел.Имя = ИмяУзла Тогда
			НужныйУзел = ПодчиненныйУзел;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужныйУзел = Неопределено Тогда
		НужныйУзел = РодительскийУзел.Строки.Добавить();
		НужныйУзел.Имя           = ИмяУзла;
		НужныйУзел.Представление = ПредставлениеУзла;
		НужныйУзел.ТипУзла       = ТипУзла;
		// По умолчанию - истина
		НужныйУзел.ЕстьДоступ    = Истина;
		НужныйУзел.ТипМетаданных = ТипМетаданных;
		
		Если ТипУзла = ""ТипМетаданных"" Тогда
			// Заполнение полей группировки и сортировки
			Если ТипМетаданных = ""Справочники"" Тогда
				
				НужныйУзел.ПоляГруппировки.Добавить(""Владелец""     , ""Владелец"");
				НужныйУзел.ПоляГруппировки.Добавить(""Родитель""     , ""Родитель"");
				НужныйУзел.ПоляГруппировки.Добавить(""ИмяМетаданных"", ""Имя объекта метаданных"");
				
				НужныйУзел.ПоляСортировки.Добавить(""Владелец""     , ""Владелец"");
				НужныйУзел.ПоляСортировки.Добавить(""Родитель""     , ""Родитель"");
				НужныйУзел.ПоляСортировки.Добавить(""ИмяМетаданных"", ""Имя объекта метаданных"");
				НужныйУзел.ПоляСортировки.Добавить(""Наименование"" , ""Наименование"");
				
			ИначеЕсли ТипМетаданных = ""Документы"" Тогда
				
				НужныйУзел.ПоляСортировки.Добавить(""Дата""         , ""Дата"");
				НужныйУзел.ПоляСортировки.Добавить(""ИмяМетаданных"", ""Имя объекта метаданных"");
				
			ИначеЕсли ТипМетаданных = ""ПланыВидовХарактеристик"" Тогда
				
				НужныйУзел.ПоляГруппировки.Добавить(""ИмяМетаданных"", ""Имя объекта метаданных"");
				
				НужныйУзел.ПоляСортировки.Добавить(""ИмяМетаданных"", ""Имя объекта метаданных"");
				НужныйУзел.ПоляСортировки.Добавить(""Наименование"" , ""Наименование"");
				
			ИначеЕсли ТипМетаданных = ""ПланыСчетов"" Тогда
				
				НужныйУзел.ПоляГруппировки.Добавить(""ИмяМетаданных"", ""Имя объекта метаданных"");
				
				НужныйУзел.ПоляСортировки.Добавить(""ИмяМетаданных"", ""Имя объекта метаданных"");
				НужныйУзел.ПоляСортировки.Добавить(""Код""          , ""Код"");
				
			ИначеЕсли ТипМетаданных = ""ПланыВидовРасчета"" Тогда
				
				НужныйУзел.ПоляСортировки.Добавить(""Наименование"", ""Наименование"");
				
			ИначеЕсли ТипМетаданных = ""РегистрыСведений"" Тогда
				
				НужныйУзел.ПоляГруппировки.Добавить(""ИмяМетаданных"", ""Имя объекта метаданных"");
				
				НужныйУзел.ПоляСортировки.Добавить(""ИмяМетаданных"", ""Имя объекта метаданных"");
				
			ИначеЕсли ТипМетаданных = ""БизнесПроцессы"" Тогда
				
				НужныйУзел.ПоляСортировки.Добавить(""Номер"", ""Номер"");
				
			ИначеЕсли ТипМетаданных = ""Задачи"" Тогда
				
				НужныйУзел.ПоляСортировки.Добавить(""Наименование"", ""НоНаименованиемер"");
				
				// Иначе не заполняется
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НужныйУзел;
	
КонецФункции

// Удаление записи регистра сведений
//
// Параметры
//	СтрокаОтбора - Структура отбора в строке внутр
//	ИмяМетаданных - имя регистра сведений
&НаСервереБезКонтекста
Процедура СцТ_УдалитьЗаписьРегистра_НаСервере(СтрокаОтбора, ИмяМетаданных)
	
	ОтборЗаписи = ЗначениеИзСтрокиВнутр(СтрокаОтбора);
	
	МенеджерЗаписи = РегистрыСведений[ИмяМетаданных].СоздатьМенеджерЗаписи();
	
	Для каждого СтрокаОтбора Из ОтборЗаписи Цикл
		МенеджерЗаписи[СтрокаОтбора.Ключ] = СтрокаОтбора.Значение;
	КонецЦикла;
	
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

// Удаление записи регистра сведений
//
// Параметры
//	СтрокВнутрСсылки - Ссылка в строке внутр
//	Возвращаемое значение
// Результат инвертирования пометки удаления
&НаСервереБезКонтекста
Функция СцТ_ИнвертироватьПометкуУдаления_НаСервере(СтрокВнутрСсылки)
	
	СсылкаОб = ЗначениеИзСтрокиВнутр(СтрокВнутрСсылки);
	Попытка
		ТекущийОбъект = СсылкаОб.ПолучитьОбъект();
		Если ТекущийОбъект <> Неопределено Тогда
			ТекущийОбъект.УстановитьПометкуУдаления(НЕ СсылкаОб.ПометкаУдаления);
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки
	
КонецФункции

// Инициализация таблицы настройки отображения эталонной базы
//
// Параметры
// СписокСортировок - спсиок значений с реквизитами для сортировки
// Возвращаемое значение - таблица значений
&НаСервереБезКонтекста
Функция СцТ_ИнициализироватьТаблицуНастройкиОтображения_НаСервере(СписокСортировок)
	
	ТаблицаНастройкиОтображения = Новый ТаблицаЗначений;
	// Таблица сортировки включает в себя все поля группировки - обеспечивается программно
	// при добавлении новых группировок и сортировок
	Для каждого СтрокаСортировки Из СписокСортировок Цикл
		Если ТаблицаНастройкиОтображения.Колонки.Найти(СтрокаСортировки.Значение) = Неопределено Тогда
			ТаблицаНастройкиОтображения.Колонки.Добавить(СтрокаСортировки.Значение,,СтрокаСортировки.Представление);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление колонок ""данных""
	ТаблицаНастройкиОтображения.Колонки.Добавить(""ПредставлениеОбъектаМетаданных"");
	ТаблицаНастройкиОтображения.Колонки.Добавить(""АналитикаОбъектаМетаданных"");
	ТаблицаНастройкиОтображения.Колонки.Добавить(""Ссылка"");
	ТаблицаНастройкиОтображения.Колонки.Добавить(""ТипМД"");
	ТаблицаНастройкиОтображения.Колонки.Добавить(""ИмяМД"");
	
	Возврат ТаблицаНастройкиОтображения;
	
КонецФункции

// Получение структуры ч данными для заполнения дерева эталонной базы
// на клиенте
//
// Параметры
// АдресДереваНастроекЭталоннойБазы - адрес временного хранилища с деревом настроек 
//                                    эталонной базы
// ТипМетаданныхЭталоннойБазы - строка типа метаданных
// Возвращаемое значение - дерево, свернутое в структуру
&НаСервереБезКонтекста
Функция СцТ_ПолучитьСтруктуруДанныхДереваЭталоннойБазы_НаСервере(
	АдресДереваНастроекЭталоннойБазы,
	ТипМетаданныхЭталоннойБазы)
	
	// Если АдресДереваНастроекЭталоннойБазы равен пустой строке,
	// то синхронизация данных еще не выполнялась - нужно выполнить синхронизацию
	Если ПустаяСтрока(АдресДереваНастроекЭталоннойБазы) Тогда
		СцТ_СинхронизироватьДеревоНастроекЭталоннойБазы_НаСервере(АдресДереваНастроекЭталоннойБазы);
	КонецЕсли;
	
	// Создание структуры дерева
	ДеревоЭталоннойБазыНаСервере = Новый ДеревоЗначений;
	ДеревоЭталоннойБазыНаСервере.Колонки.Добавить(""Элемент"");
	ДеревоЭталоннойБазыНаСервере.Колонки.Добавить(""Аналитика"");
	ДеревоЭталоннойБазыНаСервере.Колонки.Добавить(""ТипУзла"");
	ДеревоЭталоннойБазыНаСервере.Колонки.Добавить(""Значение"");
	ДеревоЭталоннойБазыНаСервере.Колонки.Добавить(""ТипМетаданных"");
	ДеревоЭталоннойБазыНаСервере.Колонки.Добавить(""ИмяМетаданных"");
	ДеревоЭталоннойБазыНаСервере.Колонки.Добавить(""Отметка"", Новый ОписаниеТипов(""Булево""));
	
	Если ПустаяСтрока(АдресДереваНастроекЭталоннойБазы) Тогда
		Возврат СцТ_ДеревоЗначенияВСтруктуру_НаСервере(ДеревоЭталоннойБазыНаСервере);
	КонецЕсли;
	
	ДеревоНастроекНаСервере = ПолучитьИзВременногоХранилища(АдресДереваНастроекЭталоннойБазы);
	
	ОтобранныеСтроки = ДеревоНастроекНаСервере.Строки.НайтиСтроки(
		Новый Структура(""ТипУзла,Имя"", ""ТипМетаданных"", ТипМетаданныхЭталоннойБазы));
	Для каждого УзелДерева Из ДеревоНастроекНаСервере.Строки Цикл
		Если УзелДерева.Имя = ТипМетаданныхЭталоннойБазы Тогда
			УзелНастройкиЭталоннойБазы = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтобранныеСтроки.Количество() > 0 Тогда
		УзелНастройкиЭталоннойБазы = ОтобранныеСтроки[0];
	Иначе
		УзелНастройкиЭталоннойБазы = Неопределено;
	КонецЕсли;
	
	Если УзелНастройкиЭталоннойБазы = Неопределено Тогда
		Возврат СцТ_ДеревоЗначенияВСтруктуру_НаСервере(ДеревоЭталоннойБазыНаСервере);
	КонецЕсли;
	
	ТаблицаОбщихОтборов   = УзелНастройкиЭталоннойБазы.Отборы;
	СписокОбщихРеквизитов = УзелНастройкиЭталоннойБазы.ТаблицаРеквизитов;
	СписокГруппировок     = УзелНастройкиЭталоннойБазы.ПоляГруппировки;
	СписокСортировок      = УзелНастройкиЭталоннойБазы.ПоляСортировки;
	
	// Для совместимости с предыдущими версиями обработки, где было возможным удаление
	// перечисленных реквизитов из таблицы настройки
	
	Если      ТипМетаданныхЭталоннойБазы = ""Справочники"" Тогда
		
		Если СписокГруппировок.НайтиПоЗначению(""Владелец"") = Неопределено Тогда
			СписокГруппировок.Добавить(""Владелец"", НСтр(""ru = 'Владелец'""));
		КонецЕсли;
		
		Если СписокГруппировок.НайтиПоЗначению(""Родитель"") = Неопределено Тогда
			СписокГруппировок.Добавить(""Родитель"", НСтр(""ru = 'Родитель'""));
		КонецЕсли;
		
		Если СписокГруппировок.НайтиПоЗначению(""ИмяМетаданных"") = Неопределено Тогда
			СписокГруппировок.Добавить(""ИмяМетаданных"", НСтр(""ru = 'Имя объекта метаданных'""));
		КонецЕсли;
		
		Если СписокСортировок.НайтиПоЗначению(""Владелец"") = Неопределено Тогда
			СписокСортировок.Добавить(""Владелец"", НСтр(""ru = 'Владелец'""));
		КонецЕсли;
		
		Если СписокСортировок.НайтиПоЗначению(""Родитель"") = Неопределено Тогда
			СписокСортировок.Добавить(""Родитель"", НСтр(""ru = 'Родитель'""));
		КонецЕсли;
		
		Если СписокСортировок.НайтиПоЗначению(""ИмяМетаданных"") = Неопределено Тогда
			СписокСортировок.Добавить(""ИмяМетаданных"", НСтр(""ru = 'Имя объекта метаданных'""));
		КонецЕсли;
		
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""Документы"" Тогда
		
		Если СписокСортировок.НайтиПоЗначению(""Дата"") = Неопределено Тогда
			СписокСортировок.Добавить(""Дата"", НСтр(""ru = 'Дата'""));
		КонецЕсли;
		
		Если СписокСортировок.НайтиПоЗначению(""ИмяМетаданных"") = Неопределено Тогда
			СписокСортировок.Добавить(""ИмяМетаданных"", НСтр(""ru = 'Имя объекта метаданных'""));
		КонецЕсли;
		
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""РегистрыСведений"" Тогда
		
		Если СписокГруппировок.НайтиПоЗначению(""ИмяМетаданных"") = Неопределено Тогда
			СписокГруппировок.Добавить(""ИмяМетаданных"", НСтр(""ru = 'Имя объекта метаданных'""));
		КонецЕсли;
		
		Если СписокСортировок.НайтиПоЗначению(""Владелец"") = Неопределено Тогда
			СписокСортировок.Добавить(""ИмяМетаданных"", НСтр(""ru = 'Имя объекта метаданных'""));
		КонецЕсли;
		
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""ПланыСчетов"" Тогда
		
		Если СписокГруппировок.НайтиПоЗначению(""ИмяМетаданных"") = Неопределено Тогда
			СписокГруппировок.Добавить(""ИмяМетаданных"", НСтр(""ru = 'Имя объекта метаданных'""));
		КонецЕсли;
		
		Если СписокСортировок.НайтиПоЗначению(""ИмяМетаданных"") = Неопределено Тогда
			СписокСортировок.Добавить(""ИмяМетаданных"", НСтр(""ru = 'Имя объекта метаданных'""));
		КонецЕсли;
		
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""ПланыВидовХарактеристик"" Тогда
		
		Если СписокГруппировок.НайтиПоЗначению(""ИмяМетаданных"") = Неопределено Тогда
			СписокГруппировок.Добавить(""ИмяМетаданных"", НСтр(""ru = 'Имя объекта метаданных'""));
		КонецЕсли;
		
		Если СписокСортировок.НайтиПоЗначению(""ИмяМетаданных"") = Неопределено Тогда
			СписокСортировок.Добавить(""ИмяМетаданных"", НСтр(""ru = 'Имя объекта метаданных'""));
		КонецЕсли;
		
	КонецЕсли;
	
	// Инициализация таблицы
	ТаблицаНастройкиОтображения = СцТ_ИнициализироватьТаблицуНастройкиОтображения_НаСервере(СписокСортировок);
	
	// Преобразование типа метаданных в строку подстановки для запроса
	Если      ТипМетаданныхЭталоннойБазы = ""Справочники"" Тогда
		Подстановка = ""Справочник"";
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""Документы"" Тогда
		Подстановка = ""Документ"";
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""РегистрыСведений"" Тогда
		Подстановка = ""РегистрСведений"";
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""ПланыСчетов"" Тогда
		Подстановка = ""ПланСчетов"";
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""ПланыВидовРасчета"" Тогда
		Подстановка = ""ПланВидовРасчета"";
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""ПланыВидовХарактеристик"" Тогда
		Подстановка = ""ПланВидовХарактеристик"";
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""БизнесПроцессы"" Тогда
		Подстановка = ""БизнесПроцесс"";
	ИначеЕсли ТипМетаданныхЭталоннойБазы = ""Задачи"" Тогда
		Подстановка = ""Задача"";
	Иначе
		Возврат """";
	КонецЕсли;
	
	ЭтаОбработка = СцТ_ПолучитьЭтуОбработку();
	
	// Обход второго уровня дерева настроек (объектов метаданных) для выбранного типа метаданных
	АктивныеСтрокиНастроек = УзелНастройкиЭталоннойБазы.Строки.НайтиСтроки(Новый Структура(""Активность"", 1));
	Для каждого СтрокаОбъектаМетаданных Из АктивныеСтрокиНастроек Цикл
		
		СцТ_ДобавитьВТаблицуНастройкиОтображенияДанныеОбъектаМетаданных_НаСервере(
			ТипМетаданныхЭталоннойБазы,
			СтрокаОбъектаМетаданных.Имя,
			Подстановка,
			СтрокаОбъектаМетаданных,
			СписокСортировок,
			ТаблицаОбщихОтборов,
			СписокОбщихРеквизитов,
			ТаблицаНастройкиОтображения,
			,
			ЭтаОбработка);
		
	КонецЦикла;
	
	// Сортировка таблицы
	КолонкиСортировки = """";
	Для каждого СтрокаСортировки Из СписокСортировок Цикл
		Если НЕ ПустаяСтрока(КолонкиСортировки) Тогда
			КолонкиСортировки = КолонкиСортировки + "", "";
		КонецЕсли;
		КолонкиСортировки = КолонкиСортировки + СтрокаСортировки.Значение;
		Если СтрокаСортировки.Пометка Тогда
			КолонкиСортировки = КолонкиСортировки + "" Убыв"";
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(КолонкиСортировки) Тогда
		ТаблицаНастройкиОтображения.Сортировать(КолонкиСортировки);
	КонецЕсли;
	
	// Вывод результата в дерево
	СцТ_ДобавитьСтрокиИзТаблицыНастройкиОтображенияВДеревоДанных_НаСервере(
		ТаблицаНастройкиОтображения,
		ДеревоЭталоннойБазыНаСервере,
		СписокГруппировок);
	// Преобразование дерева значений в структуру
	СтруктураДерева = СцТ_ДеревоЗначенияВСтруктуру_НаСервере(ДеревоЭталоннойБазыНаСервере);
	Возврат СтруктураДерева;
	
КонецФункции

// Процедура добавления в таблицу настройки отображения сведений
// об объекте метаданных
//
// Параметры
//	ТипМетаданных               - строка типа метаданных
//	ИмяМетаданных               - строка имени метаданных
//	Подстановка                 - строка подстановки (тип метаданных в ед. числе)
//	СтрокаОбъектаМетаданных     - имя объекта метаданных
//	СписокСортировок            - список значений с реквизитами сортировки
//	ТаблицаОбщихОтборов         - отборы компоновщика
//	СписокОбщихРеквизитов       - список общих реквизитов
//	ТаблицаНастройкиОтображения - заполняемая таблица отображения
//	СсылкаДобавляемойСтроки     - значение (ссылка или отбор) добавляемой строки, используется
//                            если добавляется только одна строка
&НаСервереБезКонтекста
Процедура СцТ_ДобавитьВТаблицуНастройкиОтображенияДанныеОбъектаМетаданных_НаСервере(
	ТипМетаданных,
	ИмяМетаданных,
	Подстановка,
	СтрокаОбъектаМетаданных,
	СписокСортировок,
	ТаблицаОбщихОтборов,
	СписокОбщихРеквизитов,
	ТаблицаНастройкиОтображения,
	СсылкаДобавляемойСтроки = Неопределено,
	ЭтаОбработка)
	
	МодульЭтойОбработки = СцТ_ПолучитьЭтуОбработку();
	
	СписокДоступныхРеквизитов = МодульЭтойОбработки.СцТ_ПолучитьСписокВсехАтрибутовОбъектаМетаданных(
		ТипМетаданных,
		ИмяМетаданных);
	
	//Инициализация компоновщика настроек
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	СуществующиеОтборы = ТаблицаОбщихОтборов.Элементы;
	
	Если ТипМетаданных <> ""РегистрыСведений"" Тогда
		// Принудительное добавление поля ссылка для объектных данных
		СписокДоступныхРеквизитов.Добавить(""Ссылка"");
	КонецЕсли;
	
	// Подготовка контейнеров для подготовки данных
	МассивКолонокВНаименование = Новый Массив;
	МассивКолонокВАналитику    = Новый Массив;
	МассивИспользуемыхКолонок  = Новый Массив;
	
	ТекстЗапроса = """";
	
	// Добавление обязательных реквизитов, участвующих в сортировке
	Для каждого СтрокаСписка Из СписокСортировок Цикл
		СцТ_ДобавитьКолонкуВЗапрос_НаСервере(
			СтрокаСписка.Значение,
			ТекстЗапроса,
			МассивИспользуемыхКолонок,
			СписокДоступныхРеквизитов,
			МассивКолонокВНаименование,
			МассивКолонокВАналитику,
			Истина,
			Ложь,
			Ложь,
			СтрокаОбъектаМетаданных.Представление);
	КонецЦикла;
	
	// Если пользователь указал реквизиты для объекта метаданных, то добавление
	// реквизитов из таблицы
	Если СтрокаОбъектаМетаданных.ТаблицаРеквизитов <> Неопределено Тогда
		Для каждого СтрокаСписка Из СтрокаОбъектаМетаданных.ТаблицаРеквизитов Цикл
			СцТ_ДобавитьКолонкуВЗапрос_НаСервере(
				СтрокаСписка.Значение,
				ТекстЗапроса,
				МассивИспользуемыхКолонок,
				СписокДоступныхРеквизитов,
				МассивКолонокВНаименование,
				МассивКолонокВАналитику,
				Ложь,
				Истина,
				СтрокаСписка.Пометка,
				СтрокаОбъектаМетаданных.Представление);
		КонецЦикла;
	КонецЕсли;
	
	// Если пользователь указал общие реквизиты, то добавление
	// реквизитов из таблицы
	Если СписокОбщихРеквизитов <> Неопределено Тогда
		Для каждого СтрокаСписка Из СписокОбщихРеквизитов Цикл
			СцТ_ДобавитьКолонкуВЗапрос_НаСервере(
				СтрокаСписка.Значение,
				ТекстЗапроса,
				МассивИспользуемыхКолонок,
				СписокДоступныхРеквизитов,
				МассивКолонокВНаименование,
				МассивКолонокВАналитику,
				Ложь,
				Истина,
				СтрокаСписка.Пометка,
				СтрокаОбъектаМетаданных.Представление);
		КонецЦикла;
	КонецЕсли;
	
	// Если устанавливается отбор в компановке данных, то поле для отбора
	// должно быть возвращено запросом
	Для каждого ЭлементОтбора Из СуществующиеОтборы Цикл
		СцТ_ДобавитьКолонкуВЗапрос_НаСервере(
			Строка(ЭлементОтбора.ЛевоеЗначение),
			ТекстЗапроса,
			МассивИспользуемыхКолонок,
			СписокДоступныхРеквизитов,
			МассивКолонокВНаименование,
			МассивКолонокВАналитику,
			Ложь,
			Ложь,
			Ложь,
			СтрокаОбъектаМетаданных.Представление);
	КонецЦикла;
	
	// Для регистров сведений нужно обязательно включить в запрос
	// все измерения
	Если ТипМетаданных = ""РегистрыСведений"" Тогда
		// Добавление в массив полей необходимых колонок
		МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяМетаданных];
		
		Если МетаданныеРегистра.ПериодичностьРегистраСведений <>
				Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
			И МетаданныеРегистра.ПериодичностьРегистраСведений <>
				Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора
			И МассивИспользуемыхКолонок.Найти(""Период"") = Неопределено Тогда
			
				МассивИспользуемыхКолонок.Добавить(""Период"");
		КонецЕсли;
		
		Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			Если МассивИспользуемыхКолонок.Найти(Измерение.Имя) = Неопределено Тогда
				МассивИспользуемыхКолонок.Добавить(Измерение.Имя);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Для объектных типов нужно обязательно включить поле Ссылка
	Если ТипМетаданных <> ""РегистрыСведений"" Тогда
		СцТ_ДобавитьКолонкуВЗапрос_НаСервере(
			""Ссылка"",
			ТекстЗапроса,
			МассивИспользуемыхКолонок,
			СписокДоступныхРеквизитов,
			МассивКолонокВНаименование,
			МассивКолонокВАналитику,
			Истина,
			Ложь,
			Ложь,
			СтрокаОбъектаМетаданных.Представление);
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		// Значит по каким то причинам в запрос не попало ни одной колонки
		Возврат;
	КонецЕсли;
	
	// Дооформление текста запроса
	Если ТипМетаданных <> ""РегистрыСведений"" Тогда
		ТекстЗапроса = ""ВЫБРАТЬ "" + ТекстЗапроса;
		ТекстЗапроса = ТекстЗапроса + ""
									  |   ИЗ "" + Подстановка + ""."" + СтрокаОбъектаМетаданных.Имя;
	Иначе
		// Для регистра сведений нужно получить все реквизиты, а потом отобрать нужные
		ТекстЗапроса = ""ВЫБРАТЬ %1, *
					   |  ИЗ "" + Подстановка + ""."" + СтрокаОбъектаМетаданных.Имя;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ""%1"", """""""" + ИмяМетаданных + """""" КАК ИмяМетаданных"");
	КонецЕсли;
	
	// Данные будут получены при помощи компоновщика
	
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя                = ""Локальный"";
	ИсточникДанных.СтрокаСоединения   = """";
	ИсточникДанных.ТипИсточникаДанных = ""Local"";
	
	НаборДанныхЗапрос = СхемаКомпоновки.НаборыДанных.Добавить(Тип(""НаборДанныхЗапросСхемыКомпоновкиДанных""));
	НаборДанныхЗапрос.Имя                          = ""ОсновнойЗапрос"";
	НаборДанныхЗапрос.Запрос                       = ТекстЗапроса;
	НаборДанныхЗапрос.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанныхЗапрос.ИсточникДанных               = ""Локальный"";
	
	Для каждого ЭлементМассива Из МассивИспользуемыхКолонок Цикл
		ПолеНабора = НаборДанныхЗапрос.Поля.Добавить(Тип(""ПолеНабораДанныхСхемыКомпоновкиДанных""));
		ПолеНабора.ПутьКДанным = ЭлементМассива;
		ПолеНабора.Заголовок   = ЭлементМассива;
		ПолеНабора.Поле        = ЭлементМассива;
	КонецЦикла;
	
	НоваяГруппировка = СхемаКомпоновки.НастройкиПоУмолчанию.Структура.Добавить(Тип(""ГруппировкаКомпоновкиДанных""));
	НоваяГруппировка.Использование = Истина;
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип(""АвтоВыбранноеПолеКомпоновкиДанных""));
	
	ВыбранныеПоля = НоваяГруппировка.Выбор.Элементы;
	Для каждого ЭлементМассива Из МассивИспользуемыхКолонок Цикл
		ВыбранноеПоле = ВыбранныеПоля.Добавить(Тип(""ВыбранноеПолеКомпоновкиДанных""));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(ЭлементМассива);
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Заголовок     = ЭлементМассива;
		
	КонецЦикла;
	
	// Добавление отборов из существующей таблицы
	Для каждого СуществующийОтбор Из СуществующиеОтборы Цикл
		
		НовыйЭлементОтбора = СхемаКомпоновки.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
		
		НовыйЭлементОтбора.ВидСравнения   = СуществующийОтбор.ВидСравнения;
		НовыйЭлементОтбора.Использование  = СуществующийОтбор.Использование;
		НовыйЭлементОтбора.ЛевоеЗначение  = СуществующийОтбор.ЛевоеЗначение;
		НовыйЭлементОтбора.ПравоеЗначение = СуществующийОтбор.ПравоеЗначение;
		НовыйЭлементОтбора.Представление  = СуществующийОтбор.Представление;
		
	КонецЦикла;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, Новый УникальныйИдентификатор);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновки,
		СхемаКомпоновки.НастройкиПоУмолчанию,,,
		Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""),
		Ложь);
	
	//Создание и инициализация процессора компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	//Создание и инициализация процессора вывода результата
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Дооформление полученных данных	
	Если ТаблицаРезультата.Количество() > 0 Тогда
		
		//Проверка, что это может быть выведено
		Для каждого ЭлементМассива Из МассивИспользуемыхКолонок Цикл
			
			Если ТаблицаРезультата.Колонки.Найти(ЭлементМассива) = Неопределено Тогда
				// Т.е. не хватает функциональной опции для показа
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СсылкаДобавляемойСтроки <> Неопределено Тогда
			
			// Значит обновляется не всё дерево, а только добавляется отдельная строка
			// Удаление лишних строк из таблицы
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить(""Ссылка"", СсылкаДобавляемойСтроки);
			ТаблицаРезультата = ТаблицаРезультата.Скопировать(СтруктураОтбора);
			
		КонецЕсли;
		
		// Нужно собрать название и аналитику и поместить объекты в таблицу
		Для каждого СтрокаТаблицыРезультата Из ТаблицаРезультата Цикл
			
			// Сбор наименования и аналитики
			ТекстНаименования = """";
			Для каждого ЭлементМассива Из МассивКолонокВНаименование Цикл
				Если НЕ ПустаяСтрока(ТекстНаименования) Тогда
					ТекстНаименования = ТекстНаименования + "" /"";
				КонецЕсли;
				ТекстНаименования = ТекстНаименования + Строка(СтрокаТаблицыРезультата[ЭлементМассива]);
			КонецЦикла;
			
			ТекстАналитики = """";
			Для каждого ЭлементМассива Из МассивКолонокВАналитику Цикл
				Если НЕ ПустаяСтрока(ТекстАналитики) Тогда
					ТекстАналитики = ТекстАналитики + "" /"";
				КонецЕсли;
				ТекстАналитики = ТекстАналитики + Строка(СтрокаТаблицыРезультата[ЭлементМассива]);
			КонецЦикла;
			
			СтрокаНастройкиОтображения = ТаблицаНастройкиОтображения.Добавить();
			Для каждого СтрокаСортировки Из СписокСортировок Цикл
				Если СтрокаСортировки.Значение = ""ИмяМетаданных"" Тогда
					НужноеЗначение = СтрокаОбъектаМетаданных.Представление;
				Иначе
					Попытка
						НужноеЗначение = СтрокаТаблицыРезультата[СтрокаСортировки.Значение];
					Исключение
						НужноеЗначение = СтрокаОбъектаМетаданных.Представление;
					КонецПопытки;
				КонецЕсли;
				СтрокаНастройкиОтображения[СтрокаСортировки.Значение] = НужноеЗначение;
			КонецЦикла;
			
			СтрокаНастройкиОтображения.АналитикаОбъектаМетаданных     = ТекстАналитики;
			СтрокаНастройкиОтображения.ТипМД                          = ТипМетаданных;
			СтрокаНастройкиОтображения.ИмяМД                          = ИмяМетаданных;
			
			Если ТипМетаданных = ""РегистрыСведений"" Тогда
				
				// Записи регистра удобно определять отбором по измерениям
				СтруктураОтбора = Новый Структура;
				МетаданныеРегистра = Метаданные.РегистрыСведений[СтрокаОбъектаМетаданных.Имя];
				
				// Обязательные реквизиты регистровСведений
				Если МетаданныеРегистра.ПериодичностьРегистраСведений <>
						Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
					И МетаданныеРегистра.ПериодичностьРегистраСведений <>
						Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
						
					СтруктураОтбора.Вставить(""Период"", СтрокаТаблицыРезультата.Период);
				КонецЕсли;
				
				Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
					СтруктураОтбора.Вставить(Измерение.Имя, СтрокаТаблицыРезультата[Измерение.Имя]);
				КонецЦикла;
				
				СтрокаНастройкиОтображения.Ссылка =
					СцТ_ПреобразоватьЗначениеДляХранения_НаСервере(СтруктураОтбора);
				ЗначениеСсылки = СтруктураОтбора;
				
			Иначе
				СтрокаНастройкиОтображения.Ссылка = СтрокаТаблицыРезультата.Ссылка;
				ЗначениеСсылки = СтрокаТаблицыРезультата.Ссылка;
			КонецЕсли;
			
			Если ПустаяСтрока(ТекстНаименования) Тогда
				Если ТипМетаданных = ""РегистрыСведений"" Тогда
					ТекстНаименования = ЭтаОбработка.СцТ_ПолучитьПредставлениеЗаписиРС_НаСервере(
						ИмяМетаданных,
						СтрокаНастройкиОтображения.Ссылка);
				Иначе
					ТекстНаименования = Строка(СтрокаТаблицыРезультата.Ссылка);
				КонецЕсли;
			КонецЕсли;
			СтрокаНастройкиОтображения.ПредставлениеОбъектаМетаданных = ТекстНаименования;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавления очередной колонки в запрос
// для построения данных дерева эталонной базы.
// Одновременно с построением запроса заполняются вспомогательные массивы
//
// Параметры
//	ДобавляемыйРеквизит - очередной реквизит, добавляемый в запрос
//	ТекстЗапроса - текст запроса
//	МассивИспользуемыхКолонок - массив колонок, использованных в запросе
//	СписокДоступныхРеквизитов - список доступных реквизитов,
//	МассивВНаименовании - массив, реквизитов из которых составляется наименование,
//	МассивВАналитике - массив, реквизитов, участвующих в построении аналитики,
//	Принудительно  - признак принудительного добавления
//	ДобавлятьВПредставление - Признак того, что нужно добавляет реквизит в представление
//	ВНаименование  - признак, что реквизит используется при построении наименования
//	Представление - текст представления
&НаСервереБезКонтекста
Процедура СцТ_ДобавитьКолонкуВЗапрос_НаСервере(
	ДобавляемыйРеквизит,
	ТекстЗапроса,
	МассивИспользуемыхКолонок,
	СписокДоступныхРеквизитов,
	МассивВНаименовании,
	МассивВАналитике,
	Принудительно = Ложь,
	ДобавлятьВПредставление = Ложь,
	ВНаименование = Ложь,
	Представление = """")
	
	Если ДобавляемыйРеквизит = ""ИмяМетаданных"" Тогда
		ТекстВЗапрос = """""""" + Представление + """""" КАК "" + ДобавляемыйРеквизит;
		
	ИначеЕсли СписокДоступныхРеквизитов.НайтиПоЗначению(ДобавляемыйРеквизит) = Неопределено И НЕ Принудительно Тогда
		Возврат;
		
	ИначеЕсли СписокДоступныхРеквизитов.НайтиПоЗначению(ДобавляемыйРеквизит) = Неопределено И Принудительно Тогда
		ТекстВЗапрос = ""NULL КАК "" + ДобавляемыйРеквизит;
		
	Иначе
		ТекстВЗапрос = ДобавляемыйРеквизит + "" КАК "" + ДобавляемыйРеквизит;
		
	КонецЕсли;
	
	Если ДобавлятьВПредставление Тогда
		Если ВНаименование Тогда
			Если МассивВНаименовании.Найти(ДобавляемыйРеквизит) = Неопределено Тогда
				МассивВНаименовании.Добавить(ДобавляемыйРеквизит);
			КонецЕсли;
		Иначе
			Если МассивВАналитике.Найти(ДобавляемыйРеквизит) = Неопределено Тогда
				МассивВАналитике.Добавить(ДобавляемыйРеквизит);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивИспользуемыхКолонок.Найти(ДобавляемыйРеквизит) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекстЗапроса <> """" Тогда
		ТекстЗапроса = ТекстЗапроса + "", "";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстВЗапрос;
	
	МассивИспользуемыхКолонок.Добавить(ДобавляемыйРеквизит);
	
КонецПроцедуры

// Процедура заполнения дерева значения эталонной базы
// по подготовленной таблице данных
//
// Параметры
//	ТаблицаНастройкиОтображения - подготовленная таблица значений для заполнения
//	ОбрабатываемоеДерево - заполняемое дерево
//	ТаблицаГруппировок - таблица с группировками
&НаСервереБезКонтекста
Процедура СцТ_ДобавитьСтрокиИзТаблицыНастройкиОтображенияВДеревоДанных_НаСервере(
	ТаблицаНастройкиОтображения,
	ОбрабатываемоеДеревоЗначений,
	ТаблицаГруппировок)
	
	ТаблицаНастройкиОтображения.Колонки.Добавить(""КЛН_Вычерк"", Новый ОписаниеТипов(""Булево""));
	
	Для каждого СтрокаОтображения Из ТаблицаНастройкиОтображения Цикл
		
		Если НЕ СтрокаОтображения.КЛН_Вычерк Тогда
			
			СцТ_ПроверитьИДобавитьСтрокуВДерево_НаСервере(СтрокаОтображения, ТаблицаНастройкиОтображения, ОбрабатываемоеДеревоЗначений, ТаблицаГруппировок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Итерационная процедура обхода строк дерева и добавления значений
//
// параметры
//	СтрокаОтображения            - строка отображения
//	ТаблицаНастройкиОтображения  - таблица с данными
//	ОбрабатываемоеДеревоЗначений - заполняемое дерево,
//	ТаблицаГруппировок           - таблица группировок
//
&НаСервереБезКонтекста
Функция СцТ_ПроверитьИДобавитьСтрокуВДерево_НаСервере(
	СтрокаОтображения,
	ТаблицаНастройкиОтображения,
	ОбрабатываемоеДеревоЗначений,
	ТаблицаГруппировок)
	
	РодительскийУзел = ОбрабатываемоеДеревоЗначений;
	
	// Обход группировок
	Для каждого СтрокаГруппировки Из ТаблицаГруппировок Цикл
		
		// Значение группировки в отображаемой строке
		ЗначениеГруппировки = СтрокаОтображения[СтрокаГруппировки.Значение];
		
		// Подстановка представления для пустых
		Если НЕ ЗначениеЗаполнено(ЗначениеГруппировки) Тогда
			ЗначениеГруппировки = ""<"" + СтрокаГруппировки.Представление + "">"";
		КонецЕсли;
		
		// Приведение даты к началу дня
		Если ТипЗнч(ЗначениеГруппировки) = Тип(""Дата"") Тогда
			ЗначениеГруппировки = НачалоДня(ЗначениеГруппировки);
		КонецЕсли;
		
		Если СтрокаГруппировки.Значение = ""Владелец"" Тогда
			
			ТекущийУзел = СцТ_НайтиУзелВДеревеДанных(РодительскийУзел, ЗначениеГруппировки, ""Значение"", Истина);
			Если ТекущийУзел <> Неопределено Тогда
				РодительскийУзел = ТекущийУзел;
			Иначе
				// Поытка найти этого родителя в таблице (это может быть из-за неправильной сортировки)
				// Если есть владелец, то есть и ссылка
				СтрокаРодителя = ТаблицаНастройкиОтображения.Найти(ЗначениеГруппировки, ""Ссылка"");
				Если СтрокаРодителя <> Неопределено Тогда
					РодительскийУзел = СцТ_ПроверитьИДобавитьСтрокуВДерево_НаСервере(СтрокаРодителя, ТаблицаНастройкиОтображения, ОбрабатываемоеДеревоЗначений, ТаблицаГруппировок);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли СтрокаГруппировки.Значение = ""Родитель"" Тогда
			
			ТекущийУзел = СцТ_НайтиУзелВДеревеДанных(РодительскийУзел, ЗначениеГруппировки, ""Значение"", Истина);
			Если ТекущийУзел <> Неопределено Тогда
				РодительскийУзел = ТекущийУзел;
				// Остальные группировки для дочерних выводить не нужно
				Прервать;
			Иначе
				СтрокаРодителя = ТаблицаНастройкиОтображения.Найти(ЗначениеГруппировки, ""Ссылка"");
				Если СтрокаРодителя <> Неопределено Тогда
					РодительскийУзел = СцТ_ПроверитьИДобавитьСтрокуВДерево_НаСервере(СтрокаРодителя, ТаблицаНастройкиОтображения, ОбрабатываемоеДеревоЗначений, ТаблицаГруппировок);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			ТекущийУзел = СцТ_НайтиУзелВДеревеДанных(РодительскийУзел, ЗначениеГруппировки, ""Элемент"");
			
			Если ТекущийУзел = Неопределено Тогда
				ТекущийУзел = РодительскийУзел.Строки.Добавить();
				ТекущийУзел.Элемент       = ЗначениеГруппировки;
				ТекущийУзел.ТипУзла       = ""Группа"";
				ТекущийУзел.ТипМетаданных = СтрокаОтображения.ТипМД;
				ТекущийУзел.ИмяМетаданных = СтрокаОтображения.ИмяМД;
			КонецЕсли;
			
			РодительскийУзел = ТекущийУзел;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УзелЭлемента = РодительскийУзел.Строки.Добавить();
	УзелЭлемента.Элемент       = СтрокаОтображения.ПредставлениеОбъектаМетаданных;
	УзелЭлемента.Аналитика     = СтрокаОтображения.АналитикаОбъектаМетаданных;
	Если УзелЭлемента.ТипМетаданных <> ""РегистрыСведений"" Тогда
		УзелЭлемента.Значение      = ЗначениеВСтрокуВнутр(СтрокаОтображения.Ссылка);
	КонецЕсли;
	УзелЭлемента.ТипУзла       = ""Объект"";
	УзелЭлемента.ТипМетаданных = СтрокаОтображения.ТипМД;
	УзелЭлемента.ИмяМетаданных = СтрокаОтображения.ИмяМД;
	
	СтрокаОтображения.КЛН_Вычерк = Истина;
	
	Возврат УзелЭлемента;
	
КонецФункции

// Поиск нужного узла в дереве данных
//
// Параметры
//	УзелДерева         - Узел в котором ищем
//	ЗначениеПоиска     - значение, которое ищем
//	ПолеПоиска         - поле в котором ищем
//	ИскатьВПодчиненных - нужно ли искать в подчиненных
&НаСервереБезКонтекста
Функция СцТ_НайтиУзелВДеревеДанных(
	УзелДерева,
	ЗначениеПоиска,
	ПолеПоиска,
	ИскатьВПодчиненных = Ложь)
	
	Для каждого ПодчиненныйУзел Из УзелДерева.Строки Цикл
		Если ПодчиненныйУзел[ПолеПоиска] = ЗначениеПоиска
			ИЛИ ПодчиненныйУзел[ПолеПоиска] = ЗначениеВСтрокуВнутр(ЗначениеПоиска) Тогда
			Возврат ПодчиненныйУзел;
		КонецЕсли;
		
		Если ИскатьВПодчиненных Тогда
			
			ЗначениеВПодчиненномУзле = СцТ_НайтиУзелВДеревеДанных(
				ПодчиненныйУзел,
				ЗначениеПоиска,
				ПолеПоиска,
				ИскатьВПодчиненных);
			
			Если ЗначениеВПодчиненномУзле <> Неопределено Тогда
				Возврат ЗначениеВПодчиненномУзле;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПреобразованияЗначений

// Получение истинного значения на клиенте
//
// параметры
// ВходящееЗначение - значение в формате хранения
// Возвращаемое значение - истинное значение произвольного типа
&НаКлиенте
Функция СцТ_ПолучитьЗначение_НаКлиенте(Знач ВходящееЗначение)
	
	ВозвращаемоеЗначение = ВходящееЗначение;
	Если ТипЗнч(ВозвращаемоеЗначение) = Тип(""Строка"") Тогда
		
		Если Найти(ВозвращаемоеЗначение, НСтр(""ru='Дата('"")) > 0 Тогда
			
			ВозвращаемоеЗначение = СцТ_ПолучитьДатуПоУсловномуФормату_НаКлиенте(ВозвращаемоеЗначение);
			
		ИначеЕсли Найти(ВозвращаемоеЗначение, ""{""""#"""""") > 0 Тогда
			
			// Необходим серверный вызов
			АдресЗначения = СцТ_ПолучитьАдресЗначение_НаСервере(ВозвращаемоеЗначение, АдресТаблицыСсылок);
			ВозвращаемоеЗначение = ПолучитьИзВременногоХранилища(АдресЗначения);
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВозвращаемоеЗначение) = Тип(""Дата"")
		ИЛИ ТипЗнч(ВозвращаемоеЗначение) = Тип(""Число"")
		ИЛИ ТипЗнч(ВозвращаемоеЗначение) = Тип(""Булево"") Тогда
		// Ничего не делаем
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получение истинного значения на сервере
//
// Параметры
// ВхЗначение - хранимое значение
// АдресТаблицыСсылок - адрес таблицы ссылок
// Возвращаемое значение - адрес истинного значения
&НаСервереБезКонтекста
Функция СцТ_ПолучитьАдресЗначение_НаСервере(ВхЗначение, АдресТаблицыСсылок)
	
	ИстинноеЗначение = СцТ_ПолучитьЭтуОбработку().СцТ_ПолучитьЗначение_НаСервере(ВхЗначение, АдресТаблицыСсылок);
	
	Возврат ПоместитьВоВременноеХранилище(ИстинноеЗначение, Новый УникальныйИдентификатор);
	
КонецФункции

// Преобразование дат в ветке дерева данных
//
// Параметры
//	ВеткаСценария - ветка дерева данных
//	НачальнаяДатаДляПреобразования - начальная дата для отсчета смещений
//	НаправлениеПреобразования - куда преобразовывать (в абсолютную дату или в смещение)
&НаКлиенте
Процедура СцТ_РекурсивноПреобразоватьДатуВВеткеДерева(
	ВеткаСценария,
	НачальнаяДатаДляПреобразования,
	НаправлениеПреобразования)
	
	Для каждого УзелСценария Из ВеткаСценария.ПолучитьЭлементы() Цикл
		СцТ_ПреобразоватьДатуВЗначенииУзлаДерева(
			УзелСценария.Значение,
			НачальнаяДатаДляПреобразования,
			НаправлениеПреобразования);
		
		СцТ_РекурсивноПреобразоватьДатуВВеткеДерева(
			УзелСценария,
			НачальнаяДатаДляПреобразования,
			НаправлениеПреобразования);
	КонецЦикла;
	
КонецПроцедуры

// Преобразование даты в истинное значение
//
// Параметры
//	ВеткаДереваЗначения - ветка дерева, в которой выполняется преобразование
//	НачальнаяДатаДляПреобразования - дата, от которой отсчитывается смещение
//	НаправлениеПреобразования - куда преобразовывать (в абсолютную дату или в смещение)
&НаКлиенте
Процедура СцТ_ПреобразоватьДатуВЗначенииУзлаДерева(
	ВеткаДереваЗначения,
	НачальнаяДатаДляПреобразования,
	НаправлениеПреобразования)
	
	Для каждого УзелДереваЗначения Из ВеткаДереваЗначения.ПолучитьЭлементы() Цикл
		
		Если ТипЗнч(УзелДереваЗначения.Значение) = Тип(""Дата"")
			И НаправлениеПреобразования = ""ВУсловныйФормат"" Тогда
			
			УзелДереваЗначения.Значение = СцТ_ВУсловныйФорматДаты(
				УзелДереваЗначения.Значение,
				НачальнаяДатаДляПреобразования);
			
		ИначеЕсли ТипЗнч(УзелДереваЗначения.Значение) = Тип(""Строка"")
			И Найти(УзелДереваЗначения.Значение, ""Дата = "")
			И НаправлениеПреобразования = ""ИзУсловногоФормата"" Тогда
			
			УзелДереваЗначения.Значение = СцТ_ПолучитьДатуПоФорматнойСтроке(
				НачальнаяДатаДляПреобразования,
				УзелДереваЗначения.Значение);
			
		КонецЕсли;
		
		СцТ_ПреобразоватьДатуВЗначенииУзлаДерева(
			УзелДереваЗначения,
			НачальнаяДатаДляПреобразования,
			НаправлениеПреобразования);
	КонецЦикла;
	
КонецПроцедуры

// Преобразование значений типа Дата в строку условной даты,
// рассчитанной от начальной даты
//
// Параметры
//	 ИсходнаяДата - истинное значение даты
//	НачальнаяДатаДляПреобразования - начальная дата для отсчета смещений
// Возвращаемое значение - строка условной даты (в формате обработки)
&НаКлиенте
Функция СцТ_ВУсловныйФорматДаты(ИсходнаяДата, НачальнаяДатаДляПреобразования)
	
	ФорматнаяСтрока = ""ДатаНачала"";
	
	Г = Год(ИсходнаяДата);
	М = Месяц(ИсходнаяДата);
	Д = День(ИсходнаяДата);
	
	ГГ = Год(НачальнаяДатаДляПреобразования);
	ММ = Месяц(НачальнаяДатаДляПреобразования);
	ДД = День(НачальнаяДатаДляПреобразования);
	
	Месяц = М - ММ;
	Год   = Г - ГГ;
	День  = Д - ДД;
	
	Если Месяц = 0 Тогда
		СтрокаМесяц = ""ММ+0"";
	ИначеЕсли Месяц < 0 Тогда
		СтрокаМесяц = ""ММ - "" + СтрЗаменить(Строка((-1) * Месяц), Символ(160),"""");
	Иначе
		СтрокаМесяц = ""ММ + "" + СтрЗаменить(Строка(Месяц), Символ(160),"""");
	КонецЕсли;
		
	Если Год = 0 Тогда
		СтрокаГод = ""ГГ+0"";
	ИначеЕсли Год < 0 Тогда
		СтрокаГод = ""ГГ - "" + СтрЗаменить(Строка((-1) * Год), Символ(160),"""");
	Иначе
		СтрокаГод = ""ГГ + "" + СтрЗаменить(Строка(Год), Символ(160),"""");
	КонецЕсли;
	
	Если День = 0 Тогда
		СтрокаДень = ""ДД+0"";
	ИначеЕсли День < 0 Тогда
		СтрокаДень = ""ДД - "" + СтрЗаменить(Строка((-1) * День), Символ(160),"""");
	Иначе
		СтрокаДень = ""ДД + "" + СтрЗаменить(Строка(День), Символ(160),"""");
	КонецЕсли;
	
	ФорматнаяСтрока = ФорматнаяСтрока + "","" + СтрокаГод + "","" + СтрокаМесяц + "","" + СтрокаДень;
	
	ИтоговаяФормула = ""Дата = "" + ФорматнаяСтрока;
	
	Возврат ИтоговаяФормула;
	
КонецФункции

// Получение истинной даты из строки
// 
// Параметры
//	ИсходнаяНачальнаяДата - исходная начальная дата, от которой отсчитывалось смещение
// ИтоговаяФормула - формула расчета даты
// Возвращаемое значение - истинное значение расчитанной даты
&НаКлиенте
Функция СцТ_ПолучитьДатуПоФорматнойСтроке(ИсходнаяНачальнаяДата, ИтоговаяФормула)
	
	Если ТипЗнч(ИтоговаяФормула) = Тип(""Дата"") Тогда
		РезультирующаяДата =  ИтоговаяФормула;
	Иначе
		
		ВходящаяФорматнаяСтрока = СтрЗаменить(ИтоговаяФормула, ""Дата = "", """");
		
		// Выделение Приведения
		Если Найти(ВходящаяФорматнаяСтрока, ""НачалоНедели"") Тогда
			ПриведениеДаты = ""НачалоНедели"";
			ВходящаяФорматнаяСтрока = СтрЗаменить(ВходящаяФорматнаяСтрока, ""НачалоНедели("", """");
			ВходящаяФорматнаяСтрока = Лев(ВходящаяФорматнаяСтрока, СтрДлина(ВходящаяФорматнаяСтрока) - 1);
		ИначеЕсли Найти(ВходящаяФорматнаяСтрока, ""КонецНедели"") Тогда
			ПриведениеДаты = ""КонецНедели"";
			ВходящаяФорматнаяСтрока = СтрЗаменить(ВходящаяФорматнаяСтрока, ""КонецНедели("", """");
			ВходящаяФорматнаяСтрока = Лев(ВходящаяФорматнаяСтрока, СтрДлина(ВходящаяФорматнаяСтрока) - 1);
			
		ИначеЕсли Найти(ВходящаяФорматнаяСтрока, ""НачалоМесяца"") Тогда
			ПриведениеДаты = ""НачалоМесяца"";
			ВходящаяФорматнаяСтрока = СтрЗаменить(ВходящаяФорматнаяСтрока, ""НачалоМесяца("", """");
			ВходящаяФорматнаяСтрока = Лев(ВходящаяФорматнаяСтрока, СтрДлина(ВходящаяФорматнаяСтрока) - 1);
			
		ИначеЕсли Найти(ВходящаяФорматнаяСтрока, ""КонецМесяца"") Тогда
			ПриведениеДаты = ""КонецМесяца"";
			ВходящаяФорматнаяСтрока = СтрЗаменить(ВходящаяФорматнаяСтрока, ""КонецМесяца("", """");
			ВходящаяФорматнаяСтрока = Лев(ВходящаяФорматнаяСтрока, СтрДлина(ВходящаяФорматнаяСтрока) - 1);
			
		ИначеЕсли Найти(ВходящаяФорматнаяСтрока, ""НачалоКвартала"") Тогда
			ПриведениеДаты = ""НачалоКвартала"";
			ВходящаяФорматнаяСтрока = СтрЗаменить(ВходящаяФорматнаяСтрока, ""НачалоКвартала("", """");
			ВходящаяФорматнаяСтрока = Лев(ВходящаяФорматнаяСтрока, СтрДлина(ВходящаяФорматнаяСтрока) - 1);
			
		ИначеЕсли Найти(ВходящаяФорматнаяСтрока, ""КонецКвартала"") Тогда
			ПриведениеДаты = ""КонецКвартала"";
			ВходящаяФорматнаяСтрока = СтрЗаменить(ВходящаяФорматнаяСтрока, ""КонецКвартала("", """");
			ВходящаяФорматнаяСтрока = Лев(ВходящаяФорматнаяСтрока, СтрДлина(ВходящаяФорматнаяСтрока) - 1);
			
		Иначе
			ПриведениеДаты = """";
		КонецЕсли;
		
		// Выделение вида даты
		ПозицияЗапятой = Найти(ВходящаяФорматнаяСтрока, "","");
		Если ПозицияЗапятой <= 1 Тогда
			Возврат Дата(1,1,1);
		КонецЕсли;
		
		СлужебныйВидДаты = Сред(ВходящаяФорматнаяСтрока, 1, ПозицияЗапятой - 1);
		Если Найти(СлужебныйВидДаты, ""ТекущаяДата"") Тогда
			НачальнаяДата = ТекущаяДата();
		ИначеЕсли Найти(СлужебныйВидДаты, ""ДатаНачала"") Тогда
			НачальнаяДата = ИсходнаяНачальнаяДата;
		Иначе
			ПозицияТире = Найти(СлужебныйВидДаты, ""-"");
			Д = Сред(СлужебныйВидДаты,1,ПозицияТире - 1);
			СлужебныйВидДаты = Сред(СлужебныйВидДаты,ПозицияТире + 1);
			
			ПозицияТире = Найти(СлужебныйВидДаты, ""-"");
			М = Сред(СлужебныйВидДаты,1,ПозицияТире - 1);
			Г = Сред(СлужебныйВидДаты,ПозицияТире + 1);
			
			НачальнаяДата = Дата(Г,М,Д);
		КонецЕсли;
		
		ВходящаяФорматнаяСтрока = Сред(ВходящаяФорматнаяСтрока, ПозицияЗапятой + 1);
		
		// Год смещение
		ПозицияЗапятой = Найти(ВходящаяФорматнаяСтрока, "","");
		Если ПозицияЗапятой <= 1 Тогда
			Возврат Дата(1,1,1);
		КонецЕсли;
		
		ГГ = Сред(ВходящаяФорматнаяСтрока, 1, ПозицияЗапятой - 1);
		ГГ = СтрЗаменить(ГГ, ""ГГ"", """");
		ГГОтрицательный = Найти(ГГ,""-"");
		ГГ = СтрЗаменить(СтрЗаменить(ГГ, ""+"", """"), ""-"","""");
		СмещениеГода = Число(ГГ);
		
		ВходящаяФорматнаяСтрока = Сред(ВходящаяФорматнаяСтрока, ПозицияЗапятой + 1);
		
		// Месяц смещение
		ПозицияЗапятой = Найти(ВходящаяФорматнаяСтрока, "","");
		Если ПозицияЗапятой <= 1 Тогда
			Возврат Дата(1,1,1);
		КонецЕсли;
		
		ММ = Сред(ВходящаяФорматнаяСтрока, 1, ПозицияЗапятой - 1);
		ММ = СтрЗаменить(ММ, ""ММ"", """");
		ММОтрицательный = Найти(ММ,""-"");
		ММ = СтрЗаменить(СтрЗаменить(ММ, ""+"", """"), ""-"","""");
		СмещениеМесяца = Число(ММ);
		
		ВходящаяФорматнаяСтрока = Сред(ВходящаяФорматнаяСтрока, ПозицияЗапятой + 1);
		
		// День смещение
		ДД = ВходящаяФорматнаяСтрока;
		ДД = СтрЗаменить(ДД, ""ДД"", """");
		ДДОтрицательный = Найти(ДД, ""-"");
		ДД = СтрЗаменить(СтрЗаменить(ДД, ""+"", """"), ""-"","""");
		СмещениеДня = Число(ДД);
		
		Если СмещениеДня <> 0 ИЛИ СмещениеМесяца <> 0 ИЛИ СмещениеГода <> 0 Тогда
			Д = День(НачальнаяДата);
			ЭтоПоследнийДеньМесяца = (Д = День(КонецМесяца(НачальнаяДата)));
			М = Месяц(НачальнаяДата);
			Г = Год(НачальнаяДата);
			
			// Год
			Если ГГОтрицательный Тогда
				Г = Г - СмещениеГода;
			Иначе
				Г = Г + СмещениеГода;
			КонецЕсли;
			
			// Месяц
			Если ММОтрицательный Тогда
				М = М - СмещениеМесяца;
			Иначе
				М = М + СмещениеМесяца;
			КонецЕсли;
			
			КоррекцияГода = Цел(М/12);
			М = М - КоррекцияГода*12;
			
			Если М <= 0 Тогда
				КоррекцияГода = КоррекцияГода - 1;
				М = М + 12;
			КонецЕсли;
			
			Г = Г + КоррекцияГода;
			
			// Приведение даты к новому месяцу
			ПоследнийДеньНовогоМесяца = День(КонецМесяца(Дата(Г,М,15)));
			Если ЭтоПоследнийДеньМесяца Тогда
				Д = ПоследнийДеньНовогоМесяца;
			Иначе
				Если Д > ПоследнийДеньНовогоМесяца Тогда
					Д = ПоследнийДеньНовогоМесяца;
				КонецЕсли;
			КонецЕсли;
			
			// Применение смещения дня
			Пока СмещениеДня <> 0 Цикл
				ПоследнийДеньТекущегоМесяца = День(КонецМесяца(Дата(Г,М,15)));
				Если ДДОтрицательный Тогда
					Если СмещениеДня > Д Тогда
						М = М - 1;
						Если М = 0 Тогда
							М = 12;
							Г = Г - 1;
						КонецЕсли;
						Д = День(КонецМесяца(Дата(Г,М,15)));
						СмещениеДня = СмещениеДня - Д - 1;
					Иначе
						Д = Д - СмещениеДня;
						СмещениеДня = 0;
					КонецЕсли;
				Иначе
					ОсталосьДоКонцаМесяца = ПоследнийДеньТекущегоМесяца - Д;
					Если СмещениеДня > ОсталосьДоКонцаМесяца Тогда
						М = М + 1;
						Если М > 12 Тогда
							Г = Г + 1;
							М = 1;
						КонецЕсли;
						Д = 1;
						СмещениеДня = СмещениеДня - (ОсталосьДоКонцаМесяца + 1);
					Иначе
						Д = Д + СмещениеДня;
						СмещениеДня = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПредварительнаяДата = Дата(Г,М,Д);
		
		// Применение формулы приведения
		Если ПриведениеДаты = ""НачалоНедели"" Тогда
			РезультирующаяДата = НачалоНедели(ПредварительнаяДата);
		ИначеЕсли ПриведениеДаты = ""КонецНедели"" Тогда
			РезультирующаяДата = КонецНедели(ПредварительнаяДата);
		ИначеЕсли ПриведениеДаты = ""НачалоМесяца"" Тогда
			РезультирующаяДата = НачалоМесяца(ПредварительнаяДата);
		ИначеЕсли ПриведениеДаты = ""КонецМесяца"" Тогда
			РезультирующаяДата = КонецМесяца(ПредварительнаяДата);
		ИначеЕсли ПриведениеДаты = ""НачалоКвартала"" Тогда
			РезультирующаяДата = НачалоКвартала(ПредварительнаяДата);
		ИначеЕсли ПриведениеДаты = ""КонецКвартала"" Тогда
			РезультирующаяДата = КонецКвартала(ПредварительнаяДата);
		Иначе
			РезультирующаяДата = ПредварительнаяДата;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультирующаяДата;
	
КонецФункции

// Преобразование всего дерева значения в структуру для передачи между
// клиентом и сервером
//
// Параметры
//	ДеревоЗначения - исходное дерево значения
// Возвращаемое значение - струкетура с данными дерева
&НаСервереБезКонтекста
Функция СцТ_ДеревоЗначенияВСтруктуру_НаСервере(Знач ДеревоЗначения)
	
	Если ТипЗнч(ДеревоЗначения) = Тип(""Структура"") Тогда
		Возврат ДеревоЗначения;
	КонецЕсли;
	
	МассивКолонок = Новый Массив;
	Для каждого Колонка Из ДеревоЗначения.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Возврат СцТ_ДеревоЗначенийВДеревоСтруктур_НаСервере(ДеревоЗначения, МассивКолонок);
	
КонецФункции

// Пробразование ветки дерева значения в структуру для передачи между
// клиентом и сервером
//
// Параметры
//	ВеткаДереваЗначения - Исходная ветка дерева
//	КолонкиДерева - массив выгружаемых колонок
//	РодительскаяСтрока - родительская строка дерева
// Возвращаемое значение - структура с данными дерева
&НаСервереБезКонтекста
Функция СцТ_ДеревоЗначенийВДеревоСтруктур_НаСервере(
	ВеткаДереваЗначения,
	КолонкиДерева,
	Знач РодительскаяСтрока = Неопределено)
	
	Если РодительскаяСтрока = Неопределено Тогда
		РодительскаяСтрока  = Новый Структура;
		РодительскаяСтрока.Вставить(""ИСТЗ_Колонки"", КолонкиДерева);
		РодительскаяСтрока.Вставить(""ИСТЗ_Строки"" , Новый Массив);
	КонецЕсли;
	
	// формирование строк дерева структур
	Для каждого СтрокаДереваФормы Из ВеткаДереваЗначения.Строки Цикл
		СтрокаДерева = Новый Структура;
		Для каждого Колонка Из КолонкиДерева Цикл
			СтрокаДерева.Вставить(Колонка, СтрокаДереваФормы[Колонка]);
		КонецЦикла;
		СтрокаДерева.Вставить(""ИСТЗ_Строки"", Новый Массив);
		РодительскаяСтрока.ИСТЗ_Строки.Добавить(СтрокаДерева);
		СцТ_ДеревоЗначенийВДеревоСтруктур_НаСервере(СтрокаДереваФормы, КолонкиДерева, СтрокаДерева);
	КонецЦикла;
	
	Возврат РодительскаяСтрока;
	
КонецФункции


#КонецОбласти

#Область ПроцедурыИФункцииРаботыСТаблицейСсылок

// Процедура открытия формы с таблицей ссылок
//
// параметры
// СсылкаПоциционирования - ссылка, на которой нужно установить фокус
&НаКлиенте
Процедура СцТ_ОткрытьФормуТаблицыСсылок(СсылкаПоциционирования)
	
	ПараметрыФормыСсылок = СцТ_ПодготовитьПараметрыОткрытияФормыСсылок(СсылкаПоциционирования);
	
	Если ПараметрыФормыСсылок <> Неопределено Тогда
		ФормаТаблицыСсылок = ОткрытьФорму(ПутьКФормам + ""СсылкиСценария"",
			ПараметрыФормыСсылок,
			ЭтотОбъект);
		ФормаТаблицыСсылок.СцТ_ГлавнаяФорма = ЭтотОбъект;
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавления ссылок в таблицу ссылок
//
// Параметры
//	ТаблицаСсылокНаСервере - заполняемая таблица ссылок,
//	ПроверяемоеЗначение - проверяемое значение произвольного типа,
//	Представление - строка пользовательского представление значения,
//	НомерШагаИспользования - номер шага, в котором встретилось значение,
//	УИШ - уникальный идентификатор шага,
//	НомерШагаСоздания - номер шага, если значение взято из автогруппы
//	АдресХранилищаТаблицыКлючей - адрес таблицы хранения ключей
//	ОбработкаОбъект - объект - эта обработка на сервере
&НаСервереБезКонтекста
Процедура СцТ_ДобавитьСтрокуВТаблицуСсылок(
	ТаблицаСсылокНаСервере,
	ПроверяемоеЗначение,
	Представление,
	НомерШагаИспользования,
	УИШ,
	НомерШагаСоздания = 0,
	АдресХранилищаТаблицыКлючей,
	ОбработкаОбъект)
	
	// Получение истинного значения
	ИстинноеПроверяемоеЗначение = ОбработкаОбъект.СцТ_ПолучитьЗначение_НаСервере(ПроверяемоеЗначение);
	ЭтоСсылочныйТип = СцТ_ЭтоСсылка_НаСервере(ИстинноеПроверяемоеЗначение);
	
	Если ЭтоСсылочныйТип Тогда
		
		НужнаяСтрокаСсылки = ТаблицаСсылокНаСервере.Найти(ПроверяемоеЗначение, ""Ссылка"");
		
		Если НужнаяСтрокаСсылки = Неопределено Тогда
			
			// Добавление новой ссылки
			НужнаяСтрокаСсылки = ТаблицаСсылокНаСервере.Добавить();
			
			НужнаяСтрокаСсылки.Ссылка                 = ПроверяемоеЗначение; // добавляется ссылка в строке внутр
			НужнаяСтрокаСсылки.ТипМД          = СцТ_ОпределитьТипМетаданныхПоСсылке_НаСервере(ИстинноеПроверяемоеЗначение);
			НужнаяСтрокаСсылки.ИмяМД          = ИстинноеПроверяемоеЗначение.Метаданные().Имя;
			НужнаяСтрокаСсылки.Представление          = Представление;
			//НужнаяСтрокаСсылки.НомерШага              = НомерШагаИспользования;
			//НужнаяСтрокаСсылки.СоздаетсяВШаге         = НомерШагаСоздания;
			
			МодульЭтойОбработки = СцТ_ПолучитьЭтуОбработку();
			
			НужнаяСтрокаСсылки.СтруктураИдентификации = МодульЭтойОбработки.СцТ_СформироватьСтруктуруИдентификацииПоСсылке_НаСервере(
				ИстинноеПроверяемоеЗначение,
				НужнаяСтрокаСсылки.ТипМД,
				НужнаяСтрокаСсылки.ИмяМД,
				АдресХранилищаТаблицыКлючей);
				
			МассивУИШ = Новый Массив;
			НужнаяСтрокаСсылки.МассивУИШ = МассивУИШ;
		Иначе
			
			// Изменение состояния ссылки
			Если НомерШагаИспользования < НужнаяСтрокаСсылки.НомерШага Тогда
				НужнаяСтрокаСсылки.НомерШага = НомерШагаИспользования;
			КонецЕсли;
			
			Если НомерШагаСоздания > 0
				И (НомерШагаСоздания < НужнаяСтрокаСсылки.СоздаетсяВШаге
					ИЛИ НужнаяСтрокаСсылки.СоздаетсяВШаге = 0) Тогда
					
					НужнаяСтрокаСсылки.СоздаетсяВШаге = НомерШагаСоздания;
			КонецЕсли;
		КонецЕсли;
		
		НужнаяСтрокаСсылки.МассивУИШ.Добавить(УИШ);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет, что проверяемое значение является ссылкой на СУЩЕСТВУЮЩИЙ объект
// ПустаяСсылка возвращает ложь
&НаСервереБезКонтекста
Функция СцТ_ЭтоСсылка_НаСервере(ПроверяемоеЗначение)
	
	Если НЕ ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если    Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемоеЗначение))
		ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемоеЗначение))
		//ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемоеЗначение))
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемоеЗначение))
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемоеЗначение))
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемоеЗначение))
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемоеЗначение))
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемоеЗначение)) Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Процедура для обхода дерева значения в шаге 
// и добавления ссылок в таблицу ссылок
//
// Параметры
//	ТаблицаСсылокНаСервере      - истинная таблица значений
//	ВеткаДерева                 - текущая ветка дерева данных
//	ТекущийНомерШага            - текущий номер шага
//	ТекущийУИШ                  - текущий идентификатор шага
//	АдресХранилищаТаблицыКлючей - адрес хранения таблицы ключей
//	ОбработкаОбъект             - эта обработка на сервере
&НаСервереБезКонтекста
Процедура СцТ_ИтерационноеДобавлениеСсылок_НаСервере(
	ТаблицаСсылокНаСервере,
	ВеткаДерева,
	ТекущийНомерШага,
	ТекущийУИШ,
	АдресХранилищаТаблицыКлючей,
	ОбработкаОбъект)
	
	Для каждого СтрокаДерева Из ВеткаДерева.Строки Цикл
		ПроверяемоеЗначение = СтрокаДерева.Значение;
		
		Если ТипЗнч(ПроверяемоеЗначение) = Тип(""СписокЗначений"") Тогда
			Для каждого ЭлементСписка Из ПроверяемоеЗначение Цикл
				СцТ_ДобавитьСтрокуВТаблицуСсылок(
					ТаблицаСсылокНаСервере,
					ЭлементСписка.Значение,
					ЭлементСписка.Представление,
					ТекущийНомерШага,
					ТекущийУИШ,,
					АдресХранилищаТаблицыКлючей,
					ОбработкаОбъект);
			КонецЦикла;
		Иначе
			СцТ_ДобавитьСтрокуВТаблицуСсылок(
				ТаблицаСсылокНаСервере,
				ПроверяемоеЗначение,
				СтрокаДерева.Представление,
				ТекущийНомерШага,
				ТекущийУИШ,,
				АдресХранилищаТаблицыКлючей,
				ОбработкаОбъект);
		КонецЕсли;
		
		СцТ_ИтерационноеДобавлениеСсылок_НаСервере(
			ТаблицаСсылокНаСервере,
			СтрокаДерева,
			ТекущийНомерШага,
			ТекущийУИШ,
			АдресХранилищаТаблицыКлючей,
			ОбработкаОбъект);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТаблицейКлючей

// Инициализация и заполнение общими ключами
// таблицы ключей
// Возвращаемое значение - адрес временного хранилища таблицы ключей
&НаСервереБезКонтекста
Функция СцТ_ИнициализироватьТаблицуКлючей_НаСервере()
	
	ТаблицаКлючейНаСервере = Новый ТаблицаЗначений;
	ТаблицаКлючейНаСервере.Колонки.Добавить(""ТипМетаданных"", Новый ОписаниеТипов(""Строка""));
	ТаблицаКлючейНаСервере.Колонки.Добавить(""ИмяМетаданных"", Новый ОписаниеТипов(""Строка""));
	ТаблицаКлючейНаСервере.Колонки.Добавить(""Ключи""); // Тип таблица значений
	
	СписокМетаданных = СцТ_СписокТиповМетаданных();
	
	// Добавление недостающих строк - общих ключей по умолчанию
	// у общего ключа ИмяМетаданных = """"
	Для каждого ЭлементСписка Из СписокМетаданных Цикл
		ОтборКлючей = Новый Структура;
		ОтборКлючей.Вставить(""ТипМетаданных"", ЭлементСписка.Значение);
		ОтборКлючей.Вставить(""ИмяМетаданных"", """");
		
		Если ТаблицаКлючейНаСервере.НайтиСтроки(ОтборКлючей).Количество() = 0 Тогда
			// Добавление новой строки
			
			НоваяСтрокаТаблицыКлючей = ТаблицаКлючейНаСервере.Добавить();
			НоваяСтрокаТаблицыКлючей.ТипМетаданных = ЭлементСписка.Значение;
			НоваяСтрокаТаблицыКлючей.ИмяМетаданных = """";
			
			ОбщиеКлючи = Новый ТаблицаЗначений;
			ОбщиеКлючи.Колонки.Добавить(""Имя"");
			ОбщиеКлючи.Колонки.Добавить(""Наименование"");
			
			Если ЭлементСписка.Значение = ""Справочники"" Тогда
				
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Наименование""   , ""Наименование"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Родитель""       , ""Родитель"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Владелец""       , ""Владелец"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""ПометкаУдаления"", ""Пометка удаления"");
				
			ИначеЕсли ЭлементСписка.Значение = ""Документы"" Тогда
				
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Дата""           , ""Дата"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Организация""    , ""Организация"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Контрагент""     , ""Контрагент"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""ПометкаУдаления"", ""Пометка удаления"");
				
			ИначеЕсли ЭлементСписка.Значение = ""ПланыВидовХарактеристик"" Тогда
				
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Наименование""   , ""Наименование"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Родитель""       , ""Родитель"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""ПометкаУдаления"", ""Пометка удаления"");
				
			ИначеЕсли ЭлементСписка.Значение = ""ПланыВидовРасчета"" Тогда
				
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Наименование""   , ""Наименование"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""ПометкаУдаления"", ""Пометка удаления"");
				
			ИначеЕсли ЭлементСписка.Значение = ""ПланыСчетов"" Тогда
				
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Наименование""   , ""Наименование"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Код""            , ""Код"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""ПометкаУдаления"", ""Пометка удаления"");
				
			ИначеЕсли ЭлементСписка.Значение = ""БизнесПроцессы"" Тогда
				
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Дата""           , ""Дата"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""ПометкаУдаления"", ""Пометка удаления"");
				
			ИначеЕсли ЭлементСписка.Значение = ""Задачи"" Тогда
				
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""Дата""           , ""Дата"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""БизнесПроцесс""  , ""Бизнес-процесс"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""ТочкаМаршрута""  , ""Точка маршрута"");
				СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ОбщиеКлючи, ""ПометкаУдаления"", ""Пометка удаления"");
				
			КонецЕсли;
			
			НоваяСтрокаТаблицыКлючей.Ключи = ОбщиеКлючи.Скопировать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	АдресВременногоХранилищаТаблицыКлючей = ПоместитьВоВременноеХранилище(
		ТаблицаКлючейНаСервере,
		Новый УникальныйИдентификатор);
	
	Возврат АдресВременногоХранилищаТаблицыКлючей;
	
КонецФункции

// Вспомогательная процедура для процедуры СцТ_ИнициализироватьТаблицуКлючей_НаСервере()
// ТаблицаКлючей - таблица ключей в которую добавляется ключ
// Имя           - Имя ключа
// Представление - пользовательское представление ключа
&НаСервереБезКонтекста
Процедура СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере(ЗначениеКлючей, Имя, Представление)
	
	// Проверка существования ключа в таблице
	Если ЗначениеКлючей.Найти(Имя, ""Имя"") = Неопределено Тогда
		НоваяСтрока = ЗначениеКлючей.Добавить();
		НоваяСтрока.Имя          = Имя;
		НоваяСтрока.Наименование = Представление;
	КонецЕсли;
	
КонецПроцедуры // СцТ_ДобавитьКлючВТаблицуКлючей_НаСервере()

#КонецОбласти

#Область РаботаСДеревомШаговПоУмолчанию


&НаСервереБезКонтекста
// Процедура добавления недостающих строк в таблицу начальных
// установок шага
//
// Параметры
// АдресНачальныхУстановокШагов - адрес хранения таблицы установок
// СписокТиповШагов - список доступных шагов
Процедура СцТ_ДобавитьНедостающиеСтрокиВТаблНачальныхУстановокШагов(АдресНачальныхУстановокШагов)
	
	СписокТиповШаговПоУмолчанию = СцТ_ТипыШаговПоУмолчанию();
	
	Если ПустаяСтрока(АдресНачальныхУстановокШагов) Тогда
		ДеревоНачальныхНастроекШагов = Новый ДеревоЗначений;
		ДеревоНачальныхНастроекШагов.Колонки.Добавить(""Имя""                     , Новый ОписаниеТипов(""Строка""));
		ДеревоНачальныхНастроекШагов.Колонки.Добавить(""Синоним""                 , Новый ОписаниеТипов(""Строка""));
		ДеревоНачальныхНастроекШагов.Колонки.Добавить(""НеВыводитьАвтоописание""  , Новый ОписаниеТипов(""Число""));
		ДеревоНачальныхНастроекШагов.Колонки.Добавить(""Активность""              , Новый ОписаниеТипов(""Число""));
		ДеревоНачальныхНастроекШагов.Колонки.Добавить(""Значение"");
		ДеревоНачальныхНастроекШагов.Колонки.Добавить(""ТипУзла""                 , Новый ОписаниеТипов(""Строка""));
		ДеревоНачальныхНастроекШагов.Колонки.Добавить(""ПользовательскоеОписание"", Новый ОписаниеТипов(""Строка""));
		ДеревоНачальныхНастроекШагов.Колонки.Добавить(""Комментарии""             , Новый ОписаниеТипов(""Строка""));
	Иначе
		ДеревоНачальныхНастроекШагов = ПолучитьИзВременногоХранилища(АдресНачальныхУстановокШагов);
	КонецЕсли;
	
	СписокТиповМД = СцТ_СписокТиповМетаданных();
	
	Для каждого ЭлементТипаМД Из СписокТиповМД Цикл
		
		УзелТипаМетаданных = ДеревоНачальныхНастроекШагов.Строки.Найти(ЭлементТипаМД.Значение, ""Имя"");
		Если УзелТипаМетаданных = Неопределено Тогда
			
			УзелТипаМетаданных = СцТ_ДобавитьУзелВДеревоНачальныхУстановокШага(
				ДеревоНачальныхНастроекШагов,
				ЭлементТипаМД.Значение,
				ЭлементТипаМД.Представление,
				""ТипМетаданных"");
			
			// Последовательности шагов
			
			Значение = СцТ_ИнициализироватьДеревоЗначенияШагаПоУмолчанию();
			
			СписокДоступныхФорм = Новый СписокЗначений;
			
			Если ЭлементТипаМД.Значение <> ""Обработки""
				И ЭлементТипаМД.Значение <> ""Отчеты"" Тогда
				СписокДоступныхФорм.Добавить(""БезФормы"", ""Работа с объектом"", Ложь);
			КонецЕсли;
			
			УзелСпискаШагов = Значение.Строки.Добавить();
			УзелСпискаШагов.Имя      = ""СписокШагов"";
			УзелСпискаШагов.Синоним  = ""Список шагов"";
			УзелСпискаШагов.ТипУзла  = ""СписокШагов"";
			
			Для каждого ЭлементСпискаФорм Из СписокДоступныхФорм Цикл
				
				УзелФормы = УзелСпискаШагов.Строки.Добавить();
				УзелФормы.Имя     = ЭлементСпискаФорм.Значение;
				УзелФормы.Синоним = ЭлементСпискаФорм.Представление;
				УзелФормы.ТипУзла = ""УзелФормы"";
				
				СписокШагов = СцТ_ПолучитьСписокШаговПоУмолчанию(
					ЭлементТипаМД.Значение,
					ЭлементСпискаФорм.Значение,
					СписокТиповШаговПоУмолчанию);
				
				Для каждого ЭлементСпискаШагов Из СписокШагов Цикл
					УзелШага = УзелФормы.Строки.Добавить();
					УзелШага.Имя      = ЭлементСпискаШагов.Значение;
					УзелШага.Синоним  = ЭлементСпискаШагов.Представление;
					УзелШага.ТипУзла  = ""Шаг"";
				КонецЦикла;
				
			КонецЦикла;
			
			// Добавление основного варианта - формы с которой работаем
			// по умолчанию
			УзелОсновногоВарианта = Значение.Строки.Добавить();
			УзелОсновногоВарианта.Имя      = ""ОсновнойВариант"";
			УзелОсновногоВарианта.Синоним  = ""Основной вариант"";
			УзелОсновногоВарианта.ТипУзла  = ""УзелОсновногоВарианта"";
			УзелОсновногоВарианта.Значение = ""БезФормы"";
			
			УзелТипаМетаданных.Значение = Значение.Скопировать();
			
		КонецЕсли;
		
		// Добавление настроек шагов по умолчанию
		Для каждого ЭлементСпискаТипаШага Из СписокТиповШаговПоУмолчанию Цикл
			
			Если ЭлементТипаМД.Значение <> ""Документы""
				И ЭлементСпискаТипаШага.Значение = ""СравнитьДвижения"" Тогда
				Продолжить;
			КонецЕсли;
			
			УзелШага = СцТ_ДобавитьУзелВДеревоНачальныхУстановокШага(
				УзелТипаМетаданных,
				ЭлементСпискаТипаШага.Значение,
				ЭлементСпискаТипаШага.Представление,
				""Шаг"");
			
			СцТ_ЗаполнитьНастройкиПоУмолчаниюДляШага(УзелШага, ЭлементТипаМД.Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Ипсравление ошибки предыдущих версий обработки:
	// удаление лишних узлов метаданных из дерева;
	// удаление лишних типов шагов из дерева;
	// удаление дублируемых шагов.
	КоличествоУзлов = ДеревоНачальныхНастроекШагов.Строки.Количество();
	Для ОбратныйИндекс = 1 По КоличествоУзлов Цикл
		
		ТекУзел = ДеревоНачальныхНастроекШагов.Строки[КоличествоУзлов - ОбратныйИндекс];
		Если СписокТиповМД.НайтиПоЗначению(ТекУзел.Имя) = Неопределено Тогда
			ДеревоНачальныхНастроекШагов.Строки.Удалить(ТекУзел);
		Иначе
			ТипыШаговВУзле  = Новый Соответствие;
			ТекИндекс = 0;
			Пока ТекИндекс < ТекУзел.Строки.Количество() Цикл
				ТекУзелШага = ТекУзел.Строки[ТекИндекс];
				Если ТипыШаговВУзле[ТекУзелШага.Имя] = Истина
					ИЛИ СписокТиповШаговПоУмолчанию.НайтиПоЗначению(ТекУзелШага.Имя) = Неопределено Тогда
					ТекУзел.Строки.Удалить(ТекУзелШага);
					Продолжить;
				КонецЕсли;
				ТипыШаговВУзле[ТекУзелШага.Имя] = Истина;
				ТекИндекс = ТекИндекс + 1;
			КонецЦикла;
			КоличествоШагов = ТекУзел.Строки.Количество();
			Для ОбратныйИндекс1 = 1 По КоличествоШагов Цикл
				ТекУзелШага = ТекУзел.Строки[КоличествоШагов - ОбратныйИндекс1];
				Если СписокТиповШаговПоУмолчанию.НайтиПоЗначению(ТекУзелШага.Имя) = Неопределено Тогда
					ТекУзел.Строки.Удалить(ТекУзелШага);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(АдресНачальныхУстановокШагов) Тогда
		АдресНачальныхУстановокШагов = ПоместитьВоВременноеХранилище(
			ДеревоНачальныхНастроекШагов,
			Новый УникальныйИдентификатор);
	Иначе
		ПоместитьВоВременноеХранилище(ДеревоНачальныхНастроекШагов, АдресНачальныхУстановокШагов);
	КонецЕсли;
	
КонецПроцедуры

// Добавление узла в дерево начальных установок шагов
//
// Параметры
//	РодительскийУзел       - родитель нового узла
//	Имя                    - имя узла
//	Синоним                - синоним
//	ТипУзла                - строка типа узла
//	НеВыводитьАвтоописание - нужно ли описание
//	Активность             - активность узла
//	Значение               - значение
// Возвращаемое значение - данные нового узла
&НаСервереБезКонтекста
Функция СцТ_ДобавитьУзелВДеревоНачальныхУстановокШага(
	РодительскийУзел,
	Имя,
	Синоним,
	ТипУзла,
	НеВыводитьАвтоописание = Ложь,
	Активность = Истина,
	Значение = Неопределено)
	
	Если Значение = Неопределено Тогда
		Значение = СцТ_ИнициализироватьДеревоЗначенияШагаПоУмолчанию();
	КонецЕсли;
	
	НужныйУзел = РодительскийУзел.Строки.Добавить();
	
	НужныйУзел.Имя                    = Имя;
	НужныйУзел.Синоним                = Синоним;
	НужныйУзел.ТипУзла                = ТипУзла;
	НужныйУзел.НеВыводитьАвтоописание = НеВыводитьАвтоописание;
	НужныйУзел.Активность             = Активность;
	НужныйУзел.Значение               = Значение.Скопировать();
	
	Возврат НужныйУзел;
	
КонецФункции

// Инициализация дерева значений, хранимого в поле Значение
// настройки шага по умолчанию
&НаСервереБезКонтекста
Функция СцТ_ИнициализироватьДеревоЗначенияШагаПоУмолчанию()
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить(""Имя""    , Новый ОписаниеТипов(""Строка""));
	Дерево.Колонки.Добавить(""Синоним"", Новый ОписаниеТипов(""Строка""));
	Дерево.Колонки.Добавить(""ТипУзла"", Новый ОписаниеТипов(""Строка""));
	Дерево.Колонки.Добавить(""Значение"");
	
	Возврат Дерево;
	
КонецФункции

// Формирование списка шагов для настроек по умолчанию
//
// Параметры
//	ТипМетаданных      - строка типа метаданных
//	ГлобальноеИмяФормы - имя формы
//	СписокТиповШагов   - список типов шагов
// Возвращаемое значение - список шагов для настроек
&НаСервереБезКонтекста
Функция СцТ_ПолучитьСписокШаговПоУмолчанию(
	ТипМетаданных,
	ГлобальноеИмяФормы,
	СписокТиповШагов)
	
	МассивШагов = Новый Массив;
	
	Если ТипМетаданных = ""Справочники"" И ГлобальноеИмяФормы = ""БезФормы"" Тогда
		
		МассивШагов.Добавить(""Воспроизвести"");
		МассивШагов.Добавить(""СравнитьСЭталоном"");
		
	ИначеЕсли ТипМетаданных = ""Документы"" И ГлобальноеИмяФормы = ""БезФормы"" Тогда
		
		МассивШагов.Добавить(""Воспроизвести"");
		МассивШагов.Добавить(""СравнитьСЭталоном"");
		МассивШагов.Добавить(""СравнитьДвижения"");
		
	ИначеЕсли ТипМетаданных = ""ПланыВидовХарактеристик"" И ГлобальноеИмяФормы = ""БезФормы"" Тогда
		
		МассивШагов.Добавить(""Воспроизвести"");
		МассивШагов.Добавить(""СравнитьСЭталоном"");
		
	ИначеЕсли ТипМетаданных = ""ПланыСчетов"" И ГлобальноеИмяФормы = ""БезФормы"" Тогда
		
		МассивШагов.Добавить(""Воспроизвести"");
		МассивШагов.Добавить(""СравнитьСЭталоном"");
		
	ИначеЕсли ТипМетаданных = ""ПланыВидовРасчета"" И ГлобальноеИмяФормы = ""БезФормы"" Тогда
		
		МассивШагов.Добавить(""Воспроизвести"");
		МассивШагов.Добавить(""СравнитьСЭталоном"");
		
	ИначеЕсли ТипМетаданных = ""РегистрыСведений"" И ГлобальноеИмяФормы = ""БезФормы"" Тогда
		
		МассивШагов.Добавить(""Воспроизвести"");
		МассивШагов.Добавить(""СравнитьСЭталоном"");
		
	ИначеЕсли ТипМетаданных = ""БизнесПроцессы"" И ГлобальноеИмяФормы = ""БезФормы"" Тогда
		
		МассивШагов.Добавить(""Воспроизвести"");
		МассивШагов.Добавить(""СравнитьСЭталоном"");
		
	ИначеЕсли ТипМетаданных = ""Задачи"" И ГлобальноеИмяФормы = ""БезФормы"" Тогда
		
		МассивШагов.Добавить(""Воспроизвести"");
		МассивШагов.Добавить(""СравнитьСЭталоном"");
		
	КонецЕсли;
	
	СписокШаговПоУмолчанию = Новый СписокЗначений;
	
	Для каждого ЭлементМассива Из МассивШагов Цикл
		НайденыйТипШага = СписокТиповШагов.НайтиПоЗначению(ЭлементМассива);
		Если НайденыйТипШага <> Неопределено Тогда
			СписокШаговПоУмолчанию.Добавить(ЭлементМассива, НайденыйТипШага.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокШаговПоУмолчанию;
	
КонецФункции

// Заполнение настроек шагов по умолчанию
//
// Параметры
//	УзелШага - текущий узел шага
//	ТипМетаданных - строка типа метаданных
&НаСервереБезКонтекста
Процедура СцТ_ЗаполнитьНастройкиПоУмолчаниюДляШага(УзелШага, ТипМетаданных)
	
	Значение = СцТ_ИнициализироватьДеревоЗначенияШагаПоУмолчанию();
	
	Если УзелШага.Имя = ""Воспроизвести"" Тогда
		
		// Настройки - дерево
		УзелИсключений = Значение.Строки.Добавить();
		УзелИсключений.Имя     = ""Исключения"";
		УзелИсключений.Синоним = ""Исключения"";
		УзелИсключений.ТипУзла = ""УзелИсключений"";
		
		УзелИсключенийРеквизиты = УзелИсключений.Строки.Добавить();
		УзелИсключенийРеквизиты.Имя     = ""Реквизиты"";
		УзелИсключенийРеквизиты.Синоним = ""Реквизиты"";
		УзелИсключенийРеквизиты.ТипУзла = ""УзелИсключенийРеквизиты"";
		
		Если    ТипМетаданных = ""Справочники""
			ИЛИ ТипМетаданных = ""ПланыВидовХарактеристик""
			ИЛИ ТипМетаданных = ""ПланыВидовРасчета""
			ИЛИ ТипМетаданных = ""ПланыСчетов"" Тогда
			
			УзелРеквизита = УзелИсключенийРеквизиты.Строки.Добавить();
			
			УзелРеквизита.Имя     = ""Код"";
			УзелРеквизита.Синоним = ""Код"";
			УзелРеквизита.ТипУзла = ""Реквизит"";
			
		ИначеЕсли ТипМетаданных = ""Документы""
			ИЛИ   ТипМетаданных = ""БизнесПроцессы""
			ИЛИ   ТипМетаданных = ""Задачи"" Тогда
			
			УзелРеквизита = УзелИсключенийРеквизиты.Строки.Добавить();
			
			УзелРеквизита.Имя     = ""Номер"";
			УзелРеквизита.Синоним = ""Номер"";
			УзелРеквизита.ТипУзла = ""Реквизит"";
			
		КонецЕсли;
		
		Если ТипМетаданных <> ""РегистрыСведений"" Тогда
			
			УзелИсключенийРеквизитыТЧ = УзелИсключений.Строки.Добавить();
			
			УзелИсключенийРеквизитыТЧ.Имя     = ""РеквизитыТЧ"";
			УзелИсключенийРеквизитыТЧ.Синоним = ""Реквизиты табличных частей"";
			УзелИсключенийРеквизитыТЧ.ТипУзла = ""УзелИсключенийРеквизитыТЧ"";
		КонецЕсли;
		
		УзелВариантаЗаписи = Значение.Строки.Добавить();
		
		УзелВариантаЗаписи.Имя     = ""ВариантЗаписи"";
		УзелВариантаЗаписи.Синоним = ""Вариант записи"";
		УзелВариантаЗаписи.ТипУзла = ""ВариантЗаписи"";
		
		Если ТипМетаданных = ""Документы"" Тогда
			УзелВариантаЗаписи.Значение = ""КакУВоспроизводимогоДокумента"";
		Иначе
			УзелВариантаЗаписи.Значение = ""Записать"";
		КонецЕсли;
		
	ИначеЕсли УзелШага.Имя = ""СравнитьСЭталоном"" Тогда
		
		// Настройки - дерево
		УзелИсключений = Значение.Строки.Добавить();
		
		УзелИсключений.Имя     = ""Исключения"";
		УзелИсключений.Синоним = ""Исключения"";
		УзелИсключений.ТипУзла = ""УзелИсключений"";
		
		УзелИсключенийРеквизиты = УзелИсключений.Строки.Добавить();
		
		УзелИсключенийРеквизиты.Имя     = ""Реквизиты"";
		УзелИсключенийРеквизиты.Синоним = ""Реквизиты"";
		УзелИсключенийРеквизиты.ТипУзла = ""УзелИсключенийРеквизиты"";
		
		Если ТипМетаданных <> ""РегистрыСведений"" Тогда
			
			УзелИсключенийРеквизитыТЧ = УзелИсключений.Строки.Добавить();
			
			УзелИсключенийРеквизитыТЧ.Имя     = ""РеквизитыТЧ"";
			УзелИсключенийРеквизитыТЧ.Синоним = ""Реквизиты табличных частей"";
			УзелИсключенийРеквизитыТЧ.ТипУзла = ""УзелИсключенийРеквизитыТЧ"";
			
		КонецЕсли;
		
		Если    ТипМетаданных = ""Справочники""
			ИЛИ ТипМетаданных = ""ПланыВидовХарактеристик""
			ИЛИ ТипМетаданных = ""ПланыВидовРасчета""
			ИЛИ ТипМетаданных = ""ПланыСчетов"" Тогда
			
			УзелРеквизита = УзелИсключенийРеквизиты.Строки.Добавить();
			
			УзелРеквизита.Имя     = ""Код"";
			УзелРеквизита.Синоним = ""Код"";
			УзелРеквизита.ТипУзла = ""Реквизит"";
			
		ИначеЕсли ТипМетаданных = ""Документы""
			ИЛИ   ТипМетаданных = ""БизнесПроцессы""
			ИЛИ   ТипМетаданных = ""Задачи"" Тогда
			
			УзелРеквизита = УзелИсключенийРеквизиты.Строки.Добавить();
			
			УзелРеквизита.Имя     = ""Номер"";
			УзелРеквизита.Синоним = ""Номер"";
			УзелРеквизита.ТипУзла = ""Реквизит"";
			
		КонецЕсли;
		
	ИначеЕсли УзелШага.Имя = ""СравнитьДвижения"" Тогда
		
		// Настройки - дерево
		УзелИсключений = Значение.Строки.Добавить();
		
		УзелИсключений.Имя     = ""Исключения"";
		УзелИсключений.Синоним = ""Исключения"";
		УзелИсключений.ТипУзла = ""УзелИсключений"";
		
		УзелИсключенийРеквизитыДвижений = УзелИсключений.Строки.Добавить();
		
		УзелИсключенийРеквизитыДвижений.Имя     = ""РеквизитыДвижений"";
		УзелИсключенийРеквизитыДвижений.Синоним = ""Реквизиты движений"";
		УзелИсключенийРеквизитыДвижений.ТипУзла = ""УзелИсключенийРеквизитыДвижений"";
		
		УзелРеквизита = УзелИсключенийРеквизитыДвижений.Строки.Добавить();
		
		УзелРеквизита.Имя     = ""Период"";
		УзелРеквизита.Синоним = ""Период"";
		УзелРеквизита.ТипУзла = ""РеквизитДвижения"";
		
		УзелРеквизита = УзелИсключенийРеквизитыДвижений.Строки.Добавить();
		
		УзелРеквизита.Имя     = ""Регистратор"";
		УзелРеквизита.Синоним = ""Регистратор"";
		УзелРеквизита.ТипУзла = ""РеквизитДвижения"";
		
		// Другие типы шагов не обрабатываются
		
	КонецЕсли;
	
	УзелШага.Значение = Значение.Скопировать();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомСценария

// Заполнение шага по структуре данных
//
// Параметры
//	ДанныеШага - заполняемые данные шага
//	СтруктураШага - Структура с данными шага
&НаКлиенте
Процедура СцТ_ЗаполнитьШагНаКлиентеПоСтруктуре_НаКлиенте(ДанныеШага, СтруктураШага)
	
	// Наличие свойств не проверяется, так как это поддерживается программно
	
	ДанныеШага.НомерШага                    = СтруктураШага.НомерШага;
	ДанныеШага.Наименование                 = СтруктураШага.Наименование;
	ДанныеШага.ТипШага                      = СтруктураШага.ТипШага;
	ДанныеШага.ТипМетаданных                = СтруктураШага.ТипМетаданных;
	ДанныеШага.ИмяМетаданных                = СтруктураШага.ИмяМетаданных;
	ДанныеШага.Автоописание                 = СтруктураШага.Автоописание;
	ДанныеШага.Описание                     = СтруктураШага.Описание;
	ДанныеШага.НеВыводитьАвтоописание       = СтруктураШага.СкрытьАвтоописание;
	ДанныеШага.Активность                   = СтруктураШага.Активность;
	ДанныеШага.ОбСсылка                     = СтруктураШага.ОбСсылка;
	ДанныеШага.ПредставлениеОбъекта         = СтруктураШага.ПредставлениеОбъекта;
	ДанныеШага.ВыполнитьВручную             = СтруктураШага.ВыполнитьВручную;
	ДанныеШага.УИШ                          = СтруктураШага.УИШ;
	ДанныеШага.Комментарий                  = СтруктураШага.Комментарий;
	ДанныеШага.ИмяФормы                     = СтруктураШага.ИмяФормы;
	ДанныеШага.ПредставлениеИмениМетаданных = СтруктураШага.ПредставлениеИмениМетаданных;
	ДанныеШага.ЗаголовокФормы               = СтруктураШага.ЗаголовокФормы;
	ДанныеШага.ДанныеКартинки               = СтруктураШага.ДанныеКартинки;
	
	СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДанныеШага.Значение, СтруктураШага.ДеревоЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_СкопироватьУзелСценарияПоКомандеИнтерфейса(
	ДанныеУзлаИсточника,
	ВызвавшаяФорма = Неопределено) Экспорт
	
	Если ДанныеУзлаИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВызвавшаяФорма = Неопределено Тогда
		ВызвавшаяФорма = ЭтотОбъект;
	КонецЕсли;
	
	// Копирование по команде интерфейса всегда выполняется рядом с копируемым элементом
	
	// Если копируется только одна строка, то открывается форма редактирования, если
	// у копируемого узла есть подчиненные, то выполняется копирование без открытия формы
	// настройки шага
	Если ДанныеУзлаИсточника.ПолучитьЭлементы().Количество() = 0 Тогда
		// Подготовка структуры данных и передача их в форму редактирования
		ОписательПоложенияШагаВДереве = ПолучитьОписательПоложенияНовогоШагаВДереве(ВызвавшаяФорма, ДанныеУзлаИсточника, Истина);
		
		СтруктураДанныхШага = СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(ДанныеУзлаИсточника);
		СтруктураДанныхШага.УИШ = ОписательПоложенияШагаВДереве.ИдентификаторШага;
		
		СцТ_ПодготовитьИОткрытьФормуНовогоШага(ВызвавшаяФорма, СтруктураДанныхШага, ОписательПоложенияШагаВДереве);
		
	Иначе
		// Просто копирование узла
		РодительскийУзел = ДанныеУзлаИсточника.ПолучитьРодителя();
		Если РодительскийУзел = Неопределено Тогда
			РодительскийУзел = ВызвавшаяФорма.БлокСценария;
		КонецЕсли;
		
		НовыйУзел = РодительскийУзел.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйУзел, ДанныеУзлаИсточника, , ""УИШ, Значение, Выполнено"");
		НовыйУзел.УИШ = Строка(Новый УникальныйИдентификатор);
		СцТ_СкопироватьДеревоФормы(ДанныеУзлаИсточника.Значение, НовыйУзел.Значение);
		
		ИтерационноСкопироватьВсеПодчиненныеУзлы(ДанныеУзлаИсточника, НовыйУзел);
		
		ВызвавшаяФорма.Элементы.БлокСценария.ТекущаяСтрока = НовыйУзел.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКЛиенте
Процедура ИтерационноСкопироватьВсеПодчиненныеУзлы(УзелИсточник, УзелПриемник)
	
	Для каждого ПодчиненныйУзел Из УзелИсточник.ПолучитьЭлементы() Цикл
		НовыйУзел = УзелПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйУзел, ПодчиненныйУзел, , ""УИШ, Значение, Выполнено"");
		НовыйУзел.УИШ = Строка(Новый УникальныйИдентификатор);
		СцТ_СкопироватьДеревоФормы(ПодчиненныйУзел.Значение, НовыйУзел.Значение);
		
		ИтерационноСкопироватьВсеПодчиненныеУзлы(ПодчиненныйУзел, НовыйУзел);
	КонецЦикла;
	
КонецПроцедуры

// Удаление узла дерева формы и всех подчиненных шагов
//
// Параметры
// УзелДереваФормы - удаляемый узел
// Дерево формы - дерево, из которого удаляется узел
&НаКлиенте
Процедура СцТ_УдалитьУзелДереваФормы(УзелДереваФормы, ДеревоФормы)
	
	РодительУзла = УзелДереваФормы.Получитьродителя();
	Если РодительУзла = Неопределено Тогда
		РодительУзла = ДеревоФормы;
	КонецЕсли;
	
	РодительУзла.Получитьэлементы().Удалить(УзелДереваФормы);
	
КонецПроцедуры

// Вычисляет активность узла с учетом активности подчиненных узлов
//
// Параметры:
//	Узел - узел сценария, активность которого необходимо вычислить;
//
&НаКлиенте
Процедура СцТ_ВычислитьАктивностьУзла(Узел)
	
	ЭлементыУзла = Узел.ПолучитьЭлементы();
	Если ЭлементыУзла.Количество() = 0 Тогда
		Если Узел.Активность = 2 Тогда
			Узел.Активность = 1;
		КонецЕсли;
	Иначе
		Узел.Активность = ЭлементыУзла[0].Активность;
		Для каждого ПодчиненныйУзел Из ЭлементыУзла Цикл
			Если ПодчиненныйУзел.Активность <> Узел.Активность Тогда
				Узел.Активность = 2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОбойтиДеревоСценарияИСнятьВсеТочкиОстанова(ТекущийУзел = Неопределено)
	
	Если ТекущийУзел = Неопределено Тогда
		ТекущийУзел = БлокСценария;
	КонецЕсли;
	
	ПодчиненныеУзлы = ТекущийУзел.ПолучитьЭлементы();
	
	Для каждого ПодчиненныйУзел Из ПодчиненныеУзлы Цикл
		ПодчиненныйУзел.ТочкаОстанова = 0 ;
		СцТ_ОбойтиДеревоСценарияИСнятьВсеТочкиОстанова(ПодчиненныйУзел);
	КонецЦикла;
	
КонецПроцедуры

// Процедура отображения состояния текущего шага сценария
// Вызывается в обрабочике ожидания
&НаКлиенте
Процедура СцТ_ОтобразитьСостояниеТекущегоШагаПослеОжидания()
	
	СцТ_ОтобразитьСостояниеТекущегоШага(ЭтотОбъект);
	
КонецПроцедуры

// Получение списка идентификаторов всех подчиненных узлов
//
// Параметры
//	УзелДерева - текущий узел дерева
//	ТолькоУРазвернутых - все строки или только развернутые
//	Идентификаторы - список идентификаторов
&НаКлиенте
Функция СцТ_ПолучитьИдентификаторыВсехПодчиненныхУзлов(
	УзелДерева,
	ТолькоУРазвернутых = Ложь,
	Идентификаторы = Неопределено)
	
	Если Идентификаторы = Неопределено Тогда
		Идентификаторы = Новый Массив;
	КонецЕсли;
	
	Если ТолькоУРазвернутых
		И УзелДерева <> БлокСценария
		И НЕ Элементы.БлокСценария.Развернут(УзелДерева.ПолучитьИдентификатор()) Тогда
		Возврат Идентификаторы;
	КонецЕсли;
	
	Для каждого ПодчиненныйУзел Из УзелДерева.ПолучитьЭлементы() Цикл
		Идентификаторы.Добавить(ПодчиненныйУзел.ПолучитьИдентификатор());
		СцТ_ПолучитьИдентификаторыВсехПодчиненныхУзлов(ПодчиненныйУзел, ТолькоУРазвернутых, Идентификаторы);
	КонецЦикла;
	
	Возврат Идентификаторы;
	
КонецФункции

// Поиск нужного шага в ветке дерева по УИШ
//
// Параметры
// ВеткаДерева - текушая ветка дерева
// УИШ - уникальный идентификатор шага (это не индекс)
&НаКлиентеНаСервереБезКонтекста
Функция СцТ_НайтиНужныйШагПоУИШ_НаКлиенте(ВеткаДерева, УИШ)
	
	Для каждого УзелДерева Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		Если УзелДерева.УИШ = УИШ Тогда
			Возврат УзелДерева;
		КонецЕсли;
		
		ДочернийУзел = СцТ_НайтиНужныйШагПоУИШ_НаКлиенте(УзелДерева, УИШ);
		Если ДочернийУзел <> Неопределено Тогда
			Возврат ДочернийУзел;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Поиск значения в дереве
//
// Парметры
//	ИмяПараметра - имя искомого параметра
//	ЕслиНеНайдено  - признак, что не найдено
//	ВозвращаемыйРеквизит  - поле, значение которого нужно вернуть
//	Рекурсивно  - нужно ли искать среди подчиненных
&НаКлиенте
Функция СцТ_ЗначениеВДереве(ДерЗнач,
	ИмяПараметра,
	ЕслиНеНайдено = Неопределено,
	ВозвращаемыйРеквизит = ""Значение"",
	Рекурсивно = Истина)
	
	УзелЗначения = СцТ_НайтиУзелДереваФормы(ДерЗнач, ""Имя"", ИмяПараметра, Рекурсивно);
	Если УзелЗначения = Неопределено Тогда
		Возврат ЕслиНеНайдено;
	Иначе
		Возврат УзелЗначения[ВозвращаемыйРеквизит];
	КонецЕсли;
	
КонецФункции

// Нумерация шагов дерева на сервере
//
//Параметры
//	ДанныеВеткиДерева - данные текущей ветки дерева
//	ТекущийНомерШага - текущий номер шага
&НаСервере
Процедура СцТ_ПронумероватьШаги_НаСервере(ДанныеВеткиДерева = Неопределено, ТекущийНомерШага = 0)
	
	Если ДанныеВеткиДерева = Неопределено Тогда
		ДанныеВеткиДерева = БлокСценария;
	КонецЕсли;
	
	Для каждого ДанныеСтрокиДерева Из ДанныеВеткиДерева.ПолучитьЭлементы() Цикл
		
		ТекущийНомерШага = ТекущийНомерШага + 1;
		ДанныеСтрокиДерева.НомерШага = ТекущийНомерШага;
		
		СцТ_ПронумероватьШаги_НаСервере(ДанныеСтрокиДерева, ТекущийНомерШага);
		
	КонецЦикла;
	
КонецПроцедуры

// Изменение родителя у узла дерева
//
// Параметры
//	УзелПриемник - узел приемник
//	УзелИсточник - узел откуда копируются данные
//	МассивКолонок - массив с именами колонок дерева
&НаСервереБезКонтекста
Процедура СцТ_ИтерационноИзменитьРодителяУзлаДерева(
	УзелПриемник,
	УзелИсточник,
	МассивКолонок)
	
	Для каждого ДанныеИсточника ИЗ УзелИсточник.ПолучитьЭлементы() Цикл
		ДанныеПриемника = УзелПриемник.ПолучитьЭлементы().Добавить();
		Для каждого Колонка Из МассивКолонок Цикл
			Если Колонка = ""Значение"" Тогда
				ЗначениеВДанныеФормы(ДанныеФормыВЗначение(ДанныеИсточника[Колонка], Тип(""ДеревоЗначений"")), ДанныеПриемника[Колонка]);
			Иначе
				ДанныеПриемника[Колонка] = ДанныеИсточника[Колонка];
			КонецЕсли;
			
		КонецЦикла;
		
		СцТ_ИтерационноИзменитьРодителяУзлаДерева(ДанныеПриемника, ДанныеИсточника, МассивКолонок);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ОбщиеПроцедурыИФункцииРаботыСоСценарием

// Подготовка сценария для сохранения
//
// Парметры
// УИШТекущегоШага - идентификатор текущего шага
// Автосохранение - Признак автосохранения
// Возвращаемое значение - параметры формы сохранения
&НаСервере
Функция СцТ_ПодготовитьДанныеДляСохранения_НаСервере(УИШТекущегоШага, Автосохранение = Ложь)
	
	ПараметрыФормыСохранения = Новый Структура;
	
	БлокСценарияДеревоЗначений = РеквизитФормыВЗначение(""БлокСценария"");
	
	// Нужно выполнить проверку таблицы ссылок, что нет лишних ссылок, есть все необходимые
	// и другие
	Если ПустаяСтрока(АдресТаблицыСсылок) Тогда
		ТС = СоздатьПустуюТаблицуСсылок();
		АдресТаблицыСсылок = ПоместитьВоВременноеХранилище(АдресТаблицыСсылок);
	КонецЕсли;
	
	ПараметрыФормыСохранения.Вставить(""АдресВременногоХранилищаСсылок"", АдресТаблицыСсылок);
	
	АдресВременногоХранилищаСценария = ПоместитьВоВременноеХранилище(БлокСценарияДеревоЗначений,
		ЭтотОбъект.УникальныйИдентификатор);
	
	ПараметрыФормыСохранения.Вставить(""АдресВременногоХранилищаСценария""         , АдресВременногоХранилищаСценария);
	ПараметрыФормыСохранения.Вставить(""АдресВременногоХранилищаШаблоновШагов""    , АдресШаблоновШагов);
	ПараметрыФормыСохранения.Вставить(""АдресВременногоХранилищаШаговПоУмолчанию"" , АдресНачальныхУстановокШагов);
	ПараметрыФормыСохранения.Вставить(""АдресВременногоХранилищаКлючей""           , АдресТаблицыКлючей);
	ПараметрыФормыСохранения.Вставить(""АдресВременногоХранилищаНастроекИБ""       , АдресДереваНастроекЭталоннойБазы);
	ПараметрыФормыСохранения.Вставить(""АдресДереваМакрошагов""                    , АдресДереваМакрошагов);
	
	ПараметрыФормыСохранения.Вставить(""СтруктураГлобальныхПараметров""            , ГлобальныеПараметры);
	
	ПараметрыФормыСохранения.Вставить(""Наименование""                             , Объект.Наименование);
	ПараметрыФормыСохранения.Вставить(""Автор""                                    , Объект.Автор);
	ПараметрыФормыСохранения.Вставить(""ИмяФайлаБлокаТеста""                       , Объект.ИмяФайлаБлокаТеста);
	ПараметрыФормыСохранения.Вставить(""НачальнаяДата""                            , Объект.НачальнаяДата);
	ПараметрыФормыСохранения.Вставить(""Описание""                                 , Объект.Описание);
	ПараметрыФормыСохранения.Вставить(""НомерШагаДляНачальнойУстановки""           , УИШТекущегоШага);
	ПараметрыФормыСохранения.Вставить(""Автосохранение""                           , Автосохранение);
	
	ПараметрыФормыСохранения.Вставить(""ИмяПользователя""                          , Объект.ИмяПользователя);
	ПараметрыФормыСохранения.Вставить(""ПарольПользователяИБ""                     , Объект.ПарольПользователяИБ);
	ПараметрыФормыСохранения.Вставить(""ВидТестируемогоКлиента""                   , ВидТестируемогоКлиента);
	ПараметрыФормыСохранения.Вставить(""ПортТестируемогоКлиента""                  , ПортТестируемогоКлиента);
	ПараметрыФормыСохранения.Вставить(""КомпьютерИБ""                              , КомпьютерИБ);
	ПараметрыФормыСохранения.Вставить(""ДругаяИБ""                                 , ДругаяИБ);
	ПараметрыФормыСохранения.Вставить(""СтрокаПодключенияКИБ""                     , СтрокаПодключенияКИБ);
	ПараметрыФормыСохранения.Вставить(""ДопПараметрыКоманднойСтроки""              , ДопПараметрыКоманднойСтроки);
	ПараметрыФормыСохранения.Вставить(""URLИБ""                                    , URLИБ);
	ПараметрыФормыСохранения.Вставить(""ТаймаутПоискаИнтерактивныхОбъектов""       , ТаймаутПоискаИнтерактивныхОбъектов);
	ПараметрыФормыСохранения.Вставить(""ТипБлока""                                 , Объект.ТипБлока);
	
	Возврат ПараметрыФормыСохранения;
	
КонецФункции

// Операция подготовки обработки после открытия нового сценария
//
// Возвращаемое значение - структура адресов хранения служебных таблиц
&НаСервере
Функция СцТ_ДоработатьСозданиеНовогоСценария_НаСервере()
	
	ПортТестируемогоКлиента            = 1538;
	КомпьютерИБ                        = ""127.0.0.1"";
	ДругаяИБ                           = 0;
	СтрокаПодключенияКИБ               = """";
	ДопПараметрыКоманднойСтроки        = """";
	URLИБ                              = """";
	Объект.ПарольПользователяИБ        = """";
	Попытка
		Объект.ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Исключение
		Объект.ИмяПользователя = """";
	КонецПопытки;
	
	СцТ_ДобавитьНедостающиеСтрокиВТаблНачальныхУстановокШагов(АдресНачальныхУстановокШагов);
	
	АдресХранилищаТаблицыКлючей = СцТ_ИнициализироватьТаблицуКлючей_НаСервере();
	АдресДереваМакрошагов = СцТ_ИнициализироватьДеревоМакрошагов_НаСервере(АдресДереваМакрошаговДляИнициализации);
	
	// Таблица настроек эталонной базы создается при первом обращении к ней
	АдресДереваНастроекЭталоннойБазы = """";
	Элементы.ПоказатьОкноЭталоннойБазы.Пометка = Ложь;
	Элементы.СвертываемаяГруппаЭталоннойБазы.Видимость = Элементы.ПоказатьОкноЭталоннойБазы.Пометка;
	
	СтруктураАдресов = Новый Структура;
	СтруктураАдресов.Вставить(""АдресТаблицыКлючей""              , АдресХранилищаТаблицыКлючей);
	СтруктураАдресов.Вставить(""АдресДереваНастроекЭталоннойБазы"", АдресДереваНастроекЭталоннойБазы);
	СтруктураАдресов.Вставить(""АдресДереваМакрошагов""           , АдресДереваМакрошагов);
	
	Возврат СтруктураАдресов;
	
КонецФункции


// Открытие файла сценария
//
// Параметры
// ДействияОткрытия (Строка) - для чего открывается форма;
//	Значения параметра:
//		""Редактирование"", ""Выполнение"", ""ИмпортШагов""
//
&НаКлиенте
Процедура СцТ_ОткрытьФайлСценария(ДействиеОткрытия)
	
	ПараметрыОткрытия = Новый Структура(""ДействиеОткрытия,ИдентификаторГлавнойФормы"",
		ДействиеОткрытия,
		ЭтотОбъект.УникальныйИдентификатор);
	
	СтруктураСАдресами = ОткрытьФорму(
		ПутьКФормам + ""ОткрытиеСценария"",
		ПараметрыОткрытия,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения(""СцТ_ОбработатьЗагрузкуНовогоСценария"", ЭтотОбъект, ДействиеОткрытия));
	
КонецПроцедуры


// По коду действия выполняет действие после сохранения файла сценария
// Параметры:
//	КодДействия (Число) - код действия, которое необходимо выполнить
//		(описание кодов см. в процедуре СцТ_ОбработатьСохранениеСценария)
&НаКлиенте
Процедура СцТ_ВыполнитьСледующееДействиеПослеСохранения(КодДействия)
	
	// Если код действия - 0, то это просто стандартное сохранение сценария
	// пользователем в процессе работы
	
	Если КодДействия = 1 Тогда
		// Закрытие формы обработки
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли КодДействия = 2 Тогда
		СцТ_ВыполнитьОткрытиеСценария(""Редактирование"");
		
	ИначеЕсли КодДействия = 3 Тогда
		СцТ_ВыполнитьОткрытиеСценария(""Выполнение"");
		
	ИначеЕсли КодДействия = 4 Тогда
		
		СцТ_ОчиститьВспомогательныеТаблицы();
		
		Объект.Автор                   = """";
		Объект.ИмяФайлаБлокаТеста      = """";
		Объект.Наименование            = НСтр(""ru = 'Новый сценарий'"");
		Объект.ТипБлока                = ""Смешанный"";
		
		Заголовок = НСтр(""ru = 'Запись сценария: """"Новый сценарий""""'"");
		Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СцТ_ОчиститьВспомогательныеТаблицы()
	
	СцТ_ФормыТестируемогоПриложения = Новый Соответствие;
	
	БлокСценария.ПолучитьЭлементы().Очистить();
	СцТ_УдалитьЗначениеИзВременногоХранилища(АдресНачальныхУстановокШагов);
	СцТ_УдалитьЗначениеИзВременногоХранилища(АдресТаблицыКлючей);
	СцТ_УдалитьЗначениеИзВременногоХранилища(АдресТаблицыСсылок);
	СцТ_УдалитьЗначениеИзВременногоХранилища(АдресШаблоновШагов);
	СцТ_УдалитьЗначениеИзВременногоХранилища(АдресДереваМакрошагов);
	
	СцТ_УстановитьПредставлениеИмениФайла(ЭтотОбъект);
	
	Элементы.ПоказатьОкноЭталоннойБазы.Пометка = Ложь;
	Элементы.СвертываемаяГруппаЭталоннойБазы.Видимость = Элементы.ПоказатьОкноЭталоннойБазы.Пометка;
	
	СтруктураАдресов = СцТ_ДоработатьСозданиеНовогоСценария_НаСервере();
	АдресТаблицыКлючей               = СтруктураАдресов.АдресТаблицыКлючей;
	АдресДереваНастроекЭталоннойБазы = СтруктураАдресов.АдресДереваНастроекЭталоннойБазы;
	АдресДереваМакрошагов            = СтруктураАдресов.АдресДереваМакрошагов;
	
	ГлобальныеПараметры = Новый Структура;
	
	СцТ_Контроллер = Неопределено;
	СцТ_СостояниеТП();
	
КонецПроцедуры

// Определяет, модифицирован ли сценарий в текущем состоянии.
// Возвращаемое значение - Булево: Истина - сценарий модифицирован,
//								   Ложь - в противном случае;
//
&НаКлиенте
Функция СцТ_СценарийМодифицирован()
	
	ЕстьОткрытыеМодифицированныеФормыНастройкиШагов = Ложь;
	
	Для каждого УИШФорма Из СцТ_ОткрытыеФормыНастройкиШагов Цикл
		
		ФормаНастройкиШага = УИШФорма.Значение;
		Попытка
			ФормаОткрыта = ФормаНастройкиШага.Открыта();
		Исключение
			// Вероятнее всего форма закрыта
			Продолжить;
		КонецПопытки;
		
		// Для сброса фокуса
		ФормаНастройкиШага.ТекущийЭлемент = ФормаНастройкиШага.Элементы.ПрименитьИЗакрыть;
		
		Если ФормаНастройкиШага.Модифицированность Тогда
			ЕстьОткрытыеМодифицированныеФормыНастройкиШагов = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Модифицированность ИЛИ ЕстьОткрытыеМодифицированныеФормыНастройкиШагов;
	
КонецФункции

// Установка заголовка обработки в зависимости от режима
//
&НаКлиенте
Процедура СцТ_УстановитьЗаголовокФормы_НаКлиенте()
	
	Если СцТ_РежимВыполнения Тогда
		СтрокаЗаголовка = ""Выполнение сценария"";
	Иначе
		СтрокаЗаголовка = ""Запись сценария"";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
		СтрокаЗаголовка = СтрокаЗаголовка + "": """""" + Объект.Наименование + """""""";
	Иначе
		СтрокаЗаголовка = СтрокаЗаголовка + НСтр(""ru = ': """"Новый сценарий""""'"");
	КонецЕсли;
	
	Заголовок = СтрокаЗаголовка;
	
КонецПроцедуры

// Управление видимостью и доступностью элементов управления формы
// в зависимости от текущего состояния обработки
&НаСервере
Процедура СцТ_НастроитьВнешнийВидФормы_НаСервере()
	
	Если СцТ_РежимВыполнения Тогда
		
		// Командная панель
		Элементы.ВыполнитьСценарий.Видимость         = Истина;
		Элементы.ОстановитьВыполнение.Видимость      = Истина;
		Элементы.БлокСценарияТочкаОстанова.Видимость = Истина;
		
		Элементы.ВыполнитьСценарий.ТолькоВоВсехДействиях    = Ложь;
		Элементы.ОстановитьВыполнение.ТолькоВоВсехДействиях = Ложь;
		
		Элементы.НовыйБлокСценария.Видимость         = Ложь;
		Элементы.ОткрытьБлокСценария.Видимость       = Ложь;
		Элементы.ПоказатьОкноЭталоннойБазы.Видимость = Ложь;
		
		Элементы.ДобавитьГрупповойШаг.Видимость      = Ложь;
		Элементы.ДобавитьШаг.Видимость               = Ложь;
		Элементы.СкопироватьШаг.Видимость            = Ложь;
		Элементы.ИзменитьШаг.Видимость               = Ложь;
		Элементы.УдалитьШаг.Видимость                = Ложь;
		
		Элементы.ПросмотрЖурналаВыполнения.Видимость = Истина;
		
		Элементы.НачатьЗавершитьЗапись.Видимость     = Ложь;
		Элементы.ПереместитьУзелВверх.Видимость      = Ложь;
		Элементы.ПереместитьУзелВниз.Видимость       = Ложь;
		Элементы.ПовыситьУровеньУзла.Видимость       = Ложь;
		Элементы.ПонизитьУровеньУзла.Видимость       = Ложь;
		
		Элементы.ШаблоныШагов.Видимость              = Ложь;
		Элементы.ШаблоныПоУмолчанию.Видимость        = Ложь;
		
		Элементы.НачатьЗавершитьЗапись.Видимость     = Ложь;
		
		// Контекстное меню
		Элементы.КМБВыполнитьСценарий.Видимость            = Истина;
		Элементы.КМБТочкаОстановаУстановитьСнять.Видимость = Истина;
		Элементы.КМБТочкаОстановаУдалитьВсе.Видимость      = Истина;
		
		Элементы.КМБДобавитьГрупповойШаг.Видимость              = Ложь;
		Элементы.КМБДобавитьШаг.Видимость                       = Ложь;
		Элементы.КМБИзменитьШаг.Видимость                       = Ложь;
		Элементы.КМБУдалитьШаг.Видимость                        = Ложь;
		Элементы.КМБСкопироватьШаг.Видимость                    = Ложь;
		
		Элементы.КМБПереместитьВверх.Видимость                  = Ложь;
		Элементы.КМБПереместитьВниз.Видимость                   = Ложь;
		Элементы.КМБПовыситьУровень.Видимость                   = Ложь;
		Элементы.КМБПонизитьУровень.Видимость                   = Ложь;
		
		Элементы.КМБДобавитьВШаблонШагов.Видимость              = Ложь;
		Элементы.КМБПрименитьОсновнойШаблон.Видимость           = Ложь;
		Элементы.КМБВыбратьИПрименитьШаблон.Видимость           = Ложь;
		Элементы.КМБПрименитьШаблонПоУмолчанию.Видимость        = Ложь;
		Элементы.КМБПрименитьИсключенияИзШаблона.Видимость      = Ложь;
		Элементы.КМБМакрошагиДобавитьГруппуВМакрошаг.Видимость  = Ложь;
		Элементы.КМБМакрошагиСоздатьНаОснованииГруппы.Видимость = Ложь;
		
		Элементы.КМБОбновитьДанныеШагов.Видимость          = Ложь;
		
		Элементы.ФормаДобавитьШагиИзСценария.Видимость     = Ложь;
		
	Иначе
		// Командная панель
		Элементы.ВыполнитьСценарий.Видимость         = Истина;
		Элементы.ОстановитьВыполнение.Видимость      = Истина;
		Элементы.БлокСценарияТочкаОстанова.Видимость = Истина;
		
		Элементы.ВыполнитьСценарий.ТолькоВоВсехДействиях    = Истина;
		Элементы.ОстановитьВыполнение.ТолькоВоВсехДействиях = Истина;
		
		
		Элементы.НовыйБлокСценария.Видимость         = Истина;
		Элементы.ОткрытьБлокСценария.Видимость       = Истина;
		Элементы.ПоказатьОкноЭталоннойБазы.Видимость = Истина;
		
		Элементы.ДобавитьГрупповойШаг.Видимость      = Истина;
		Элементы.ДобавитьШаг.Видимость               = Истина;
		Элементы.СкопироватьШаг.Видимость            = Истина;
		Элементы.ИзменитьШаг.Видимость               = Истина;
		Элементы.УдалитьШаг.Видимость                = Истина;
		
		Элементы.ПросмотрЖурналаВыполнения.Видимость = Ложь;
		
		Элементы.НачатьЗавершитьЗапись.Видимость     = Истина;
		Элементы.ПереместитьУзелВверх.Видимость      = Истина;
		Элементы.ПереместитьУзелВниз.Видимость       = Истина;
		Элементы.ПовыситьУровеньУзла.Видимость       = Истина;
		Элементы.ПонизитьУровеньУзла.Видимость       = Истина;
		
		Элементы.ШаблоныШагов.Видимость              = Истина;
		Элементы.ШаблоныПоУмолчанию.Видимость        = Истина;
		
		Элементы.НачатьЗавершитьЗапись.Видимость     = Истина;
		
		Элементы.КМБДобавитьГрупповойШаг.Видимость              = Истина;
		Элементы.КМБДобавитьШаг.Видимость                       = Истина;
		Элементы.КМБИзменитьШаг.Видимость                       = Истина;
		Элементы.КМБУдалитьШаг.Видимость                        = Истина;
		Элементы.КМБСкопироватьШаг.Видимость                    = Истина;
		
		Элементы.КМБПереместитьВверх.Видимость                  = Истина;
		Элементы.КМБПереместитьВниз.Видимость                   = Истина;
		Элементы.КМБПовыситьУровень.Видимость                   = Истина;
		Элементы.КМБПонизитьУровень.Видимость                   = Истина;
		
		Элементы.КМБДобавитьВШаблонШагов.Видимость              = Истина;
		Элементы.КМБПрименитьОсновнойШаблон.Видимость           = Истина;
		Элементы.КМБВыбратьИПрименитьШаблон.Видимость           = Истина;
		Элементы.КМБПрименитьШаблонПоУмолчанию.Видимость        = Истина;
		Элементы.КМБПрименитьИсключенияИзШаблона.Видимость      = Истина;
		Элементы.КМБМакрошагиДобавитьГруппуВМакрошаг.Видимость  = Истина;
		Элементы.КМБМакрошагиСоздатьНаОснованииГруппы.Видимость = Истина;
		Элементы.КМБОбновитьДанныеШагов.Видимость               = Истина;
		
		Элементы.ФормаДобавитьШагиИзСценария.Видимость     = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоВспомогательнымиТаблицами

&НаСервереБезКонтекста
// Формирование списка типов метаданных,
// работу с которыми поддерживает обработка
//
Функция СцТ_СписокТиповМетаданных()
	
	СписокТиповМД = Новый СписокЗначений;
	
	СписокТиповМД.Добавить(""Справочники""            , НСтр(""ru='Справочник'""));
	СписокТиповМД.Добавить(""Документы""              , НСтр(""ru='Документ'""));
	СписокТиповМД.Добавить(""ПланыВидовХарактеристик"", НСтр(""ru='План видов характеристик'""));
	СписокТиповМД.Добавить(""ПланыСчетов""            , НСтр(""ru='План счетов'""));
	СписокТиповМД.Добавить(""ПланыВидовРасчета""      , НСтр(""ru='План видов расчета'""));
	СписокТиповМД.Добавить(""РегистрыСведений""       , НСтр(""ru='Регистр сведений'""));
	СписокТиповМД.Добавить(""БизнесПроцессы""         , НСтр(""ru='Бизнес-процесс'""));
	СписокТиповМД.Добавить(""Задачи""                 , НСтр(""ru='Задача'""));
	
	Возврат СписокТиповМД;
	
КонецФункции

&НаКлиенте
Процедура ИтерационноНайтиШагПоИдентификаторуИЗаменитьСсылку(ВеткаДерева, УИШ, УдаляемаяСсылка, СсылкаПриемник, ПризнакЗавершения = Ложь)
	
	Для каждого УзелДерева Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		Если УзелДерева.УИШ = УИШ Тогда
			ВыполнитьЗаменуСсылокВШаге(УзелДерева, УдаляемаяСсылка, СсылкаПриемник);
			ПризнакЗавершения = Истина;
			Прервать;
		КонецЕсли;
		
		ИтерационноНайтиШагПоИдентификаторуИЗаменитьСсылку(УзелДерева, УИШ, УдаляемаяСсылка, СсылкаПриемник, ПризнакЗавершения);
		
		Если ПризнакЗавершения Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаменуСсылокВШаге(УзелДерева, УдаляемаяСсылка, СсылкаПриемник)
	
	Если УзелДерева.ТипШага = ""Автогруппа"" Тогда
		Если УзелДерева.ОбСсылка = УдаляемаяСсылка Тогда
			УзелДерева.ОбСсылка = СсылкаПриемник;
		КонецЕсли;
		
		Если УзелДерева.ТипМетаданных = ""РегистрыСведений"" И ЗначениеЗаполнено(УзелДерева.ОбСсылка) Тогда
			// Для совместимости с версиями 3.0.6 и ранее
			СтруктураОтбора = УзелДерева.ОбСсылка;
			НоваяСтруктураОтбора = Новый Структура;
			Для каждого КлючЗначение Из СтруктураОтбора Цикл
				Если КлючЗначение.Значение = УдаляемаяСсылка Тогда
					НоваяСтруктураОтбора.Вставить(КлючЗначение.Ключ, СсылкаПриемник);
				Иначе
					НоваяСтруктураОтбора.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			УзелДерева.ОбСсылка = НоваяСтруктураОтбора;
		КонецЕсли;
	КонецЕсли;
	
	// Замена ссылок в дереве значения
	СцТ_ВыполнитьИтерационнуюЗаменуСсылокВДеревеЗначенияШага(
		УзелДерева.Значение,
		УдаляемаяСсылка,
		СсылкаПриемник);
	
КонецПроцедуры

// Рекурсивная замена ссылки в шаге сценария
//
// Парметры
//	ВеткаСценария - ветка сценария (шаг)
//	ЗаменяемаяСсылка - заменяемая ссылка
//	НоваяСсылка - новая ссылка
//	СписокУИШСодержащихСсылку - список идентификаторов шагов, содержащих эту ссылку
&НаКлиенте
Процедура СцТ_ВыполнитьИтерационнуюЗаменуСсылокВВеткеСценария(
	ВеткаСценария,
	ЗаменяемаяСсылка,
	НоваяСсылка,
	СписокУИШСодержащихСсылку)
	
	ЭтаОбработка = СцТ_ПолучитьЭтуОбработку();
	Для каждого ПодчиненнаяСтрока Из ВеткаСценария.ПолучитьЭлементы() Цикл
		Если СписокУИШСодержащихСсылку.НайтиПоЗначению(ПодчиненнаяСтрока.УИШ) <> Неопределено Тогда
			
			// Поиск ссылки в поле ОбСсылка
			Если ПодчиненнаяСтрока.ТипМетаданных = ""РегистрыСведений"" Тогда
				СтруктураОтбора = ПодчиненнаяСтрока.ОбСсылка;
				НоваяСтруктураОтбора = Новый Структура;
				Для каждого КлючЗначение Из СтруктураОтбора Цикл
					Если КлючЗначение.Значение = ЗаменяемаяСсылка Тогда
						НоваяСтруктураОтбора.Вставить(КлючЗначение.Ключ, НоваяСсылка);
					Иначе
						НоваяСтруктураОтбора.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
					КонецЕсли;
				КонецЦикла;
				ПодчиненнаяСтрока.ОбСсылка = НоваяСтруктураОтбора;
			Иначе
				Если ПодчиненнаяСтрока.ОбСсылка = ЗаменяемаяСсылка Тогда
					ПодчиненнаяСтрока.ОбСсылка = НоваяСсылка;
					ПодчиненнаяСтрока.ПредставлениеОбъекта = Строка(
						ЭтаОбработка.СцТ_ПолучитьЗначение_НаСервере(НоваяСсылка));
					
				КонецЕсли;
			КонецЕсли;
			
			СцТ_ВыполнитьИтерационнуюЗаменуСсылокВДеревеЗначенияШага(
				ПодчиненнаяСтрока.Значение,
				ЗаменяемаяСсылка,
				НоваяСсылка);
			
		КонецЕсли;
		
		СцТ_ВыполнитьИтерационнуюЗаменуСсылокВВеткеСценария(
			ПодчиненнаяСтрока,
			ЗаменяемаяСсылка,
			НоваяСсылка,
			СписокУИШСодержащихСсылку);
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивная замена ссылки в дереве значения шага
//
// Параметры
//	ВеткаДереваЗначения - ветка дерева значения
//	ЗаменяемаяСсылка - заменяемая ссылка
//	НоваяСсылка - новая ссылка
//	ОбработкаОбъект - ссылка на эту обработку на сервере
&НаКлиенте
Процедура СцТ_ВыполнитьИтерационнуюЗаменуСсылокВДеревеЗначенияШага(
	ВеткаДереваЗначения,
	ЗаменяемаяСсылка,
	НоваяСсылка)
	
	Для каждого СтрокаДереваЗначения Из ВеткаДереваЗначения.ПолучитьЭлементы() Цикл
		
		Если СтрокаДереваЗначения.Значение = ЗаменяемаяСсылка Тогда
			СтрокаДереваЗначения.Значение = НоваяСсылка;
		КонецЕсли;
		
		СцТ_ВыполнитьИтерационнуюЗаменуСсылокВДеревеЗначенияШага(
			СтрокаДереваЗначения,
			ЗаменяемаяСсылка,
			НоваяСсылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СцТ_ИнициализироватьДеревоМакрошагов_НаСервере(АдресВременногоХранилищаДереваМакрошаговДляИнициализации)
	
	// Дерево макрошагов по своей структуре абсолютно идентично
	// дереву сценария, экземпляр которого хранится по адресу,
	// переданному в функцию
	
	ПустоеДеревоМакрошагов = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаДереваМакрошаговДляИнициализации);
	
	АдресВременногоХранилищаДереваМакрошагов = ПоместитьВоВременноеХранилище(
		ПустоеДеревоМакрошагов,
		Новый УникальныйИдентификатор);
	
	Возврат АдресВременногоХранилищаДереваМакрошагов;
	
КонецФункции


#КонецОбласти

#Область ОбработкаОповещений

// Обновление обработки после загрузки нового сценария
//
// Параметры
// СтруктураАдресовСДанными - структура с новыми адресами служебных таблиц
&НаСервере
Процедура СцТ_ОбновитьОбработкуПослеЗагрузкиНовогоСценария(СтруктураАдресовСДанными, Сообщения = """")
	
	СцТ_Сценарий = ПолучитьИзВременногоХранилища(СтруктураАдресовСДанными.АдресВременногоХранилищаСценария);
	ЗначениеВРеквизитФормы(СцТ_Сценарий, ""БлокСценария"");
	СцТ_УдалитьЗначениеИзВременногоХранилища(СтруктураАдресовСДанными.АдресВременногоХранилищаСценария);
	
	СцТ_УдалитьЗначениеИзВременногоХранилища(АдресШаблоновШагов);
	СцТ_УдалитьЗначениеИзВременногоХранилища(АдресДереваНастроекЭталоннойБазы);
	СцТ_УдалитьЗначениеИзВременногоХранилища(АдресТаблицыКлючей);
	СцТ_УдалитьЗначениеИзВременногоХранилища(АдресНачальныхУстановокШагов);
	СцТ_УдалитьЗначениеИзВременногоХранилища(АдресТаблицыСсылок);
	СцТ_УдалитьЗначениеИзВременногоХранилища(АдресДереваМакрошагов);	
	
	АдресШаблоновШагов               = СтруктураАдресовСДанными.АдресВременногоХранилищаШаблоновШагов;
	АдресДереваНастроекЭталоннойБазы = СтруктураАдресовСДанными.АдресВременногоХранилищаНастроекИБ;
	АдресТаблицыКлючей               = СтруктураАдресовСДанными.АдресВременногоХранилищаКлючей;
	АдресНачальныхУстановокШагов     = СтруктураАдресовСДанными.АдресВременногоХранилищаШаговПоУмолчанию;
	АдресДереваМакрошагов            = СтруктураАдресовСДанными.АдресДереваМакрошагов;
	
	Объект.Наименование                   = СтруктураАдресовСДанными.Наименование;
	Объект.Автор                          = СтруктураАдресовСДанными.Автор;
	Объект.ДатаАктуализации               = СтруктураАдресовСДанными.ДатаАктуализации;
	Объект.ИмяФайлаБлокаТеста             = СтруктураАдресовСДанными.ИмяФайлаБлокаТеста;
	Объект.Конфигурация                   = СтруктураАдресовСДанными.Конфигурация;
	Объект.НачальнаяДата                  = СтруктураАдресовСДанными.НачальнаяДата;
	Объект.НомерШагаДляНачальнойУстановки = СтруктураАдресовСДанными.НомерШагаДляНачальнойУстановки;
	Объект.Описание                       = СтруктураАдресовСДанными.Описание;
	Объект.Платформа                      = СтруктураАдресовСДанными.Платформа;
	СцТ_РежимВыполнения                   = (СтруктураАдресовСДанными.ДействиеОткрытия = ""Выполнение"");
	ТаймаутПоискаИнтерактивныхОбъектов    = СтруктураАдресовСДанными.ТаймаутПоискаИнтерактивныхОбъектов;
	КомпьютерИБ                           = СтруктураАдресовСДанными.КомпьютерИБ;
	ДругаяИБ                              = СтруктураАдресовСДанными.ДругаяИБ;
	СтрокаПодключенияКИБ                  = СтруктураАдресовСДанными.СтрокаПодключенияКИБ;
	ДопПараметрыКоманднойСтроки           = СтруктураАдресовСДанными.ДопПараметрыКоманднойСтроки;
	
	ВидТестируемогоКлиента                = СтруктураАдресовСДанными.ВидТестируемогоКлиента;
	Объект.ИмяПользователя                = СтруктураАдресовСДанными.ИмяПользователя;
	Объект.ПарольПользователяИБ           = СтруктураАдресовСДанными.ПарольПользователяИБ;
	ПортТестируемогоКлиента               = СтруктураАдресовСДанными.ПортТестируемогоКлиента;
	URLИБ                                 = СтруктураАдресовСДанными.URLИБ;
	Объект.ТипБлока                       = СтруктураАдресовСДанными.ТипБлока;
	
	СцТ_УстановитьПредставлениеИмениФайла(ЭтотОбъект);
	
	АдресТаблицыСсылок = СтруктураАдресовСДанными.АдресВременногоХранилищаСсылок;
	
	Если СцТ_РежимВыполнения Тогда
		Элементы.ПоказатьОкноЭталоннойБазы.Доступность = Ложь;
	Иначе
		Элементы.ПоказатьОкноЭталоннойБазы.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ПоказатьОкноЭталоннойБазы.Пометка = Ложь;
	Элементы.СвертываемаяГруппаЭталоннойБазы.Видимость = Элементы.ПоказатьОкноЭталоннойБазы.Пометка;
	
	// Синхронизация дерева настроек эталонной базы по составу объектов метаданных
	// Состав метаданных не изменяется во время работы
	// Однако базу нужно синхронизировать не всегда. 
	// Синхронизация нужна только в том случае, когда сценарий открыт
	// в эталонной конфигурации в режиме записи и в сценарии есть (могут быть) шаги бизнес-логики
	Если НЕ СцТ_РежимВыполнения
		И (Объект.ТипБлока = ""Смешанный"" ИЛИ Объект.ТипБлока = ""БизнесЛогики"") Тогда
		СцТ_СинхронизироватьДеревоНастроекЭталоннойБазы_НаСервере(АдресДереваНастроекЭталоннойБазы, Сообщения);
	КонецЕсли;
	
	СцТ_НастроитьВнешнийВидФормы_НаСервере();
	
	СцТ_ДобавитьНедостающиеСтрокиВТаблНачальныхУстановокШагов(АдресНачальныхУстановокШагов);
	
	Если ЗначениеЗаполнено(СтруктураАдресовСДанными.СтруктураГлобальныхПараметров) Тогда
		ГлобальныеПараметры =  СтруктураАдресовСДанными.СтруктураГлобальныхПараметров;
	Иначе
		ГлобальныеПараметры = Новый Структура;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры


// Отображение изменений в шаблоне шагов
//
// Параметры
// Параметр - параметр, переданный в обработчике оповещения
&НаКлиенте
Процедура СцТ_ОбработатьИзмененияИВыборШаблонаШагов(Параметр)
	
	Если Параметр.Свойство(""АдресХранилищаТаблицыШаблоновШагов"") Тогда
		АдресШаблоновШагов = Параметр.АдресХранилищаТаблицыШаблоновШагов;
	КонецЕсли;
	
	Если Параметр.Свойство(""МассивШаблоновШага"") Тогда
		
		ВыделенныеСтроки = Элементы.БлокСценария.ВыделенныеСтроки;
		
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого ТекущаяАвтогруппа Из ВыделенныеСтроки Цикл
			
			ДанныеАвтогруппы = БлокСценария.НайтиПоИдентификатору(ТекущаяАвтогруппа);
			
			Если ДанныеАвтогруппы <> Неопределено
				И ДанныеАвтогруппы.Типшага = ""АвтоГруппа"" Тогда
				
				СцТ_ПрименитьШаблонКАвтоГруппе(ДанныеАвтогруппы, Параметр.МассивШаблоновШага, Истина);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ВыполнитьЗаменуВМакрошагах_НаСервере(АдресДереваМакрошагов, УдаляемаяСсылка, СсылкаПриемник, СписокУИШ)
	
	ИстинноеДеревоМакрошагов = ПолучитьИзВременногоХранилища(АдресДереваМакрошагов);
	
	Для каждого ЭлементСписка Из СписокУИШ Цикл
		СтрокаДерева = ИстинноеДеревоМакрошагов.Строки.Найти(ЭлементСписка.Значение, ""УИШ"", Истина);
		Если СтрокаДерева <> Неопределено Тогда
			ВыполнитьЗаменуСсылокВШаге_НаСервере(СтрокаДерева, УдаляемаяСсылка, СсылкаПриемник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьЗаменуСсылокВШаге_НаСервере(УзелДерева, УдаляемаяСсылка, СсылкаПриемник)
	
	Если УзелДерева.ТипШага = ""Автогруппа"" Тогда
		Если УзелДерева.ОбСсылка = УдаляемаяСсылка Тогда
			УзелДерева.ОбСсылка = СсылкаПриемник;
		КонецЕсли;
		
		Если УзелДерева.ТипМетаданных = ""РегистрыСведений"" И ЗначениеЗаполнено(УзелДерева.ОбСсылка) Тогда
			// Для совместимости с версиями 3.0.6 и ранее
			СтруктураОтбора = УзелДерева.ОбСсылка;
			НоваяСтруктураОтбора = Новый Структура;
			Для каждого КлючЗначение Из СтруктураОтбора Цикл
				Если КлючЗначение.Значение = УдаляемаяСсылка Тогда
					НоваяСтруктураОтбора.Вставить(КлючЗначение.Ключ, СсылкаПриемник);
				Иначе
					НоваяСтруктураОтбора.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			УзелДерева.ОбСсылка = НоваяСтруктураОтбора;
		КонецЕсли;
	КонецЕсли;
	
	// Замена ссылок в дереве значения
	СцТ_ВыполнитьИтерационнуюЗаменуСсылокВДеревеЗначенияШага_НаСервере(
		УзелДерева.Значение,
		УдаляемаяСсылка,
		СсылкаПриемник);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СцТ_ВыполнитьИтерационнуюЗаменуСсылокВДеревеЗначенияШага_НаСервере(
	ВеткаДереваЗначения,
	ЗаменяемаяСсылка,
	НоваяСсылка)
	
	Для каждого СтрокаДереваЗначения Из ВеткаДереваЗначения.Строки Цикл
		
		Если СтрокаДереваЗначения.Значение = ЗаменяемаяСсылка Тогда
			СтрокаДереваЗначения.Значение = НоваяСсылка;
		КонецЕсли;
		
		СцТ_ВыполнитьИтерационнуюЗаменуСсылокВДеревеЗначенияШага_НаСервере(
			СтрокаДереваЗначения,
			ЗаменяемаяСсылка,
			НоваяСсылка);
	КонецЦикла;
	
КонецПроцедуры


// Преобразование дат в сценарии
//
&НаКлиенте
Процедура СцТ_ПреобразоватьДаты_НаКлиенте(СтруктураДанных)
	
	НачальнаяДатаДляПреобразования = СтруктураДанных.НачальнаяДата;
	ДляВыделенныхСтрок             = СтруктураДанных.ДляВыделенныхСтрок;
	НаправлениеПреобразования      = СтруктураДанных.НаправлениеПреобразования;
	
	Если ДляВыделенныхСтрок Тогда
		Для каждого ВыделеннаяСтрока Из Элементы.БлокСценария Цикл
			СцТ_ПреобразоватьДатуВЗначенииУзлаДерева(БлокСценария.НайтиПоИдентификатору(ВыделеннаяСтрока).Значение, НачальнаяДатаДляПреобразования, НаправлениеПреобразования);
		КонецЦикла;
	Иначе
		СцТ_РекурсивноПреобразоватьДатуВВеткеДерева(БлокСценария, НачальнаяДатаДляПреобразования, НаправлениеПреобразования);
	КонецЕсли;
	
КонецПроцедуры

// Замена ссылок в тесте по таблице замены
//
// Параметры
// АдресТаблицыЗамены - адрес хранения таблицы замены ссылок
&НаКлиенте
Процедура СцТ_ЗаменитьСсылкиВТестеПоТаблицеЗамены(УдаляемаяСсылка, СсылкаПриемник, СписокУИШ) Экспорт
	
	Для каждого ЭлементСписка Из СписокУИШ Цикл
		ИтерационноНайтиШагПоИдентификаторуИЗаменитьСсылку(БлокСценария, ЭлементСписка.Значение, УдаляемаяСсылка, СсылкаПриемник);
	КонецЦикла;
	
	ВыполнитьЗаменуВМакрошагах_НаСервере(АдресДереваМакрошагов, УдаляемаяСсылка, СсылкаПриемник, СписокУИШ);
	
КонецПроцедуры



&НаСервереБезКонтекста
Процедура СцТ_ИмпортироватьСсылки(МассивДобавляемыхСсылок, АдресТаблицыСсылок, ИзмененныеУИШ)
	
	ТаблицаСсылок = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
	
	Для каждого СтруктураСсылки Из МассивДобавляемыхСсылок Цикл
		
		СтрокаСсылки = ТаблицаСсылок.Добавить();
		СтрокаСсылки.Ссылка         = СтруктураСсылки.СтрокаИдентификатора;
		СтрокаСсылки.Представление  = СтруктураСсылки.Представление;
		СтрокаСсылки.ТипМД          = СтруктураСсылки.ТипМД;
		СтрокаСсылки.ИмяМД          = СтруктураСсылки.ИмяМД;
		СтрокаСсылки.СинонимМД      = СтруктураСсылки.СинонимМД;
		СтрокаСсылки.ПоискПоЗапросу = СтруктураСсылки.ПоискПоЗапросу;
		СтрокаСсылки.ТекстЗапроса   = СтруктураСсылки.ТекстЗапроса;
		
		Для каждого СтрИдентификации Из СтруктураСсылки.СтруктураИдентификации Цикл
			СИ = СтрокаСсылки.СтруктураИдентификации.Добавить();
			СИ.Имя             = СтрИдентификации.Имя;
			СИ.Представление   = СтрИдентификации.Представление;
			СИ.Значение        = СтрИдентификации.Значение;
			СИ.СокрТипЗначения = СтрИдентификации.СокрТипЗначения;
		КонецЦикла;
		
		Для каждого УИШ Из СтруктураСсылки.МассивУИШ Цикл
			СтрокаСсылки.МасивУИШ.Добавить(ИзмененныеУИШ[УИШ]);
		КонецЦикла;
		
	КонецЦикла;
	
	АдресТаблицыСсылок = ПоместитьВоВременноеХранилище(ТаблицаСсылок, Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаОсновныхСтруктурПриСозданииНаСервере

// Подготовка списка доступных шагов
//
&НаСервере
Процедура СцТ_ЗаполнитьСписокШагов()
	
	// Шаги бизнес-логики
	СписокТиповШагов.Добавить(""АвтоГруппа""        , НСтр(""ru='Проверка бизнес-логики'""));            // 0
	СписокТиповШагов.Добавить(""Воспроизвести""     , НСтр(""ru='Воспроизвести объект'""));              // 1
	СписокТиповШагов.Добавить(""СравнитьСЭталоном"" , НСтр(""ru='Сравнить объект с эталоном'""));        // 2
	СписокТиповШагов.Добавить(""СравнитьДвижения""  , НСтр(""ru='Сравнить движения с эталоном'""));      // 3
	СписокТиповШагов.Добавить(""ЗаменаСсылки""      , НСтр(""ru='Использовать существующий объект'""));  // 4
	СписокТиповШагов.Добавить(""ВыполнитьЗапрос""   , НСтр(""ru='Выполнить запрос'""));                  // 5
	СписокТиповШагов.Добавить(""ВыполнитьПроцедуру"", НСтр(""ru='Выполнить серверную процедуру'""));     // 6
	
	СписокТиповШагов.Добавить(""Группа""          , НСтр(""ru='Пользовательская группа'"")); // 7
	СписокТиповШагов.Добавить(""Комментарий""     , НСтр(""ru='Комментарий'""));             // 8
	СписокТиповШагов.Добавить(""ВыполнитьВРучную"", НСтр(""ru='Ручная операция'""));         // 9
	
	// Интерактивные шаги
	СписокТиповШагов.Добавить(""ИнтерактивнаяАвтоГруппа""           , НСтр(""ru='Форма'""));                                    // 10
	СписокТиповШагов.Добавить(""НайтиФорму""                        , НСтр(""ru='Найти форму'""));                              // 11
	СписокТиповШагов.Добавить(""ПроверитьФорму""                    , НСтр(""ru='Выполнить действие с текущей формой'""));      // 12
	СписокТиповШагов.Добавить(""НайтиЭлементФормы""                 , НСтр(""ru='Выполнить действие с элементом формы'""));     // 13
	СписокТиповШагов.Добавить(""ЗаполнитьОдинРеквизитФормы""        , НСтр(""ru='Поле формы'""));                               // 14
	СписокТиповШагов.Добавить(""ЗаполнитьРеквизитыФормы""           , НСтр(""ru='Все поля формы'""));                           // 15
	СписокТиповШагов.Добавить(""НажатьКнопку""                      , НСтр(""ru='Кнопка, флажок, надпись, картинка'""));        // 16
	СписокТиповШагов.Добавить(""НажатьКнопкуКИ""                    , НСтр(""ru='Нажать кнопку командного интерфейса'""));      // 17
	СписокТиповШагов.Добавить(""ПроверитьТабличныйДокумент""        , НСтр(""ru='Табличный документ (mxl)'""));                 // 18
	СписокТиповШагов.Добавить(""ЗакрытьКлиентскоеОкноФормы""        , НСтр(""ru='Закрыть окно текущей формы'""));               // 19
	СписокТиповШагов.Добавить(""АвтоГруппаТаблицаФормы""            , НСтр(""ru='Таблица формы'""));                            // 20
	СписокТиповШагов.Добавить(""НайтиСтрокуТаблицы""                , НСтр(""ru='Найти строку таблицы'""));                     // 21
	СписокТиповШагов.Добавить(""ДействиеСТаблицей""                 , НСтр(""ru='Действие с таблицей'""));                      // 22
	СписокТиповШагов.Добавить(""ЗаполнитьКолонкуТаблицы""           , НСтр(""ru='Ячейка текущей строки'""));                    // 23
	СписокТиповШагов.Добавить(""ЗаполнитьСтрокуТаблицы""            , НСтр(""ru='Все ячейки текущей строки'""));                // 24
	СписокТиповШагов.Добавить(""ВыполнитьИнтерактивнуюКоманду""     , НСтр(""ru='Перейти по навигационной ссылке'""));          // 25
	СписокТиповШагов.Добавить(""ВыполнитьИнтерактивныйСкрипт""      , НСтр(""ru='Выполнить действия журнала'""));               // 26
	СписокТиповШагов.Добавить(""ЗавершитьРаботуТестируемогоКлиента"", НСтр(""ru='Закрыть тестируемое приложение'""));           // 27
	
	СписокТиповШагов.Добавить(""Пауза""                             , НСтр(""ru='Пауза'""));                                    // 28
	СписокТиповШагов.Добавить(""ВыполнитьКлиентскуюПроцедуру""      , НСтр(""ru='Выполнить клиентскую процедуру'""));           // 29
	СписокТиповШагов.Добавить(""Повторение""                        , НСтр(""ru='Повторение'""));                               // 30
	СписокТиповШагов.Добавить(""Условие""                           , НСтр(""ru='Условие'""));                                  // 31
	СписокТиповШагов.Добавить(""ВыполнитьМакрошаг""                 , НСтр(""ru='Выполнить макрошаг'""));                       // 32
	
	СписокТиповШагов.Добавить(""ПроверитьТекстОшибки""             , НСтр(""ru='Проверить сообщение об ошибке'""));             // 33
	СписокТиповШагов.Добавить(""ВыбратьСообщениеПользователю""     , НСтр(""ru='Выбрать сообщение пользователю'""));            // 34
	СписокТиповШагов.Добавить(""ПроверитьТекстСообщений""          , НСтр(""ru='Проверить сообщения в окне формы'""));          // 35
	СписокТиповШагов.Добавить(""АвтоГруппаТабличныйДокумент""      , НСтр(""ru='Табличный документ'""));                        // 36
	СписокТиповШагов.Добавить(""ДействиеСТабДокументом""           , НСтр(""ru='Действие с табличным документом'""));           // 37
	СписокТиповШагов.Добавить(""ДействиеСЯчейкойТД""               , НСтр(""ru='Ячейка табличного документа'""));               // 38
	
КонеЦпроцедуры

&НаКлиенте
Функция СцТ_СписокИнтерактивныхШагов()
	
	// Список интерактивных шагов
	СпИШ = Новый СписокЗначений;
	
	СпИШ.Добавить(""Группа"");
	СпИШ.Добавить(""Комментарий"");
	СпИШ.Добавить(""ВыполнитьВРучную"");
	
	// Интерактивные шаги
	СпИШ.Добавить(""ИнтерактивнаяАвтоГруппа"");
	СпИШ.Добавить(""НайтиФорму"");
	СпИШ.Добавить(""ПроверитьФорму"");
	СпИШ.Добавить(""НайтиЭлементФормы"");
	СпИШ.Добавить(""ЗаполнитьОдинРеквизитФормы"");
	СпИШ.Добавить(""ЗаполнитьРеквизитыФормы"");
	СпИШ.Добавить(""НажатьКнопку"");
	СпИШ.Добавить(""НажатьКнопкуКИ"");
	СпИШ.Добавить(""ПроверитьТабличныйДокумент"");
	СпИШ.Добавить(""ЗакрытьКлиентскоеОкноФормы"");
	СпИШ.Добавить(""АвтоГруппаТаблицаФормы"");
	СпИШ.Добавить(""НайтиСтрокуТаблицы"");
	СпИШ.Добавить(""ДействиеСТаблицей"");
	СпИШ.Добавить(""ЗаполнитьКолонкуТаблицы"");
	СпИШ.Добавить(""ЗаполнитьСтрокуТаблицы"");
	СпИШ.Добавить(""ВыполнитьИнтерактивнуюКоманду"");
	СпИШ.Добавить(""ВыполнитьИнтерактивныйСкрипт"");
	СпИШ.Добавить(""ЗавершитьРаботуТестируемогоКлиента"");
	СпИШ.Добавить(""АвтоГруппаТабличныйДокумент"");
	СпИШ.Добавить(""ДействиеСТабДокументом"");
	СпИШ.Добавить(""ДействиеСЯчейкойТД"");
	
	СпИШ.Добавить(""Пауза"");
	СпИШ.Добавить(""ВыполнитьКлиентскуюПроцедуру"");
	СпИШ.Добавить(""Повторение"");
	СпИШ.Добавить(""Условие"");
	СпИШ.Добавить(""ПроверитьТекстОшибки"");
	СпИШ.Добавить(""ВыбратьСообщениеПользователю"");
	
	//СпИШ.Добавить(""ВыполнитьМакрошаг"");
	
	Возврат СпИШ
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СцТ_ТипыШаговПоУмолчанию()
	
	Результат = Новый СписокЗначений;
	
	// Шаги бизнес-логики
	Результат.Добавить(""Воспроизвести""     , НСтр(""ru='Воспроизвести объект'""));              // 1
	Результат.Добавить(""СравнитьСЭталоном"" , НСтр(""ru='Сравнить объект с эталоном'""));        // 2
	Результат.Добавить(""СравнитьДвижения""  , НСтр(""ru='Сравнить движения с эталоном'""));      // 3
	Результат.Добавить(""ЗаменаСсылки""      , НСтр(""ru='Использовать существующий объект'""));  // 4
	Результат.Добавить(""ВыполнитьЗапрос""   , НСтр(""ru='Выполнить запрос'""));                  // 5
	Результат.Добавить(""ВыполнитьПроцедуру"", НСтр(""ru='Выполнить процедуру'""));               // 6
	Результат.Добавить(""Комментарий""       , НСтр(""ru='Комментарий'""));                       // 7
	Результат.Добавить(""ВыполнитьВРучную""  , НСтр(""ru='Ручная операция'""));                   // 8
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСТестируемымПриложением

// Подключение к открытому тестируемому приложению
//
// Параметры
// ВремяОжидания - таймаут ожидания подключения в секундах
&НаКлиенте
Функция СцТ_УстановитьПодключениеКТестируемомуКлиенту(ВремяОжидания = 60)
	
	ТекстСообщения = НСтр(""ru = 'Выполняется подключение к тестируемому приложению ...'"");
	СцТ_ИнформационноеСообщение(""OK"", ТекстСообщения, ТекстСообщения, Ложь);
	
	Если ВидТестируемогоКлиента < 2 Тогда
		//Если ДругаяИБ Тогда
		//	НовыйПодключаемый = Вычислить(""Новый ТестируемоеПриложение(КомпьютерИБ, ПортТестируемогоКлиента)"");
		//Иначе
		Попытка
			НовыйПодключаемый = Вычислить(""Новый ТестируемоеПриложение(""""127.0.0.1"""", ПортТестируемогоКлиента)"");
		Исключение
			ТекстПредупреждения = НСтр(""ru = 'Возможно обработка открыта не в менеджере тестирования'"");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
		//КонецЕсли;
		
	Иначе
		
		//Если ПараметрыСоединенияСИБ.КлиентСерверная Тогда
			//Если ДругаяИБ Тогда
				НовыйПодключаемый = Вычислить(""Новый ТестируемоеПриложение(КомпьютерИБ,
					|ПортТестируемогоКлиента, ИдентификаторВебКлиента)"");
			//Иначе
			//	НовыйПодключаемый = Вычислить(""Новый ТестируемоеПриложение(ПараметрыСоединенияСИБ.Кластер,
			//		|ПараметрыСоединенияСИБ.Порт, ИдентификаторВебКлиента)"");
			
			//НовыйПодключаемый = Вычислить(""Новый ТестируемоеПриложение(""""127.0.0.1"""",
			//		|ПараметрыСоединенияСИБ.Порт, ИдентификаторВебКлиента)"");
			//КонецЕсли;
			
		//Иначе
			//Если ДругаяИБ Тогда
			//	НовыйПодключаемый = Вычислить(""Новый ТестируемоеПриложение(КомпьютерИБ,
			//		|ПортТестируемогоКлиента, ИдентификаторВебКлиента)"");
			//Иначе
				//АдресВебСервера   = СцТ_ВыделитьАдресСервераИзURL(URLИБ);
				//НовыйПодключаемый = Вычислить(""Новый ТестируемоеПриложение(АдресВебСервера,
				//	|ПортТестируемогоКлиента, ИдентификаторВебКлиента)"");
		//		НовыйПодключаемый = Вычислить(""Новый ТестируемоеПриложение(""""127.0.0.1"""",
		//			|ПортТестируемогоКлиента, ИдентификаторВебКлиента)"");
				
			//КонецЕсли;
			
		//КонецЕсли;
		
	КонецЕсли;
	
	Подключен = Ложь;
	Если ВремяОжидания = Неопределено Тогда
		
		// Однократная попытка подключения
		Попытка
			НовыйПодключаемый.УстановитьСоединение();
			Подключен = Истина;
		Исключение
		КонецПопытки;
		
	Иначе
		
		// Выполнять попытку подключения до тех пор, пока
		// не истечет время ожидания
		ВремяОкончанияОжидания = ТекущаяДата() + ВремяОжидания;
		ВремяДоОкончания = ВремяОкончанияОжидания - ТекущаяДата();
		Пока ВремяДоОкончания > 0 Цикл
			
			Попытка
				Состояние(НСтр(""ru = 'Ожидание подключения тестируемого клиента'""),
					100 - Цел((ВремяДоОкончания / ВремяОжидания) * 100),
					НСтр(""ru = 'Установление соединения с запущеным тестируемым клиентом'""));
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			Попытка
				НовыйПодключаемый.УстановитьСоединение();
				Подключен = Истина;
				Прервать;
			Исключение
			КонецПопытки;
			
			ВремяДоОкончания = ВремяОкончанияОжидания - ТекущаяДата();
			
		КонецЦикла;
		
		Состояние();
		
	КонецЕсли;
	
	Если НЕ Подключен Тогда
		НовыйПодключаемый = Неопределено;
		ТекстСообщения = НСтр(""ru = 'Не удалось установить подключение к тестируемому приложению'"");
		СцТ_ИнформационноеСообщение(""ERR"", ТекстСообщения, ТекстСообщения, Ложь);
		
	Иначе
		ТекстСообщения = НСтр(""ru = 'Подключение к тестируемому приложению установлено'"");
		СцТ_ИнформационноеСообщение(""OK"", ТекстСообщения, ТекстСообщения, Ложь);
	КонецЕсли;
	
	Возврат НовыйПодключаемый;
	
КонецФункции

&НаКлиенте
Процедура СцТ_СохранитьТДвДереве(
	УзелЗначенийЯчеек,
	ТД,
	КоординатыОбласти)
	
	БуферОбъединенийЯчеек = Новый Соответствие;
	
	РеальныйНомерСтроки=1;
	Для НомерСтроки = КоординатыОбласти.НачальнаяСтрока По КоординатыОбласти.КонечнаяСтрока Цикл
		
		УзелСтроки = СцТ_ДобавитьУзелВДеревоЗначения(УзелЗначенийЯчеек,
			""R"" + СтрЗаменить(Строка(НомерСтроки), Символ(160), """"),
			, , , , , , , , Ложь);
		РеальныйНомерКолонки=1;
		Для НомерКолонки = КоординатыОбласти.НачальнаяКолонка По КоординатыОбласти.КонечнаяКолонка Цикл
			
			АдресЯчейки = СцТ_АдресЯчейки(РеальныйНомерСтроки, РеальныйНомерКолонки);
			ЯчейкаТД = ТД.Область(АдресЯчейки);
			
			СцТ_ДобавитьУзелВДеревоЗначения(
				УзелСтроки,
				""C"" + СтрЗаменить(Строка(НомерКолонки), Символ(160), """"),
				ЯчейкаТД.Текст);
			
			РеальныйНомерКолонки=РеальныйНомерКолонки+1;
		КонецЦикла;
		РеальныйНомерСтроки =РеальныйНомерСтроки+1;
	КонецЦикла;
	
КонецПроцедуры

// Поиск тестируемого объекта по полному пути
//
// Параметры
//	ОбъектВладелец - владелец нужного объекта
//	УзелОписанияПути - узлел дерева значений с описание пути
//	Активизировать - необходимость активизировать найденный объект
//	УчитыватьИмя  - нужно ли при поиске учитывать имя объекта
&НаКлиенте
Функция СцТ_НайтиОбъектТестируемогоПриложенияПоУзлуПутиКОбъекту(
	Знач ОбъектВладелец,
	УзелОписанияПути,
	УчитыватьИмя               = Истина,
	ИндексТекущегоЭлементаПути = Неопределено,
	ВГраницаЭлементовПути      = Неопределено,
	МассивНайденыхОбъектов     = Неопределено)
	
	ОбъектНайден  = Ложь;
	ТекущийОбъект = ОбъектВладелец;
	ЭлементыПути  = УзелОписанияПути.ПолучитьЭлементы();
	
	Если ИндексТекущегоЭлементаПути = Неопределено Тогда
		МассивНайденыхОбъектов     = Новый Массив;
		ИндексТекущегоЭлементаПути = 0;
		ВГраницаЭлементовПути      = ЭлементыПути.Количество() - 1;
		Если ВГраницаЭлементовПути = -1 Тогда
			Возврат МассивНайденыхОбъектов;
		КонецЕсли;
	КонецЕсли;
	
	УзелОписанияОбъекта = ЭлементыПути[ИндексТекущегоЭлементаПути];
	
	ЭтоПоследнийОбъектВПути = (ИндексТекущегоЭлементаПути = ВГраницаЭлементовПути);
	НайденыеОбъекты = СцТ_НайтиОбъектТестируемогоПриложенияВПрямомПодчинении(
		ОбъектВладелец,
		?(УчитыватьИмя, УзелОписанияОбъекта.Имя, ""$"" + УзелОписанияОбъекта.Синоним),
		УзелОписанияОбъекта.Значение,
		ЭтоПоследнийОбъектВПути); // Поиск по шаблону заголовка и имени для последнего элемента в пути
	
	Если ЭтоПоследнийОбъектВПути Тогда
		Для каждого НайденыйОбъект Из НайденыеОбъекты Цикл
			МассивНайденыхОбъектов.Добавить(НайденыйОбъект);
		КонецЦикла;
		
	Иначе
		
		ИндексСледующего = ИндексТекущегоЭлементаПути + 1;
		Для каждого НайденыйОбъект Из НайденыеОбъекты Цикл
			
			// Рекурсивный вызов - для поиска из всех возможных путей поиска
			СцТ_НайтиОбъектТестируемогоПриложенияПоУзлуПутиКОбъекту(
				НайденыйОбъект,
				УзелОписанияПути,
				УчитыватьИмя,
				ИндексСледующего,
				ВГраницаЭлементовПути,
				МассивНайденыхОбъектов);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивНайденыхОбъектов;
	
КонецФункции

// Получение первого подчиненного тестируемого объекта
// Параметры
//	ОбъектВладелец - тестируемый объект - владелец
//	ИмяОбъекта - имя тестируемого объекта
//	ТипОбъекта - тип тестируемого объекта
&НаКлиенте
Функция СцТ_НайтиОбъектТестируемогоПриложенияВПрямомПодчинении(
	ОбъектВладелец,
	ИмяОбъекта,
	Знач ТипОбъекта = Неопределено,
	ПоискПоШаблону  = Ложь)
	
	Результат = Новый Массив;
	Если ПустаяСтрока(ИмяОбъекта) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипОбъекта <> Неопределено И ТипЗнч(ТипОбъекта) <> Тип(""Тип"") Тогда
		ТипОбъекта = СцТ_ТипТестируемогоОбъектаИзЧисла(ТипОбъекта);
	КонецЕсли;
	
	ИмяОбъектаВРег     = ВРег(СокрЛП(ИмяОбъекта));
	ПодчиненныеОбъекты = ОбъектВладелец.ПолучитьПодчиненныеОбъекты();
	
	// Если заголовок тестируемого объекта содержит символ $
	// значит заголовка нет и поле заполнено автоматически на основании имени объекта
	ЭтоЗаголовокКакИмя = (Лев(ИмяОбъекта, 1) = ""$"");
	Если Лев(ИмяОбъекта, 1) <> ""$"" Тогда
		
		// Поиск по имени
		Для каждого ПодчиненныйОбъект Из ПодчиненныеОбъекты Цикл
			Если (ТипОбъекта = Неопределено ИЛИ ТипОбъекта = ТипЗнч(ПодчиненныйОбъект))
				И (НЕ ПоискПоШаблону И ВРег(СокрЛП(ПодчиненныйОбъект.Имя)) = ИмяОбъектаВРег
					ИЛИ ПоискПоШаблону И СцТ_ТестСтроки(ПодчиненныйОбъект.Имя, ИмяОбъектаВРег, Ложь)) Тогда
				Результат.Добавить(ПодчиненныйОбъект);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// Поиск по заголовку
		ЗаголовокОбъекта = Сред(ИмяОбъектаВРег, 2);
		
		Для каждого ПодчиненныйОбъект Из ПодчиненныеОбъекты Цикл
			ЗаголовокПодчиненногоОбъекта = ВРег(СокрЛП(СцТ_ЗаголовокИнтерактивногоОбъекта(ПодчиненныйОбъект)));
			// Для обхода ошибки платформы и совместимости с предыдущими версиями сценариев
			Если ПустаяСтрока(ЗаголовокПодчиненногоОбъекта) Тогда
				ЗаголовокПодчиненногоОбъекта = ВРег(СокрЛП(ПодчиненныйОбъект.Имя));
			КонецЕсли;
			
			Если (ТипОбъекта = Неопределено ИЛИ ТипОбъекта = ТипЗнч(ПодчиненныйОбъект))
				И (НЕ ПоискПоШаблону И ЗаголовокОбъекта = ЗаголовокПодчиненногоОбъекта
					ИЛИ ПоискПоШаблону И СцТ_ТестСтроки(ЗаголовокПодчиненногоОбъекта, ЗаголовокОбъекта, Ложь)) Тогда
				Результат.Добавить(ПодчиненныйОбъект);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьФормуВыполненияИВыполнить()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""РежимПрогона"", СцТ_РежимВыполнения);
	ПараметрыФормы.Вставить(""ЗакрыватьПриЗакрытииВладельца"", Истина);
	
	ФормаПроцедурВыполнения = ПолучитьФорму(ПутьКФормам + ""ПроцедурыВыполнения"", ПараметрыФормы, ЭтотОбъект, Истина);
	//ФормаПроцедурВыполнения = ОткрытьФорму(ПутьКФормам + ""ПроцедурыВыполнения"", ПараметрыФормы, ЭтотОбъект, Истина);
	ФормаПроцедурВыполнения.ПутьКФормам                = ПутьКФормам;
	ФормаПроцедурВыполнения.СцТ_ГлавнаяФорма           = ЭтотОбъект;
	ФормаПроцедурВыполнения.ФормаШагов                 = ЭтотОбъект;
	ФормаПроцедурВыполнения.ФормаРодительскогоПроцесса = Неопределено;
	ФормаПроцедурВыполнения.ШагРодительскогоПроцесса   = Неопределено;
	
	ФормаПроцедурВыполнения.СцТ_ПодготовитьсяКВыполнениюШага();
	
КонецПроцедуры

&НаКлиенте
Функция ЭтаВеткаСодержитТолькоИнтерактивныеШаги(ДанныеВеткиСценария, СписокИнтерактивныхШагов)
	
	ТипШага = ДанныеВеткиСценария.ТипШага;
	
	Если СписокИнтерактивныхШагов.НайтиПоЗначению(ТипШага) = Неопределено Тогда
		// т.е. этот шаг не входит в список разрешенных
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ПодчиненныйШаг Из ДанныеВеткиСценария.ПолучитьЭлементы() Цикл
		Если НЕ ЭтаВеткаСодержитТолькоИнтерактивныеШаги(ПодчиненныйШаг, СписокИнтерактивныхШагов) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ПрименитьИзмененияПараметровЗапускаТП(ПараметрыЗапуска)
	
	ПараметрыИзменились =
		   (ВидТестируемогоКлиента             <> ПараметрыЗапуска.ВидТестируемогоКлиента
		ИЛИ Объект.ИмяПользователя             <> ПараметрыЗапуска.ИмяПользователя
		ИЛИ Объект.ПарольПользователяИБ        <> ПараметрыЗапуска.ПарольПользователяИБ
		ИЛИ URLИБ                              <> ПараметрыЗапуска.URLИБ
		ИЛИ ПортТестируемогоКлиента            <> ПараметрыЗапуска.ПортТестируемогоКлиента
		ИЛИ КомпьютерИБ                        <> ПараметрыЗапуска.КомпьютерИБ
		ИЛИ ДругаяИБ                           <> ПараметрыЗапуска.ДругаяИБ
		ИЛИ СтрокаПодключенияКИБ               <> ПараметрыЗапуска.СтрокаПодключенияКИБ
		ИЛИ ДопПараметрыКоманднойСтроки        <> ПараметрыЗапуска.ДопПараметрыКоманднойСтроки);
	
	Если ПараметрыИзменились Тогда
		
		ВидТестируемогоКлиента             = ПараметрыЗапуска.ВидТестируемогоКлиента;
		Объект.ИмяПользователя             = ПараметрыЗапуска.ИмяПользователя;
		Объект.ПарольПользователяИБ        = ПараметрыЗапуска.ПарольПользователяИБ;
		URLИБ                              = ПараметрыЗапуска.URLИБ;
		ПортТестируемогоКлиента            = ПараметрыЗапуска.ПортТестируемогоКлиента;
		КомпьютерИБ                        = ПараметрыЗапуска.КомпьютерИБ;
		ДругаяИБ                           = ПараметрыЗапуска.ДругаяИБ;
		СтрокаПодключенияКИБ               = ПараметрыЗапуска.СтрокаПодключенияКИБ;
		ДопПараметрыКоманднойСтроки        = ПараметрыЗапуска.ДопПараметрыКоманднойСтроки;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеВспомогательныеПроцедурыИФункции

&НаКлиенте
Процедура СцТ_ОткрытьСценарийАвто()
	
	Если СцТ_ОстановленИзКонфигурацииСТ() Тогда
		СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
		Возврат;
	КонецЕсли;
	
	// Проверить, что файл сценария существует
	ТекстСообщения = НСтр(""ru = 'Открытие файла сценария: %1'"");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ПутьФайлаСценарияДляАвтоОткрытия);
	СцТ_ИнформационноеСообщение(""OK"", ТекстСообщения, ТекстСообщения, Ложь);
	
	ОписательФайла = Новый Файл(ПутьФайлаСценарияДляАвтоОткрытия);
	Если НЕ ОписательФайла.Существует() Тогда
		
		ТекстСообщения = НСтр(""ru = 'Не обнаружен файл сценария: %1'"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ПутьФайлаСценарияДляАвтоОткрытия);
		СцТ_ИнформационноеСообщение(""ERR"", ТекстСообщения, ТекстСообщения, Ложь);
		СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""ИдентификаторГлавнойФормы"", ЭтотОбъект.УникальныйИдентификатор);
	
	ДействиеОткрытия = ?(СцТ_ВидДействияАвтоматическогоЗапуска = ""ОткрытьСценарийВРежимеЗаписи"",
		""Редактирование"",
		""Выполнение"");
		
	ПараметрыФормы.Вставить(""ДействиеОткрытия"", ДействиеОткрытия);
	
	ФормаОткрытия = ПолучитьФорму(ПутьКФормам + ""ОткрытиеСценария"", ПараметрыФормы, ЭтотОбъект);
	ФормаОткрытия.ФайлСценария = ПутьФайлаСценарияДляАвтоОткрытия;
	СообщениеОбОшибке = ФормаОткрытия.СцТ_ПроверитьИмяФайлаСценария();
	Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
		
		СцТ_ИнформационноеСообщение(""ERR"", СообщениеОбОшибке, СообщениеОбОшибке);
		СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
		Возврат;
		
	КонецЕсли;
	
	Попытка
		НачатьПомещениеФайла(
			Новый ОписаниеОповещения(""СцТ_ПриПомещенииФайлаСценария"", ЭтотОбъект, ДействиеОткрытия),
			"""",
			ПутьФайлаСценарияДляАвтоОткрытия,
			Ложь);
	Исключение
		
		ТекстСообщения = НСтр(""ru = 'Не удалось прочитать файл сценария. %1'"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", СцТ_ПредставлениеИсключения(ИнформацияОбОшибке()));
		СцТ_ИнформационноеСообщение(""ERR"", ТекстСообщения, ТекстСообщения);
		СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры


// Очистка временного хранилища по заданному адресу
//
// Параметры
// Адрес - адрес хранилища, которое нужно очистить
&НаКлиентеНаСервереБезКонтекста
Процедура СцТ_УдалитьЗначениеИзВременногоХранилища(Адрес)
	
	Если НЕ ПустаяСтрока(Адрес) Тогда
		Попытка
			УдалитьИзВременногоХранилища(Адрес);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(Адрес) = Тип(""Строка"") Тогда
		Адрес = """";
	КонецЕсли;
	
КонецПроцедуры

// Очистка нескольких временных хранилищ
//
// Параметры
// МассивАдресов - массив адресов по которым нужно очистить хранилища
&НаСервереБезКонтекста
Процедура СцТ_УдалитьЗначенияИзВременногоХранилищаНаСервере(МассивАдресов)
	
	Для каждого АдресЗначения Из МассивАдресов Цикл
		СцТ_УдалитьЗначениеИзВременногоХранилища(АдресЗначения);
	КонецЦикла;
	
КонецПроцедуры

// Преобразование параметров для построения интернет запроса
//
// Параметры
// ПередаваемыйПараметр - параметр, вставляемый в запрос
// Возвращаемое значение - преобразованное значение
&НаКлиентеНаСервереБезКонтекста
Функция СцТ_ПреобразоватьПараметрДляURL(Знач ПередаваемыйПараметр)
	
	Если ТипЗнч(ПередаваемыйПараметр) = Тип(""Число"") Тогда
		Возврат СтрЗаменить(Строка(ПередаваемыйПараметр), Символ(160), """");
	ИначеЕсли ТипЗнч(ПередаваемыйПараметр) <> Тип(""Строка"") Тогда
		ПередаваемыйПараметр = Строка(ПередаваемыйПараметр);
	КонецЕсли;
	
	// Замена специальных символов
	ПередаваемыйПараметр = СтрЗаменить(ПередаваемыйПараметр, ""%"", ""%25"");
	ПередаваемыйПараметр = СтрЗаменить(ПередаваемыйПараметр, ""?"", ""%3F"");
	ПередаваемыйПараметр = СтрЗаменить(ПередаваемыйПараметр, ""&"", ""%26"");
	ПередаваемыйПараметр = СтрЗаменить(ПередаваемыйПараметр, ""="", ""%3D"");
	ПередаваемыйПараметр = СтрЗаменить(ПередаваемыйПараметр, "" "", ""%20"");
	ПередаваемыйПараметр = СтрЗаменить(ПередаваемыйПараметр, """""""", ""%22"");
	ПередаваемыйПараметр = СтрЗаменить(ПередаваемыйПараметр, ""/"", ""%2F"");
	ПередаваемыйПараметр = СтрЗаменить(ПередаваемыйПараметр, ""\"", ""%5C"");
	
	Возврат ПередаваемыйПараметр;
	
КонецФункции

// Добавление параметров к интернет-адресу
//
//Параметры
// URL - адрес
// ИмяПараметра - имя параметра
// ЗначениеПараметра - значение параметра
&НаКлиентеНаСервереБезКонтекста
Процедура СцТ_ДобавитьПараметрКURL(
	URL,
	ИмяПараметра,
	ЗначениеПараметра = Неопределено)
	
	URL = URL + ?(Найти(URL, ""?"") = 0, ""?"", ""&"") + ИмяПараметра;
	Если ЗначениеПараметра <> Неопределено Тогда
		URL = URL + ""="" + СцТ_ПреобразоватьПараметрДляURL(ЗначениеПараметра);
	КонецЕсли;
	
КонецПроцедуры

// Обработка изменения настроек на сервере
//
// Параметры
// НастройкиТеста - настройки сценария, заданные пользователем
&НаСервереБезКонтекста
Процедура СцТ_ОбработатьНастройкиТестаНаСервере(НастройкиТеста)
	
	ХранилищеОбщихНастроек.Сохранить(
		""СцТ_БлокироватьГлавноеОкно"",
		,
		НастройкиТеста.БлокироватьГлавноеОкно);
	
КонецПроцедуры

// Установка на форме представление имени файла сценария
//
&НаКлиентеНаСервереБезКонтекста
Процедура СцТ_УстановитьПредставлениеИмениФайла(Форма)
	
	Форма.ПредставлениеИмениФайла = ?(ПустаяСтрока(Форма.Объект.ИмяФайлаБлокаТеста),
									  НСтр(""ru = 'Имя файла не задано'""),
									  Форма.Объект.ИмяФайлаБлокаТеста);
	
КонецПроцедуры

// Склеивание двух строк на сервере
//
// Парметры
//	Строка - исходная строка
//	Подстрока - добавляемая строка
//	Разделитель - разделитель между строками
&НаСервереБезКонтекста
Процедура СцТ_ДобавитьПодстроку_НаСервере(
	Строка,
	Подстрока,
	Разделитель = Неопределено)
	
	Если Разделитель = Неопределено Тогда
		Разделитель = Символы.ПС;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Строка) Тогда
		Строка = Строка + Разделитель;
	КонецЕсли;
	
	Строка = Строка + Подстрока;
	
КонецПроцедуры

// Получение экземпляра этой обработки на сервере
&НаСервереБезКонтекста
Функция СцТ_ПолучитьЭтуОбработку()
	
	// Для внутренней обработки
	//Возврат Обработки.СценарноеТестирование.Создать();
	// Для внешней обработки
	Возврат ВнешниеОбработки.Создать(""СценарноеТестирование"");
	
КонецФункции

// Возвращает тип метаданных по переданной ссылке
//
&НаСервереБезКонтекста
Функция СцТ_ОпределитьТипМетаданныхПоСсылке_НаСервере(Ссылка)
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		ТипМетаданных = ""Справочники"";
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		ТипМетаданных = ""Документы"";
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		ТипМетаданных = ""ПланыСчетов"";
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		ТипМетаданных = ""ПланыВидовХарактеристик"";
		
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		ТипМетаданных = ""ПланыВидовРасчета"";
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		ТипМетаданных = ""Перечисления"";
		
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		ТипМетаданных = ""БизнесПроцессы"";
		
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		ТипМетаданных = ""Задачи"";
		
	Иначе
		ТипМетаданных = """";
		
	КонецЕсли;
	
	Возврат ТипМетаданных;
	
КонецФункции














// Формирует имя файла протокола в зависимости от текущего времени
&НаКлиенте
Процедура СцТ_ОбновитьИмяФайлаПротокола()
	
	Если СцТ_ВнешнееУправлениеОбработкой = ""Отсутствует"" Тогда
		ДатаСтрокой =  Формат(ТекущаяДата(), ""ДФ=yyyy-MM-dd ЧЧмм"");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "":"", """");
		ИмяФайлаПротокола = Объект.РабочийКаталог
			+ ""protocol ""
			+ ДатаСтрокой
			+ "".json"";
	Иначе
		ИмяФайлаПротокола = Объект.РабочийКаталог + ""protocol.json"";
	КонецЕсли;
	
	ЗаписанЗаголовокВФайлПротокола = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУказанияКомандногоФайла()
	
	#Если НЕ ВебКлиент Тогда
		
		Попытка
			
			// Чтение командного XML-файла
			ЧтениеФайлаПараметров = Новый ЧтениеXML;
			ЧтениеФайлаПараметров.ОткрытьФайл(Объект.РабочийКаталог + ""ПараметрыЗапускаТестируемогоПриложения.xml"");
			ЧтениеФайлаПараметров.Прочитать();
			Если ЧтениеФайлаПараметров.ТипУзла <> ТипУзлаXML.НачалоЭлемента
				ИЛИ ЧтениеФайлаПараметров.Имя <> ""ПараметрыЗапускаТестируемогоПриложения"" Тогда
				
				ТекстДляФайла = НСтр(""ru = 'Неверный формат файла параметров тестирования:
					|Отсутствует обязательный элемент <ПараметрыЗапускаТестируемогоПриложения>'"");
				
				СцТ_ИнформационноеСообщение(""ERR"", ТекстДляФайла, """");
				СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
				Возврат;
			КонецЕсли;
			
			АтрибутыУзлаПараметров = СцТ_АтрибутыУзла(ЧтениеФайлаПараметров);
			СцТ_ВидДействияАвтоматическогоЗапуска = Строка(АтрибутыУзлаПараметров[""ДЕЙСТВИЕ""]);
			СцТ_ВидКлиентаАвтоматическогоЗапуска  = Число(Строка(АтрибутыУзлаПараметров[""ВИДКЛИЕНТА""]));
			
			ЧтениеФайлаПараметров.Закрыть();
		Исключение
			ТекстДляФайла = НСтр(""ru = 'Ошибка при чтении файла параметров тестирования: %1'"");
			ТекстДляФайла = СтрЗаменить(ТекстДляФайла, ""%1"", СцТ_ПредставлениеИсключения(ИнформацияОбОшибке()));
			
			СцТ_ИнформационноеСообщение(""ERR"", ТекстДляФайла, """");
			СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
			Возврат;
			
		КонецПопытки;
		
		Если СцТ_ВидКлиентаАвтоматическогоЗапуска = 2 Тогда
			// для веб-клиента
			
			ПутьКИсполняемомуФайлуОбозревателя = Строка(АтрибутыУзлаПараметров[""ПУТЬКИСПОЛНЯЕМОМУФАЙЛУОБОЗРЕВАТЕЛЯ""]);
			СцТ_URLИнформационнойБазы          = Строка(АтрибутыУзлаПараметров[""URLИНФОРМАЦИОННОЙБАЗЫ""]);
			СцТ_ПортПриложенияНаВебСервере     = Строка(АтрибутыУзлаПараметров[""ПОРТПРИЛОЖЕНИЯНАВЕБСЕРВЕРЕ""]);
			СцТ_ИмяКомпьютераИБ                = Строка(АтрибутыУзлаПараметров[""КОМПЬЮТЕР""]);
			
			ОписаниеОшибкиВеб = """";
			
			Если ПустаяСтрока(ПутьКИсполняемомуФайлуОбозревателя) Тогда
				ОписаниеОшибкиВеб = НСтр(""ru = 'Не указан путь к исполняемому файлу интернет-обозревателя'"");
			Иначе
				
				
				//ОписательФайла = Новый Файл(ПутьКИсполняемомуФайлуОбозревателя);
				//Если НЕ ОписательФайла.Существует() Тогда
				//	ОписаниеОшибкиВеб = НСтр(""ru = 'Не обнаружен исполняемый файл интернет-обозревателя ('"")
				//		+ ПутьКИсполняемомуФайлуОбозревателя + "")"";
				//ИначеЕсли ОписательФайла.ЭтоКаталог() Тогда
				//	ОписаниеОшибкиВеб = НСтр(""ru = 'Переданный путь интернет-обозревателя является путем каталога ('"")
				//		+ ПутьКИсполняемомуФайлуОбозревателя + "")"";
				//Иначе
				//	Если ПустаяСтрока(СцТ_URLИнформационнойБазы) Тогда
				//		ОписаниеОшибкиВеб = НСтр(""ru = 'Не указан URL информационной базы'"");
				//	Иначе
						Попытка
							СцТ_ПортПриложенияНаВебСервере = Число(СцТ_ПортПриложенияНаВебСервере);
						Исключение
							ОписаниеОшибкиВеб = НСтр(""ru = 'Указан неверный порт приложения на веб-сервере ('"")
								+ СцТ_ПортПриложенияНаВебСервере + "")"";
						КонецПопытки;
				//	КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(ОписаниеОшибкиВеб) Тогда
				
				Если СцТ_ПортПриложенияНаВебСервере < 1
					ИЛИ СцТ_ПортПриложенияНаВебСервере > 65538
					ИЛИ Цел(СцТ_ПортПриложенияНаВебСервере) <> СцТ_ПортПриложенияНаВебСервере Тогда
					ОписаниеОшибкиВеб = НСтр(""ru = 'Указан неверный порт приложения на веб-сервере ('"")
						+ СцТ_ПортПриложенияНаВебСервере
						+ НСтр(""ru = '). Значение порта должно быть целым числом в диапазоне от 1 до 65535 включительно'"");
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ОписаниеОшибкиВеб) Тогда
				СцТ_ИнформационноеСообщение(""ERR"", ОписаниеОшибкиВеб, """");
				СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
				
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если  СцТ_ВидДействияАвтоматическогоЗапуска <> ""ОткрытьПредприятие""
			И СцТ_ВидДействияАвтоматическогоЗапуска <> ""ОткрытьПредприятиеСОбработкой""
			И СцТ_ВидДействияАвтоматическогоЗапуска <> ""ОткрытьСценарийВРежимеВыполнения""
			И СцТ_ВидДействияАвтоматическогоЗапуска <> ""ОткрытьСценарийВРежимеЗаписи""
			И СцТ_ВидДействияАвтоматическогоЗапуска <> ""ВыполнитьСценарий"" Тогда
			
			ТекстДляФайла = НСтр(""ru = 'Неизвестный тип действия тестирования (%1)'"");
			ТекстДляФайла = СтрЗаменить(ТекстДляФайла, ""%1"", СцТ_ВидДействияАвтоматическогоЗапуска);
			
			СцТ_ИнформационноеСообщение(""ERR"", ТекстДляФайла, """");
			СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
			Возврат;
			
		КонецЕсли;
		
		Если    СцТ_ВидДействияАвтоматическогоЗапуска = ""ОткрытьСценарийВРежимеЗаписи""
			ИЛИ СцТ_ВидДействияАвтоматическогоЗапуска = ""ОткрытьСценарийВРежимеВыполнения""
			ИЛИ СцТ_ВидДействияАвтоматическогоЗапуска = ""ВыполнитьСценарий"" Тогда
			
			ТекстДляФайла = НСтр(""ru = 'Обработка открыта в менеджере тестирования'"");
			
			СцТ_ИнформационноеСообщение(""OK"", ТекстДляФайла, """");
			
			// Открытие выполнятся в обработчике ожидания, чтобы главная форма
			// обработки отобразилась на экране, иначе форма не отобразится
			// до окончания открытия файла сценария
			ПутьФайлаСценарияДляАвтоОткрытия = Объект.РабочийКаталог + ""Сценарий.xml"";
			ПодключитьОбработчикОжидания(""СцТ_ОткрытьСценарийАвто"", 0.1, Истина);
			
		Иначе
			ТекстДляФайла = НСтр(""ru = 'Обработка открыта в менеджере тестирования'"");
			СцТ_ИнформационноеСообщение(""OK"", ТекстДляФайла, """");
			
			Если СцТ_ОстановленИзКонфигурацииСТ() Тогда
				СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры


&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	
	Элементы.ПоказатьОкноЭталоннойБазы.Пометка = НЕ Элементы.ПоказатьОкноЭталоннойБазы.Пометка;
	Элементы.СвертываемаяГруппаЭталоннойБазы.Видимость = Элементы.ПоказатьОкноЭталоннойБазы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_НайтиЭлементФормыПоСтруктуреПути(
	Знач ЭлементВладелец,
	СтруктураПути,
	ИндексТекущегоЭлементаПути = Неопределено,
	БезТаймаута = Ложь)
	
	Если ИндексТекущегоЭлементаПути = Неопределено Тогда
		ИндексТекущегоЭлементаПути = 1;
	КонецЕсли;
	
	Если СтруктураПути.Количество() < ИндексТекущегоЭлементаПути Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейСтруктуры = ""Str_"" + Формат(ИндексТекущегоЭлементаПути, ""ЧГ=0"");
	СтруктураТекущегоЭлемента = СтруктураПути[ИмяТекущейСтруктуры];
	
	ТипЭлемента       = СтруктураТекущегоЭлемента.ТипОбъекта;
	ИмяЭлемента       = СтруктураТекущегоЭлемента.ИмяОбъекта;
	ЗаголовокЭлемента = СтруктураТекущегоЭлемента.ЗаголовокОбъекта;
	
	Если ТипЭлемента = Неопределено Тогда
		Возврат Неопределено;
		
	ИначеЕсли ТипЗнч(ТипЭлемента) <> Тип(""Тип"") Тогда
		ТипЭлемента = СцТ_ТипТестируемогоОбъектаИзЧисла(ТипЭлемента);
		
	КонецЕсли;
	
	Если Лев(ИмяЭлемента, 1) = ""$"" ИЛИ ПустаяСтрока(ИмяЭлемента) Тогда
		ИмяЭлемента = Неопределено;
	КонецЕсли;
	
	Если Лев(ЗаголовокЭлемента, 1) = ""$"" ИЛИ ПустаяСтрока(ЗаголовокЭлемента) Тогда
		ЗаголовокЭлемента = Неопределено;
	КонецЕсли;
	
	НайденныеЭлементы = ЭлементВладелец.НайтиОбъекты(
		ТипЭлемента,
		ЗаголовокЭлемента,
		ИмяЭлемента,
		?(БезТаймаута, 0, ТаймаутПоискаИнтерактивныхОбъектов));
		
	ПодчиненныеВладельцуЭлементы = ЭлементВладелец.ПолучитьПодчиненныеОбъекты();
	
	// Удаление из массива найденных элементов, элементов, которых нет среди подчиненных
	
	КоличествоНайденных = НайденныеЭлементы.Количество();
	Если КоличествоНайденных > 0 Тогда
		Для ОбратныйИНдекс = 1 ПО КоличествоНайденных Цикл
			НайденныйЭлемент =  НайденныеЭлементы[КоличествоНайденных - ОбратныйИНдекс];
			Если ПодчиненныеВладельцуЭлементы.Найти(НайденныйЭлемент) = Неопределено Тогда
				// Этот элемент не принадлежит напрямую этому владельцу
				НайденныеЭлементы.Удалить(КоличествоНайденных - ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НайденныеЭлементы.Количество() = 0 Тогда
		Возврат Неопределено;
		
	Иначе
		Если СтруктураПути.Количество() = ИндексТекущегоЭлементаПути Тогда
			Возврат НайденныеЭлементы;
			
		Иначе
			ВозвращаемыйМассив = Новый Массив;
			ИндексСледующегоЭлемента = ИндексТекущегоЭлементаПути + 1;
			Для каждого НайденныйЭлемент Из НайденныеЭлементы Цикл
				МассивНайденныхЭлементов = СцТ_НайтиЭлементФормыПоСтруктуреПути(
					НайденныйЭлемент,
					СтруктураПути,
					ИндексСледующегоЭлемента,
					БезТаймаута);
				
				Если МассивНайденныхЭлементов <> Неопределено
					И МассивНайденныхЭлементов.Количество() > 0 Тогда
					
					Для каждого ЭлементМассива Из МассивНайденныхЭлементов Цикл
						ВозвращаемыйМассив.Добавить(ЭлементМассива);
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
			
			Если ВозвращаемыйМассив.Количество() = 0 Тогда
				Возврат Неопределено;
			Иначе
				Возврат ВозвращаемыйМассив;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции



&НаКлиенте
Процедура ВывестиСведенияОСтроке(ДанныеШага, СтруктураНастроек, ВМС)
	
	СтруктураФлагов = СтруктураНастроек[ДанныеШага.ТипШага];
	
	Если НЕ СтруктураФлагов.Активность Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураФлагов.Наименование Тогда
		
		ВозвращаемаяСтруктура = Новый Структура;
		ВозвращаемаяСтруктура.Вставить(""Текст""     , ДанныеШага.Наименование);
		
		Если ДанныеШага.ТипШага = ""Группа""
			ИЛИ ДанныеШага.ТипШага = ""ИнтерактивнаяАвтоГруппа""
			ИЛИ ДанныеШага.ТипШага = ""АвтоГруппа"" Тогда
			
			ВозвращаемаяСтруктура.Вставить(""Оформление"", ""Группа"");
		Иначе
			ВозвращаемаяСтруктура.Вставить(""Оформление"", ""Описание"");
		КонецЕсли;
		
		ВМС.Добавить(ВозвращаемаяСтруктура);
	КонецЕсли;
	
	Если СтруктураФлагов.АвтоОписание Тогда
		
		ВозвращаемаяСтруктура = Новый Структура;
		ВозвращаемаяСтруктура.Вставить(""Текст""     , ДанныеШага.Автоописание);
		ВозвращаемаяСтруктура.Вставить(""Оформление"", ""Описание"");
		
		ВМС.Добавить(ВозвращаемаяСтруктура);
		
	КонецЕсли;
	
	Если СтруктураФлагов.РучноеОписание Тогда
		
		ВозвращаемаяСтруктура = Новый Структура;
		ВозвращаемаяСтруктура.Вставить(""Текст""     , ДанныеШага.Описание);
		ВозвращаемаяСтруктура.Вставить(""Оформление"", ""Описание"");
		
		ВМС.Добавить(ВозвращаемаяСтруктура);
		
	КонецЕсли;
	
	Если СтруктураФлагов.ТаблицаДанных Тогда
		// Нужно заполнять в зависимости от типа шага
		
		Если ДанныеШага.ТипШага = ""ЗаполнитьОдинРеквизитФормы"" ИЛИ ДанныеШага.ТипШага = ""ЗаполнитьКолонкуТаблицы"" Тогда
			
			УзелОписанияРеквизита = СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, ""Имя"", ""РеквизитФормы"");
			Если УзелОписанияРеквизита <> Неопределено Тогда
				
				УзлыРеквизита = УзелОписанияРеквизита.ПолучитьЭлементы();
				Если УзлыРеквизита.Количество() > 0 Тогда
					
					// Вывод заголовка
					ВозвращаемаяСтруктура = Новый Структура;
					ВозвращаемаяСтруктура.Вставить(""Текст""     , ""ТекстЗаголовка""); // Нужно отличное от пустой строки значение
					ВозвращаемаяСтруктура.Вставить(""Оформление"", ""ЗаголовокТаблицы"");
					
					ВМС.Добавить(ВозвращаемаяСтруктура);
					
					// Вывод данных
					
					УзелРеквизита = УзлыРеквизита.Получить(0);
					
					СтруктураЗаполнения = Новый Структура;
					
					СтруктураЗаполнения.Вставить(""Название"", УзелРеквизита.Имя);
					СтруктураЗаполнения.Вставить(""Значение"", УзелРеквизита.Значение);
					СтруктураЗаполнения.Вставить(""Способ""  , СцТ_НачатьСоСтрочногоСимвола(СцТ_ПолучитьПредставлениеДействияСПолемФормы(УзелРеквизита.Действие)));
					
					ВозвращаемаяСтруктура = Новый Структура;
					ВозвращаемаяСтруктура.Вставить(""Текст""     , СтруктураЗаполнения);
					ВозвращаемаяСтруктура.Вставить(""Оформление"", ""СтрокаТаблицы"");
					
					ВМС.Добавить(ВозвращаемаяСтруктура);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ДанныеШага.ТипШага = ""ЗаполнитьРеквизитыФормы"" ИЛИ ДанныеШага.ТипШага = ""ЗаполнитьСтрокуТаблицы"" Тогда
			УзелОписанияРеквизитов = СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, ""Имя"", ""Реквизиты"");
			Если УзелОписанияРеквизитов <> Неопределено Тогда
				
				Если УзелОписанияРеквизитов.ПолучитьЭлементы().Количество() > 0 Тогда
					
					// Вывод заголовка
					ВозвращаемаяСтруктура = Новый Структура;
					ВозвращаемаяСтруктура.Вставить(""Текст""     , ""ТекстЗаголовка""); // Нужно отличное от пустой строки значение
					ВозвращаемаяСтруктура.Вставить(""Оформление"", ""ЗаголовокТаблицы"");
					
					ВМС.Добавить(ВозвращаемаяСтруктура);
					
					// Вывод данных
					
				
					Для каждого УзелРеквизита Из УзелОписанияРеквизитов.ПолучитьЭлементы() Цикл
						Если НЕ УзелРеквизита.Активность Тогда
							Продолжить;
						КонецЕсли;
						
						СтруктураЗаполнения = Новый Структура;
						
						СтруктураЗаполнения.Вставить(""Название"", УзелРеквизита.Имя);
						СтруктураЗаполнения.Вставить(""Значение"", УзелРеквизита.Значение);
						СтруктураЗаполнения.Вставить(""Способ""  , СцТ_НачатьСоСтрочногоСимвола(СцТ_ПолучитьПредставлениеДействияСПолемФормы(УзелРеквизита.Действие)));
						
						ВозвращаемаяСтруктура = Новый Структура;
						ВозвращаемаяСтруктура.Вставить(""Текст""     , СтруктураЗаполнения);
						ВозвращаемаяСтруктура.Вставить(""Оформление"", ""СтрокаТаблицы"");
						
						ВМС.Добавить(ВозвращаемаяСтруктура);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ДанныеШага.ТипШага = ""Воспроизвести"" ИЛИ ДанныеШага.ТипШага = ""СравнитьСЭталоном"" Тогда
			
			// Шапка
			УзелОписанияРеквизитов = СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, ""Имя"", ""Реквизиты"");
			Если УзелОписанияРеквизитов <> Неопределено Тогда
				
				Если УзелОписанияРеквизитов.ПолучитьЭлементы().Количество() > 0 Тогда
					
					// Вывод заголовка
					ВозвращаемаяСтруктура = Новый Структура;
					ВозвращаемаяСтруктура.Вставить(""Текст""     , ""ТекстЗаголовка""); // Нужно отличное от пустой строки значение
					ВозвращаемаяСтруктура.Вставить(""Оформление"", ""ЗаголовокТаблицы"");
					
					ВМС.Добавить(ВозвращаемаяСтруктура);
					
					// Вывод данных
					
				
					Для каждого УзелРеквизита Из УзелОписанияРеквизитов.ПолучитьЭлементы() Цикл
						Если НЕ УзелРеквизита.Активность Тогда
							Продолжить;
						КонецЕсли;
						
						СтруктураЗаполнения = Новый Структура;
						
						СтруктураЗаполнения.Вставить(""Название"", УзелРеквизита.Имя);
						СтруктураЗаполнения.Вставить(""Значение"", УзелРеквизита.Представление);
						СтруктураЗаполнения.Вставить(""Способ""  , СцТ_НачатьСоСтрочногоСимвола(СцТ_ПолучитьПредставлениеДействияСПолемФормы(УзелРеквизита.Действие)));
						
						ВозвращаемаяСтруктура = Новый Структура;
						ВозвращаемаяСтруктура.Вставить(""Текст""     , СтруктураЗаполнения);
						ВозвращаемаяСтруктура.Вставить(""Оформление"", ""СтрокаТаблицы"");
						
						ВМС.Добавить(ВозвращаемаяСтруктура);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураФлагов.Комментарий Тогда
		
		ВозвращаемаяСтруктура = Новый Структура;
		ВозвращаемаяСтруктура.Вставить(""Текст""     , ДанныеШага.Комментарий);
		ВозвращаемаяСтруктура.Вставить(""Оформление"", ""Описание"");
		
		ВМС.Добавить(ВозвращаемаяСтруктура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтерационныйВыводДанных(РодительскийУзел, СтруктураНастроек, ВМС, МассивВыделенныхСтрок = Неопределено)
	
	Для каждого ДанныеШага Из РодительскийУзел.ПолучитьЭлементы() Цикл
		
		Если НЕ ДанныеШага.Активность Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивВыделенныхСтрок <> Неопределено И МассивВыделенныхСтрок.Найти(ДанныеШага.ПолучитьИдентификатор()) = Неопределено Тогда
			// Т.е. есть выделенные строки, но этой строки среди выделенных нет
			Продолжить;
		КонецЕсли;
		
		ВывестиСведенияОСтроке(ДанныеШага, СтруктураНастроек, ВМС);
		
		ИтерационныйВыводДанных(ДанныеШага, СтруктураНастроек, ВМС, МассивВыделенныхСтрок);
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ИзменитьИлиДобавитьСсылкиШага(СсылкиШага, ИдентификаторШага, АдресТаблицыСсылок)
	
	Если ПустаяСтрока(АдресТаблицыСсылок) Тогда
		// Создание новой таблицы ссылок
		
		ИстиннаяТаблицаСсылок = СоздатьПустуюТаблицуСсылок();
		
	Иначе
		ИстиннаяТаблицаСсылок = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
		Если ИстиннаяТаблицаСсылок.Колонки.Найти(""СинонимМД"") = Неопределено Тогда
			ИстиннаяТаблицаСсылок.Колонки.Добавить(""СинонимМД""         , Новый ОписаниеТипов(""Строка""));
		КонецЕсли;
		Если ИстиннаяТаблицаСсылок.Колонки.Найти(""ПоискПоЗапросу"") = Неопределено Тогда
			ИстиннаяТаблицаСсылок.Колонки.Добавить(""ПоискПоЗапросу""         , Новый ОписаниеТипов(""Булево""));
		КонецЕсли;
		Если ИстиннаяТаблицаСсылок.Колонки.Найти(""ТекстЗапроса"") = Неопределено Тогда
			ИстиннаяТаблицаСсылок.Колонки.Добавить(""ТекстЗапроса""         , Новый ОписаниеТипов(""Строка""));
		КонецЕсли;
		
	КонецЕсли;
	
	// Сначала нужно удалить все старые ссылки этого шага
	КоличествоСтрок = ИстиннаяТаблицаСсылок.Количество();
	
	Если КоличествоСтрок > 0 Тогда
		Для ОбрИндекс = 1 По КоличествоСтрок Цикл
			СтрТабл = ИстиннаяТаблицаСсылок[КоличествоСтрок - ОбрИндекс];
			ИндексВМассиве = СтрТабл.МассивУИШ.Найти(ИдентификаторШага);
			Если ИндексВМассиве <> Неопределено Тогда
				Если СтрТабл.МассивУИШ.Количество() = 1 Тогда
					// Ссылка только для этого шага
					ИстиннаяТаблицаСсылок.Удалить(КоличествоСтрок - ОбрИндекс);
				Иначе
					// Ссылка есть в других шагах
					СтрТабл.МассивУИШ.Удалить(ИндексВМассиве);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Добавление новой ссылки или добавление информации о шаге для существующей
	Для каждого СтрСсылки Из СсылкиШага Цикл
		ЗарегистрированныеСсылки = ИстиннаяТаблицаСсылок.НайтиСтроки(Новый Структура(""Ссылка"", СтрСсылки.СтрокаИдентификатора));
		Если ЗарегистрированныеСсылки.Количество() = 0 Тогда
			// Ссылка еще не зарегистрирована. Добавление
			ДобавитьСсылкуВТаблицуСсылок(СтрСсылки, ИстиннаяТаблицаСсылок, ИдентификаторШага);
			
		Иначе
			Заргистрирована = Ложь;
			Для каждого СтрокаЗарегистрированнойСсылки Из ЗарегистрированныеСсылки Цикл
				// Ссылка считается совпадающей, если у нее совпадает еще и структура идентификации
				СИ_Существующей = СтрокаЗарегистрированнойСсылки.СтруктураИдентификации;
				СИ_Существующей.Сортировать(""Имя"");
				
				Си_Добавляемой = СтрСсылки.СтруктураИдентификации;
				Если Си_Добавляемой.Количество() <> СИ_Существующей.Количество() Тогда
					Продолжить;
				КонецЕсли;
				
				Ошибка = Ложь;
				Для каждого СИД Из СИ_Добавляемой Цикл
					СИС = СИ_Существующей.Найти(СИД.Имя, ""Имя"");
					Если СИС = Неопределено Тогда
						Ошибка = Истина;
						Продолжить;
					КонецЕсли;
					
					Если СИС.СокрТипЗначения  <> СИД.СокрТипЗначения
						ИЛИ СИС.Представление <> СИД.Представление
						ИЛИ СИС.Значение      <> СИД.Значение Тогда
						Ошибка = Истина;
						Продолжить;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ Ошибка Тогда
					// Структура ссылки совпадает. МОжно просто добавить идентификатор шага в таблицу
					СтрокаЗарегистрированнойСсылки.МассивУИШ.Добавить(ИдентификаторШага);
					Заргистрирована = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ Заргистрирована Тогда
				// Сылки в таблице ссылок есть, но они отличаются структурой идентификации.
				// Нужно регистрировать новой строкой
				ДобавитьСсылкуВТаблицуСсылок(СтрСсылки, ИстиннаяТаблицаСсылок, ИдентификаторШага);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	АдресТаблицыСсылок = ПоместитьВоВременноеХранилище(ИстиннаяТаблицаСсылок, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьПустуюТаблицуСсылок()
	
	ИстиннаяТаблицаСсылок = Новый ТаблицаЗначений;
	ИстиннаяТаблицаСсылок.Колонки.Добавить(""Ссылка""                 , Новый ОписаниеТипов(""Строка""));
	ИстиннаяТаблицаСсылок.Колонки.Добавить(""ТипМД""                  , Новый ОписаниеТипов(""Строка""));
	ИстиннаяТаблицаСсылок.Колонки.Добавить(""ИмяМД""                  , Новый ОписаниеТипов(""Строка""));
	ИстиннаяТаблицаСсылок.Колонки.Добавить(""Представление""          , Новый ОписаниеТипов(""Строка""));
	ИстиннаяТаблицаСсылок.Колонки.Добавить(""СинонимМД""              , Новый ОписаниеТипов(""Строка""));
	ИстиннаяТаблицаСсылок.Колонки.Добавить(""СоответствиеСсылок"");
	ИстиннаяТаблицаСсылок.Колонки.Добавить(""СтруктураИдентификации"");
	ИстиннаяТаблицаСсылок.Колонки.Добавить(""МассивУИШ"");
	ИстиннаяТаблицаСсылок.Колонки.Добавить(""ПоискПоЗапросу""         , Новый ОписаниеТипов(""Булево""));
	ИстиннаяТаблицаСсылок.Колонки.Добавить(""ТекстЗапроса""           , Новый ОписаниеТипов(""Строка""));
	
	ИстиннаяТаблицаСсылок.Индексы.Добавить(""Ссылка"");
	
	Возврат ИстиннаяТаблицаСсылок;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСсылкуВТаблицуСсылок(СтрСсылки, ИстиннаяТаблицаСсылок, ИдентификаторШага)
	
	НоваяСтрокаСсылки = ИстиннаяТаблицаСсылок.Добавить();
	НоваяСтрокаСсылки.Ссылка         = СтрСсылки.СтрокаИдентификатора;
	НоваяСтрокаСсылки.ТипМД          = СтрСсылки.ТипМД;
	НоваяСтрокаСсылки.ИмяМД          = СтрСсылки.ИмяМД;
	НоваяСтрокаСсылки.Представление  = СтрСсылки.Представление;
	НоваяСтрокаСсылки.СинонимМД      = СтрСсылки.СинонимМД;
	
	Если НоваяСтрокаСсылки.МассивУИШ = Неопределено Тогда
		НоваяСтрокаСсылки.МассивУИШ = Новый Массив;
	КонецЕсли;
	
	НоваяСтрокаСсылки.МассивУИШ.Добавить(ИдентификаторШага);
	
	Если НоваяСтрокаСсылки.СтруктураИдентификации = Неопределено Тогда
		НоваяСтрокаСсылки.СтруктураИдентификации = Новый ТаблицаЗначений;
		НоваяСтрокаСсылки.СтруктураИдентификации.Колонки.Добавить(""Имя""            , Новый ОписаниеТипов(""Строка""));
		НоваяСтрокаСсылки.СтруктураИдентификации.Колонки.Добавить(""Представление""  , Новый ОписаниеТипов(""Строка""));
		НоваяСтрокаСсылки.СтруктураИдентификации.Колонки.Добавить(""Значение"");
		НоваяСтрокаСсылки.СтруктураИдентификации.Колонки.Добавить(""СокрТипЗначения"", Новый ОписаниеТипов(""Строка""));
	КонецЕсли;
	
	Для Каждого СтрСИ Из СтрСсылки.СтруктураИдентификации ЦИкл
		НоваяСИ = НоваяСтрокаСсылки.СтруктураИдентификации.Добавить();
		НоваяСИ.Имя             = СтрСИ.Имя;
		НоваяСИ.Представление   = СтрСИ.Представление;
		НоваяСИ.Значение        = СтрСИ.Значение;
		НоваяСИ.СокрТипЗначения = СтрСИ.СокрТипЗначения;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти







///////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРУТКРОЙ ИДЕНТИФИКАЦИИ В ФОРМАХ НАСТРОЙКИ ШАГА

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруИдентификацииПоОбщейТаблице(АдресТаблицыСсылок, ИдентификаторСсылки)
	
	Если ПустаяСтрока(АдресТаблицыСсылок) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИстиннаяТаблица = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
	
	НужнаяСтрока = ИстиннаяТаблица.Найти(ИдентификаторСсылки, ""Ссылка"");
	Если НужнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	
	СтруктураИдентификации = Новый Массив;
	
	СтруктураОтвета.Вставить(""ТипМД""         , НужнаяСтрока.ТипМД);
	СтруктураОтвета.Вставить(""ИмяМД""         , НужнаяСтрока.ИмяМД);
	//СтруктураОтвета.Вставить(""СинонимМД""     , НужнаяСтрока.СинонимМД);
	СтруктураОтвета.Вставить(""СинонимМД""     , """");
	СтруктураОтвета.Вставить(""Представление"" , НужнаяСтрока.Представление);
	СтруктураОтвета.Вставить(""Идентификатор"" , НужнаяСтрока.Ссылка);
	СтруктураОтвета.Вставить(""ПоискПоЗапросу"", НужнаяСтрока.ПоискПоЗапросу);
	СтруктураОтвета.Вставить(""ТекстЗапроса""  , НужнаяСтрока.ТекстЗапроса);
	СтруктураОтвета.Вставить(""СтруктураИдентификации"", СтруктураИдентификации);
	
	Для каждого СтрИ Из НужнаяСтрока.СтруктураИдентификации Цикл
		СИ = Новый Структура;
		СИ.Вставить(""Имя""            , СтрИ.Имя);
		СИ.Вставить(""Представление""  , СтрИ.Представление);
		СИ.Вставить(""Значение""       , СтрИ.Значение);
		СИ.Вставить(""СокрТипЗначения"", СтрИ.СокрТипЗначения);
		СтруктураОтвета.СтруктураИдентификации.Добавить(СИ);
	КонецЦикла;
	
	Возврат СтруктураОтвета;
	
КонецФункции


&НаКлиенте
Процедура СцТ_УправлениеРежимомВыполнения(РучноеПереключение = Ложь)
	
	Если СцТ_РежимВыполнения Тогда
		Элементы.СтраницыРежимаВыполнения.ТекущаяСтраница = Элементы.СтраницаВыполнение;
		
	Иначе
		Элементы.СтраницыРежимаВыполнения.ТекущаяСтраница = Элементы.СтраницаРедактирование;
		
	КонецЕсли;
	
	СцТ_УстановитьЗаголовокФормы_НаКлиенте();
	Если РучноеПереключение Тогда
		СцТ_НастроитьВнешнийВидФормы_НаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаВыполнениеНажатие(Элемент)
	
	СцТ_РежимВыполнения = Ложь;
	СцТ_УправлениеРежимомВыполнения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаРедактированиеНажатие(Элемент)
	
	СцТ_РежимВыполнения = Истина;
	СцТ_УправлениеРежимомВыполнения(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура СцТ_ПодготовитьсяКВыполнениюШага()
	
	Если СцТ_ФормаВыполнения <> Неопределено Тогда
		СцТ_ФормаВыполнения.СцТ_ПодготовитьсяКВыполнениюШага();
	КонецЕсли;
	
КонецПроцедуры


// Окончание выполнения шага Пауза
//
&НаКлиенте
Процедура СцТ_ЗакончитьВыполнениеШага_Пауза()
	
	// Нужно отключить оповещение пользователя об ожидании
	ОтключитьОбработчикОжидания(""СцТ_ОбработчикОповещенияОбОжидании"");
	
	Если СцТ_ОстановкаПоИнициативеПользователя Тогда
		Возврат;
	КонецЕсли;
	
	Если СцТ_ФормаВыполнения <> Неопределено Тогда
		СцТ_ФормаВыполнения.СцТ_ЗакончитьВыполнениеШага_Пауза();
	КонецЕсли;
	
	//ТекущиеДанные = ФормаШагов.БлокСценария.НайтиПоИдентификатору(
	//	ФормаШагов.СцТ_ИдентификаторТекущегоШагаСценария);
	//
	//СцТ_ВыполнитьТекущийШагТеста(ТекущиеДанные);
	
КонецПроцедуры

// Оповещение клиента об оставшемся времени во время отработки паузы
&НаКлиенте
Процедура СцТ_ОбработчикОповещенияОбОжидании()
	
	Если СцТ_ОстановкаПоИнициативеПользователя Тогда
		ОтключитьОбработчикОжидания(""СцТ_ОбработчикОповещенияОбОжидании"");
		ОтключитьОбработчикОжидания(""СцТ_ЗакончитьВыполнениеШага_Пауза"");
		Возврат;
	КонецЕсли;
	
	СцТ_ВремяОжиданияОстаток = СцТ_ВремяОжиданияОстаток - 5;
	ОсталосьМинут  = Цел(СцТ_ВремяОжиданияОстаток / 60);
	ОсталосьСекунд = СцТ_ВремяОжиданияОстаток - ОсталосьМинут * 60;
	
	ТекстОВремениОжидания = НСтр(""ru = 'Осталось'"");
	
	Если ОсталосьМинут > 0 Тогда
		ТекстОВремениОжидания = ТекстОВремениОжидания + "" "" + Строка(ОсталосьМинут) + "" мин."";
	КонецЕсли;
	
	ТекстОВремениОжидания = ТекстОВремениОжидания + "" "" + Строка(ОсталосьСекунд) + "" сек."";
	
	Если СцТ_ВнешнееУправлениеОбработкой = ""ПосредствомФайлов"" Тогда
		
		ТекстСообщения = НСтр(""ru = 'Обработка ожидания. %1'"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", ТекстОВремениОжидания);
		
		СцТ_ИнформационноеСообщение(""OK"", ТекстСообщения, """");
		
	Иначе
		ПоказатьОповещениеПользователя(НСтр(""ru = 'Обработка ожидания'""),,ТекстОВремениОжидания);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СцТ_ОткрытьФормуМакрошагаДляВыполнения()
	
	Если СцТ_ФормаВыполнения <> Неопределено Тогда
		СцТ_ФормаВыполнения.СцТ_ОткрытьФормуМакрошагаДляВыполнения();
	КонецЕсли;
	
КонецПроцедуры


// Добавление таблицы значений в ветку дерева значений
// параметры
//	УзелТаблицыВДереве - узел таблицы, в который добавляются данные о таблице,
//	ИсходнаяТаблица - исходная таблица значений,
//	ШаблонТаблицы - шаблон таблицы - ветка дерева,
//	МассивРеквизитовИсключений - массив имен реквизитов исключений,
//	Действие - действие по умолчанию
//	КлючевыеПоля = Неопределено - массив ключей
//	НастройкаОбновления  - настройка обновления
//	ПротоколОбновленияРеквизитовТЧ - протокол для записи обновления
&НаСервереБезКонтекста
Процедура СцТ_ДобавитьТаблицуЗначенийВВеткуДерева_НаСервере(
	УзелТаблицыВДереве,
	ИсходнаяТаблица,
	ШаблонТаблицы,
	МассивРеквизитовИсключений,
	Действие,
	КлючевыеПоля = Неопределено,
	НастройкаОбновления = Неопределено,
	ПротоколОбновленияРеквизитовТЧ = """",
	МассивИдентификацииСсылок = Неопределено,
	АдресТаблицыКлючей)
	
	// Заполнение списка колонок и сортировка по алфавиту
	// Колонка номера строки должна быть первой (если она есть)
	СписокКолонок = Новый СписокЗначений;
	ЕстьНомерСтроки = Ложь;
	Для каждого Колонка Из ИсходнаяТаблица.Колонки Цикл
		Если Колонка.Имя = ""НомерСтроки"" Тогда
			ЕстьНомерСтроки = Истина;
			// Добавление этой колонки будет позже
		Иначе
			СписокКолонок.Добавить(Колонка.Имя, Колонка.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	СписокКолонок.СортироватьПоПредставлению();
	Если ЕстьНомерСтроки Тогда
		СписокКолонок.Вставить(0, ""НомерСтроки"", ""Номер строки"");
	КонецЕсли;
	
	// Заполнение строки шапки
	УзелШапкиТаблицы = СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
		УзелТаблицыВДереве,
		""ШапкаТаблицы"",
		""Шапка таблицы"",
		""ШапкаТаблицы"");
	
	ШапкаЗаполненаПоШаблону = Ложь;
	Если ШаблонТаблицы <> Неопределено Тогда
		
		ПротоколУдаленияРеквизитовТЧ = """";
		ШаблонШапки = ШаблонТаблицы.Строки.Найти(""ШапкаТаблицы"", ""Имя"");
		Если ШаблонШапки <> Неопределено Тогда
			ШапкаЗаполненаПоШаблону = Истина;
			// Заполнение шапки таблицы по шаблону
			
			Для каждого СтрокаШаблонаШапки Из ШаблонШапки.Строки Цикл
				ЭлементСпискаКолонок = СписокКолонок.НайтиПоЗначению(СтрокаШаблонаШапки.Имя);
				Если ЭлементСпискаКолонок = Неопределено Тогда
					// Отличие шаблона и таблицы. Вероятно конфигурация изменилась
					// со времени создания шаблона
					СтрокаПротокола = НСтр(""ru = 'Удален реквизит """"%1"""" %2 """"%3""""'"");
					СтрокаПротокола = СтрЗаменить(СтрокаПротокола, ""%1"", СтрокаШаблонаШапки.Синоним);
					Если УзелТаблицыВДереве.ТипУзла = ""ДвижениеПоРегистру"" Тогда
						СтрокаПротокола = СтрЗаменить(СтрокаПротокола, ""%2"", НСтр(""ru = 'движения'""));
					Иначе
						СтрокаПротокола = СтрЗаменить(СтрокаПротокола, ""%2"", НСтр(""ru = 'табличной части'""));
					КонецЕсли;
					СтрокаПротокола = СтрЗаменить(СтрокаПротокола, ""%3"", ШаблонТаблицы.Имя);
					СцТ_ДобавитьПодстроку_НаСервере(ПротоколУдаленияРеквизитовТЧ, СтрокаПротокола);
					Продолжить;
				Иначе
					// Отметка об использовании колонки
					ЭлементСпискаКолонок.Пометка = Истина;
					// Копирование строки шаблона
					СтрокаШапкиТаблицы = СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
						УзелШапкиТаблицы,
						СтрокаШаблонаШапки.Имя,
						СтрокаШаблонаШапки.Синоним,
						20,
						СтрокаШаблонаШапки.Активность,
						СтрокаШаблонаШапки.Действие,
						,
						СтрокаШаблонаШапки.Кл,
						МассивИдентификацииСсылок,
						АдресТаблицыКлючей);
						
				КонецЕсли;
			КонецЦикла;
			
			// Таблица могла измениться относительно шаблона,
			// поэтому добавление колонок, которых не было в шаблоне
			Если НастройкаОбновления = Неопределено
				ИЛИ (УзелТаблицыВДереве.ТипУзла <> ""ДвижениеПоРегистру""
						И НастройкаОбновления.ДобавитьНовыеРеквизитыСуществующихТЧ = Истина)
				ИЛИ (УзелТаблицыВДереве.ТипУзла = ""ДвижениеПоРегистру""
						И НастройкаОбновления.ДобавитьНовыеРеквизитыСуществующихДвижений = Истина) Тогда
				
				Для каждого ЭлементСпискаКолонок Из СписокКолонок Цикл
					Если НЕ ЭлементСпискаКолонок.Пометка Тогда
						
						Если УзелТаблицыВДереве.ТипУзла = ""ДвижениеПоРегистру"" Тогда
							Активность =
								(НастройкаОбновления = Неопределено
									ИЛИ НастройкаОбновления.АктивизацияНовыхРеквизитовДвижений = 0)
									И (МассивРеквизитовИсключений.Найти(ЭлементСпискаКолонок.Значение) = Неопределено)
								ИЛИ НастройкаОбновления <> Неопределено
									И НастройкаОбновления.АктивизацияНовыхРеквизитовДвижений = 1;
						Иначе
							Активность =
								(НастройкаОбновления = Неопределено
									ИЛИ НастройкаОбновления.АктивизацияНовыхРеквизитовТЧ = 0)
									И (МассивРеквизитовИсключений.Найти(ЭлементСпискаКолонок.Значение) = Неопределено)
								ИЛИ НастройкаОбновления <> Неопределено
									И НастройкаОбновления.АктивизацияНовыхРеквизитовТЧ = 1;
						КонецЕсли;
						
						СтрокаПротокола = НСтр(""ru = 'Добавлен реквизит """"%1"""" %2 """"%3""""'"");
						СтрокаПротокола = СтрЗаменить(СтрокаПротокола, ""%1"", ЭлементСпискаКолонок.Представление);
						Если УзелТаблицыВДереве.ТипУзла = ""ДвижениеПоРегистру"" Тогда
							СтрокаПротокола = СтрЗаменить(СтрокаПротокола, ""%2"", НСтр(""ru = 'движения'""));
						Иначе
							СтрокаПротокола = СтрЗаменить(СтрокаПротокола, ""%2"", НСтр(""ru = 'табличной части'""));
						КонецЕсли;
						СтрокаПротокола = СтрЗаменить(СтрокаПротокола, ""%3"", ШаблонТаблицы.Имя);
						СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияРеквизитовТЧ, СтрокаПротокола);
						
						СтрокаШапкиТаблицы = СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
							УзелШапкиТаблицы,
							ЭлементСпискаКолонок.Значение,
							ЭлементСпискаКолонок.Представление,
							20,
							Активность,
							Действие,
							,
							0,
							МассивИдентификацииСсылок,
							АдресТаблицыКлючей);
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПротоколУдаленияРеквизитовТЧ) Тогда
			СцТ_ДобавитьПодстроку_НаСервере(ПротоколОбновленияРеквизитовТЧ, ПротоколУдаленияРеквизитовТЧ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если шапка не заполнена по шаблону, то заполнение по-умолчанию
	Если НЕ ШапкаЗаполненаПоШаблону Тогда
		
		Для каждого ЭлементСпискаКолонок Из СписокКолонок Цикл
			
			Активность = (МассивРеквизитовИсключений.Найти(ЭлементСпискаКолонок.Значение) = Неопределено);
			
			ЭтоКлючевоеПоле = (КлючевыеПоля <> Неопределено
				И КлючевыеПоля.Найти(ЭлементСпискаКолонок.Значение) <> Неопределено);
				
			СтрокаШапкиТаблицы = СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
				УзелШапкиТаблицы,
				ЭлементСпискаКолонок.Значение,
				ЭлементСпискаКолонок.Представление,
				20,
				Активность,
				?(ЭтоКлючевоеПоле, ""Ключ"", Действие),
				,
				0,
				МассивИдентификацииСсылок,
				АдресТаблицыКлючей);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Строки таблицы можно заполнять уже по настройкам заданным в шапке
	// так как применить шаблон к ячейкам все равно не реально - 
	// количество строк может существенно отличаться
	
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		
		УзелСтрокиТаблицы = СцТ_ДобавитьУзелВДеревоЗначения_НаСервере(
			УзелТаблицыВДереве,
			""СтрокаТаблицы_"" + Строка(НомерСтроки),
			""Строка таблицы"",
			""СтрокаТаблицы"",
			НомерСтроки,
			1);
		
		Для каждого ЭлементУзлаШапки Из УзелШапкиТаблицы.Строки Цикл
			
			НовыйУзел = СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
				УзелСтрокиТаблицы,
				ЭлементУзлаШапки.Имя,
				ЭлементУзлаШапки.Синоним,
				СтрокаТаблицы[ЭлементУзлаШапки.Имя],
				ЭлементУзлаШапки.Активность,
				ЭлементУзлаШапки.Действие,
				ЭлементУзлаШапки.Скрипт,
				ЭлементУзлаШапки.Кл,
				МассивИдентификацииСсылок,
				АдресТаблицыКлючей);
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СцТ_ДобавитьОписаниеЗначениеВУзелДерева_НаСервере(
	РодительскийУзел,
	Знач Имя,
	Знач Синоним,
	Знач Значение      = Неопределено,
	Знач Активность    = 1,
	Знач Действие      = """",
	Знач Скрипт        = """",
	Знач Кл            = 0,
	МассивСсылокШага,
	Знач АдресТаблицыКлючей = """")
	
	МодульЭтойОбработки = СцТ_ПолучитьЭтуОбработку();
	
	НужныйУзел = РодительскийУзел.Строки.Найти(Имя, ""Имя"");
	
	Если НужныйУзел = Неопределено Тогда
		НужныйУзел = РодительскийУзел.Строки.Добавить();
		НужныйУзел.Имя     = Имя;
		НужныйУзел.Синоним = Синоним;
	КонецЕсли;
	
	ОписаниеЗначения = МодульЭтойОбработки.СцТ_ПолучитьОписаниеЗначения(Значение);
	
	НужныйУзел.Значение      = ОписаниеЗначения.ВнутрЗначение;
	НужныйУзел.Представление = ОписаниеЗначения.Представление;
	НужныйУзел.ТипУзла       = ОписаниеЗначения.ТипЗначения;
	
	НужныйУзел.Активность   = Активность;
	НужныйУзел.Действие     = Действие;
	НужныйУзел.Скрипт       = Скрипт;
	НужныйУзел.Кл           = Кл;
	
	Если ОписаниеЗначения.ТипЗначения = ""Ссылка"" Тогда
		МодульЭтойОбработки.СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(Значение, МассивСсылокШага,,,,АдресТаблицыКлючей);
	КонецЕсли;
	
	Возврат НужныйУзел;
	
КонецФункции

// Получение описания текущей строки таблицы формы
// Параметры
// ТаблицаНаФорме - указатель на тестируемую таблицу формы
// Возвращаемое значение
// Структура описания текущей строки таблицы
&НаКлиенте
Функция СцТ_ПолучитьОписаниеТекущейСтрокиТаблицыФормы(ТаблицаНаФорме)
	
	Результат = Новый Массив;
	
	Попытка
		ТаблицаНаФорме.Активизировать();
	Исключение
	КонецПопытки;
	
	КолонкиОбъекты = ТаблицаНаФорме.НайтиОбъекты(
		Тип(""ТестируемоеПолеФормы""),
		,
		,
		ТаймаутПоискаИнтерактивныхОбъектов);
	
	Если КолонкиОбъекты = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого КолонкаОбъект Из КолонкиОбъекты Цикл
		
		ОписаниеВида     = СцТ_ПолучитьВидОбъекта(КолонкаОбъект);
		ЗаголовокКолонки = СцТ_ЗаголовокИнтерактивногоОбъекта(КолонкаОбъект);
		ИмяКолонки       = СцТ_ИмяИнтерактивногоОбъекта(КолонкаОбъект);
		
		Попытка
			ТекущийРежимРедактирование = ТаблицаНаФорме.ТекущийРежимРедактирование();
		Исключение
			ТекущийРежимРедактирование = Ложь;
		КонецПопытки;
		
		Если ОписаниеВида.Вид = ""ПолеФлажка"" ИЛИ ТекущийРежимРедактирование Тогда
			
			Попытка
				КолонкаОбъект.Активизировать();
			Исключение
			КонецПопытки;
			
			ПредставлениеДанныхЯчейки = СцТ_ДанныеПоляФормы(КолонкаОбъект);
			
		Иначе
			
			Попытка
				ПредставлениеДанныхЯчейки = ТаблицаНаФорме.ПолучитьТекстЯчейки(ИмяКолонки);
			Исключение
				ПредставлениеДанныхЯчейки = """";
			КонецПопытки;
			
		КонецЕсли;
		
		ОписательКолонки = Новый Структура(""Вид,СинонимВида,Имя,Заголовок,Представление,Текст,Объект"",
			ОписаниеВида.Вид,
			ОписаниеВида.Синоним,
			ИмяКолонки,
			ЗаголовокКолонки,
			?(ПустаяСтрока(ЗаголовокКолонки),
			  ИмяКолонки,
			  ЗаголовокКолонки),
			ПредставлениеДанныхЯчейки,
			КолонкаОбъект
			);
		
		Результат.Добавить(ОписательКолонки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура обновления шагов бизнес-логики по данным ИБ
// Параметры
//	ШагиБЛ - структура, содержащая шаги бизнес-логики
//	АдресУстановокШагов - адрес хранения настроек
//	НастройкаОбновления - параметры обновления, выбранные пользователем
//	ПротоколОбновления - протокол обновления - возвращаемаый параметр
&НаСервереБезКонтекста
Процедура СцТ_ОбновитьДанныеШаговБЛ_НаСервере(
	ШагиБЛ,
	Знач АдресУстановокШагов,
	Знач НастройкаОбновления,
	ПротоколОбновления,
	ГлобальныеПараметры,
	АдресТаблицыСсылок,
	АдресТаблицыКлючей)
	
	ЭтаОбработка = СцТ_ПолучитьЭтуОбработку();
	
	Если ТипЗнч(ШагиБЛ) = Тип(""Структура"") Тогда
		//СцТ_ОбновитьДанныеШага(
		//	ШагиБЛ,
		//	ЭтаОбработка,
		//	АдресУстановокШагов,
		//	НастройкаОбновления,
		//	ПротоколОбновления);
		
		СцТ_ОбновитьДанныеШага(
			ШагиБЛ,
			ЭтаОбработка,
			АдресУстановокШагов,
			НастройкаОбновления,
			ПротоколОбновления,
			АдресТаблицыСсылок,
			ЭтаОбработка,
			ГлобальныеПараметры,
			АдресТаблицыКлючей);
			
	ИначеЕсли ТипЗнч(ШагиБЛ) = Тип(""Соответствие"") Тогда
		Для каждого КлючЗначение Из ШагиБЛ Цикл
			
			СцТ_ОбновитьДанныеШага(
				КлючЗначение.Значение,
				ЭтаОбработка,
				АдресУстановокШагов,
				НастройкаОбновления,
				ПротоколОбновления,
				АдресТаблицыСсылок,
				ЭтаОбработка,
				ГлобальныеПараметры,
				АдресТаблицыКлючей);
				
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Преобразование структуры с данными дерева в дерево данных
// Параметры
//	УзелДереваФормы - Узел данных дерева формы, в который нужно включить данные
//	ДеревоСтруктур - структура, содержащая данные дерева
//	ПервоеВложение - признак первого вложения
&НаКлиенте
Процедура СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(
	УзелДереваФормы,
	ДеревоСтруктур,
	ПервоеВложение = Истина)
	
	СтрокиДереваФормы = УзелДереваФормы.ПолучитьЭлементы();
	Если ПервоеВложение Тогда
		СтрокиДереваФормы.Очистить();
	КонецЕсли;
	
	Для каждого СтрокаДереваСтруктур Из ДеревоСтруктур.ИСТЗ_Строки Цикл
		СтрокаДереваФормы = СтрокиДереваФормы.Добавить();
		Для каждого КлючЗначение Из СтрокаДереваСтруктур Цикл
			Если КлючЗначение.Ключ <> ""ИСТЗ_Строки"" Тогда
				СтрокаДереваФормы[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(СтрокаДереваФормы, СтрокаДереваСтруктур, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Подготовка структуры параметров для открытия формы ссылок
// Параметры
//	СсылкаПозиционирования - указатель на строку, которая должна получить фокус
// Возвращаемое значение - Структура параметров открытия формы
&НаКлиенте
Функция СцТ_ПодготовитьПараметрыОткрытияФормыСсылок(СсылкаПозиционирования = Неопределено)
	
	ПараметрыФормыСсылок = Новый Структура;
	ПараметрыФормыСсылок.Вставить(""АдресТаблицыСсылок""           , АдресТаблицыСсылок);
	ПараметрыФормыСсылок.Вставить(""АдресТаблицыКлючей""           , АдресТаблицыКлючей);
	ПараметрыФормыСсылок.Вставить(""ИскомаяСсылка""                , ПоместитьВоВременноеХранилище(
	                                                               СсылкаПозиционирования, Новый УникальныйИдентификатор));
	ПараметрыФормыСсылок.Вставить(""ЗакрыватьПриЗакрытииВладельца"", Истина);
	
	Возврат ПараметрыФормыСсылок;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ПодготовитьИОткрытьФормуНовогоШага(
	Знач ВызвавшаяФорма,
	Знач СтруктураДанныхШага,
	Знач ОписательПоложенияШагаВДереве)
	
	НетПодчиненныхУзлов = Истина; // Это новый шаг
	
	ПараметрыФормыНастройкиШага = Новый Структура;
	ПараметрыФормыНастройкиШага.Вставить(""СтруктураДанныхШага""          , СтруктураДанныхШага);
	ПараметрыФормыНастройкиШага.Вставить(""НетПодчиненныхУзлов""          , НетПодчиненныхУзлов);
	ПараметрыФормыНастройкиШага.Вставить(""АдресНачальныхУстановокШагов"" , АдресНачальныхУстановокШагов);
	ПараметрыФормыНастройкиШага.Вставить(""АдресТаблицыСсылок""           , АдресТаблицыСсылок);
	ПараметрыФормыНастройкиШага.Вставить(""АдресДереваМакрошагов""        , АдресДереваМакрошагов);
	ПараметрыФормыНастройкиШага.Вставить(""АдресТаблицыКлючей""           , АдресТаблицыКлючей);
	ПараметрыФормыНастройкиШага.Вставить(""ЭтоНовый""                     , Истина);
	ПараметрыФормыНастройкиШага.Вставить(""ВыполнятьПреобразованиеСсылочныхТипов"", ВыполнятьПреобразованиеСсылочныхТипов);
	
	ПараметрыФормыНастройкиШага.Вставить(""ТипШага""                      , СтруктураДанныхШага.ТипШага);
	ПараметрыФормыНастройкиШага.Вставить(""Активность""                   , СтруктураДанныхШага.Активность);
	ПараметрыФормыНастройкиШага.Вставить(""ОписательПоложенияШагаВДереве"", ОписательПоложенияШагаВДереве);
	
	ПараметрыФормыНастройкиШага.Вставить(""РежимСовместимости838""        , РежимСовместимости838);
	
	ИмяФормыНастройки = ОпределитьИмяФормыНастройкиШагаПоЕгоТипу(СтруктураДанныхШага.ТипШага);
	
	Если ИмяФормыНастройки = Неопределено Тогда
		ТекстСообщения = НСтр(""ru = 'Не удалось определить форму настройки шага'"");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Возвращение результатов настройки будет выполнено посредством оповещения
	ФормаНастройкиШага = ОткрытьФорму(
		ПутьКФормам + ИмяФормыНастройки,
		ПараметрыФормыНастройкиШага,
		ВызвавшаяФорма,
		СтруктураДанныхШага.УИШ);
	
	ФормаНастройкиШага.СцТ_ГлавнаяФорма = ЭтотОбъект;
	ФормаНастройкиШага.ВызвавшаяФорма   = ВызвавшаяФорма;
	
	// Формирование заголовка формы (для однотипности)
	ЭлементОписаниеТипаШага = СписокТиповШагов.НайтиПоЗначению(СтруктураДанныхШага.ТипШага);
	Если ЭлементОписаниеТипаШага = Неопределено Тогда
		ТекстЗаголовка = НСтр(""ru = 'Неизвестный тип шага ('"") + СтруктураДанныхШага.ТипШага + "")"";
	Иначе
		ТекстЗаголовка = НСтр(""ru = 'Настройка шага """"%1""""'"");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, ""%1"", ЭлементОписаниеТипаШага.Представление);
	КонецЕсли;
	ФормаНастройкиШага.Заголовок = ТекстЗаголовка;
	
	// Регистрация открытой формы
	СцТ_ОткрытыеФормыНастройкиШагов[СтруктураДанныхШага.УИШ] = ФормаНастройкиШага;
	
	ФормаНастройкиШага.СцТ_СформироватьПредставлениеРодителя();
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИмяФормыНастройкиШагаПоЕгоТипу(ТипШага)
	
	Если ТипШага = ""ВыполнитьВРучную"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ВыполнитьВРучную"";
		
	ИначеЕсли ТипШага = ""Комментарий"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_Комментарий"";
		
	ИначеЕсли ТипШага = ""Группа"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ПользовательскаяГруппа"";
		
	ИначеЕсли ТипШага = ""АвтоГруппа"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_АвтогруппаБЛ"";
		
	ИначеЕсли ТипШага = ""Воспроизвести""
		ИЛИ ТипШага = ""СравнитьСЭталоном"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_Воспроизвести"";
		
	ИначеЕсли ТипШага = ""СравнитьДвижения""  Тогда
		ИмяФормыНастроки = ""НастройкаШага_ДвиженияДокумента"";
		
	ИначеЕсли ТипШага = ""ВыполнитьЗапрос""  Тогда
		ИмяФормыНастроки = ""НастройкаШага_ВыполнитьЗапрос"";
		
	ИначеЕсли ТипШага = ""ЗаменаСсылки""  Тогда
		ИмяФормыНастроки = ""НастройкаШага_ИспользоватьСсылку"";
		
	ИначеЕсли ТипШага = ""ВыполнитьПроцедуру""  Тогда
		ИмяФормыНастроки = ""НастройкаШага_ВыполнитьПроцедуру"";
		
	ИначеЕсли ТипШага = ""ДействиеСТаблицей"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ДействиеСТаблицей"";
		
	ИначеЕсли ТипШага = ""ИнтерактивнаяАвтоГруппа"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ИнтерактивнаяАвтогруппа"";
		
	ИначеЕсли ТипШага = ""НайтиФорму"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_НайтиФорму"";
		
	ИначеЕсли ТипШага = ""НажатьКнопкуКИ"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_НажатьКнопкуКИ"";
		
	ИначеЕсли ТипШага = ""ВыполнитьИнтерактивнуюКоманду"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ПерейтиПоНавигационнойСсылке"";
		
	ИначеЕсли ТипШага = ""ВыполнитьИнтерактивныйСкрипт"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ВыполнитьИнтерактивныйСкрипт"";
		
	ИначеЕсли ТипШага = ""ПроверитьФорму"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ПроверитьФорму"";
		
	ИначеЕсли ТипШага = ""НайтиЭлементФормы"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_НайтиЭлементФормы"";
		
	ИначеЕсли ТипШага = ""НажатьКнопку"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_НажатьКнопку"";
		
	ИначеЕсли ТипШага = ""ЗаполнитьОдинРеквизитФормы"" ИЛИ ТипШага = ""ЗаполнитьКолонкуТаблицы"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ЗаполнитьОдинЭлемент"";
		
	ИначеЕсли ТипШага = ""ЗаполнитьРеквизитыФормы"" ИЛИ ТипШага = ""ЗаполнитьСтрокуТаблицы"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ЗаполнитьЭлементыФормы"";
		
		
		
	////////////////////////////////////////
		
	ИначеЕсли ТипШага = ""АвтоГруппаТабличныйДокумент"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_АвтогруппаТабличныйДокумент"";
		
	ИначеЕсли ТипШага = ""ПроверитьТабличныйДокумент"" Тогда
		ИмяФормыНастроки = ""НастройкаШага"";
		
	ИначеЕсли ТипШага = ""ДействиеСТабДокументом"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ДействиеСТД"";
		
	ИначеЕсли ТипШага = ""ДействиеСЯчейкойТД"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ЯчейкаТД"";
		
	ИначеЕсли ТипШага = ""ЗакрытьКлиентскоеОкноФормы"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ЗакрытьОкно"";
		
	ИначеЕсли ТипШага = ""ЗавершитьРаботуТестируемогоКлиента"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ЗакрытьОкно"";
		
	ИначеЕсли ТипШага = ""АвтоГруппаТаблицаФормы"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ТаблицаФормы"";
		
	ИначеЕсли ТипШага = ""НайтиСтрокуТаблицы"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_НайтиСтрокуТаблицы"";
		
	ИначеЕсли ТипШага = ""Пауза"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_Пауза"";
		
	ИначеЕсли ТипШага = ""ВыполнитьКлиентскуюПроцедуру"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ВыполнитьКлиентскуюПроцедуру"";
		
	ИначеЕсли ТипШага = ""Повторение"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_Повторение"";
		
	ИначеЕсли ТипШага = ""Условие"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_Условие"";
		
	ИначеЕсли ТипШага = ""ВыполнитьМакрошаг"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_Макрошаг"";
		
	ИначеЕсли ТипШага = ""ПроверитьТекстОшибки"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_ТекстОшибки"";
		
	ИначеЕсли ТипШага = ""ВыбратьСообщениеПользователю"" Тогда
		ИмяФормыНастроки = ""НастройкаШага_СообщениеПользователю"";
		
	Иначе
		ИмяФормыНастроки = Неопределено;
	КонецЕсли;
	
	Возврат ИмяФормыНастроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СцТ_ДобавитьУзелВСтруктуруДереваЗначения(
	СтруктураРодительскогоУзла,
	ИмяУзла       = """",
	Значение      = Неопределено,
	СинонимУзла   = """",
	Активность    = Истина,
	Представление = """",
	Действие      = """",
	Скрипт        = """",
	ТипУзла       = """",
	Кл            = Ложь,
	ИспользоватьСуществующий = Истина)
	
	Если НЕ СтруктураРодительскогоУзла.Свойство(""ИСТЗ_Строки"") Тогда
		СтруктураРодительскогоУзла.Вставить(""ИСТЗ_Строки"", Новый Массив);
	КонецЕсли;
	
	МассивСтрок = СтруктураРодительскогоУзла.ИСТЗ_Строки;
	
	СтруктураНужнойСтроки = Неопределено;
	Если ИспользоватьСуществующий Тогда
		Для каждого СтруктураСтроки Из МассивСтрок ЦИкл
			Если СтруктураСтроки.Имя = ИмяУзла Тогда
				СтруктураНужнойСтроки = СтруктураСтроки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураНужнойСтроки = Неопределено Тогда
		СтруктураНужнойСтроки = Новый Структура(""Имя, Синоним, Активность, Значение, Представление, Действие, Скрипт, ТипУзла, Кл, ИСТЗ_Строки"");
		СтруктураНужнойСтроки.Имя = ИмяУзла;
		МассивСтрок.Добавить(СтруктураНужнойСтроки);
	КонецЕсли;
	
	СтруктураНужнойСтроки.Синоним       = СинонимУзла;
	СтруктураНужнойСтроки.Активность    = Активность;
	СтруктураНужнойСтроки.Значение      = Значение;
	СтруктураНужнойСтроки.Представление = Представление;
	СтруктураНужнойСтроки.Действие      = Действие;
	СтруктураНужнойСтроки.Скрипт        = Скрипт;
	СтруктураНужнойСтроки.ТипУзла       = ТипУзла;
	СтруктураНужнойСтроки.Кл            = Кл;
	СтруктураНужнойСтроки.ИСТЗ_Строки   = Новый Массив;
	
	Возврат СтруктураНужнойСтроки;
	
КонецФункции

// Возвращает массив колонок дерева значения (в шаге)
&НаКлиенте
Функция СцТ_КолонкиДереваЗначения()
	
	Результат = Новый Массив;
	Результат.Добавить(""Имя""          );
	Результат.Добавить(""Синоним""      );
	Результат.Добавить(""Активность""   );
	Результат.Добавить(""Значение""     );
	Результат.Добавить(""Представление"");
	Результат.Добавить(""Действие""     );
	Результат.Добавить(""Скрипт""       );
	Результат.Добавить(""ТипУзла""      );
	Результат.Добавить(""Кл""           );
	
	Возврат Результат;
	
КонецФункции

// Преобразование входящего значения в значение для хранения в сценарии
// Параметры
// ВходящееЗначение - произвольное значение
// Возвращаемое значение - значение для хранения
&НаСервереБезКонтекста
Функция СцТ_ПреобразоватьЗначениеДляХранения_НаСервере(ВходящееЗначение)
	
	ТипВхЗначения = ТипЗнч(ВходящееЗначение);
	Если ВходящееЗначение = Неопределено Тогда
		ВыходящееЗначение = Неопределено;
		
	ИначеЕсли ТипВхЗначения = Тип(""Число"")
		ИЛИ   ТипВхЗначения = Тип(""Строка"")
		ИЛИ   ТипВхЗначения = Тип(""Булево"")
		ИЛИ   ТипВхЗначения = Тип(""Дата"") Тогда
		ВыходящееЗначение = ВходящееЗначение;
		
	ИначеЕсли ТипВхЗначения = Тип(""Структура"") Тогда
		НоваяСтруктура = Новый Структура;
		Для каждого ЭлементСтруктуры Из ВходящееЗначение Цикл
			НоваяСтруктура.Вставить(
				ЭлементСтруктуры.Ключ,
				СцТ_ПреобразоватьЗначениеДляХранения_НаСервере(ЭлементСтруктуры.Значение));
		КонецЦикла;
		ВыходящееЗначение = НоваяСтруктура;
		
	ИначеЕсли ТипВхЗначения = Тип(""ХранилищеЗначения"") Тогда
		ВыходящееЗначение = XMLСтрока(ВходящееЗначение);
		
	Иначе
		ВыходящееЗначение = ЗначениеВСтрокуВнутр(ВходящееЗначение);
		
	КонецЕсли;
	
	Возврат ВыходящееЗначение;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьКраткуюИнформациюОбОшибке(СтрокаСообщения, Знач ИнфО)
	
	Если ТипЗнч(ИнфО) = Тип(""ИнформацияОбОшибке"") Тогда
		Краткое = КраткоеПредставлениеОшибки(ИнфО);
		Если Не ПустаяСтрока(Краткое) Тогда
			СтрокаСообщения = СтрокаСообщения + "":"" + "" "" + Краткое + ""."";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаСообщения = СтрокаСообщения + ""."";
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ПреобразоватьСтрокуСценарияВСтруктуруДляОбновления(УзелШага)
	
	ВозвращаемаяСтруктура = СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(УзелШага);
	РодительскийУзел = УзелШага.ПолучитьРодителя();
	Если РодительскийУзел = Неопределено Тогда
		ВозвращаемаяСтруктура.Вставить(""ИдентификаторРодителя""         , Неопределено);
		ВозвращаемаяСтруктура.Вставить(""ТипМД""                         , """");
		ВозвращаемаяСтруктура.Вставить(""ИмяМД""                         , """");
		ВозвращаемаяСтруктура.Вставить(""ПараметрыДляПолученияОбъектаИБ"", Неопределено);
		
	Иначе
		ВозвращаемаяСтруктура.Вставить(""ИдентификаторРодителя"", РодительскийУзел.ПолучитьИдентификатор());
		ВозвращаемаяСтруктура.Вставить(""ТипМД""                , РодительскийУзел.ТипМетаданных);
		ВозвращаемаяСтруктура.Вставить(""ИмяМД""                , РодительскийУзел.ИмяМетаданных);
		
		ПараметрыДляПолученияОбъектаИБ = СцТ_ПолучитьПараметрыШагаДляПоискаОбъектаИБ(РодительскийУзел);
		ВозвращаемаяСтруктура.Вставить(""ПараметрыДляПолученияОбъектаИБ"", ПараметрыДляПолученияОбъектаИБ);
		
	КонецЕсли;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ОткрытьПротокол(ПутьКФайлуПротокола = """")
	
	Если ПустаяСтрока(ПутьКФайлуПротокола) Тогда
		ИмяФайла = ИмяФайлаПротокола;
	Иначе
		ИмяФайла = ПутьКФайлуПротокола;
	КонецЕсли;
	
	//СцТ_ЧтениеJSON = Новый ЧтениеJSON;
	//СцТ_ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	//РезудьтатВыполнения = ПрочитатьJSON(СцТ_ЧтениеJSON);
	//СцТ_ЧтениеJSON.Закрыть();
	
	ДД = Новый ДвоичныеДанные(ИмяФайла);
	АдрДД = ПоместитьВоВременноеХранилище(ДД, Новый УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""АдрДД""      , АдрДД);
	ПараметрыФормы.Вставить(""ПутьКФормам"", ПутьКФормам);
	
	ПараметрыФормы.Вставить(""Расшифровка""            , Неопределено);
	ПараметрыФормы.Вставить(""СформироватьПриОткрытии"", Истина);
	
	ФормаПротокола = ОткрытьФорму(ПутьКФормам + ""ПротоколВыполнения"", ПараметрыФормы, ЭтотОбъект);
	
	ФормаПротокола.СцТ_ГлавнаяФорма = ЭтотОбъект;
	
КонецПроцедуры

// Развертывание узлов дерева в сторону владения
//
// Параметры
// УзелДереваФормы - шаг, от которого начинается развертывание
// ТаблицаФормыДерево - дерево, с которым выполняется операция
&НаКлиентеНаСервереБезКонтекста
Процедура СцТ_РазвернутьУзлыНаПутиОтУзлаККорню(УзелДереваФормы, ТаблицаФормыДерево)
	
	РодительУзла = УзелДереваФормы.ПолучитьРодителя();
	Пока РодительУзла <> Неопределено Цикл
		
		ТаблицаФормыДерево.Развернуть(РодительУзла.ПолучитьИдентификатор());
		РодительУзла = РодительУзла.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

// Получение даты по условному формату
//
&НаКлиенте
Функция СцТ_ПолучитьДатуПоУсловномуФормату_НаКлиенте(Знач СтрокаДаты, Сообщения = """")
	
	Если Найти(ВРег(СтрокаДаты), НСтр(""ru='ТЕКУЩАЯ'"")) > 0 Тогда
		Возврат ТекущаяДата();
	КонецЕсли;
	
	// Строка даты может быть только определенного формата
	// Дата(<Число>.<ММ + - кол-во месяцев>.<ГГ + - Кол-во лет>)
	// Число может принимать значение ""Последний день""
	// Разделители ТОЧКА обязательны
	
	// 1. Убираем лишнее
	СтрокаДаты = Сред(СтрокаДаты, СтрДлина(НСтр(""ru='Дата('""))+1, СтрДлина(СтрокаДаты) - СтрДлина(НСтр(""ru='Дата('"")) - 1);
	
	СтрокаДаты = СтрЗаменить(СтрокаДаты, "","", ""."");
	
	ЧислоТочки = Найти(СтрокаДаты, ""."");
	Если ЧислоТочки = 0 Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	СтрокаЧисла = СокрЛП(Сред(СтрокаДаты, 1, ЧислоТочки - 1));
	СтрокаДаты  = СокрЛП(Сред(СтрокаДаты, ЧислоТочки + 1));
	
	
	ЧислоТочки = Найти(СтрокаДаты, ""."");
	Если ЧислоТочки = 0 Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	СтрокаМесяца = СокрЛП(Сред(СтрокаДаты, 1, ЧислоТочки - 1));
	Если Найти(СтрокаМесяца, ""-"") > 0 Тогда
		МесяцОтрицательный = Истина;
	Иначе
		МесяцОтрицательный = Ложь;
	КонецЕсли;
	
	СтрокаМесяца = СокрЛП(СтрЗаменить(СтрЗаменить(СтрЗаменить(ВРег(СтрокаМесяца), ""ММ"", """"), ""-"", """"), ""+"", """"));
	Если ПустаяСтрока(СтрокаМесяца) Тогда
		СтрокаМесяца = ""0"";
	КонецЕсли;
	
	СтрокаГода   = СокрЛП(Сред(СтрокаДаты, ЧислоТочки + 1));
	Если Найти(СтрокаГода, ""-"") > 0 Тогда
		ГодОтрицательный = Истина;
	Иначе
		ГодОтрицательный = Ложь;
	КонецЕсли;
	
	СтрокаГода = СокрЛП(СтрЗаменить(СтрЗаменить(СтрЗаменить(ВРег(СтрокаГода), ""ГГ"", """"), ""-"", """"), ""+"", """"));
	Если ПустаяСтрока(СтрокаГода) Тогда
		СтрокаГода = ""0"";
	КонецЕсли;
	
	НачальныйМесяц = Месяц(Объект.НачальнаяДата);
	НачальныйГод   = Год(Объект.НачальнаяДата);
	
	Попытка
		// Так как других проверок нет
		Если МесяцОтрицательный Тогда
			Месяц = НачальныйМесяц - Число(СтрокаМесяца);
		Иначе
			Месяц = НачальныйМесяц + Число(СтрокаМесяца);
		КонецЕсли;
		
		КоррекцияГода = Цел(Месяц/12);
		Месяц = Месяц - КоррекцияГода*12;
		
		Если Месяц <= 0 Тогда
			КоррекцияГода = КоррекцияГода - 1;
			Месяц = Месяц + 12;
		КонецЕсли;
		
		Если ГодОтрицательный Тогда
			Год   = НачальныйГод - Число(СтрокаГода) + КоррекцияГода;
		Иначе
			Год   = НачальныйГод + Число(СтрокаГода) + КоррекцияГода;
		КонецЕсли;
		
		Если Найти(ВРег(СтрокаЧисла),""ПОСЛЕД"") > 0 Тогда
			ВозвращаемаяДата = КонецМесяца(Дата(Год,Месяц, 15));
		Иначе
			ВозвращаемаяДата = Дата(Год,Месяц,Число(СокрЛП(СтрокаЧисла)));
		КонецЕсли;
			
	Исключение
		ВозвращаемаяДата = Дата(1,1,1);
		Сообщения = Сообщения
			+ ?(ПустаяСтрока(Сообщения), """", Символы.ПС)
			+ НСтр(""ru='Ошибка получения даты по выражению'"");
	КонецПопытки;
	
	Возврат ВозвращаемаяДата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СцТ_ВерсияПриложенияСплошная(Знач ВерсияЧерезТочку)
	
	Результат    = """";
	ВерсияЧерезТочку = ВерсияЧерезТочку + ""."";
	
	ТекПодстрока = """";
	Для Итератор = 1 По СтрДлина(ВерсияЧерезТочку) Цикл
		ТекСимвол = Сред(ВерсияЧерезТочку, Итератор, 1);
		Если ТекСимвол = ""."" Тогда
			Результат = Результат + Прав(""0000"" + ТекПодстрока, 4);
			ТекПодстрока = """";
		Иначе
			ТекПодстрока = ТекПодстрока + ТекСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Поиск нужных объектов в тестируемом приложении
//
// Параметры
//	Контейнер - владелец нужного объекта
//	ВариантПоиска - вариантом поиска нужного объекта
//	ТипОбъекта строка с типом объекта
//	ИмяОбъекта - имя объекта
//	ЗаголовокОбъекта - заголовок нужного объекта
//	УзелПутиПоиска - узел дерева данных с описанием пути к объекту
&НаКлиенте
Функция СцТ_НайтиЭлементТестируемойФормы(
	ФормаИлиТаблица,
	ВариантПоискаЭлемента,
	ТипЭлемента,
	ИмяЭлемента,
	ЗаголовокЭлемента,
	ПутьПоиска,
	БезТаймаута = Ложь)
	
	ИскатьПоИмени     = (Лев(ВариантПоискаЭлемента, 1)     = ""1"");
	ИскатьПоЗаголовку = (Сред(ВариантПоискаЭлемента, 2, 1) = ""1"");
	ИскатьПоПути      = (Прав(ВариантПоискаЭлемента, 1)    = ""1"");
	
	
	НайденыйЭлемент = Неопределено;
	
	Если ИскатьПоПути Тогда
		// Поиск элемента по пути
		Если ПутьПоиска = Неопределено Тогда
			Возврат НСтр(""ru ='Не удалось найти элемент. Не задан путь поиска'"");
			
		ИначеЕсли ТипЗнч(ПутьПоиска) = Тип(""Структура"") Тогда
			
			НайденыеЭлементы = СцТ_НайтиЭлементФормыПоСтруктуреПути(
				ФормаИлиТаблица,
				ПутьПоиска,,
				БезТаймаута);
				
				
			Если НайденыеЭлементы = Неопределено Тогда
				// ТекстСообщения = НСтр(""ru = 'Нет элементов, удовлетворяющих заданному пути поиска'"");
				Возврат Неопределено;
				
			Иначе
				
				КоличествоНайденых = НайденыеЭлементы.Количество();
				Если КоличествоНайденых = 0 Тогда
					Возврат Неопределено;
					
				ИначеЕсли КоличествоНайденых > 1 Тогда
					ТекстСообщения = НСтр(""ru = 'Найдено более одного элемента (%1), удовлетворяющих заданному пути поиска'"");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, ""%1"", Формат(КоличествоНайденых, ""ЧГ=0""));
					Возврат ТекстСообщения;
				Иначе
					Возврат НайденыеЭлементы[0];
				КонецЕсли;
				
			КонецЕсли;
				
		Иначе
			// Это артефакт для синхронизации с предыдущими версиями
			// тип дерево
			Если ПутьПоиска.ПолучитьЭлементы().Количество() = 0 Тогда
				Возврат НСтр(""ru ='Не удалось найти элемент. Не задан путь поиска'"");
			КонецЕсли;
			
			НайденыеЭлементы = СцТ_НайтиОбъектТестируемогоПриложенияПоУзлуПутиКОбъекту(
				ФормаИлиТаблица,
				ПутьПоиска,
				ИскатьПоИмени);
				
			Если ТипЗнч(НайденыеЭлементы) = Тип(""Строка"") Тогда
				
				Возврат НайденыеЭлементы;
				
			Иначе
				
				КоличествоНайденых = НайденыеЭлементы.Количество();
				Если КоличествоНайденых = 0 Тогда
					Возврат Неопределено;
				ИначеЕсли КоличествоНайденых > 1 Тогда
					Возврат СтрЗаменить(
						НСтр(""ru =''Найдено более одного элемента (%1), удовлетворяющих заданному пути поиска'""),
						""%1"",
						Строка(КоличествоНайденых));
				Иначе
					Возврат НайденыеЭлементы[0];
				КонецЕсли;
				
			КонецЕсли;
				
			
		КонецЕсли;
		
	Иначе
		// Поиск по имени и/или заголовку
		
		ИмяНужногоЭлемента       = Неопределено;
		ЗаголовокНужногоЭлемента = Неопределено;
		
		Если ИскатьПоИмени И Лев(ИмяЭлемента, 1) <> ""$"" Тогда
			ИмяНужногоЭлемента = ИмяЭлемента;
		КонецЕсли;
		
		Если ИскатьПоЗаголовку Тогда
			ЗаголовокНужногоЭлемента = ЗаголовокЭлемента;
		КонецЕсли;
		
		Попытка
			НайденныеЭлементы = ФормаИлиТаблица.НайтиОбъекты(
				ТипЭлемента,
				ЗаголовокНужногоЭлемента,
				ИмяНужногоЭлемента,
				?(БезТаймаута, 0, ТаймаутПоискаИнтерактивныхОбъектов));
				
			КоличествоНайденых = НайденныеЭлементы.Количество();
			Если КоличествоНайденых > 1 Тогда
				ВозвращаемыйТекст = НСтр(""ru = 'Найдено более одного элемента (%1)'"");
				ВозвращаемыйТекст = СтрЗаменить(ВозвращаемыйТекст, ""%1"", Формат(КоличествоНайденых,""ЧГ=0""));
				Возврат ВозвращаемыйТекст;
				
			ИначеЕсли КоличествоНайденых = 1 Тогда
				НайденыйЭлемент = НайденныеЭлементы[0];
				
				// Значение Неопределено для ненайденного уже присвоено
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
			ВозвращаемыйТекст = НСтр(""ru ='Не удалось найти объект тестируемого приложения. '"");
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				ВозвращаемыйТекст = ВозвращаемыйТекст + Символы.ПС + ТекстОшибки;
			КонецЕсли;
			
			Возврат ВозвращаемыйТекст;
			
		КонецПопытки;
		
		
	КонецЕсли;
	
	Возврат НайденыйЭлемент;
	
КонецФункции


#КонецОбласти






",
{4,50,
{9,
{2},0,"Объект",
{1,1,
{"ru","Объект"}
},
{"Pattern",
{"#",ce4daf12-db98-4c61-b8f1-c944e90b3899}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{1},0,"БлокСценария",
{1,1,
{"ru","Блок сценария"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,1,0,22,
{5,1,0,"НомерШага",
{1,1,
{"ru","№ шага"}
},
{"Pattern",
{"N",5,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Наименование",
{1,1,
{"ru","Наименование"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ТипШага",
{1,1,
{"ru","Тип шага"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ТипМетаданных",
{1,1,
{"ru","Тип метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ИмяМетаданных",
{1,1,
{"ru","Имя метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"Автоописание",
{1,1,
{"ru","Автоописание"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"Описание",
{1,1,
{"ru","Описание"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"НеВыводитьАвтоописание",
{1,1,
{"ru","Не выводить автоописание"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,9,0,"Активность",
{1,1,
{"ru","Активность"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,10,0,"Выполнено",
{1,1,
{"ru","Выполнено"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,11,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,12,0,"ОбСсылка",
{1,1,
{"ru","Об ссылка"}
},
{"Pattern",
{"S",1000,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,13,0,"ПредставлениеОбъекта",
{1,1,
{"ru","Представление объекта"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,14,0,"ВыполнитьВручную",
{1,1,
{"ru","Р."}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,16,0,"УИШ",
{1,1,
{"ru","УИШ"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,17,0,"Цвет",
{1,1,
{"ru","Цвет"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,18,0,"Комментарий",
{1,1,
{"ru","Комментарий"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,20,0,"ИмяФормы",
{1,1,
{"ru","Имя формы"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,21,0,"ПредставлениеИмениМетаданных",
{1,1,
{"ru","Представление имени метаданных"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,22,0,"ДанныеКартинки",
{1,1,
{"ru","Данные картинки"}
},
{"Pattern",
{"N",2,0,1},
{"#",e6f51714-91cb-4dce-94fe-90ae3e3e1ad1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,23,0,"ЗаголовокФормы",
{1,1,
{"ru","Заголовок формы"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,15,0,"ТочкаОстанова",
{1,1,
{"ru"," "}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{3},0,"СписокТиповШагов",
{1,1,
{"ru","Список типов шагов"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{10},0,"ИдентификаторВыполняемойКоманды",
{1,1,
{"ru","Идентификатор выполняемой команды"}
},
{"Pattern",
{"S",100,1},
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{13},0,"ОписаниеШага",
{1,1,
{"ru","Описание шага"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{15},0,"ДеревоСправочников",
{1,1,
{"ru","Дерево справочников"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,7,
{5,1,0,"Элемент",
{1,1,
{"ru","Элемент"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Аналитика",
{1,1,
{"ru","Аналитика"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ТипУзла",
{1,1,
{"ru","Тип узла"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"S",150,1},
{"#",e61ef7b8-f3e1-4f4b-8ac7-676e90524997}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ТипМетаданных",
{1,1,
{"ru","Тип метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"ИмяМетаданных",
{1,1,
{"ru","Имя метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"Отметка",
{1,1,
{"ru","Отметка"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{16},0,"ДеревоДокументов",
{1,1,
{"ru","Дерево документов"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,7,
{5,1,0,"Элемент",
{1,1,
{"ru","Элемент"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Аналитика",
{1,1,
{"ru","Аналитика"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ТипУзла",
{1,1,
{"ru","Тип узла"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"#",38bfd075-3e63-4aaa-a93e-94521380d579},
{"S",150,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ТипМетаданных",
{1,1,
{"ru","Тип метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"ИмяМетаданных",
{1,1,
{"ru","Имя метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"Отметка",
{1,1,
{"ru","Отметка"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{17},0,"ДеревоРегистровСведений",
{1,1,
{"ru","Дерево регистров сведений"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,7,
{5,1,0,"Элемент",
{1,1,
{"ru","Элемент"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Аналитика",
{1,1,
{"ru","Аналитика"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ТипУзла",
{1,1,
{"ru","Тип узла"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ТипМетаданных",
{1,1,
{"ru","Тип метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"ИмяМетаданных",
{1,1,
{"ru","Имя метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"Отметка",
{1,1,
{"ru","Отметка"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{18},0,"ДеревоПлановВидовХарактеристик",
{1,1,
{"ru","Дерево планов видов характеристик"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,7,
{5,1,0,"Элемент",
{1,1,
{"ru","Элемент"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Аналитика",
{1,1,
{"ru","Аналитика"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ТипУзла",
{1,1,
{"ru","Тип узла"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"#",99892482-ed55-4fb5-a7f7-20888820a758},
{"S",150,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ТипМетаданных",
{1,1,
{"ru","Тип метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"ИмяМетаданных",
{1,1,
{"ru","Имя метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"Отметка",
{1,1,
{"ru","Отметка"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{19},0,"ДеревоПлановВидовРасчета",
{1,1,
{"ru","Дерево планов видов расчета"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,7,
{5,1,0,"Элемент",
{1,1,
{"ru","Элемент"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Аналитика",
{1,1,
{"ru","Аналитика"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ТипУзла",
{1,1,
{"ru","Тип узла"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"#",593cd424-0877-470d-91f9-b90a982059b4},
{"S",150,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ТипМетаданных",
{1,1,
{"ru","Тип метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"ИмяМетаданных",
{1,1,
{"ru","Имя метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"Отметка",
{1,1,
{"ru","Отметка"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{20},0,"ДеревоБизнесПроцессов",
{1,1,
{"ru","Дерево бизнес-процессов"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,7,
{5,1,0,"Элемент",
{1,1,
{"ru","Элемент"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Аналитика",
{1,1,
{"ru","Аналитика"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ТипУзла",
{1,1,
{"ru","Тип узла"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"#",214fa4d8-6ba4-4748-a5e1-6332b5887780},
{"S",150,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ТипМетаданных",
{1,1,
{"ru","Тип метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"ИмяМетаданных",
{1,1,
{"ru","Имя метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"Отметка",
{1,1,
{"ru","Отметка"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{21},0,"ДеревоЗадач",
{1,1,
{"ru","Дерево задач"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,7,
{5,1,0,"Элемент",
{1,1,
{"ru","Элемент"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Аналитика",
{1,1,
{"ru","Аналитика"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ТипУзла",
{1,1,
{"ru","Тип узла"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"#",6291e9b3-8df5-44e1-b6b2-d9fe008016c0},
{"S",150,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ТипМетаданных",
{1,1,
{"ru","Тип метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"ИмяМетаданных",
{1,1,
{"ru","Имя метаданных"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"Отметка",
{1,1,
{"ru","Отметка"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{22},0,"ТипМетаданныхЭталоннойБазы",
{1,1,
{"ru","Тип метаданных"}
},
{"Pattern",
{"S",30,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"АдресДереваНастроекЭталоннойБазы",
{1,1,
{"ru","Адрес дерева настроек эталонной базы"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{11},0,"АдресТаблицыСсылок",
{1,1,
{"ru","Адрес таблицы ссылок"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{8},0,"АдресТаблицыКлючей",
{1,1,
{"ru","Адрес таблицы ключей"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{7},0,"АдресНачальныхУстановокШагов",
{1,1,
{"ru","Адрес начальных установок шагов"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"АдресШаблоновШагов",
{1,1,
{"ru","Адрес шаблонов шагов"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ПредставлениеИмениФайла",
{1,1,
{"ru","Файл сценария"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{9},0,"ИдентификаторВебКлиента",
{1,1,
{"ru","Идентификатор веб клиента"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{14},0,"БлокироватьГлавноеОкно",
{1,1,
{"ru","Блокировать главное окно"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{23},0,"ИмяФайлаПротокола",
{1,1,
{"ru","Имя файла протокола"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{24},0,"ПутьКФормам",
{1,1,
{"ru","Путь к формам"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{25},0,"ЭтоМенеджерТестирования",
{1,1,
{"ru","Это менеджер тестирования"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{30},0,"ТаймаутПоискаИнтерактивныхОбъектов",
{1,1,
{"ru","Таймаут поиска интерактивных объектов"}
},
{"Pattern",
{"N",4,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{31},0,"КартинкаИнформация32",
{1,1,
{"ru","Картинка информация32"}
},
{"Pattern",
{"#",e6f51714-91cb-4dce-94fe-90ae3e3e1ad1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{32},0,"ЗаписанЗаголовокВФайлПротокола",
{1,1,
{"ru","Записан заголовок в файл протокола"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{33},0,"СцТ_УстановленБезопасныйРежим",
{1,1,
{"ru","Сц т установлен безопасный режим"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{34},0,"ОбновлятьИндексППД",
{1,1,
{"ru","Обновлять индекс ППД"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{35},0,"СчетчикСообщений",
{1,1,
{"ru","Счетчик сообщений"}
},
{"Pattern",
{"N",10,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{36},0,"ПараметрыСовместимости",
{1,1,
{"ru","Тип Структура. Содержит параметры совместимости в зависимости от текущей версии платформы."}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{26},0,"ПараметрыСоединенияСИБ",
{1,1,
{"ru","Параметры соединения СИБ"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{38},0,"ГлобальныеПараметры",
{1,1,
{"ru","Глобальные параметры"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{39},0,"Макрошаги",
{1,1,
{"ru","Макрошаги"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,2,
{5,1,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"ИдентификаторШага",
{1,1,
{"ru","Идентификатор шага"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{12},0,"АдресДереваМакрошагов",
{1,1,
{"ru","Адрес дерева макрошагов"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{28},0,"АдресДереваМакрошаговДляИнициализации",
{1,1,
{"ru","Адрес дерева макрошагов для инициализации"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{29},0,"ТолькоШагиБЛ",
{1,1,
{"ru","Только шаги проверки бизнес-логики"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{40},0,"КомпьютерИБ",
{1,1,
{"ru","Компьютер ИБ"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{41},0,"URLИБ",
{1,1,
{"ru","URLИБ"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{42},0,"ВидТестируемогоКлиента",
{1,1,
{"ru","Вид тестируемого клиента"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{43},0,"ПортТестируемогоКлиента",
{1,1,
{"ru","Порт тестируемого клиента"}
},
{"Pattern",
{"N",5,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{44},0,"ДопПараметрыКоманднойСтроки",
{1,1,
{"ru","Доп параметры командной строки"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{45},0,"ДругаяИБ",
{1,1,
{"ru","Другая ИБ"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{46},0,"СтрокаПодключенияКИБ",
{1,1,
{"ru","Строка подключения КИБ"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{47},0,"СцТ_РежимВыполнения",
{1,1,
{"ru","Сц т режим выполнения"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{48},0,"ВыполнятьЗамерПроизводительности",
{1,1,
{"ru","Выполнять замер производительности"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{49},0,"ВыводитьСообщенияОбОшибках",
{1,1,
{"ru","Выводить сообщения об ошибках"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{50},0,"ЗапускИзУправляющейКонфигурации",
{1,1,
{"ru","Запуск из управляющей конфигурации"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{51},0,"ВыполнятьПреобразованиеСсылочныхТипов",
{1,1,
{"ru","Выполнять преобразование ссылочных типов"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{52},0,"РежимСовместимости838",
{1,1,
{"ru","Режим совместимости838"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},1,
{0,
{2,
{1},
{11}
},9,
{5,1,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Синоним",
{1,1,
{"ru","Синоним"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Активность",
{1,1,
{"ru","Активность"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"B"},
{"S"},
{"D"},
{"N",32,4,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"Представление",
{1,1,
{"ru","Представление"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"Действие",
{1,1,
{"ru","Действие"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"Скрипт",
{1,1,
{"ru","Скрипт"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"ТипУзла",
{1,1,
{"ru","Тип узла"}
},
{"Pattern",
{"S",50,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,9,0,"Кл",
{1,1,
{"ru","Кл"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0}
},5,"БлокСценария.ТипШага","БлокСценария.ТипШага",
{2,
{1},
{3}
},
{1,
{1}
},"БлокСценария.Выполнено","БлокСценария.Выполнено",
{2,
{1},
{10}
},
{1,
{1}
},"БлокСценария.Цвет","БлокСценария.Цвет",
{2,
{1},
{17}
},
{1,
{1}
},"БлокСценария.ТочкаОстанова","БлокСценария.ТочкаОстанова",
{2,
{1},
{15}
},
{1,
{1}
},"БлокСценария.Активность","БлокСценария.Активность",
{2,
{1},
{9}
},
{1,
{1}
},
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxjb25kaXRp
b25hbEFwcGVhcmFuY2U+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8
aXRlbT4NCgkJCQkJPGZpZWxkPtCR0LvQvtC60KHRhtC10L3QsNGA0LjRj9Cd0LDQ
uNC80LXQvdC+0LLQsNC90LjQtTwvZmllbGQ+DQoJCQkJPC9pdGVtPg0KCQkJPC9z
ZWxlY3Rpb24+DQoJCQk8ZmlsdGVyPg0KCQkJCTxpdGVtIHhzaTp0eXBlPSJGaWx0
ZXJJdGVtQ29tcGFyaXNvbiI+DQoJCQkJCTxsZWZ0IHhzaTp0eXBlPSJkY3Njb3I6
RmllbGQiPtCR0LvQvtC60KHRhtC10L3QsNGA0LjRjy7QotC40L/QqNCw0LPQsDwv
bGVmdD4NCgkJCQkJPGNvbXBhcmlzb25UeXBlPkluTGlzdDwvY29tcGFyaXNvblR5
cGU+DQoJCQkJCTxyaWdodCB4c2k6dHlwZT0ieHM6c3RyaW5nIj7QkNCy0YLQvtCT
0YDRg9C/0L/QsDwvcmlnaHQ+DQoJCQkJCTxyaWdodCB4c2k6dHlwZT0ieHM6c3Ry
aW5nIj7Qk9GA0YPQv9C/0LA8L3JpZ2h0Pg0KCQkJCQk8cmlnaHQgeHNpOnR5cGU9
InhzOnN0cmluZyI+0JjQvdGC0LXRgNCw0LrRgtC40LLQvdCw0Y/QkNCy0YLQvtCT
0YDRg9C/0L/QsDwvcmlnaHQ+DQoJCQkJCTxyaWdodCB4c2k6dHlwZT0ieHM6c3Ry
aW5nIj7Qn9C+0LLRgtC+0YDQtdC90LjQtTwvcmlnaHQ+DQoJCQkJCTxyaWdodCB4
c2k6dHlwZT0ieHM6c3RyaW5nIj7QktGL0L/QvtC70L3QuNGC0YzQnNCw0LrRgNC+
0YjQsNCzPC9yaWdodD4NCgkJCQk8L2l0ZW0+DQoJCQk8L2ZpbHRlcj4NCgkJCTxh
cHBlYXJhbmNlPg0KCQkJCTxkY3Njb3I6aXRlbSB4c2k6dHlwZT0iU2V0dGluZ3NQ
YXJhbWV0ZXJWYWx1ZSI+DQoJCQkJCTxkY3Njb3I6cGFyYW1ldGVyPtCo0YDQuNGE
0YI8L2Rjc2NvcjpwYXJhbWV0ZXI+DQoJCQkJCTxkY3Njb3I6dmFsdWUgeHNpOnR5
cGU9InY4dWk6Rm9udCIgcmVmPSJzeXM6RGVmYXVsdEdVSUZvbnQiIGJvbGQ9InRy
dWUiIGl0YWxpYz0iZmFsc2UiIHVuZGVybGluZT0iZmFsc2UiIHN0cmlrZW91dD0i
ZmFsc2UiIGtpbmQ9IldpbmRvd3NGb250Ii8+DQoJCQkJPC9kY3Njb3I6aXRlbT4N
CgkJCTwvYXBwZWFyYW5jZT4NCgkJPC9pdGVtPg0KCQk8aXRlbT4NCgkJCTx1c2U+
ZmFsc2U8L3VzZT4NCgkJCTxzZWxlY3Rpb24+DQoJCQkJPGl0ZW0+DQoJCQkJCTxm
aWVsZD7QkdC70L7QutCh0YbQtdC90LDRgNC40Y88L2ZpZWxkPg0KCQkJCTwvaXRl
bT4NCgkJCTwvc2VsZWN0aW9uPg0KCQkJPGZpbHRlcj4NCgkJCQk8aXRlbSB4c2k6
dHlwZT0iRmlsdGVySXRlbUNvbXBhcmlzb24iPg0KCQkJCQk8bGVmdCB4c2k6dHlw
ZT0iZGNzY29yOkZpZWxkIj7QkdC70L7QutCh0YbQtdC90LDRgNC40Y8u0JLRi9C/
0L7Qu9C90LXQvdC+PC9sZWZ0Pg0KCQkJCQk8Y29tcGFyaXNvblR5cGU+RXF1YWw8
L2NvbXBhcmlzb25UeXBlPg0KCQkJCQk8cmlnaHQgeHNpOnR5cGU9InhzOmRlY2lt
YWwiPjI8L3JpZ2h0Pg0KCQkJCTwvaXRlbT4NCgkJCTwvZmlsdGVyPg0KCQkJPGFw
cGVhcmFuY2U+DQoJCQkJPGRjc2NvcjppdGVtIHhzaTp0eXBlPSJTZXR0aW5nc1Bh
cmFtZXRlclZhbHVlIj4NCgkJCQkJPGRjc2NvcjpwYXJhbWV0ZXI+0KbQstC10YLQ
otC10LrRgdGC0LA8L2Rjc2NvcjpwYXJhbWV0ZXI+DQoJCQkJCTxkY3Njb3I6dmFs
dWUgeHNpOnR5cGU9InY4dWk6Q29sb3IiPiMwMDgwMDA8L2Rjc2Nvcjp2YWx1ZT4N
CgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9hcHBlYXJhbmNlPg0KCQk8L2l0ZW0+
DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8aXRlbT4NCgkJCQkJPGZp
ZWxkPtCR0LvQvtC60KHRhtC10L3QsNGA0LjRj9CQ0LrRgtC40LLQvdC+0YHRgtGM
PC9maWVsZD4NCgkJCQk8L2l0ZW0+DQoJCQk8L3NlbGVjdGlvbj4NCgkJCTxmaWx0
ZXI+DQoJCQkJPGl0ZW0geHNpOnR5cGU9IkZpbHRlckl0ZW1Db21wYXJpc29uIj4N
CgkJCQkJPGxlZnQgeHNpOnR5cGU9ImRjc2NvcjpGaWVsZCI+0JHQu9C+0LrQodGG
0LXQvdCw0YDQuNGPLtCS0YvQv9C+0LvQvdC10L3QvjwvbGVmdD4NCgkJCQkJPGNv
bXBhcmlzb25UeXBlPkVxdWFsPC9jb21wYXJpc29uVHlwZT4NCgkJCQkJPHJpZ2h0
IHhzaTp0eXBlPSJ4czpkZWNpbWFsIj4xPC9yaWdodD4NCgkJCQk8L2l0ZW0+DQoJ
CQk8L2ZpbHRlcj4NCgkJCTxhcHBlYXJhbmNlPg0KCQkJCTxkY3Njb3I6aXRlbSB4
c2k6dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJWYWx1ZSI+DQoJCQkJCTxkY3Njb3I6
cGFyYW1ldGVyPtCm0LLQtdGC0KTQvtC90LA8L2Rjc2NvcjpwYXJhbWV0ZXI+DQoJ
CQkJCTxkY3Njb3I6dmFsdWUgeHNpOnR5cGU9InY4dWk6Q29sb3IiPiM5OUNDMDA8
L2Rjc2Nvcjp2YWx1ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9hcHBlYXJh
bmNlPg0KCQk8L2l0ZW0+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8
aXRlbT4NCgkJCQkJPGZpZWxkPtCR0LvQvtC60KHRhtC10L3QsNGA0LjRj9Cd0LDQ
uNC80LXQvdC+0LLQsNC90LjQtTwvZmllbGQ+DQoJCQkJPC9pdGVtPg0KCQkJPC9z
ZWxlY3Rpb24+DQoJCQk8ZmlsdGVyPg0KCQkJCTxpdGVtIHhzaTp0eXBlPSJGaWx0
ZXJJdGVtQ29tcGFyaXNvbiI+DQoJCQkJCTxsZWZ0IHhzaTp0eXBlPSJkY3Njb3I6
RmllbGQiPtCR0LvQvtC60KHRhtC10L3QsNGA0LjRjy7QptCy0LXRgjwvbGVmdD4N
CgkJCQkJPGNvbXBhcmlzb25UeXBlPkVxdWFsPC9jb21wYXJpc29uVHlwZT4NCgkJ
CQkJPHJpZ2h0IHhzaTp0eXBlPSJ4czpzdHJpbmciPtCa0YDQsNGB0L3Ri9C5PC9y
aWdodD4NCgkJCQk8L2l0ZW0+DQoJCQk8L2ZpbHRlcj4NCgkJCTxhcHBlYXJhbmNl
Pg0KCQkJCTxkY3Njb3I6aXRlbSB4c2k6dHlwZT0iU2V0dGluZ3NQYXJhbWV0ZXJW
YWx1ZSI+DQoJCQkJCTxkY3Njb3I6cGFyYW1ldGVyPtCm0LLQtdGC0KLQtdC60YHR
gtCwPC9kY3Njb3I6cGFyYW1ldGVyPg0KCQkJCQk8ZGNzY29yOnZhbHVlIHhzaTp0
eXBlPSJ2OHVpOkNvbG9yIj53ZWI6UmVkPC9kY3Njb3I6dmFsdWU+DQoJCQkJPC9k
Y3Njb3I6aXRlbT4NCgkJCTwvYXBwZWFyYW5jZT4NCgkJPC9pdGVtPg0KCQk8aXRl
bT4NCgkJCTxzZWxlY3Rpb24+DQoJCQkJPGl0ZW0+DQoJCQkJCTxmaWVsZD7QkdC7
0L7QutCh0YbQtdC90LDRgNC40Y/QndCw0LjQvNC10L3QvtCy0LDQvdC40LU8L2Zp
ZWxkPg0KCQkJCTwvaXRlbT4NCgkJCTwvc2VsZWN0aW9uPg0KCQkJPGZpbHRlcj4N
CgkJCQk8aXRlbSB4c2k6dHlwZT0iRmlsdGVySXRlbUNvbXBhcmlzb24iPg0KCQkJ
CQk8bGVmdCB4c2k6dHlwZT0iZGNzY29yOkZpZWxkIj7QkdC70L7QutCh0YbQtdC9
0LDRgNC40Y8u0KbQstC10YI8L2xlZnQ+DQoJCQkJCTxjb21wYXJpc29uVHlwZT5F
cXVhbDwvY29tcGFyaXNvblR5cGU+DQoJCQkJCTxyaWdodCB4c2k6dHlwZT0ieHM6
c3RyaW5nIj7QntGA0LDQvdC20LXQstGL0Lk8L3JpZ2h0Pg0KCQkJCTwvaXRlbT4N
CgkJCTwvZmlsdGVyPg0KCQkJPGFwcGVhcmFuY2U+DQoJCQkJPGRjc2NvcjppdGVt
IHhzaTp0eXBlPSJTZXR0aW5nc1BhcmFtZXRlclZhbHVlIj4NCgkJCQkJPGRjc2Nv
cjpwYXJhbWV0ZXI+0KbQstC10YLQotC10LrRgdGC0LA8L2Rjc2NvcjpwYXJhbWV0
ZXI+DQoJCQkJCTxkY3Njb3I6dmFsdWUgeHNpOnR5cGU9InY4dWk6Q29sb3IiPndl
YjpDaG9jb2xhdGU8L2Rjc2Nvcjp2YWx1ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0K
CQkJPC9hcHBlYXJhbmNlPg0KCQk8L2l0ZW0+DQoJCTxpdGVtPg0KCQkJPHNlbGVj
dGlvbj4NCgkJCQk8aXRlbT4NCgkJCQkJPGZpZWxkPtCR0LvQvtC60KHRhtC10L3Q
sNGA0LjRj9Cd0LDQuNC80LXQvdC+0LLQsNC90LjQtTwvZmllbGQ+DQoJCQkJPC9p
dGVtPg0KCQkJPC9zZWxlY3Rpb24+DQoJCQk8ZmlsdGVyPg0KCQkJCTxpdGVtIHhz
aTp0eXBlPSJGaWx0ZXJJdGVtQ29tcGFyaXNvbiI+DQoJCQkJCTxsZWZ0IHhzaTp0
eXBlPSJkY3Njb3I6RmllbGQiPtCR0LvQvtC60KHRhtC10L3QsNGA0LjRjy7QptCy
0LXRgjwvbGVmdD4NCgkJCQkJPGNvbXBhcmlzb25UeXBlPkVxdWFsPC9jb21wYXJp
c29uVHlwZT4NCgkJCQkJPHJpZ2h0IHhzaTp0eXBlPSJ4czpzdHJpbmciPtCk0LjQ
vtC70LXRgtC+0LLRi9C5PC9yaWdodD4NCgkJCQk8L2l0ZW0+DQoJCQk8L2ZpbHRl
cj4NCgkJCTxhcHBlYXJhbmNlPg0KCQkJCTxkY3Njb3I6aXRlbSB4c2k6dHlwZT0i
U2V0dGluZ3NQYXJhbWV0ZXJWYWx1ZSI+DQoJCQkJCTxkY3Njb3I6cGFyYW1ldGVy
PtCm0LLQtdGC0KLQtdC60YHRgtCwPC9kY3Njb3I6cGFyYW1ldGVyPg0KCQkJCQk8
ZGNzY29yOnZhbHVlIHhzaTp0eXBlPSJ2OHVpOkNvbG9yIj53ZWI6RGFya01hZ2Vu
dGE8L2Rjc2Nvcjp2YWx1ZT4NCgkJCQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9hcHBl
YXJhbmNlPg0KCQk8L2l0ZW0+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJ
CQk8aXRlbT4NCgkJCQkJPGZpZWxkPtCR0LvQvtC60KHRhtC10L3QsNGA0LjRj9Cd
0LDQuNC80LXQvdC+0LLQsNC90LjQtTwvZmllbGQ+DQoJCQkJPC9pdGVtPg0KCQkJ
PC9zZWxlY3Rpb24+DQoJCQk8ZmlsdGVyPg0KCQkJCTxpdGVtIHhzaTp0eXBlPSJG
aWx0ZXJJdGVtQ29tcGFyaXNvbiI+DQoJCQkJCTxsZWZ0IHhzaTp0eXBlPSJkY3Nj
b3I6RmllbGQiPtCR0LvQvtC60KHRhtC10L3QsNGA0LjRjy7QptCy0LXRgjwvbGVm
dD4NCgkJCQkJPGNvbXBhcmlzb25UeXBlPkVxdWFsPC9jb21wYXJpc29uVHlwZT4N
CgkJCQkJPHJpZ2h0IHhzaTp0eXBlPSJ4czpzdHJpbmciPtCX0LXQu9C10L3Ri9C5
PC9yaWdodD4NCgkJCQk8L2l0ZW0+DQoJCQk8L2ZpbHRlcj4NCgkJCTxhcHBlYXJh
bmNlPg0KCQkJCTxkY3Njb3I6aXRlbSB4c2k6dHlwZT0iU2V0dGluZ3NQYXJhbWV0
ZXJWYWx1ZSI+DQoJCQkJCTxkY3Njb3I6cGFyYW1ldGVyPtCm0LLQtdGC0KLQtdC6
0YHRgtCwPC9kY3Njb3I6cGFyYW1ldGVyPg0KCQkJCQk8ZGNzY29yOnZhbHVlIHhz
aTp0eXBlPSJ2OHVpOkNvbG9yIj53ZWI6R3JlZW48L2Rjc2Nvcjp2YWx1ZT4NCgkJ
CQk8L2Rjc2NvcjppdGVtPg0KCQkJPC9hcHBlYXJhbmNlPg0KCQk8L2l0ZW0+DQoJ
CTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8aXRlbT4NCgkJCQkJPGZpZWxk
PtCR0LvQvtC60KHRhtC10L3QsNGA0LjRj9Cd0LDQuNC80LXQvdC+0LLQsNC90LjQ
tTwvZmllbGQ+DQoJCQkJPC9pdGVtPg0KCQkJPC9zZWxlY3Rpb24+DQoJCQk8Zmls
dGVyPg0KCQkJCTxpdGVtIHhzaTp0eXBlPSJGaWx0ZXJJdGVtQ29tcGFyaXNvbiI+
DQoJCQkJCTxsZWZ0IHhzaTp0eXBlPSJkY3Njb3I6RmllbGQiPtCR0LvQvtC60KHR
htC10L3QsNGA0LjRjy7QptCy0LXRgjwvbGVmdD4NCgkJCQkJPGNvbXBhcmlzb25U
eXBlPkVxdWFsPC9jb21wYXJpc29uVHlwZT4NCgkJCQkJPHJpZ2h0IHhzaTp0eXBl
PSJ4czpzdHJpbmciPtCh0LjQvdC40Lk8L3JpZ2h0Pg0KCQkJCTwvaXRlbT4NCgkJ
CTwvZmlsdGVyPg0KCQkJPGFwcGVhcmFuY2U+DQoJCQkJPGRjc2NvcjppdGVtIHhz
aTp0eXBlPSJTZXR0aW5nc1BhcmFtZXRlclZhbHVlIj4NCgkJCQkJPGRjc2Nvcjpw
YXJhbWV0ZXI+0KbQstC10YLQotC10LrRgdGC0LA8L2Rjc2NvcjpwYXJhbWV0ZXI+
DQoJCQkJCTxkY3Njb3I6dmFsdWUgeHNpOnR5cGU9InY4dWk6Q29sb3IiPndlYjpC
bHVlPC9kY3Njb3I6dmFsdWU+DQoJCQkJPC9kY3Njb3I6aXRlbT4NCgkJCTwvYXBw
ZWFyYW5jZT4NCgkJPC9pdGVtPg0KCQk8aXRlbT4NCgkJCTxzZWxlY3Rpb24+DQoJ
CQkJPGl0ZW0+DQoJCQkJCTxmaWVsZD7QkdC70L7QutCh0YbQtdC90LDRgNC40Y88
L2ZpZWxkPg0KCQkJCTwvaXRlbT4NCgkJCTwvc2VsZWN0aW9uPg0KCQkJPGZpbHRl
cj4NCgkJCQk8aXRlbSB4c2k6dHlwZT0iRmlsdGVySXRlbUNvbXBhcmlzb24iPg0K
CQkJCQk8bGVmdCB4c2k6dHlwZT0iZGNzY29yOkZpZWxkIj7QkdC70L7QutCh0YbQ
tdC90LDRgNC40Y8u0KLQvtGH0LrQsNCe0YHRgtCw0L3QvtCy0LA8L2xlZnQ+DQoJ
CQkJCTxjb21wYXJpc29uVHlwZT5FcXVhbDwvY29tcGFyaXNvblR5cGU+DQoJCQkJ
CTxyaWdodCB4c2k6dHlwZT0ieHM6ZGVjaW1hbCI+MTwvcmlnaHQ+DQoJCQkJPC9p
dGVtPg0KCQkJPC9maWx0ZXI+DQoJCQk8YXBwZWFyYW5jZT4NCgkJCQk8ZGNzY29y
Oml0ZW0geHNpOnR5cGU9IlNldHRpbmdzUGFyYW1ldGVyVmFsdWUiPg0KCQkJCQk8
ZGNzY29yOnBhcmFtZXRlcj7QptCy0LXRgtCk0L7QvdCwPC9kY3Njb3I6cGFyYW1l
dGVyPg0KCQkJCQk8ZGNzY29yOnZhbHVlIHhzaTp0eXBlPSJ2OHVpOkNvbG9yIj4j
RkZGRjk5PC9kY3Njb3I6dmFsdWU+DQoJCQkJPC9kY3Njb3I6aXRlbT4NCgkJCTwv
YXBwZWFyYW5jZT4NCgkJPC9pdGVtPg0KCQk8aXRlbT4NCgkJCTxzZWxlY3Rpb24+
DQoJCQkJPGl0ZW0+DQoJCQkJCTxmaWVsZD7QkdC70L7QutCh0YbQtdC90LDRgNC4
0Y/QndCw0LjQvNC10L3QvtCy0LDQvdC40LU8L2ZpZWxkPg0KCQkJCTwvaXRlbT4N
CgkJCTwvc2VsZWN0aW9uPg0KCQkJPGZpbHRlcj4NCgkJCQk8aXRlbSB4c2k6dHlw
ZT0iRmlsdGVySXRlbUNvbXBhcmlzb24iPg0KCQkJCQk8bGVmdCB4c2k6dHlwZT0i
ZGNzY29yOkZpZWxkIj7QkdC70L7QutCh0YbQtdC90LDRgNC40Y8u0JDQutGC0LjQ
stC90L7RgdGC0Yw8L2xlZnQ+DQoJCQkJCTxjb21wYXJpc29uVHlwZT5FcXVhbDwv
Y29tcGFyaXNvblR5cGU+DQoJCQkJCTxyaWdodCB4c2k6dHlwZT0ieHM6ZGVjaW1h
bCI+MDwvcmlnaHQ+DQoJCQkJPC9pdGVtPg0KCQkJPC9maWx0ZXI+DQoJCQk8YXBw
ZWFyYW5jZT4NCgkJCQk8ZGNzY29yOml0ZW0geHNpOnR5cGU9IlNldHRpbmdzUGFy
YW1ldGVyVmFsdWUiPg0KCQkJCQk8ZGNzY29yOnBhcmFtZXRlcj7QptCy0LXRgtCi
0LXQutGB0YLQsDwvZGNzY29yOnBhcmFtZXRlcj4NCgkJCQkJPGRjc2Nvcjp2YWx1
ZSB4c2k6dHlwZT0idjh1aTpDb2xvciI+Izk4OTg5ODwvZGNzY29yOnZhbHVlPg0K
CQkJCTwvZGNzY29yOml0ZW0+DQoJCQk8L2FwcGVhcmFuY2U+DQoJCTwvaXRlbT4N
Cgk8L2NvbmRpdGlvbmFsQXBwZWFyYW5jZT4NCjwvU2V0dGluZ3M+}
},
{0,1,
{0,"ЗапускИзУправляющейКонфигурации",
{"Pattern",
{"B"}
},0}
},
{0,63,
{7,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ДобавитьГрупповойШаг",
{1,1,
{"ru","Добавить групповой шаг"}
},
{1,1,
{"ru","Добавить групповой шаг"}
},
{0,
{0,
{"B",1},0}
},
{0,120,8},
{4,1,
{0,4ab0e87f-7d9b-4aa8-ac4b-680a78522da8},"",-1,-1,1,0,""},"ДобавитьГрупповойШаг",3,0,0,
{0,0},1,0},
{7,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПовыситьУровень",
{1,1,
{"ru","Повысить уровень"}
},
{1,1,
{"ru","Повысить уровень в иерархии шагов"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,584b470d-ba34-4b25-9620-8de4066ffeaa},"",-1,-1,1,0,""},"ПовыситьУровень",3,1,0,
{0,0},1,0},
{7,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПонизитьУровень",
{1,1,
{"ru","Понизить уровень"}
},
{1,1,
{"ru","Поместить в предыдущий узел"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,9cf611dc-2370-4357-910d-a2b49c7a1ec6},"",-1,-1,1,0,""},"ПонизитьУровень",3,1,0,
{0,0},1,0},
{7,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СохранитьБлокСценария",
{1,1,
{"ru","Сохранить"}
},
{1,1,
{"ru","Сохранить"}
},
{0,
{0,
{"B",1},0}
},
{0,83,8},
{4,1,
{0,818ab7d0-4654-4542-bd5e-fd9d1352b5a1},"",-1,-1,1,0,""},"СохранитьБлокСценария",2,0,0,
{0,0},1,0},
{7,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОткрытьБлокСценария",
{1,1,
{"ru","Открыть для редактирования"}
},
{1,1,
{"ru","Открыть сценарий для редактирования"}
},
{0,
{0,
{"B",1},0}
},
{0,79,8},
{4,1,
{0,785362cb-3756-48ed-87d2-292ded17054a},"",-1,-1,1,0,""},"ОткрытьБлокСценария",2,0,0,
{0,0},1,0},
{7,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НастроитьШагиПоУмолчанию",
{1,1,
{"ru","Шаблоны шагов бизнес-логики по умолчанию"}
},
{1,1,
{"ru","Открыть форму настройки шаблонов шагов бизнес-логики по умолчанию"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"НастроитьШагиПоУмолчанию",3,1,0,
{0,0},1,0},
{7,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьШаг",
{1,1,
{"ru","Выполнить шаг"}
},
{1,1,
{"ru","Выполнить шаг"}
},
{0,
{0,
{"B",1},0}
},
{0,122,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыполнитьШаг",3,0,0,
{0,0},1,0},
{7,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НовыйБлокСценария",
{1,1,
{"ru","Новый"}
},
{1,1,
{"ru","Создать новый сценарий"}
},
{0,
{0,
{"B",1},0}
},
{0,78,8},
{4,1,
{0,894afc03-9904-465d-b671-f555ffb9b21c},"",-1,-1,1,0,""},"НовыйБлокСценария",3,0,0,
{0,0},1,0},
{7,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СохранитьБлокСценарияКак",
{1,1,
{"ru","Сохранить как..."}
},
{1,1,
{"ru","Сохранить как..."}
},
{0,
{0,
{"B",1},0}
},
{0,83,24},
{4,0,
{0},"",-1,-1,1,0,""},"СохранитьБлокСценарияКак",3,0,0,
{0,0},1,0},
{7,
{12,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ШаблоныШагов",
{1,1,
{"ru","Персональные шаблоны групп бизнес-логики"}
},
{1,1,
{"ru","Персональные шаблоны групп бизнес-логики"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ШаблоныШагов",3,1,0,
{0,0},1,0},
{7,
{13,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ДобавитьВШаблонШагов",
{1,1,
{"ru","Добавить в шаблон шагов"}
},
{1,1,
{"ru","Добавить автогруппу в пользовательский шаблон шагов"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ДобавитьВШаблонШагов",3,1,0,
{0,0},1,0},
{7,
{14,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыбратьИПрименитьШаблонКВыделеннымСтрокам",
{1,1,
{"ru","Выбрать и применить шаблон"}
},
{1,1,
{"ru","Выбрать и применить пользовательский шаблон к выделенным строкам"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыбратьИПрименитьШаблонКВыделеннымСтрокам",3,1,0,
{0,0},1,0},
{7,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СтруктураИдентификации",
{1,1,
{"ru","Структура идентификации"}
},
{1,1,
{"ru","Показать структуру идентификации"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СтруктураИдентификации",3,1,0,
{0,0},1,0},
{7,
{17,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОткрытьТаблицуСсылок",
{1,1,
{"ru","Таблица ссылок"}
},
{1,1,
{"ru","Показать таблицу ссылок"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ОткрытьТаблицуСсылок",3,0,0,
{0,0},1,0},
{7,
{18,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПрименитьОсновнойШаблонКВыделеннымСтрокам",
{1,1,
{"ru","Применить основной шаблон"}
},
{1,1,
{"ru","Применить основной пользовательский шаблон к выделенным строкам"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПрименитьОсновнойШаблонКВыделеннымСтрокам",3,1,0,
{0,0},1,0},
{7,
{19,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПронумероватьШаги",
{1,1,
{"ru","Пронумеровать шаги"}
},
{1,1,
{"ru","Пронумеровать шаги"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПронумероватьШаги",3,1,0,
{0,0},1,0},
{7,
{21,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПрименитьШаблонПоУмолчаниюКВыделеннымСтрокам",
{1,1,
{"ru","Применить шаблон по умолчанию к выделенным строкам"}
},
{1,1,
{"ru","Применить шаблон по умолчанию к выделенным строкам"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПрименитьШаблонПоУмолчаниюКВыделеннымСтрокам",3,1,0,
{0,0},1,0},
{7,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НастроитьОтображениеЭталоннойБазы",
{1,1,
{"ru","Настроить отображение панели данных эталонной базы"}
},
{1,1,
{"ru","Настроить отображение панели данных эталонной базы"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"НастроитьОтображениеЭталоннойБазы",3,1,0,
{0,0},1,0},
{7,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"УстановитьФлажки",
{1,1,
{"ru","Установить флажки"}
},
{1,1,
{"ru","Установить флажки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{-10},"",-1,-1,1,0,""},"УстановитьФлажки",3,1,0,
{0,0},1,0},
{7,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СнятьФлажки",
{1,1,
{"ru","Снять флажки"}
},
{1,1,
{"ru","Снять флажки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{-11},"",-1,-1,1,0,""},"СнятьФлажки",3,1,0,
{0,0},1,0},
{7,
{28,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗаписатьОтмеченныеВСценарий",
{1,1,
{"ru","Записать отмеченные в сценарий"}
},
{1,1,
{"ru","Добавить в сценарий шаги  бизнес-логики для тестирования объектов, отмеченных в панели эталонной базы  "}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗаписатьОтмеченныеВСценарий",3,1,0,
{0,0},1,0},
{7,
{29,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗаписатьВСценарий",
{1,1,
{"ru","Записать в сценарий"}
},
{1,1,
{"ru","Добавить в сценарий шаги  бизнес-логики для тестирования выбранных объектов "}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗаписатьВСценарий",3,1,0,
{0,0},1,0},
{7,
{31,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОбновитьТаблицуЭталоннойБазы",
{1,1,
{"ru","Обновить"}
},
{1,1,
{"ru","Обновить панель эталонной базы"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,fc4f29e0-d168-4fe0-8e64-e982fabf2595},"",-1,-1,1,0,""},"ОбновитьТаблицуЭталоннойБазы",3,0,0,
{0,0},1,0},
{7,
{23,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Настройка",
{1,1,
{"ru","Настройка"}
},
{1,1,
{"ru","Настройка"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,942e0303-a3ec-4fe8-887c-5aea8516d424},"",-1,-1,1,0,""},"Настройка",3,0,0,
{0,0},1,0},
{7,
{33,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьСценарий",
{1,1,
{"ru","Выполнить сценарий с текущего шага"}
},
{1,1,
{"ru","Выполнить сценарий с текущего шага"}
},
{0,
{0,
{"B",1},0}
},
{0,116,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыполнитьСценарий",3,0,0,
{0,0},1,0},
{7,
{35,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОткрытьБлокСценарияДляПрогона",
{1,1,
{"ru","Открыть для выполнения"}
},
{1,1,
{"ru","Открыть сценарий для выполнения"}
},
{0,
{0,
{"B",1},0}
},
{0,79,24},
{4,0,
{0},"",-1,-1,1,0,""},"ОткрытьБлокСценарияДляПрогона",3,0,0,
{0,0},1,0},
{7,
{37,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПрименитьИсключенияИзШаблонаПоУмолчаниюКВыделеннымСтрокам",
{1,1,
{"ru","Сбросить активность реквизитов по таблице исключений"}
},
{1,1,
{"ru","Сбросить активность реквизитов в выделенных строках в соответствии с таблицей исключений шаблона шагов по умолчанию"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПрименитьИсключенияИзШаблонаПоУмолчаниюКВыделеннымСтрокам",3,0,0,
{0,0},1,0},
{7,
{39,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗапуститьТестируемогоКлиента",
{1,1,
{"ru","Запустить тестируемое приложение"}
},
{1,1,
{"ru","Запустить тестируемое приложение"}
},
{0,
{0,
{"B",1},0}
},
{0,82,8},
{4,0,
{0},"",-1,-1,1,0,""},"ЗапуститьТестируемогоКлиента",3,0,0,
{0,0},1,0},
{7,
{30,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыбратьЭлементДереваЭталоннойБазы",
{1,1,
{"ru","Изменить"}
},
{1,1,
{"ru","Открыть объект эталонной базы"}
},
{0,
{0,
{"B",1},0}
},
{0,113,8},
{4,1,
{0,97b2cc97-d5c6-45fb-9824-9d6d73db21fe},"",-1,-1,1,0,""},"ВыбратьЭлементДереваЭталоннойБазы",3,0,0,
{0,0},1,0},
{7,
{42,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПометитьНаУдалениеЭлементЭталоннойБазы",
{1,1,
{"ru","Пометить на удаление"}
},
{1,1,
{"ru","Пометить на удаление объект эталонной базы"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,18492a87-2fe4-44af-b218-304897fed020},"",-1,-1,1,0,""},"ПометитьНаУдалениеЭлементЭталоннойБазы",3,0,0,
{0,0},1,0},
{7,
{43,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОкноЭталоннойБазы",
{1,1,
{"ru","Данные эталонной базы"}
},
{1,1,
{"ru","Отобразить/закрыть панель данных эталонной базы"}
},
{0,
{0,
{"B",1},0}
},
{0,90,16},
{4,0,
{0},"",-1,-1,1,0,""},"ОкноЭталоннойБазы",3,0,0,
{0,0},1,0},
{7,
{16,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПривязатьАвтогруппуКОткрытойФорме",
{1,1,
{"ru","Привязать автогруппу к открытой форме"}
},
{1,1,
{"ru","Привязать автогруппу к открытой тестируемой форме"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,2f130057-bb2a-4e22-bba5-e108fac26940},"",-1,-1,1,0,""},"ПривязатьАвтогруппуКОткрытойФорме",3,0,0,
{0,0},1,0},
{7,
{24,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СброситьВыполнение",
{1,1,
{"ru","Сбросить отметки выполнения"}
},
{1,1,
{"ru","Сбросить отметки выполнения"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{-11},"",-1,-1,1,0,""},"СброситьВыполнение",3,0,0,
{0,0},1,0},
{7,
{46,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НачатьЗавершитьЗапись",
{1,1,
{"ru","Записать и добавить интерактивные шаги из журнала"}
},
{1,1,
{"ru","Записать и добавить интерактивные шаги из журнала интерактивных действий пользователя"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,723765ab-0b92-4745-a621-1ba0f77c92c9},"",-1,-1,1,0,""},"НачатьЗавершитьЗапись",3,0,0,
{0,0},1,0},
{7,
{41,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПросмотретьФайлЖурналаВыполнения",
{1,1,
{"ru","Журнал выполнения"}
},
{1,1,
{"ru","Показать журнала выполнения"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,37cf7cc0-abad-4385-b597-6fd2d8dc085a},"",-1,-1,1,0,""},"ПросмотретьФайлЖурналаВыполнения",3,0,0,
{0,0},1,0},
{7,
{50,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОтметитьВыполнение",
{1,1,
{"ru","Отметить выполнение"}
},
{1,1,
{"ru","Установить отметку выполнения"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{-10},"",-1,-1,1,0,""},"ОтметитьВыполнение",3,0,0,
{0,0},1,0},
{7,
{51,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"БлокСценарияИзменить",
{1,1,
{"ru","Изменить"}
},
{1,1,
{"ru","Открыть шаг для редактирования"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,97b2cc97-d5c6-45fb-9824-9d6d73db21fe},"",-1,-1,1,0,""},"БлокСценарияИзменить",3,0,0,
{0,0},1,0},
{7,
{52,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"АктивизироватьФормуСвязаннуюСАвтогруппой",
{1,1,
{"ru","Активизировать форму, связанную с автогруппой"}
},
{1,1,
{"ru","Активизировать тестируемую форму, связанную с автогруппой"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,dcd23a32-5c7c-43f2-9021-80d98128556f},"",-1,-1,1,0,""},"АктивизироватьФормуСвязаннуюСАвтогруппой",3,0,0,
{0,0},1,0},
{7,
{45,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗакрытьТестируемыйКлиент",
{1,1,
{"ru","Завершить работу тестируемого приложения"}
},
{1,1,
{"ru","Завершить работу тестируемого приложения"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{-2},"",-1,-1,1,0,""},"ЗакрытьТестируемыйКлиент",3,0,0,
{0,0},1,0},
{7,
{47,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СвернутьВсе",
{1,1,
{"ru","Свернуть все"}
},
{1,1,
{"ru","Свернуть все узлы сценария"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,27ee3053-952c-49e5-8261-9215098e0e9c},"",-1,-1,1,0,""},"СвернутьВсе",3,0,0,
{0,0},1,0},
{7,
{48,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"РазвернутьВсе",
{1,1,
{"ru","Развернуть все"}
},
{1,1,
{"ru","Развернуть все узлы сценария"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,fb7e9fb5-110b-41cb-adc6-753969ae1c81},"",-1,-1,1,0,""},"РазвернутьВсе",3,0,0,
{0,0},1,0},
{7,
{49,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОбновитьДанныеШаговБЛИзИБ",
{1,1,
{"ru","Обновить выделенные шаги бизнес-логики"}
},
{1,1,
{"ru","Обновить выделенные шаги бизнес-логики"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,fc4f29e0-d168-4fe0-8e64-e982fabf2595},"",-1,-1,1,0,""},"ОбновитьДанныеШаговБЛИзИБ",3,0,0,
{0,0},1,0},
{7,
{53,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЦветАвто",
{1,1,
{"ru","Авто"}
},
{1,1,
{"ru","Авто"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЦветАвто",3,0,0,
{0,0},1,0},
{7,
{55,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЦветКрасный",
{1,1,
{"ru","Красный"}
},
{1,1,
{"ru","Красный"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЦветКрасный",3,0,0,
{0,0},1,0},
{7,
{56,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЦветОранжевый",
{1,1,
{"ru","Коричневый"}
},
{1,1,
{"ru","Оранжевый"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЦветОранжевый",3,0,0,
{0,0},1,0},
{7,
{57,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЦветФиолетовый",
{1,1,
{"ru","Фуксин"}
},
{1,1,
{"ru","Фуксин"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЦветФиолетовый",3,0,0,
{0,0},1,0},
{7,
{58,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЦветЗеленый",
{1,1,
{"ru","Зеленый"}
},
{1,1,
{"ru","Зеленый"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЦветЗеленый",3,0,0,
{0,0},1,0},
{7,
{59,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЦветСиний",
{1,1,
{"ru","Синий"}
},
{1,1,
{"ru","Синий"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЦветСиний",3,0,0,
{0,0},1,0},
{7,
{54,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПерейтиКШагуПоНомеру",
{1,1,
{"ru","Перейти к шагу №..."}
},
{1,1,
{"ru","Перейти к шагу номер..."}
},
{0,
{0,
{"B",1},0}
},
{0,71,8},
{4,0,
{0},"",-1,-1,1,0,""},"ПерейтиКШагуПоНомеру",3,0,0,
{0,0},1,0},
{7,
{20,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОстановитьВыполнение",
{1,1,
{"ru","Остановить выполнение"}
},
{1,1,
{"ru","Остановить выполнение"}
},
{0,
{0,
{"B",1},0}
},
{0,116,4},
{4,1,
{0,1cd7b762-ec6a-4e92-ac9a-1832be228ec3},"",-1,-1,1,0,""},"ОстановитьВыполнение",3,0,0,
{0,0},1,0},
{7,
{27,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ТочкаОстановаУстановитьСнять",
{1,1,
{"ru","Установить/снять точку останова"}
},
{1,0},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ТочкаОстановаУстановитьСнять",3,0,0,
{0,0},1,0},
{7,
{34,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ТочкаОстановаУдалитьВсе",
{1,1,
{"ru","Убрать все точки останова"}
},
{1,0},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ТочкаОстановаУдалитьВсе",3,0,0,
{0,0},1,0},
{7,
{32,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"АктивностьШаговУстановить",
{1,1,
{"ru","Установить активность шагов"}
},
{1,0},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{-10},"",-1,-1,1,0,""},"АктивностьШаговУстановить",3,0,0,
{0,0},1,0},
{7,
{44,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"АктивностьШаговСбросить",
{1,1,
{"ru","Сбросить активность шагов"}
},
{1,0},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{-11},"",-1,-1,1,0,""},"АктивностьШаговСбросить",3,0,0,
{0,0},1,0},
{7,
{61,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ДобавитьШагиИзСценария",
{1,1,
{"ru","Добавить шаги из сценария"}
},
{1,1,
{"ru","Добавить шаги из выбранного файла сценария в конец текущего сценария"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,f62488ee-f90c-47f7-929d-f42ec11a1e63},"",-1,-1,1,0,""},"ДобавитьШагиИзСценария",3,0,0,
{0,0},1,0},
{7,
{62,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьГлобальныеПараметры",
{1,1,
{"ru","Параметры"}
},
{1,1,
{"ru","Показать глобальные параметры"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьГлобальныеПараметры",3,0,0,
{0,0},1,0},
{7,
{38,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"МакрошагиСоздатьНаОснованииГруппы",
{1,1,
{"ru","Создать макрошаг на основании группы"}
},
{1,1,
{"ru","Макрошаги создать на основании группы"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"МакрошагиСоздатьНаОснованииГруппы",3,0,0,
{0,0},1,0},
{7,
{40,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"МакрошагиДобавитьГруппуВМакрошаг",
{1,1,
{"ru","Добавить группу в макрошаг"}
},
{1,1,
{"ru","Макрошаги добавить группу в макрошаг"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"МакрошагиДобавитьГруппуВМакрошаг",3,0,0,
{0,0},1,0},
{7,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Макрошаги",
{1,1,
{"ru","Макрошаги"}
},
{1,1,
{"ru","Макрошаги"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"Макрошаги",3,0,0,
{0,0},1,0},
{7,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"МакрошагОткрыть",
{1,1,
{"ru","Макрошаг открыть"}
},
{1,1,
{"ru","Макрошаг открыть"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"МакрошагОткрыть",3,0,0,
{0,0},1,0},
{7,
{36,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ДанныеШага",
{1,1,
{"ru","Данные шага"}
},
{1,1,
{"ru","Данные шага"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ДанныеШага",3,0,0,
{0,0},1,0},
{7,
{60,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НайтиИЗаменить",
{1,1,
{"ru","Найти и заменить"}
},
{1,1,
{"ru","Найти и заменить"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,6cb69e7f-fe19-4f64-bfb5-1a4fad6c2ef9},"",-1,-1,1,0,""},"НайтиИЗаменить",2,0,0,
{0,0},1,0},
{7,
{63,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КонтрольныйПример",
{1,1,
{"ru","Отчет ""Контрольный пример"""}
},
{1,1,
{"ru","Контрольный пример"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КонтрольныйПример",3,0,0,
{0,0},1,0}
},
{0,0},
{0,0},0,0}