{3,
{42,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{2,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,"ОбработкаОповещения",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",0,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{17,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаСформировать",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{18,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаСформироватьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ДокументРезультат",0,0,
{1,0},
{1,0},
{1,
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{9,50,10,1,1,0,0,1,1,0,0,1,0,0,1,
{3,4,
{0}
},1,1,
{1,2988b2a5-c887-4928-94ae-5d0c9c31e999,"ДокументРезультатОбработкаРасшифровки",0,0},0,1,0,0,1,0},
{0,0,0},1,
{21,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДокументРезультатКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДокументРезультатРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0},"
&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;


#Область Обработчики_Событий_Формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдрДД       = Параметры.АдрДД;
	ПутьКФормам = Параметры.ПутьКФормам;
	
	Если НЕ ПустаяСтрока(АдрДД) И Параметры.СформироватьПриОткрытии Тогда
		СкопоноватьОтчетНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ""СцТ_ПринудительноеЗакрытиеВсехФормОбработки"" Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область Обработчики_Событий_Элементов_Формы

&НаКлиенте
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда
	Если Расшифровка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		
		ИмяФайла = ПолучитьИмяВременногоФайла(""json"");
		ДД = ПолучитьИзВременногоХранилища(АдрДД);
		ДД.Записать(ИмяФайла);
		
		// В файле нет закрывающей скобки - добавление
		ЗаписьВФайлПротокола = Новый ЗаписьТекста(ИмяФайла, , , Истина);
		ЗаписьВФайлПротокола.ЗаписатьСтроку(""]"");
		ЗаписьВФайлПротокола.Закрыть();
		
		// Теперь чтение json
		СцТ_ЧтениеJSON = Новый ЧтениеJSON;
		СцТ_ЧтениеJSON.ОткрытьФайл(ИмяФайла);
		РезудьтатВыполнения = ПрочитатьJSON(СцТ_ЧтениеJSON);
		СцТ_ЧтениеJSON.Закрыть();
		
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;
		
		МассивИнфоСообщений = Новый Массив;
		
		СтруктураДанныхШага = Новый Структура;
		СтруктураДанныхШага.Вставить(""Идентификатор"", """");
		СтруктураДанныхШага.Вставить(""Наименование"" , """");
		СтруктураДанныхШага.Вставить(""НомерШага""    , 0);
		
		Для каждого ТекСтруктура Из РезудьтатВыполнения Цикл
			Если ТекСтруктура.Идентификатор = Расшифровка Тогда
				Если ПустаяСтрока(СтруктураДанныхШага.Идентификатор) Тогда
					СтруктураДанныхШага.Идентификатор = ТекСтруктура.Идентификатор;
					СтруктураДанныхШага.Наименование  = ТекСтруктура.Наименование;
					СтруктураДанныхШага.НомерШага     = ТекСтруктура.НомерШага;
				КонецЕсли;
				
				Для каждого ИнфоСообщение Из ТекСтруктура.МассивИнфоСообщений Цикл
					МассивИнфоСообщений.Добавить(ИнфоСообщение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивИнфоСообщений.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить(""МассивИнфоСообщений""      , МассивИнфоСообщений);
			ПараметрыФормы.Вставить(""ШагСценария_Идентификатор"", 0);
			ПараметрыФормы.Вставить(""ШагСценария_Номер""        , СтруктураДанныхШага.НомерШага);
			ПараметрыФормы.Вставить(""ШагСценария_Наименование"" , СтруктураДанныхШага.Наименование);
			
			ОткрытьФорму(СцТ_ГлавнаяФорма.ПутьКФормам + ""СообщенияПротоколаВыполнения"", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
			
			//Т_ГлавнаяФорма.СцТ_ПоказатьИнформационноеСообщение(МассивИнфоСообщений, СтруктураДанныхШага,,,,,, Истина);
		Иначе
			ТекстПредупреждения = НСтр(""ru = 'Для выбранного шага в протоколе нет информационных сообщений'"");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_Команд

&НаКлиенте
Процедура Сформировать(Команда)
	
	СкопоноватьОтчетНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Основные_процедуры_и_функции

&НаСервере
Процедура СкопоноватьОтчетНаСервере()
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	ДокументРезультат.Очистить();
	
	ОбъектНаСервере = РеквизитФормыВЗначение(""Объект"");
	Макет = ОбъектНаСервере.ПолучитьМакет(""МакетПротокола"");
	
	МакетОбласти = Макет.ПолучитьОбласть(""СтрокаПротокола"");
	
	// Подготовка данных
	ИмяФайла = ПолучитьИмяВременногоФайла(""json"");
	ДД = ПолучитьИзВременногоХранилища(АдрДД);
	ДД.Записать(ИмяФайла);
	
	// В файле нет закрывающей скобки - добавление
	ЗаписьВФайлПротокола = Новый ЗаписьТекста(ИмяФайла, , , Истина);
	ЗаписьВФайлПротокола.ЗаписатьСтроку(""]"");
	ЗаписьВФайлПротокола.Закрыть();
	
	// Теперь чтение json
	СцТ_ЧтениеJSON = Новый ЧтениеJSON;
	СцТ_ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	РезудьтатВыполнения = ПрочитатьJSON(СцТ_ЧтениеJSON);
	СцТ_ЧтениеJSON.Закрыть();
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
	// Заполнение таблицы результата
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить(""Идентификатор""        , Новый ОписаниеТипов(""Строка""));
	ТаблицаРезультата.Колонки.Добавить(""ИдентификаторРодителя"", Новый ОписаниеТипов(""Строка""));
	ТаблицаРезультата.Колонки.Добавить(""НомерШага""            , Новый ОписаниеТипов(""Число""));
	ТаблицаРезультата.Колонки.Добавить(""НомерШагаСтрокой""     , Новый ОписаниеТипов(""Строка""));
	ТаблицаРезультата.Колонки.Добавить(""Наименование""         , Новый ОписаниеТипов(""Строка""));
	ТаблицаРезультата.Колонки.Добавить(""Ошибки""               , Новый ОписаниеТипов(""Число""));
	ТаблицаРезультата.Колонки.Добавить(""Время"");
	ТаблицаРезультата.Колонки.Добавить(""ТипШага"");
	ТаблицаРезультата.Колонки.Добавить(""Пропущено"");
	ТаблицаРезультата.Колонки.Добавить(""Дата"");
	ТаблицаРезультата.Колонки.Добавить(""Вызовы""               , Новый ОписаниеТипов(""Число""));
	ТаблицаРезультата.Колонки.Добавить(""Продолжительность""    , Новый ОписаниеТипов(""Число""));
	ТаблицаРезультата.Колонки.Добавить(""Отправлено""           , Новый ОписаниеТипов(""Число""));
	ТаблицаРезультата.Колонки.Добавить(""Принято""              , Новый ОписаниеТипов(""Число""));
	
	ПредыдущийИдентификатор = """";
	ПредыдущаяСтрока = Неопределено;
	Для каждого СтруктураСтрокиРезультата Из РезудьтатВыполнения Цикл
		Если ПредыдущийИдентификатор <> СтруктураСтрокиРезультата.Идентификатор Тогда
			// Это новая строка
			СтрокаТаблицы = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураСтрокиРезультата);
			Если СтрокаТаблицы.ИдентификаторРодителя = ""00000"" Тогда
				СтрокаТаблицы.ИдентификаторРодителя = ""00000000-0000-0000-0000-000000000000""
			КонецЕсли;
			ПредыдущийИдентификатор = СтруктураСтрокиРезультата.Идентификатор;
			ПредыдущаяСтрока = СтрокаТаблицы;
		Иначе
			// Строка уже существует - обновление некоторых параметров
			ПредыдущаяСтрока.Ошибки = СтрокаТаблицы.Ошибки + СтруктураСтрокиРезультата.Ошибки;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаИерархии = Новый ТаблицаЗначений;
	ТаблицаИерархии.Колонки.Добавить(""Идентификатор"", Новый ОписаниеТипов(""Строка""));
	ТаблицаИерархии.Колонки.Добавить(""ИдентификаторРодителя"", Новый ОписаниеТипов(""Строка""));
	ТаблицаИерархии.Колонки.Добавить(""НомерШага""            , Новый ОписаниеТипов(""Число""));

	ТаблицаИерархии.Колонки.Добавить(""Ошибки""               , Новый ОписаниеТипов(""Число""));
	ТаблицаИерархии.Колонки.Добавить(""Вызовы""               , Новый ОписаниеТипов(""Число""));
	ТаблицаИерархии.Колонки.Добавить(""Продолжительность""    , Новый ОписаниеТипов(""Число""));
	ТаблицаИерархии.Колонки.Добавить(""Отправлено""           , Новый ОписаниеТипов(""Число""));
	ТаблицаИерархии.Колонки.Добавить(""Принято""              , Новый ОписаниеТипов(""Число""));
	
	ТаблицаИерархии.Колонки.Добавить(""СтрокаТД"");
	
	
	СтрокаТаблицы = ТаблицаИерархии.Добавить();
	СтрокаТаблицы.Идентификатор         = ""00000000-0000-0000-0000-000000000000"";
	СтрокаТаблицы.ИдентификаторРодителя         = """";
	
	// Шапка таблицы
	МакетОбласти = Макет.ПолучитьОбласть(""ЗаголовокТаблицы"");
	ОбластьГруппы = ДокументРезультат.Вывести(МакетОбласти, 0, """", Истина);
	
	// Строка группировки отчета
	ПустойИдентификатор = ""00000000-0000-0000-0000-000000000000"";
	УзлыГрупп = Новый Соответствие;
	УзлыГрупп[ПустойИдентификатор] = 1;
	
	МакетОбласти = Макет.ПолучитьОбласть(""СтрокаГруппировки0"");
	МакетОбласти.Параметры.НазваниеШага = НСтр(""ru = 'Протокол выполнения'"");
	МакетОбласти.Параметры.НомерШага    = 0;
	МакетОбласти.Параметры.ИдентификаторШага = ""00000000-0000-0000-0000-000000000000"";
	
	ОбластьГруппы = ДокументРезультат.Вывести(МакетОбласти, 0, """", Истина);
	ОбластьГруппы.Имя = ""00000000-0000-0000-0000-000000000000"";
	
	//
	СтрокаТаблицы.СтрокаТД = ОбластьГруппы;
	
	Для каждого СтрокаРезультата ИЗ ТаблицаРезультата Цикл
		
		УровеньГруппы = УзлыГрупп[СтрокаРезультата.ИдентификаторРодителя];
		
		Если УровеньГруппы = Неопределено Тогда
			УровеньГруппы = 1;
		КонецЕсли;
		
		Если УровеньГруппы = 1 Тогда
			МакетОбласти = Макет.ПолучитьОбласть(""СтрокаГруппировки1"");
			
		ИначеЕсли УровеньГруппы = 2 Тогда
			МакетОбласти = Макет.ПолучитьОбласть(""СтрокаГруппировки2"");
			
		Иначе
			МакетОбласти = Макет.ПолучитьОбласть(""СтрокаПротокола"");
			
		КонецЕсли;
		
		МакетОбласти.Параметры.НазваниеШага      = СтрокаРезультата.Наименование;
		МакетОбласти.Параметры.НомерШага         = СтрокаРезультата.НомерШага;
		МакетОбласти.Параметры.ИдентификаторШага = СтрокаРезультата.Идентификатор;
		
		МакетОбласти.Параметры.Дата              = СтрокаРезультата.Дата;
		МакетОбласти.Параметры.Время             = СтрокаРезультата.Время;
		МакетОбласти.Параметры.Ошибки            = СтрокаРезультата.Ошибки;
		МакетОбласти.Параметры.Вызовы            = СтрокаРезультата.Вызовы;
		МакетОбласти.Параметры.Продолжительность = СтрокаРезультата.Продолжительность;
		МакетОбласти.Параметры.Отправлено        = СтрокаРезультата.Отправлено;
		МакетОбласти.Параметры.Принято           = СтрокаРезультата.Принято;
		
		// Подсчет статистики группы
		ИдентификаторРодителя = СтрокаРезультата.ИдентификаторРодителя;
		Пока Истина Цикл
			
			СтрокаИерархии = ТаблицаИерархии.Найти(ИдентификаторРодителя, ""Идентификатор"");
			Если СтрокаИерархии = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаИерархии.Ошибки            = СтрокаИерархии.Ошибки + СтрокаРезультата.Ошибки;
			СтрокаИерархии.Вызовы            = СтрокаИерархии.Ошибки + СтрокаРезультата.Вызовы;
			СтрокаИерархии.Продолжительность = СтрокаИерархии.Ошибки + СтрокаРезультата.Продолжительность;
			СтрокаИерархии.Отправлено        = СтрокаИерархии.Ошибки + СтрокаРезультата.Отправлено;
			СтрокаИерархии.Принято           = СтрокаИерархии.Ошибки + СтрокаРезультата.Принято;
			
			ИдентификаторРодителя = СтрокаИерархии.ИдентификаторРодителя;
			
		КонецЦикла;
		
		ЭтоГрупповойШаг = (ТаблицаРезультата.Найти(СтрокаРезультата.Идентификатор, ""ИдентификаторРодителя"") <> Неопределено);
		
		// Оформление
		ОбластьНазвания = МакетОбласти.Область(""C2"");
		ОбластьНазвания.Отступ =  УровеньГруппы * 4;
		Если ЭтоГрупповойШаг Тогда
			ОбластьНазвания.Шрифт = Новый Шрифт(ОбластьНазвания.Шрифт,,, Истина);
		КонецЕсли;
		
		ИмяГруппы = УзлыГрупп[СтрокаРезультата.ИдентификаторРодителя];
		Открыта = Истина;
		
		ОбластьГруппы = ДокументРезультат.Вывести(МакетОбласти, УровеньГруппы, ИмяГруппы, Открыта);
		ОбластьГруппы.Имя = СтрокаРезультата.Идентификатор;
		
		Если ЭтоГрупповойШаг Тогда
			// Нужно добавлять строки вначало, чтобы поиск находил последние элементы, а не первые при построении иерархии 
			// для повторяющихся шагов, например макрошагов, циклов и т.п.
			СтрокаТаблицы = ТаблицаИерархии.Вставить(0);
			СтрокаТаблицы.Идентификатор         = СтрокаРезультата.Идентификатор;
			СтрокаТаблицы.ИдентификаторРодителя = СтрокаРезультата.ИдентификаторРодителя;
			СтрокаТаблицы.СтрокаТД              = ОбластьГруппы;
		КонецЕсли;
		
		УзлыГрупп[СтрокаРезультата.Идентификатор] = УровеньГруппы + 1;
		
	КонецЦикла;
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	
	Для каждого СтрокаИерархии Из ТаблицаИерархии Цикл
		СтрокаТД = СтрокаИерархии.СтрокаТД;
		НомерСтроки = СтрокаТД.Верх;
		АдресСтроки = ""R"" + Формат(НомерСтроки, ""ЧГ=0"");
		
		ДокументРезультат.Область(АдресСтроки + ""C6"").СодержитЗначение = Истина;
		ДокументРезультат.Область(АдресСтроки + ""C7"").СодержитЗначение = Истина;
		ДокументРезультат.Область(АдресСтроки + ""C8"").СодержитЗначение = Истина;
		ДокументРезультат.Область(АдресСтроки + ""C9"").СодержитЗначение = Истина;
		ДокументРезультат.Область(АдресСтроки + ""C10"").СодержитЗначение = Истина;
		
		ДокументРезультат.Область(АдресСтроки + ""C6"").Значение = СтрокаИерархии.Ошибки;
		ДокументРезультат.Область(АдресСтроки + ""C7"").Значение = СтрокаИерархии.Вызовы;
		ДокументРезультат.Область(АдресСтроки + ""C8"").Значение = СтрокаИерархии.Продолжительность;
		ДокументРезультат.Область(АдресСтроки + ""C9"").Значение = СтрокаИерархии.Отправлено;
		ДокументРезультат.Область(АдресСтроки + ""C10"").Значение = СтрокаИерархии.Принято;
		
	КонецЦикла;
	

КонецПроцедуры




#КонецОбласти









",
{4,4,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",ce4daf12-db98-4c61-b8f1-c944e90b3899}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ДокументРезультат",
{1,1,
{"ru","Протокол"}
},
{"Pattern",
{"#",e603103e-a318-4edc-a014-b1c6cf94d49f}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"АдрДД",
{1,1,
{"ru","Адр ДД"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{8},0,"ПутьКФормам",
{1,1,
{"ru","Путь к формам"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,4,
{0,"АдрДД",
{"Pattern",
{"S"}
},0},
{0,"ПутьКФормам",
{"Pattern",
{"S"}
},0},
{0,"СформироватьПриОткрытии",
{"Pattern",
{"B"}
},0},
{0,"Расшифровка",
{"Pattern"},0}
},
{0,1,
{7,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Сформировать",
{1,1,
{"ru","Сформировать"}
},
{1,1,
{"ru","Сформировать"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,0ce78048-0196-4f80-a781-9829cdb7f43e},"",-1,-1,1,0,""},"Сформировать",2,0,0,
{0,0},1,0}
},
{0,0},
{0,0},0,0}