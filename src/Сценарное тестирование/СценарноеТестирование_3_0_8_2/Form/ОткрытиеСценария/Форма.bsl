
#Область Перменные

// Главная форма, содержащая экспортные процедуры и функции
&НаКлиенте
Перем СцТ_ГлавнаяФорма;

// Уникальные идентификаторы шагов, содержащих ссылки (при импорте шагов)
&НаКлиенте
Перем УИШиШаговСоСсылками;

&НаКлиенте
Перем СсылкиШагов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	ИдентификаторГлавнойФормы = Параметры.ИдентификаторГлавнойФормы;
	
	ИмяТекущейКонфигурации = Метаданные.Имя;
	ТекущаяКонфигурация    = Метаданные.Синоним;
	
	ДеревоМакрошагов = РеквизитФормыВЗначение("БлокСценария");
	АдресШаблонаДереваМакрошагов = ПоместитьВоВременноеХранилище(ДеревоМакрошагов, Новый УникальныйИдентификатор);
	
	ДействиеОткрытия = Параметры.ДействиеОткрытия;
	Если ДействиеОткрытия = "Выполнение" Тогда
		
		Заголовок = НСтр("ru = 'Открытие файла сценария для выполнения'");
		Элементы.ДекорацияПредупреждениеПриПрогоне.Видимость = Истина;
		
	ИначеЕсли ДействиеОткрытия = "ВозвратитьИмяФайлаВКонфигурациюСТ" Тогда
		
		Заголовок = НСтр("ru = 'Выбор сценария для загрузки'");
		КомандаЗагрузки = Команды.Найти("ЗагрузитьБлок");
		КомандаЗагрузки.Подсказка = "";
		Элементы.ЗагрузитьБлок.Заголовок = НСтр("ru = 'Загрузить'");
		
	ИначеЕсли ДействиеОткрытия = "ИмпортШагов" Тогда
		
		Заголовок = НСтр("ru = 'Добавление новых шагов из файла сценария'");
		Элементы.ДекорацияИнформацияОШагеВыборваФайла.Видимость = Истина;
		
		КомандаЗагрузки = Команды.Найти("ЗагрузитьБлок");
		КомандаЗагрузки.Подсказка = "";
		КомандаЗагрузки.Картинка  = Новый Картинка;
		Элементы.ЗагрузитьБлок.Заголовок = НСтр("ru = 'Далее >'");
		
		Элементы.КомандаНазад.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СцТ_ГлавнаяФорма = ВладелецФормы;
	
	СцТ_НачатьВыборСценария();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_Шапка

&НаКлиенте
Процедура ФайлСценарияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СцТ_НачатьВыборСценария();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлСценарияПриИзменении(Элемент)
	
	СцТ_ПриИзмененииИмениФайлаСценария();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_ДоступныеБлокиТестов

&НаКлиенте
Процедура ДоступныеБлокиТестовПриАктивизацииСтроки(Элемент)
	
	ТД = Элементы.ДоступныеБлокиТестов.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТД.ТипСтроки = 2 ИЛИ ТД.ТипСтроки = 3 Тогда
		ФайлСценария = ТД.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеБлокиТестовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	ДанныеВыбраннойСтроки = Элементы.ДоступныеБлокиТестов.ТекущиеДанные;
	
	Если ДанныеВыбраннойСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеВыбраннойСтроки.ТипСтроки = 2 ИЛИ ДанныеВыбраннойСтроки.ТипСтроки = 3 Тогда
		СцТ_ЗагрузитьСценарийПоДаннымСтроки(ДанныеВыбраннойСтроки);
	ИначеЕсли НЕ ПустаяСтрока(ДанныеВыбраннойСтроки.ПолноеИмяФайла) Тогда
		ФайлСценария = "";
		Каталог      = ДанныеВыбраннойСтроки.ПолноеИмяФайла;
		Каталог_Представление = НСтр("ru = 'Другие сценарии в каталоге %1'");
		Каталог_Представление = СтрЗаменить(Каталог_Представление, "%1", Каталог);
		СцТ_ПрочитатьЗаголовкиСценариевИзКаталогаИЗаполнитьТаблицу();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_БлокСценария

&НаКлиенте
Процедура БлокСценарияПриАктивизацииСтроки(Элемент)
	
	// Всё отображение не связанное с кнопками меню
	ПодключитьОбработчикОжидания("СцТ_ОтобразитьСостояниеТекущегоШага", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияПометкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.БлокСценария.ТекущиеДанные;
	Если ТекДанные.Пометка = 2 Тогда
		ТекДанные.Пометка = 0;
	КонецЕсли;
	
	СцТ_УстановитьПометкуУВетвиДереваШагов(ТекДанные, ТекДанные.Пометка);
	
	РодительУзла = ТекДанные.ПолучитьРодителя();
	Пока РодительУзла <> Неопределено Цикл
		СцТ_ВычислитьПометкуУзла(РодительУзла);
		РодительУзла = РодительУзла.ПолучитьРодителя();
	КонецЦикла;
	
	ВыбраныШагиБЛ = СцТ_ВыбраныШагиБЛ(БлокСценария);
	Элементы.ЗагрузитьБлок.Доступность = СцТ_ЕстьОтмеченныеШаги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура СцТ_ВыполнитьЗагрузкуДанныхСценария(
	Результат,
	АдресФайла,
	ВыбранноеИмяФайла,
	ДополнительныеПараметры) Экспорт
	
	СообщениеОбОшибке  = "";
	ВыхВремя = 0;
	СтруктураСАдресами = СцТ_ЗагрузкаСценария(АдресФайла, СообщениеОбОшибке, ВыхВремя);
	
	Если СтруктураСАдресами <> Неопределено Тогда
		
		Если ДействиеОткрытия = "ИмпортШагов" Тогда
			
			ВыбраныШагиБЛ                = Ложь;
			ИмяПрочитанногоФайлаСценария = ФайлСценария;
			
			НаименованиеСценария = Элементы.ДоступныеБлокиТестов.ТекущиеДанные.Наименование;
			Элементы.ЗагрузитьБлок.Доступность = Ложь;
			//Элементы.ЗагрузитьБлок.Заголовок   = НСтр("ru = 'Готово'");
			
			Элементы.СтраницыШаговМастера.ТекущаяСтраница = Элементы.СтраницаВыборШагов;
			Элементы.КомандаНазад.Доступность             = Истина;
			
			УИШиШаговСоСсылками = СтруктураСАдресами.УИШиШаговСоСсылками;
			
			// Развертывание верхнего уровня иерархии
			Для каждого Узел Из БлокСценария.ПолучитьЭлементы() Цикл
				Элементы.БлокСценария.Развернуть(Узел.ПолучитьИдентификатор(), Ложь);
			КонецЦикла;
			
			Состояние();
			
		Иначе
			СтруктураСАдресами.Вставить("ФайлСценария"  , ФайлСценария);
			СтруктураСАдресами.Вставить("НачалоЗагрузки", НачалоЗагрузки);
			СтруктураСАдресами.Вставить("ВыхВремя"      , ВыхВремя);
			Закрыть(СтруктураСАдресами);
		КонецЕсли;
		
	Иначе
		
		Состояние();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Ошибка при чтении сценария из файла'")
			+ ?(ПустаяСтрока(СообщениеОбОшибке), "", ": " + СообщениеОбОшибке);
		Сообщение.Поле = "ФайлСценария";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПриОтветеНаВопросОДобавленииШаговВТекущийСценарий(КодВозврата, ДобавляемыеСсылки) Экспорт
	
	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ДобавитьВыбранныеШагиВТекущийСценарий(ДобавляемыеСсылки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ОткрытьКаталог(Команда)
	
	Если НЕ ПустаяСтрока(Каталог) Тогда
		Попытка
			СтрокаКоманды = "explorer.exe /n,/root,""%1""";
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%1", Каталог);
			ЗапуститьПриложение(СтрокаКоманды);
		Исключение
		КонецПопытки;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Не задан каталог. Выберите файл сценария'");
		Сообщение.ПутьКДанным = "ФайлСценария";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьБлок(Команда)
	
	НачалоЗагрузки = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ДействиеОткрытия <> "ИмпортШагов" Тогда
		
		СцТ_ЗагрузитьСценарийПоДаннымСтроки(Элементы.ДоступныеБлокиТестов.ТекущиеДанные);
		
	Иначе
		// Работа мастера добавления шагов в сценарий
		Если Элементы.СтраницыШаговМастера.ТекущаяСтраница = Элементы.СтраницаВыборФайла Тогда
			
			// Переход на следующую страницу будет выполнен после успешной загрузки файла сценария
			СцТ_ЗагрузитьСценарийПоДаннымСтроки(Элементы.ДоступныеБлокиТестов.ТекущиеДанные);
			
		ИначеЕсли Элементы.СтраницыШаговМастера.ТекущаяСтраница = Элементы.СтраницаВыборШагов Тогда
			
			Если НЕ СцТ_ЕстьОтмеченныеШаги() Тогда
				
				ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны добавляемые шаги сценария.'"));
				Возврат;
				
			Иначе
				
				// МУВШ - Массив УИШ выбранных шагов
				МУВШ = Новый Массив;
				ЗаполнитьМассивВыбранныхШагов(БлокСценария, МУВШ);
				
				//МОИС - массив описаний импортируемых ссылок
				МОИС = Новый Массив;
				ЗаполнитьМассивИмпортируемыхСсылок(МУВШ, МОИС, АдресТаблицыСсылок);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"СцТ_ПриОтветеНаВопросОДобавленииШаговВТекущийСценарий",
					ЭтотОбъект,
					МОИС);
				
				ПоказатьВопрос(ОписаниеОповещения,
					НСтр("ru = 'Добавить выбранные шаги в текущий сценарий?'"),
					РежимДиалогаВопрос.ДаНет);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	СцТ_УстановитьОтметкуУВсех(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиСоВсех(Команда)
	
	СцТ_УстановитьОтметкуУВсех(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыделенные(Команда)
	
	СцТ_УстановитьОтметкуУзлов(Элементы.БлокСценария.ВыделенныеСтроки, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСВыделенных(Команда)
	
	СцТ_УстановитьОтметкуУзлов(Элементы.БлокСценария.ВыделенныеСтроки, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Если Элементы.СтраницыШаговМастера.ТекущаяСтраница = Элементы.СтраницаВыборШагов Тогда
		Элементы.СтраницыШаговМастера.ТекущаяСтраница = Элементы.СтраницаВыборФайла;
		Элементы.КомандаНазад.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ЗагрузитьБлок.Доступность = Истина;
	//Элементы.ЗагрузитьБлок.Заголовок   = НСтр("ru = 'Далее >'");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	// СДЕЛАТЬ ПРОВЕРКУ, ЧТО ВЫБРАНЫ ШАГИ
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

#Область ОбщегоНазначенияДляЧтениеДанныхФайлов

// Проверка имени файла сценария
//
&НаКлиенте
Функция СцТ_ПроверитьИмяФайлаСценария() Экспорт
	
	Файл = Новый Файл(ФайлСценария);
	Если НЕ Файл.Существует() Тогда
		Возврат НСтр("ru = 'Выбранный файл не существует.'");
	КонецЕсли;
	
	Если Файл.ЭтоКаталог() Тогда
		Возврат НСтр("ru = 'Выбранный файл является каталогом.'");
	КонецЕсли;
	
	ЗаголовкиФайла = СцТ_ЗаголовкиФайла(ФайлСценария);
	Если ЗаголовкиФайла = Неопределено Тогда
		Возврат НСтр("ru = 'Выбранный файл не является правильным файлом сценария.'");
	КонецЕсли;
	
	Если ЗаголовкиФайла.ТипФайла <> "ФайлСценарияТеста" Тогда
		Возврат НСтр("ru = 'Выбранный файл не является файлом сценария теста.'");
	КонецЕсли;
	
	Если НЕ СцТ_ЭтоПоддерживаемаяВерсияФорматаФайла(ЗаголовкиФайла.ВерсияСтруктурыXML) Тогда
		ТекстСообщения = НСтр("ru = 'Неизвестная версия формата файла (""%1""). Возможно файл сценария сохранен обработкой более поздней версии.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ЗаголовкиФайла.ВерсияСтруктурыXML);
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Изменения на форме при изменении файла сценария
//
&НаКлиенте
Процедура СцТ_ПриИзмененииИмениФайлаСценария()
	
	Если ПустаяСтрока(ФайлСценария) Тогда
		Каталог = "";
		Каталог_Представление = "";
	Иначе
		
		Файл = Новый Файл(ФайлСценария);
		РасширениеФайлов = ВРег(СокрЛП(Файл.Расширение));
		Если Файл.Существует() Тогда
			Каталог = Файл.Путь;
			Каталог_Представление = НСтр("ru = 'Другие сценарии в каталоге %1'");
			Каталог_Представление = СтрЗаменить(Каталог_Представление, "%1", Каталог);
		Иначе
			Каталог = "";
			Каталог_Представление = "";
		КонецЕсли;
		
		СообщениеОбОшибке = СцТ_ПроверитьИмяФайлаСценария();
		Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
			ПоказатьПредупреждение(, СообщениеОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
	СцТ_ПрочитатьЗаголовкиСценариевИзКаталогаИЗаполнитьТаблицу();
	
КонецПроцедуры

// Загрузка выбранного сценария
//
&НаКлиенте
Процедура СцТ_ЗагрузитьСценарийПоДаннымСтроки(ДанныеСтроки)
	
	Если ПустаяСтрока(ФайлСценария) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран файл сценария.'");
		Сообщение.Поле  = "ФайлСценария";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = СцТ_ПроверитьИмяФайлаСценария();
	
	Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СообщениеОбОшибке;
		Сообщение.Поле  = "ФайлСценария";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ДействиеОткрытия = "ИмпортШагов"
		И ИмяПрочитанногоФайлаСценария = ФайлСценария Тогда
		// Если выбран тот же файл сценария тогда
		// нет необходимости читать его заново
		Элементы.СтраницыШаговМастера.ТекущаяСтраница = Элементы.СтраницаВыборШагов;
		Элементы.КомандаНазад.Доступность  = Истина;
		//Элементы.ЗагрузитьБлок.Заголовок   = ?(ВыбраныШагиБЛ, НСтр("ru = 'Далее >'"), НСтр("ru = 'Готово'"));
		Элементы.ЗагрузитьБлок.Доступность = СцТ_ЕстьОтмеченныеШаги();
		Возврат;
	КонецЕсли;
	
	Если ДействиеОткрытия = "ВозвратитьИмяФайлаВКонфигурациюСТ" Тогда
		// Возврат имени файла в конфигурацию СТ
		Закрыть(ФайлСценария);
		Возврат;
	КонецЕсли;
	
	ИмяПрочитанногоФайлаСценария = "";
	БлокСценария.ПолучитьЭлементы().Очистить(); // Не передавать на сервер заполненное дерево
	
	Попытка
		АдресФайла = "";
		Состояние(НСтр("ru = 'Открытие файла сценария'"),
			,
			ФайлСценария);
		НачатьПомещениеФайла(
			Новый ОписаниеОповещения("СцТ_ВыполнитьЗагрузкуДанныхСценария", ЭтотОбъект),
			АдресФайла,
			ФайлСценария,
			Ложь);
	Исключение
		Состояние();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось прочитать файл сценария ""<FILENAME>"" (<ERRDSCR>).'");
		Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "<FILENAME>", ФайлСценария);
		Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "<ERRDSCR>", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Загрузка сценария на сервере
&НаСервере
Функция СцТ_ЗагрузкаСценария(АдресФайла, СообщениеОбОшибке, ВыхВремя = 0) Экспорт
	
	СозданныеВременныеФайлы = Новый Массив;
	Попытка
		СтруктураСАдресами = СцТ_ПрочитатьФайлСценария(
			АдресФайла,
			СообщениеОбОшибке,
			СозданныеВременныеФайлы,
			ВыхВремя);
	Исключение
	КонецПопытки;
	
	Для каждого ИмяВремФайла Из СозданныеВременныеФайлы Цикл
		ОписательФайла = Новый Файл(ИмяВремФайла);
		Если ОписательФайла.Существует() Тогда
			Попытка
				УдалитьФайлы(ИмяВремФайла);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураСАдресами;
	
КонецФункции

// Чтение данных из файла сценария
//
&НаСервере
Функция СцТ_ПрочитатьФайлСценария(
	АдресФайла,
	СообщениеОбОшибке,
	СозданныеВременныеФайлы,
	ВыхВремя)
	
	ОписательФайла  = Новый Файл(ФайлСценария);
	РасширениеФайла = ВРег(СокрЛП(ОписательФайла.Расширение));
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ИмяВременногофайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	СозданныеВременныеФайлы.Добавить(ИмяВременногофайла);
	
	Попытка
		ДвоичныеДанныеФайла.Записать(ИмяВременногофайла);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'не удалось создать временный файл ('")
			+ ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Если РасширениеФайла <> ".ZIP" Тогда
		ИмяВременногофайлаСценария = ИмяВременногофайла;
	Иначе
		
		Попытка
			ЧтениеZIP = Новый ЧтениеZipФайла(ИмяВременногофайла);
		Исключение
			
			СообщениеОбОшибке = НСтр("ru = 'ошибка при чтении файла архива: '")
				+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
			
		КонецПопытки;
		
		ЭлементФайлаСценария = Неопределено;
		Для каждого ФайлВАрхиве Из ЧтениеZIP.Элементы Цикл
			Если ВРег(СокрЛП(ФайлВАрхиве.Расширение)) = "XML" Тогда
				ЭлементФайлаСценария = ФайлВАрхиве;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭлементФайлаСценария = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'файл архива не содержит файл сценария.'");
			Возврат Неопределено;
		КонецЕсли;
		
		ИмяВременногофайлаСценария = ПолучитьИмяВременногоФайла("");
		Описатель = Новый Файл(ИмяВременногофайлаСценария);
		ЧтениеZIP.Извлечь(
			ЭлементФайлаСценария,
			ИмяВременногофайлаСценария,
			РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		
		СозданныеВременныеФайлы.Добавить(ИмяВременногофайлаСценария);
		ИмяВременногофайлаСценария = ИмяВременногофайлаСценария + ПолучитьРазделительПути() + ЭлементФайлаСценария.Имя;
		
	КонецЕсли;
	
	// Чтение данных файла
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяВременногофайлаСценария);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'ошибка чтения файла ('")
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ ")";
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураСАдресами = Новый Структура;
	
	// Чтение схемы XSD
	Попытка
		
		ФабрикаПакета      = Неопределено;
		СериализаторПакета = Неопределено;
		СцТ_ПрочитатьСхемуХСД(ФабрикаПакета, СериализаторПакета);
		
		// Чтение данных
		ОбъектХДТО = Неопределено;
		Если НЕ СцТ_ПрочитатьДанныеИзХМЛ(ФабрикаПакета, ЧтениеXML, ОбъектХДТО) Тогда
			СообщениеОбОшибке = НСтр("ru = 'неверный формат данных файла.'");
			Возврат Неопределено;
		КонецЕсли;
		
		ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ВыхВремя = (ВремяОкончания - ВремяНачала) / 1000;
		
		Если ТипЗнч(ОбъектХДТО) <> Тип("ОбъектXDTO") Тогда
			СообщениеОбОшибке = НСтр("ru = 'неверный формат данных файла.'");
			Возврат Неопределено;
		Иначе
			Если ОбъектХДТО.Тип().URIПространстваИмен <> "http://v8.1c.ru/stest/extforms"
					ИЛИ ОбъектХДТО.Тип().Имя <> "НастройкиСценария" Тогда
				СообщениеОбОшибке = 
					НСтр("ru = 'неверный формат данных файла (неверный URI пространства имен ""%1"").'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%1", ОбъектХДТО.Тип().URIПространстваИмен);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ВерсияСтруктурыXML = ОбъектХДТО.ВерсияСтруктурыXML;
		
		СтруктураСАдресами.Вставить("Наименование"                  , ОбъектХДТО.Наименование);
		СтруктураСАдресами.Вставить("Автор"                         , ОбъектХДТО.Автор);
		СтруктураСАдресами.Вставить("ДатаАктуализации"              , ОбъектХДТО.ДатаАктуализации);
		СтруктураСАдресами.Вставить("ИмяФайлаБлокаТеста"            , ФайлСценария);
		СтруктураСАдресами.Вставить("Конфигурация"                  , ОбъектХДТО.Конфигурация);
		СтруктураСАдресами.Вставить("НачальнаяДата"                 , ОбъектХДТО.НачальнаяДата);
		СтруктураСАдресами.Вставить("НомерШагаДляНачальнойУстановки", ОбъектХДТО.НомерШагаДляНачальнойУстановки);
		СтруктураСАдресами.Вставить("Описание"                      , ОбъектХДТО.Описание);
		СтруктураСАдресами.Вставить("Платформа"                     , ОбъектХДТО.Платформа);
		СтруктураСАдресами.Вставить("ТаймаутПоискаИнтерактивныхОбъектов",
			ОбъектХДТО.ТаймаутПоискаИнтерактивныхОбъектов);
		СтруктураСАдресами.Вставить("КомпьютерИБ"                   , ОбъектХДТО.КомпьютерИБ);
		СтруктураСАдресами.Вставить("ДругаяИБ"                      , ОбъектХДТО.ДругаяИБ);
		СтруктураСАдресами.Вставить("СтрокаПодключенияКИБ"          , ОбъектХДТО.СтрокаПодключенияКИБ);
		СтруктураСАдресами.Вставить("ДопПараметрыКоманднойСтроки"   , ОбъектХДТО.ДопПараметрыКоманднойСтроки);
		
		СтруктураСАдресами.Вставить("ВидТестируемогоКлиента"        , ОбъектХДТО.ВидТестируемогоКлиента);
		СтруктураСАдресами.Вставить("ИмяПользователя"               , ОбъектХДТО.ИмяПользователя);
		СтруктураСАдресами.Вставить("ПарольПользователяИБ"          , ОбъектХДТО.ПарольПользователяИБ);
		СтруктураСАдресами.Вставить("ПортТестируемогоКлиента"       , ОбъектХДТО.ПортТестируемогоКлиента);
		СтруктураСАдресами.Вставить("URLИБ"                         , ОбъектХДТО.URLИБ);
		СтруктураСАдресами.Вставить("ТипБлока"                      , ОбъектХДТО.ТипБлока);
		
		СтруктураСАдресами.Вставить("ДействиеОткрытия"              , ДействиеОткрытия);
		
		АдресВременногоХранилищаСценария = "";
		АдресТаблицыСсылок               = "";
		АдресНачальныхУстановокШагов     = "";
		АдресШаблоновШагов               = "";
		АдресТаблицыКлючей               = "";
		АдресДереваМакрошагов            = "";
		АдресНастроекЭталоннойБазы       = "";
		
		БлокСценарияКакДеревоЗначения = СцТ_ПрочитатьДеревоБлокаСценария(
			ФабрикаПакета,
			СериализаторПакета,
			ОбъектХДТО.БлокСценарияДерево.БлокСценарияСтрока);
			
		ТаблицаСсылок = СцТ_ЗагрузитьТаблицуСсылок(
			ОбъектХДТО.СсылкиТаблица.СсылкиСтрока,
			СериализаторПакета);
		
		АдресТаблицыСсылок = ПоместитьВоВременноеХранилище(
			ТаблицаСсылок,
			Новый УникальныйИдентификатор);
		
		Если ДействиеОткрытия = "ИмпортШагов" Тогда
			
			СтруктураСАдресами.Вставить("УИШиШаговСоСсылками", СцТ_ВыделитьУИШиШаговССылкамиИзТС(ТаблицаСсылок));
			
			СцТ_ПроверитьШагиСценария(БлокСценарияКакДеревоЗначения, ТаблицаСсылок);
			ЗначениеВРеквизитФормы(БлокСценарияКакДеревоЗначения, "БлокСценария");
			//БлокСценарияКакДеревоЗначения.Колонки.Удалить(
			//	БлокСценарияКакДеревоЗначения.Колонки.Найти("Пометка"));
			//БлокСценарияКакДеревоЗначения.Колонки.Удалить(
			//	БлокСценарияКакДеревоЗначения.Колонки.Найти("НекорректныйШаг"));
			
		Иначе
			
			АдресВременногоХранилищаСценария = ПоместитьВоВременноеХранилище(БлокСценарияКакДеревоЗначения);
			СцТ_ПрочитатьТаблицуКлючейИдентификации(ОбъектХДТО.КлючиТаблица.КлючиСтрока);
			
			Если ОбъектХДТО.НастройкиЭталоннойБазыДерево.НастройкиЭталоннойБазыСтрока.Количество() > 0 Тогда
				СцТ_ПрочитатьНастройкиЭталоннойБазы(
					ФабрикаПакета,
					СериализаторПакета,
					ОбъектХДТО.НастройкиЭталоннойБазыДерево.НастройкиЭталоннойБазыСтрока);
			КонецЕсли;
			
			// Необходимо читать только при редактировании
			СцТ_ПрочитатьШагиПоУмолчанию(ОбъектХДТО.ШагиПоУмолчаниюДерево);
			
			Если ОбъектХДТО.ШаблоныШаговТаблица.ШаблоныШаговСтрока.Количество() > 0 Тогда
				
				СцТ_ПрочитатьШаблоныШагов(
					ФабрикаПакета,
					СериализаторПакета,
					ОбъектХДТО.ШаблоныШаговТаблица.ШаблоныШаговСтрока);
				
			КонецЕсли;
			
			// Нужно учесть совместимость с предыдущими версиями
			СтруктураГлобальныхПараметров = Новый Структура;
			Если ОбъектХДТО.ГлобальныеПараметры <> Неопределено Тогда
				СцТ_ПрочитатьТаблицуГлобальныхПараметров(ОбъектХДТО.ГлобальныеПараметры.ГлобальныеПараметрыСтрока);
			КонецЕсли;
			
			лкДеревоМакрошагов = ПолучитьИзВременногоХранилища(АдресШаблонаДереваМакрошагов);
	
			Если ОбъектХДТО.Макрошаги <> Неопределено Тогда
				СцТ_ПрочитатьДеревоМакрошагов(
					ФабрикаПакета,
					СериализаторПакета,
					ОбъектХДТО.Макрошаги.БлокСценарияСтрока,
					лкДеревоМакрошагов);
			КонецЕсли;
				
			АдресДереваМакрошагов = ПоместитьВоВременноеХранилище(лкДеревоМакрошагов, Новый УникальныйИдентификатор);

			
		КонецЕсли;
		
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'возникло необрабатываемое исключение ('")
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + ")";
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураСАдресами.Вставить("АдресВременногоХранилищаСценария"           , АдресВременногоХранилищаСценария);
	СтруктураСАдресами.Вставить("АдресВременногоХранилищаСсылок"             , АдресТаблицыСсылок);
	СтруктураСАдресами.Вставить("АдресВременногоХранилищаШаблоновШагов"      , АдресШаблоновШагов);
	СтруктураСАдресами.Вставить("АдресВременногоХранилищаШаговПоУмолчанию"   , АдресНачальныхУстановокШагов);
	СтруктураСАдресами.Вставить("АдресВременногоХранилищаКлючей"             , АдресТаблицыКлючей);
	СтруктураСАдресами.Вставить("АдресВременногоХранилищаНастроекИБ"         , АдресНастроекЭталоннойБазы);
	СтруктураСАдресами.Вставить("СтруктураГлобальныхПараметров"              , СтруктураГлобальныхПараметров);
	СтруктураСАдресами.Вставить("АдресДереваМакрошагов"                      , АдресДереваМакрошагов);
	
	
	Возврат СтруктураСАдресами;
	
КонецФункции

// Чтение заголовков всех файлов выбранного каталога
//
&НаКлиенте
Процедура СцТ_ПрочитатьЗаголовкиСценариевИзКаталогаИЗаполнитьТаблицу()
	
	ДоступныеБлокиТестов.Очистить();
	
	Если ПустаяСтрока(Каталог) Тогда
		Возврат;
	КонецЕсли;
	
	РазделительПути = ПолучитьРазделительПути();
	Если Прав(Каталог, 1) <> РазделительПути Тогда
		Каталог = Каталог + РазделительПути;
	КонецЕсли;
	
	СтрокаУровеньВВерх = ДоступныеБлокиТестов.Добавить();
	СтрокаУровеньВВерх.ИмяФайла       = ".." + РазделительПути;
	СтрокаУровеньВВерх.ТипСтроки      = 0;
	Файл = Новый Файл(Каталог);
	Если НЕ Файл.Существует() Тогда
		СтрокаУровеньВВерх.ПолноеИмяФайла = "";
	Иначе
		
		ПозицияПоследнегоРазделителя = СтрДлина(Файл.Путь) - 1;
		Пока ПозицияПоследнегоРазделителя > 0
			И Сред(Файл.Путь, ПозицияПоследнегоРазделителя, 1) <> РазделительПути Цикл
			ПозицияПоследнегоРазделителя = ПозицияПоследнегоРазделителя - 1;
		КонецЦикла;
		
		Если ПозицияПоследнегоРазделителя < 1 Тогда
			СтрокаУровеньВВерх.ПолноеИмяФайла = Файл.Путь;
		Иначе
			СтрокаУровеньВВерх.ПолноеИмяФайла = Сред(Файл.Путь, 1, ПозицияПоследнегоРазделителя);
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеФайлы = Новый СписокЗначений;
	//НайтиФайлы(Каталог, "*" + РасширениеФайлов);
	XMLФайлы = НайтиФайлы(Каталог, "*.xml");
	Для каждого XMLФайл Из XMLФайлы Цикл
		НайденныеФайлы.Добавить(XMLФайл, XMLФайл.имя);
	КонецЦикла;
	
	ZIPФайлы = НайтиФайлы(Каталог, "*.zip");
	Для каждого ZIPФайл Из ZIPФайлы Цикл
		НайденныеФайлы.Добавить(ZIPФайл, ZIPФайл.имя);
	КонецЦикла;
	
	НайденныеФайлы.СортироватьПоПредставлению();
	
	Для каждого ЭлементСписка Из НайденныеФайлы Цикл
		
		Файл = ЭлементСписка.Значение;
		
		Заголовки = СцТ_ЗаголовкиФайла(Файл.ПолноеИмя);
		Если Заголовки = Неопределено ИЛИ Заголовки.ТипФайла <> "ФайлСценарияТеста" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДоступныеБлокиТестов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Заголовки);
		НоваяСтрока.ИмяФайла  = Файл.Имя;
		НоваяСтрока.ТипСтроки = ?(ВРег(Файл.Расширение) = ".ZIP", 3, 2);
		
		Попытка
			Если Заголовки.КоличествоШагов <> 0 Тогда
				НоваяСтрока.ПроцентАвтоматизации = Окр(
					(Заголовки.КоличествоШагов - Заголовки.КоличествоРучныхШагов) * 100 / Заголовки.КоличествоШагов,
					2);
			Иначе
				НоваяСтрока.ПроцентАвтоматизации = 0;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		НоваяСтрока.ПредставлениеКонфигурации = Заголовки.Конфигурация + " (" + Заголовки.ВерсияКонфигурации + ")";
		
	КонецЦикла;
	
	Если ДействиеОткрытия <> "ВозвратитьИмяФайлаВКонфигурациюСТ" Тогда
		
		Для каждого ТекущаяСтрока Из ДоступныеБлокиТестов Цикл
			
			Если ТекущаяСтрока.ТипСтроки <> 2 И ТекущаяСтрока.ТипСтроки <> 3 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(ТекущаяСтрока.ИмяКонфигурации) Тогда
				ТекущаяСтрока.ЭтоТестДругойКонфигурации = (ТекущаяСтрока.Конфигурация <> ТекущаяКонфигурация);
			Иначе
				ТекущаяСтрока.ЭтоТестДругойКонфигурации = (ТекущаяСтрока.ИмяКонфигурации <> ИмяТекущейКонфигурации);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//ОтборСтрок = Новый Структура("ТипСтроки,ПолноеИмяФайла", ТС, ФайлСценария);
	ОтборСтрок = Новый Структура("ПолноеИмяФайла", ФайлСценария);
	НайденыеСтроки = ДоступныеБлокиТестов.НайтиСтроки(ОтборСтрок);
	Если НайденыеСтроки.Количество() > 0 Тогда
		Элементы.ДоступныеБлокиТестов.ТекущаяСтрока = НайденыеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	// Добавление каталогов
	НайденныеФайлы = НайтиФайлы(Каталог, "*");
	Для каждого Файл Из НайденныеФайлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			НоваяСтрока = ДоступныеБлокиТестов.Добавить();
			НоваяСтрока.ИмяФайла       = Файл.Имя;
			НоваяСтрока.ПолноеИмяФайла = Файл.ПолноеИмя;
			НоваяСтрока.ТипСтроки      = 1;
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеБлокиТестов.Сортировать("ТипСтроки,ИмяФайла");
	
КонецПроцедуры

// Чтение заголовка файла
//
&НаКлиенте
Функция СцТ_ЗаголовкиФайла(ПутьКФайлу = "")
	
	#Если НЕ ВебКлиент Тогда
	
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		ПутьКФайлу = ФайлСценария;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТипФайла"                      , "");
	Результат.Вставить("Наименование"                  , "");
	Результат.Вставить("Автор"                         , "");
	Результат.Вставить("ДатаАктуализации"              , Дата(1,1,1));
	Результат.Вставить("ИмяКонфигурации"               , "");
	Результат.Вставить("Конфигурация"                  , "");
	Результат.Вставить("Платформа"                     , "");
	Результат.Вставить("ВерсияКонфигурации"            , "");
	Результат.Вставить("КоличествоШагов"               , 0);
	Результат.Вставить("КоличествоРучныхШагов"         , 0);
	Результат.Вставить("Описание"                      , "");
	Результат.Вставить("ВерсияСтруктурыXML"            , "");
	Результат.Вставить("НомерШагаДляНачальнойУстановки", "");
	Результат.Вставить("НачальнаяДата"                 , Дата(1,1,1));
	
	Попытка
		
		ОписательФайла = Новый Файл(ПутьКФайлу);
		
		ЧтениеXML = Новый ЧтениеXML;
		
		Если ВРег(СокрЛП(ОписательФайла.Расширение)) = ".ZIP" Тогда
			ЧтениеZIP = Новый ЧтениеZipФайла(ПутьКФайлу);
			КомментарийZIPФайла = ЧтениеZIP.Комментарий;
			// Обработка ошибки предыдущей версии обработки:
			// добавление лишнего закрывающего тега описания
			Если Найти(КомментарийZIPФайла, "<Описание/>") > 0
				И Найти(КомментарийZIPФайла, "</Описание>") > 0 Тогда
				КомментарийZIPФайла = СтрЗаменить(КомментарийZIPФайла, "<Описание/>", "<Описание>");
			КонецЕсли;
			ЧтениеXML.УстановитьСтроку(КомментарийZIPФайла);
		Иначе
			ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
		КонецЕсли;
		
		ЧтениеXML.Прочитать(); // Зашли в корень
		
		Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ИмяАтрибута = ЧтениеXML.Имя;
				
				Попытка
					СвойствоПрисутствует = Результат.Свойство(ИмяАтрибута);
				Исключение
					СвойствоПрисутствует = Ложь;
				КонецПопытки;
				
				Если СвойствоПрисутствует Тогда
					
					ТипАтрибута = ТипЗнч(Результат[ИмяАтрибута]);
					Попытка
						Результат[ИмяАтрибута] = XMLЗначение(ТипАтрибута, ЧтениеXML.Значение);
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Чтение описания
		
		ЧтениеXML.Прочитать();
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И ЧтениеXML.Имя = "Описание" Тогда
			ЧтениеXML.Прочитать();
			Результат.Описание = ЧтениеXML.Значение;
		КонецЕсли;
		
		
		ЧтениеXML.Закрыть();
		
		Результат.Вставить("ПолноеИмяФайла", ПутьКФайлу);
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СцТ_ЭтоПоддерживаемаяВерсияФорматаФайла(ВерсиСтруктурыXML)
	
	Возврат (ВерсиСтруктурыXML = "82-01"
		ИЛИ ВерсиСтруктурыXML = "82-02"
		ИЛИ ВерсиСтруктурыXML = "82-03"
		ИЛИ ВерсиСтруктурыXML = "82-04"
		);
	
КонецФункции

#КонецОбласти

#Область ЧтениеДанныхXMLпосредствомXDTO

// Чтение схемы ХСД
//
&НаСервере
Процедура СцТ_ПрочитатьСхемуХСД(ФабрикаПакета, СериализаторПакета)

	// Чтение схемы XSD. Начало.
	МакетСхемы = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаXSD_82_03");
	ТекстСхемы = МакетСхемы.ПолучитьТекст();

	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(ТекстСхемы);

	ПостроительДОМ = Новый ПостроительDOM;
	ДокументДОМ = ПостроительДОМ.Прочитать(ЧтениеХМЛ);

	ПостроительСхемыХМЛ = Новый ПостроительСхемXML;
	СхемаХМЛ = ПостроительСхемыХМЛ.СоздатьСхемуXML(ДокументДОМ);

	НаборСхемХМЛ = Новый НаборСхемXML;
	НаборСхемХМЛ.Добавить(СхемаХМЛ);

	// Добавить также пакет XDTO текущей конфигурации
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(
		ФабрикаXDTO.Пакеты.Получить("http://v8.1c.ru/8.1/data/enterprise/current-config"));
	МассивПакетов.Добавить(
		ФабрикаXDTO.Пакеты.Получить("http://v8.1c.ru/8.1/data-composition-system/settings"));

	ФабрикаПакета = Новый ФабрикаXDTO(НаборСхемХМЛ, МассивПакетов);
	СериализаторПакета = Новый СериализаторXDTO(ФабрикаПакета);
	ЧтениеХМЛ.Закрыть();
	// Чтение схемы XSD. Конец.

КонецПроцедуры

// Чтение данных из файла
//
&НаСервере
Функция СцТ_ПрочитатьДанныеИзХМЛ(ФабрикаПакета, ЧтениеXML, ОбъектХДТО)
	
	Результат = Истина;
	
	ТипДанныхХМЛ = ПолучитьXMLТип(ЧтениеXML);
	Если ТипЗнч(ТипДанныхХМЛ) = Тип("ТипДанныхXML")
			И ТипДанныхХМЛ.URIПространстваИмен="http://v8.1c.ru/stest/extforms"
			И ТипДанныхХМЛ.ИмяТипа="НастройкиСценария" Тогда
		ОбъектХДТО = ФабрикаПакета.ПрочитатьXML(
			ЧтениеXML, ФабрикаПакета.Тип("http://v8.1c.ru/stest/extforms", "НастройкиСценария"));
		Результат = Истина;
	Иначе
		ОбъектХДТО = Неопределено;
		Результат  = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЧтениеШаговСценария

// Чтение сценария
//
&НаСервере
Функция СцТ_ПрочитатьДеревоБлокаСценария(ФабрикаПакета, СериализаторПакета, СписокХДТО)
	
	лкДеревоБлокСценария = РеквизитФормыВЗначение("БлокСценария");
	//лкДеревоБлокСценария.Колонки.Добавить("ТочкаОстанова",
	//	Новый ОписаниеТипов("Число"));
	
	СцТ_ЗагрузитьСтрокиДереваБлокаСценария(
		ФабрикаПакета,
		СериализаторПакета,
		лкДеревоБлокСценария.Строки,
		СписокХДТО);
	
	Возврат лкДеревоБлокСценария;
	
КонецФункции

// Чтение строк дерева сценария
//
&НаСервере
Процедура СцТ_ЗагрузитьСтрокиДереваБлокаСценария(
	ФабрикаПакета,
	СериализаторПакета,
	Строки,
	СписокХДТО)
	
	Если ТипЗнч(СписокХДТО) = Тип("СписокXDTO") Тогда
		
		Для каждого ТекущаяСтрока Из СписокХДТО Цикл
			
			НоваяСтрока = Строки.Добавить();
			
			// Загрузить простые значения
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			лкДеревоЗначенияСтрокиБлокСценария = Новый ДеревоЗначений;
			лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Имя",
				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
			лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Синоним",
				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
			лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Активность",
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
			лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Значение");
			лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Представление",
				Новый ОписаниеТипов("Строка"));
			лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Действие",
				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
			лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Скрипт",
				Новый ОписаниеТипов("Строка"));
			лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("ТипУзла",
				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
			лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Кл",
				Новый ОписаниеТипов("Булево"));
			
			СцТ_ЗагрузитьСтрокиЗначенияДереваБлокаСценария(
				ФабрикаПакета,
				СериализаторПакета,
				лкДеревоЗначенияСтрокиБлокСценария.Строки,
				ТекущаяСтрока.ЗначениеБлокаСценарияДерево.ЗначениеБлокаСценарияСтрока);
			
			НоваяСтрока.Значение = лкДеревоЗначенияСтрокиБлокСценария;
			
			// Есть подчинённые строки? Загрузить их во вложенные строки
			Если ТекущаяСтрока.БлокСценарияСтрока.Количество()>0 Тогда
				СцТ_ЗагрузитьСтрокиДереваБлокаСценария(
					ФабрикаПакета,
					СериализаторПакета,
					НоваяСтрока.Строки,
					ТекущаяСтрока.БлокСценарияСтрока);
			КонецЕсли;
			
			// Приведение шагов предыдущих версий к шагам текущей версии
			Если НоваяСтрока.ТипШага = "ЗакрытьФорму" Тогда
				НоваяСтрока.ТипШага = "ЗакрытьКлиентскоеОкноФормы";
			ИначеЕсли НоваяСтрока.ТипШага = "НажатьКнопку" Тогда
				
				Попытка
					СцТ_ПреобразоватьШагПроверкиКнопки(НоваяСтрока);
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			Если ВерсияСтруктурыXML = "82-01"
				ИЛИ ВерсияСтруктурыXML = "82-02"
				ИЛИ ВерсияСтруктурыXML = "82-03"
				ИЛИ ВерсияСтруктурыXML = "" Тогда
				
				НоваяСтрока.ДанныеКартинки =ДанныеНовойКартинки(НоваяСтрока.ТипШага);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеНовойКартинки(ТипШага)
	
	// Картинка в поле Картинка
	Если ТипШага = "Группа" Тогда
		ДанныеКартинки = 0;
		
	ИначеЕсли ТипШага = "АвтоГруппа" Тогда
		ДанныеКартинки = 1;
		
	ИначеЕсли ТипШага = "ИнтерактивнаяАвтоГруппа" Тогда
		ДанныеКартинки = 2;
		
	ИначеЕсли ТипШага = "АвтоГруппаТаблицаФормы" Тогда
		ДанныеКартинки = 3;
		
	ИначеЕсли ТипШага = "АвтоГруппаТабличныйДокумент" Тогда
		ДанныеКартинки = 4;
		
	ИначеЕсли ТипШага = "Повторение" Тогда
		ДанныеКартинки = 5;
		
	ИначеЕсли ТипШага = "Условие" Тогда
		ДанныеКартинки = 6;
		
	ИначеЕсли ТипШага = "Комментарий" Тогда
		ДанныеКартинки = 7;
		
	ИначеЕсли ТипШага = "ВыполнитьВРучную" Тогда
		ДанныеКартинки = 8;
		
	ИначеЕсли ТипШага = "Воспроизвести" Тогда
		ДанныеКартинки = 9;
		
	ИначеЕсли ТипШага = "СравнитьСЭталоном" Тогда
		ДанныеКартинки = 10;
		
	ИначеЕсли ТипШага = "СравнитьДвижения" Тогда
		ДанныеКартинки = 11;
		
	ИначеЕсли ТипШага = "ВыполнитьЗапрос" Тогда
		ДанныеКартинки = 12;
		
	ИначеЕсли ТипШага = "ПроверитьТекстОшибки" Тогда
		ДанныеКартинки = 13;
		
	ИначеЕсли ТипШага = "ВыполнитьПроцедуру" Тогда
		ДанныеКартинки = 14;
		
	ИначеЕсли ТипШага = "ВыполнитьКлиентскуюПроцедуру" Тогда
		ДанныеКартинки = 15;
		
	ИначеЕсли ТипШага = "Пауза" Тогда
		ДанныеКартинки = 16;
		
	ИначеЕсли ТипШага = "ВыполнитьМакрошаг" Тогда
		ДанныеКартинки = 17;
		
	ИначеЕсли ТипШага = "НажатьКнопку"
		ИЛИ ТипШага = "НажатьКнопкуКИ" Тогда
		ДанныеКартинки = 18;
		
	ИначеЕсли ТипШага = "НайтиЭлементФормы"
		ИЛИ ТипШага = "ЗаполнитьОдинРеквизитФормы"
		ИЛИ ТипШага = "ЗаполнитьКолонкуТаблицы" Тогда
		ДанныеКартинки = 19;
		
	ИначеЕсли ТипШага = "ЗаполнитьРеквизитыФормы"
		ИЛИ ТипШага = "ЗаполнитьСтрокуТаблицы" Тогда
		ДанныеКартинки = 20;
		
	ИначеЕсли ТипШага = "НайтиФорму"
		ИЛИ ТипШага = "НайтиСтрокуТаблицы" Тогда
		ДанныеКартинки = 22;
		
	ИначеЕсли ТипШага = "ЗавершитьРаботуТестируемогоКлиента"
		ИЛИ ТипШага = "ЗакрытьКлиентскоеОкноФормы" Тогда
		ДанныеКартинки = 23;
		
	ИначеЕсли ТипШага = "ДействиеСТаблицей"  Тогда
		ДанныеКартинки = 24;
		
	Иначе
		ДанныеКартинки = 21;
		
	КонецЕсли;
	
	Возврат ДанныеКартинки;
	
КонецФункции


&НаСервере
Процедура СцТ_ПреобразоватьШагПроверкиКнопки(ДанныеШага)
	
	ДеревоЗначения = ДанныеШага.Значение;
	УзелДействия = ДеревоЗначения.Строки.Найти(
		"ДействиеСКнопкой",
		"Имя",
		Ложь);
	
	Если УзелДействия <> Неопределено
		И УзелДействия.Значение = "Проверить" Тогда
		
		ДанныеШага.ДанныеКартинки = 1000;
		УзелДействия.Имя      = "ДействиеСОбъектом";
		УзелДействия.Значение = "ПроверитьСуществование";
		
		// Шаг необходимо преобразовать к шагу "НайтиЭлементФормы"
		ДанныеШага.ТипШага = "НайтиЭлементФормы";
		УзелПредставленияЭлемента = ДеревоЗначения.Строки.Найти(
			"ПредставлениеКнопки",
			"Имя",
			Ложь);
		
		Если УзелПредставленияЭлемента <> Неопределено Тогда
			ПредставлениеКнопки = Строка(УзелПредставленияЭлемента.Значение);
			УзелПредставленияЭлемента.Имя = "ПредставлениеОбъекта";
		Иначе
			ПредставлениеКнопки = ДанныеШага.Наименование;
		КонецЕсли;
		
		ДанныеШага.Наименование = НСтр("ru = 'Проверить существование элемента: '")
			+ НРег(Лев(ПредставлениеКнопки, 1))
			+ Сред(ПредставлениеКнопки, 2);
		
		УзелИмени = ДеревоЗначения.Строки.Найти(
			"ИмяКнопки",
			"Имя",
			Ложь);
		
		УзелИмени.Имя = "ИмяОбъекта";
		
		УзелВидаОбъекта = ДеревоЗначения.Строки.Найти(
			"ВидОбъекта",
			"Имя",
			Ложь);
		
		УзелВидаОбъекта.Имя = "ТипОбъекта";
		Если УзелВидаОбъекта.Значение = "КнопкаКоманднойПанели"
			ИЛИ УзелВидаОбъекта.Значение = "ОбычнаяКнопка"
			ИЛИ УзелВидаОбъекта.Значение = "Гиперссылка" Тогда
			УзелВидаОбъекта.Значение = 5;
		ИначеЕсли УзелВидаОбъекта.Значение = "ПолеФлажка" Тогда
			УзелВидаОбъекта.Значение = 3;
		Иначе
			
			УзелПути = ДеревоЗначения.Строки.Найти(
				"ИСТЗ_ПутьКОбъекту",
				"Имя",
				Ложь);
			
			Если УзелПути = Неопределено
				ИЛИ УзелПути.Строки.Количество() = 0 Тогда
				// Тип элемента определить не удалось
				
				Если УзелВидаОбъекта.Значение = "Картинка"
					ИЛИ УзелВидаОбъекта.Значение = "Надпись" Тогда
					УзелВидаОбъекта.Значение = 6;
				Иначе
					УзелВидаОбъекта.Значение = -1;
				КонецЕсли;
				
			Иначе
				
				УзелВидаОбъекта.Значение =
					УзелПути.Строки[УзелПути.Строки.Количество() - 1].Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Удаление лишних узлов
		Узел = ДеревоЗначения.Строки.Найти("КоманднаяПанель", "Имя", Ложь);
		Если Узел <> Неопределено Тогда
			ДеревоЗначения.Строки.Удалить(Узел);
		КонецЕсли;
		Узел = ДеревоЗначения.Строки.Найти("КонтекстноеМеню", "Имя", Ложь);
		Если Узел <> Неопределено Тогда
			ДеревоЗначения.Строки.Удалить(Узел);
		КонецЕсли;
		Узел = ДеревоЗначения.Строки.Найти("Подменю", "Имя", Ложь);
		Если Узел <> Неопределено Тогда
			ДеревоЗначения.Строки.Удалить(Узел);
		КонецЕсли;
		
		ДанныеШага.Автоописание = ДанныеШага.Наименование + ".";
		
		УзелВариантаПоиска = ДеревоЗначения.Строки.Найти("ВариантПоискаОбъекта", "Имя", Ложь);
		Если УзелВариантаПоиска <> Неопределено Тогда
			ВариантПоискаОбъекта = Строка(УзелВариантаПоиска.Значение);
		Иначе
			ВариантПоискаОбъекта = "";
		КонецЕсли;
		
		ПредставлениеВариантаПоиска = "";
		
		Если Лев(ВариантПоискаОбъекта, 1) = "1" Тогда
			ПредставлениеВариантаПоиска = НСтр("ru = 'по имени ('")
				+ УзелИмени.Значение +
				")";
		КонецЕсли;
		
		Если Сред(ВариантПоискаОбъекта, 2, 1) = "1" Тогда
			ПредставлениеВариантаПоиска = ПредставлениеВариантаПоиска
				+ ?(ПустаяСтрока(ПредставлениеВариантаПоиска),
					НСтр("ru = 'по заголовку'"),
					НСтр("ru = ' и заголовку'"))
				+ " ("
				+ УзелИмени.Синоним
				+ ")";
		КонецЕсли;
		
		Если Прав(ВариантПоискаОбъекта, 1) = "1" Тогда
			ПредставлениеВариантаПоиска = ПредставлениеВариантаПоиска
				+ НСтр("ru = ', при необходимости учитывать расположение элемента'");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПредставлениеВариантаПоиска) Тогда
			ДанныеШага.Автоописание = ДанныеШага.Автоописание
				+ Символы.ПС
				+ НСтр("ru = 'Искать элемент: '")
				+ ПредставлениеВариантаПоиска
				+ ".";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Чтение значения шагов сценария
//
&НаСервере
Процедура СцТ_ЗагрузитьСтрокиЗначенияДереваБлокаСценария(
	ФабрикаПакета,
	СериализаторПакета,
	Строки,
	СписокХДТО)
	
	Если ТипЗнч(СписокХДТО) = Тип("СписокXDTO") Тогда
		Для каждого ТекущаяСтрока Из СписокХДТО Цикл
			НоваяСтрока = Строки.Добавить();
			
			// Загрузить простые значения
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			НоваяСтрока.Кл = ТекущаяСтрока.ВклВОписание; // КЛ
			
			Попытка
				НоваяСтрока.Значение = ЗначениеИзСтрокиВнутр(НоваяСтрока.Значение);
			Исключение
			КонецПопытки;
			
			// Есть подчинённые строки? Загрузить их во вложенные строки
			Если ТекущаяСтрока.ЗначениеБлокаСценарияСтрока.Количество() > 0 Тогда
				
				СцТ_ЗагрузитьСтрокиЗначенияДереваБлокаСценария(
					ФабрикаПакета,
					СериализаторПакета,
					НоваяСтрока.Строки,
					ТекущаяСтрока.ЗначениеБлокаСценарияСтрока);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Чтение макрошагов
//
&НаСервере
Процедура СцТ_ПрочитатьДеревоМакрошагов(ФабрикаПакета, СериализаторПакета, СписокХДТО, лкДеревоМакрошагов)
	
	СцТ_ЗагрузитьСтрокиДереваБлокаСценария(
		ФабрикаПакета,
		СериализаторПакета,
		лкДеревоМакрошагов.Строки,
		СписокХДТО);
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеНастроекЭталоннойБазы

// Чтение настроек эталонной базы
//
&НаСервере
Процедура СцТ_ПрочитатьНастройкиЭталоннойБазы(ФабрикаПакета, СериализаторПакета, СписокХДТО)
	
	лкДеревоНастроекБазы = Новый ДеревоЗначений;
	лкДеревоНастроекБазы.Колонки.Добавить("Имя"              ,
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	лкДеревоНастроекБазы.Колонки.Добавить("ТипУзла"          ,
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	лкДеревоНастроекБазы.Колонки.Добавить("Представление"    ,
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	лкДеревоНастроекБазы.Колонки.Добавить("Активность"       ,
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	лкДеревоНастроекБазы.Колонки.Добавить("Отборы"           ,
		Новый ОписаниеТипов("ОтборКомпоновкиДанных"));
	лкДеревоНастроекБазы.Колонки.Добавить("ТаблицаРеквизитов",
		Новый ОписаниеТипов("СписокЗначений"));
	лкДеревоНастроекБазы.Колонки.Добавить("Подчинение"       ,
		Новый ОписаниеТипов("СписокЗначений"));
	лкДеревоНастроекБазы.Колонки.Добавить("ЕстьДоступ"       ,
		Новый ОписаниеТипов("Булево"));
	лкДеревоНастроекБазы.Колонки.Добавить("ТипМетаданных"    ,
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	лкДеревоНастроекБазы.Колонки.Добавить("ПоляГруппировки"  ,
		Новый ОписаниеТипов("СписокЗначений"));
	лкДеревоНастроекБазы.Колонки.Добавить("ПоляСортировки"   ,
		Новый ОписаниеТипов("СписокЗначений"));

	ИменаСложныхПолей = Новый Массив;
	ИменаСложныхПолей.Добавить("ТаблицаРеквизитов");
	ИменаСложныхПолей.Добавить("Подчинение");
	ИменаСложныхПолей.Добавить("ПоляГруппировки");
	ИменаСложныхПолей.Добавить("ПоляСортировки");
	
	СцТ_ЗагрузитьСтрокиДереваНастроекБазы(
		ФабрикаПакета,
		СериализаторПакета,
		лкДеревоНастроекБазы.Строки,
		СписокХДТО,
		ИменаСложныхПолей);
	
	АдресНастроекЭталоннойБазы = ПоместитьВоВременноеХранилище(
		лкДеревоНастроекБазы,
		ИдентификаторГлавнойФормы);
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ЗагрузитьСтрокиДереваНастроекБазы(
	ФабрикаПакета,
	СериализаторПакета,
	Строки,
	СписокХДТО,
	ИменаСложныхПолей)
	
	Если ТипЗнч(СписокХДТО) = Тип("СписокXDTO") Тогда
		
		Для каждого ТекущаяСтрока Из СписокХДТО Цикл
			
			НоваяСтрока = Строки.Добавить();
			
			// Загрузить простые значения
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				ТекущаяСтрока,
				,
				"Отборы,ТаблицаРеквизитов,Подчинение,ПоляГруппировки,ПоляСортировки");
			
			// Загрузить сложные значения
			Попытка
				НоваяСтрока.Отборы = ЗначениеИзСтрокиВнутр(ТекущаяСтрока.Отборы);
			Исключение
			КонецПопытки;
			
			Для каждого ИмяСложногоПоля Из ИменаСложныхПолей Цикл
				ОбъектXDTO = ТекущаяСтрока[ИмяСложногоПоля];
				Если ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
					Попытка
						НоваяСтрока[ИмяСложногоПоля] = СериализаторПакета.ПрочитатьXDTO(ОбъектXDTO);
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущаяСтрока.НастройкиЭталоннойБазыСтрока.Количество() > 0 Тогда
				СцТ_ЗагрузитьСтрокиДереваНастроекБазы(
					ФабрикаПакета,
					СериализаторПакета,
					НоваяСтрока.Строки,
					ТекущаяСтрока.НастройкиЭталоннойБазыСтрока,
					ИменаСложныхПолей);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеТаблицыКлючейИдентификации

&НаСервере
Процедура СцТ_ПрочитатьТаблицуКлючейИдентификации(СписокХДТО)
	
	ТаблицаКлючей = Новый ТаблицаЗначений;
	ТаблицаКлючей.Колонки.Добавить("ТипМетаданных", Новый ОписаниеТипов("Строка"));
	ТаблицаКлючей.Колонки.Добавить("ИмяМетаданных", Новый ОписаниеТипов("Строка"));
	ТаблицаКлючей.Колонки.Добавить("Ключи");
	
	СцТ_ЗагрузитьТаблицуКлючейИдентификации(ТаблицаКлючей, СписокХДТО);
	
	АдресТаблицыКлючей = ПоместитьВоВременноеХранилище(ТаблицаКлючей, ИдентификаторГлавнойФормы);
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ЗагрузитьТаблицуКлючейИдентификации(Таблица, СписокХДТО)
	
	Для каждого СтрокаХДТО Из СписокХДТО Цикл
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаХДТО);
		
		НоваяСтрока.Ключи = Новый ТаблицаЗначений;
		НоваяСтрока.Ключи.Колонки.Добавить("Имя");
		НоваяСтрока.Ключи.Колонки.Добавить("Наименование");
		СцТ_ЗагрузитьТаблицуКлючей(
			НоваяСтрока.Ключи,
			СтрокаХДТО.КлючиДанныеТаблица.КлючиДанныеСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ЗагрузитьТаблицуКлючей(Таблица, СписокХДТО)
	
	Для каждого СтрокаХДТО Из СписокХДТО Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаХДТО);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеТаблицыПараметров

&НаСервере
Процедура СцТ_ПрочитатьТаблицуГлобальныхПараметров(СписокХДТО)
	
	Если СписокХДТО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаХДТО Из СписокХДТО Цикл
		СтрокаТипа = СтрокаХДТО.ТипЗначения;
		СтрокаЗначения = СтрокаХДТО.Значение;
		
		Если      СтрокаТипа = "Число" Тогда
			ИстинноеЗначение = XMLЗначение(Тип("Число"), СтрокаЗначения);
		ИначеЕсли СтрокаТипа = "Булево" Тогда
			ИстинноеЗначение = XMLЗначение(Тип("Булево"), СтрокаЗначения);
		ИначеЕсли СтрокаТипа = "Дата" Тогда
			ИстинноеЗначение = XMLЗначение(Тип("Дата"), СтрокаЗначения);
		Иначе
			ИстинноеЗначение = СтрокаЗначения;
		КонецЕсли;
		
		СтруктураГлобальныхПараметров.Вставить(СтрокаХДТО.Ключ, ИстинноеЗначение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеТаблицыСсылок

&НаСервере
Функция СцТ_ЗагрузитьТаблицуСсылок(СписокХДТО, Сериализатор)
	
	ТаблицаСсылокНаСервере = Новый ТаблицаЗначений;
	ТаблицаСсылокНаСервере.Колонки.Добавить("Ссылка"                 , Новый ОписаниеТипов("Строка"));
	ТаблицаСсылокНаСервере.Колонки.Добавить("ТипМД"                  , Новый ОписаниеТипов("Строка"));
	ТаблицаСсылокНаСервере.Колонки.Добавить("ИмяМД"                  , Новый ОписаниеТипов("Строка"));
	ТаблицаСсылокНаСервере.Колонки.Добавить("Представление"          , Новый ОписаниеТипов("Строка"));
	//ТаблицаСсылокНаСервере.Колонки.Добавить("НомерШага"              , Новый ОписаниеТипов("Число"));
	ТаблицаСсылокНаСервере.Колонки.Добавить("СоответствиеСсылок");
	ТаблицаСсылокНаСервере.Колонки.Добавить("СтруктураИдентификации");
	//ТаблицаСсылокНаСервере.Колонки.Добавить("СоздаетсяВШаге"         , Новый ОписаниеТипов("Число"));
	ТаблицаСсылокНаСервере.Колонки.Добавить("МассивУИШ");
	ТаблицаСсылокНаСервере.Колонки.Добавить("ТекстЗапроса"           , Новый ОписаниеТипов("Строка"));
	ТаблицаСсылокНаСервере.Колонки.Добавить("ПоискПоЗапросу"         , Новый ОписаниеТипов("Булево"));
	
	Для каждого ТекущаяСтрока Из СписокХДТО Цикл
		
		СтрТаблСсылок = ТаблицаСсылокНаСервере.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаблСсылок, ТекущаяСтрока, , "СтруктураИдентификации,МассивУИШ");
		
		СтрТаблСсылок.ТипМД = ТекущаяСтрока.ТипМетаданных;
		СтрТаблСсылок.ИмяМД = ТекущаяСтрока.ИмяМетаданных;
		
		Попытка
			СтрТаблСсылок.МассивУИШ = Сериализатор.ПрочитатьXDTO(ТекущаяСтрока.МассивУИШ);
		Исключение
			СтрТаблСсылок.МассивУИШ = Новый Массив;
		КонецПопытки;
		
		СтруктураИдентификации = Новый ТаблицаЗначений;
		СтруктураИдентификации.Колонки.Добавить("Имя");
		СтруктураИдентификации.Колонки.Добавить("Представление");
		СтруктураИдентификации.Колонки.Добавить("Значение");
		СтруктураИдентификации.Колонки.Добавить("СокрТипЗначения");
		
		СцТ_ЗагрузитьСтруктуруИдентификации(СтруктураИдентификации,
			ТекущаяСтрока.СтруктураИдентификации.СтруктураИдентификацииСтрока);
		
		СтрТаблСсылок.СтруктураИдентификации = СтруктураИдентификации;
		
	КонецЦикла;
	
	ТаблицаСсылокНаСервере.Индексы.Добавить("Ссылка");
	
	Возврат ТаблицаСсылокНаСервере;
	
КонецФункции

&НаСервере
Процедура СцТ_ЗагрузитьСтруктуруИдентификации(СтрокиСтруктурыИдентификации, СписокХДТО)
	
	Для каждого ТекущаяСтрока Из СписокХДТО Цикл
		
		СтрСтруктурыИдентификации = СтрокиСтруктурыИдентификации.Добавить();
		ЗаполнитьЗначенияСвойств(СтрСтруктурыИдентификации, ТекущаяСтрока, , "Значение");
		Попытка
			СтрСтруктурыИдентификации.Значение = ЗначениеИзСтрокиВнутр(ТекущаяСтрока.Значение);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеНастроекШаговПоУмолчанию

&НаСервере
Процедура СцТ_ПрочитатьШагиПоУмолчанию(ДеревоХДТО)
	
	ДеревоНачальныхНастроекШагов = Новый ДеревоЗначений;
	ДеревоНачальныхНастроекШагов.Колонки.Добавить("Имя"                     , Новый ОписаниеТипов("Строка"));
	ДеревоНачальныхНастроекШагов.Колонки.Добавить("Синоним"                 , Новый ОписаниеТипов("Строка"));
	ДеревоНачальныхНастроекШагов.Колонки.Добавить("НеВыводитьАвтоописание"  , Новый ОписаниеТипов("Число"));
	ДеревоНачальныхНастроекШагов.Колонки.Добавить("Активность"              , Новый ОписаниеТипов("Число"));
	ДеревоНачальныхНастроекШагов.Колонки.Добавить("Значение");
	ДеревоНачальныхНастроекШагов.Колонки.Добавить("ТипУзла"                 , Новый ОписаниеТипов("Строка"));
	ДеревоНачальныхНастроекШагов.Колонки.Добавить("ПользовательскоеОписание", Новый ОписаниеТипов("Строка"));
	ДеревоНачальныхНастроекШагов.Колонки.Добавить("Комментарии"             , Новый ОписаниеТипов("Строка"));
	
	СцТ_ЗагрузитьНачальныеШаги(ДеревоНачальныхНастроекШагов.Строки, ДеревоХДТО);
	
	АдресНачальныхУстановокШагов = ПоместитьВоВременноеХранилище(
		ДеревоНачальныхНастроекШагов,
		ИдентификаторГлавнойФормы);
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ЗагрузитьНачальныеШаги(СтрокиДерева, СтрокаДереваХДТО)
	
	Для каждого СтрДереваХДТО Из СтрокаДереваХДТО.ШагиПоУмолчаниюСтрока Цикл
		
		СтрДерева = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДерева, СтрДереваХДТО);
		
		Значение = Новый ДеревоЗначений;
		Значение.Колонки.Добавить("Имя"    , Новый ОписаниеТипов("Строка"));
		Значение.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка"));
		Значение.Колонки.Добавить("ТипУзла", Новый ОписаниеТипов("Строка"));
		Значение.Колонки.Добавить("Значение");
		
		СцТ_ЗагрузитьНастройкиШаговПоУмолчанию(
			Значение.Строки,
			СтрДереваХДТО.ЗначениеШагаПоУмолчаниюДерево);
		
		СтрДерева.Значение = Значение;
		
		СцТ_ЗагрузитьНачальныеШаги(СтрДерева.Строки, СтрДереваХДТО);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ЗагрузитьНастройкиШаговПоУмолчанию(СтрокиЗначения, СтрокаДереваХДТО)
	
	Для каждого СтрДереваХДТО Из СтрокаДереваХДТО.ЗначениеШагаПоУмолчаниюСтрока Цикл
		
		СтрЗначения = СтрокиЗначения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрЗначения, СтрДереваХДТО);
		
		СцТ_ЗагрузитьНастройкиШаговПоУмолчанию(СтрЗначения.Строки, СтрДереваХДТО);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеТаблицыШаблоновШагов

&НаСервере
Процедура СцТ_ПрочитатьШаблоныШагов(ФабрикаПакета, СериализаторПакета, СписокХДТО)
	
	ТаблицаШаблоновШагов = Новый ТаблицаЗначений;
	ТаблицаШаблоновШагов.Колонки.Добавить("Наименование" , Новый ОписаниеТипов("Строка"));
	ТаблицаШаблоновШагов.Колонки.Добавить("ТипМетаданных", Новый ОписаниеТипов("Строка"));
	ТаблицаШаблоновШагов.Колонки.Добавить("ИмяМетаданных", Новый ОписаниеТипов("Строка"));
	ТаблицаШаблоновШагов.Колонки.Добавить("Комментарий"  , Новый ОписаниеТипов("Строка"));
	ТаблицаШаблоновШагов.Колонки.Добавить("Основной"     , Новый ОписаниеТипов("Булево"));
	ТаблицаШаблоновШагов.Колонки.Добавить("Значение"     , Новый ОписаниеТипов("ТаблицаЗначений"));
	
	СцТ_ЗагрузитьШаблоныШагов(ТаблицаШаблоновШагов, СписокХДТО);
	
	АдресШаблоновШагов = ПоместитьВоВременноеХранилище(
		ТаблицаШаблоновШагов,
		ИдентификаторГлавнойФормы);
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ЗагрузитьШаблоныШагов(Строки, СписокХДТО)
	
	Для каждого СтрокаХДТО Из СписокХДТО Цикл
		
		НоваяСтрока = Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаХДТО);
		СцТ_ЗагрузитьСтрокиЗначенияШаблонаШагов(
			НоваяСтрока.Значение,
			СтрокаХДТО.ЗначениеСтрокиШаблонаШаговСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ЗагрузитьСтрокиЗначенияШаблонаШагов(Таблица, СписокХДТО)
	
	Таблица.Колонки.Добавить("Наименование"          , Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТипШага"               , Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Описание"              , Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НеВыводитьАвтоописание", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Активность"            , Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ВыполнитьВручную"      , Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Цвет"                  , Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Комментарий"           , Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Значение"              , Новый ОписаниеТипов("ДеревоЗначений"));
	Таблица.Колонки.Добавить("ДанныеКартинки"        , Новый ОписаниеТипов("Число"));
	
	Для каждого СтрокаХДТО Из СписокХДТО Цикл
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаХДТО);
		
		НоваяСтрока.Значение.Колонки.Добавить("Имя"         , Новый ОписаниеТипов("Строка"));
		НоваяСтрока.Значение.Колонки.Добавить("Синоним"     , Новый ОписаниеТипов("Строка"));
		НоваяСтрока.Значение.Колонки.Добавить("Активность"  , Новый ОписаниеТипов("Число"));
		НоваяСтрока.Значение.Колонки.Добавить("Действие"    , Новый ОписаниеТипов("Строка"));
		НоваяСтрока.Значение.Колонки.Добавить("Скрипт"      , Новый ОписаниеТипов("Строка"));
		НоваяСтрока.Значение.Колонки.Добавить("ТипУзла"     , Новый ОписаниеТипов("Строка"));
		НоваяСтрока.Значение.Колонки.Добавить("Кл"          , Новый ОписаниеТипов("Число"));
		
		СцТ_ЗагрузитьДеревоСтрокиЗначенияШаблонаШагов(НоваяСтрока.Значение.Строки,
			СтрокаХДТО.ЗначениеЗначенияСтрокиШаблонаШаговДерево.ЗначениеЗначенияСтрокиШаблонаШаговСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ЗагрузитьДеревоСтрокиЗначенияШаблонаШагов(Строки, СписокХДТО)
	
	Для каждого СтрокаХДТО Из СписокХДТО Цикл
		
		НоваяСтрока = Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаХДТО);
		НоваяСтрока.Кл = СтрокаХДТО.ВклВОписание; // КЛ
		
		СцТ_ЗагрузитьДеревоСтрокиЗначенияШаблонаШагов(НоваяСтрока.Строки,
			СтрокаХДТО.ЗначениеЗначенияСтрокиШаблонаШаговСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомШаговНаСтраницеВыбораШагов

// Устанавливает пометку ветви дерева формы
//
// Параметры:
//	Ветвь - узел дерева формы;
//	Пометка - значение устанавливаемой пометки;
//
&НаКлиенте
Процедура СцТ_УстановитьПометкуУВетвиДереваШагов(Ветвь, Пометка)
	
	Если Ветвь.НекорректныйШаг Тогда
		Возврат;
	КонецЕсли;
	
	Ветвь.Пометка = Пометка;
	
	Для каждого УзелВетви Из Ветвь.ПолучитьЭлементы() Цикл
		
		СцТ_УстановитьПометкуУВетвиДереваШагов(УзелВетви, Пометка);
		
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет пометку узла в зависимости от значений пометок подчиненных узлов
//
// Параметры:
//	УзелДереваШагов - узел шага, значение пометки которого необходимо вычислить;
//
&НаКлиенте
Процедура СцТ_ВычислитьПометкуУзла(УзелДереваШагов)
	
	ЭлементыУзла = УзелДереваШагов.ПолучитьЭлементы();
	УзелДереваШагов.Пометка = ЭлементыУзла[0].Пометка;
	Для Итератор = 1 По ЭлементыУзла.Количество() - 1 Цикл
		Если УзелДереваШагов.Пометка <> ЭлементыУзла[Итератор].Пометка Тогда
			УзелДереваШагов.Пометка = 2;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает заданную пометку у всех импортируемых шагов;
//
// Параметры:
//	ЗначениеОтметки (число) - значение отметки, которое требуется установить;
//
&НаКлиенте
Процедура СцТ_УстановитьОтметкуУВсех(ЗначениеОтметки)
	
	Для каждого УзелДерева Из БлокСценария.ПолучитьЭлементы() Цикл
		
		Если УзелДерева.НекорректныйШаг Тогда
			Продолжить;
		КонецЕсли;
		
		СцТ_УстановитьПометкуУВетвиДереваШагов(УзелДерева, ЗначениеОтметки);
		
	КонецЦикла;
	
	ВыбраныШагиБЛ = СцТ_ВыбраныШагиБЛ(БлокСценария);
	//Элементы.ЗагрузитьБлок.Заголовок   = ?(ВыбраныШагиБЛ, НСтр("ru = 'Далее >'"), НСтр("ru = 'Готово'"));
	Элементы.ЗагрузитьБлок.Доступность = СцТ_ЕстьОтмеченныеШаги();
	
КонецПроцедуры

// Устанавливает заданную пометку перечисленных узлов;
//
// Параметры:
//	ИдентификаторыУзлов (Массив) - идентификаторы узлов, значения пометок
//		которых необходимо установить;
//	ЗначениеОтметки (Число) - значение пометки, которое необходимо установить;
//
&НаКлиенте
Процедура СцТ_УстановитьОтметкуУзлов(ИдентификаторыУзлов, ЗначениеОтметки)
	
	Если ТипЗнч(ИдентификаторыУзлов) <> Тип("Массив")
		ИЛИ ИдентификаторыУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивУзлов = Новый Массив;
	
	Для каждого ИдентификаторУзла Из ИдентификаторыУзлов Цикл
		УзелСценария = БлокСценария.НайтиПоИдентификатору(ИдентификаторУзла);
		МассивУзлов.Добавить(УзелСценария);
	КонецЦикла;
	
	// Установка отметок узлов
	УзлыДляОтметок = СцТ_ГлавнаяФорма.СцТ_УзлыВерхнегоУровня(МассивУзлов, БлокСценария);
	ИдентификаторыРодительскихУзлов = Новый Соответствие; // Узлы, у которых необходимо пересчитать отметки
	Для каждого ТекущийУзел Из УзлыДляОтметок Цикл
		СцТ_УстановитьПометкуУВетвиДереваШагов(ТекущийУзел, ЗначениеОтметки);
		РодительУзла = ТекущийУзел.ПолучитьРодителя();
		Если РодительУзла <> Неопределено Тогда
			ИдентификаторыРодительскихУзлов[РодительУзла.ПолучитьИдентификатор()] = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Пересчет отметок родительских узлов. У каждого родительского узла при
	// движении по иерархии вверх отметка должна пересчитываться ровно 1 раз
	Пока ИдентификаторыРодительскихУзлов.Количество() > 0 Цикл
		ИдентификаторыРодительскихУзловНовые = Новый Соответствие;
		Для каждого КлючЗначение Из ИдентификаторыРодительскихУзлов Цикл
			Узел = БлокСценария.НайтиПоИдентификатору(КлючЗначение.Ключ);
			СцТ_ВычислитьПометкуУзла(Узел);
			РодительскийУзел = Узел.ПолучитьРодителя();
			Если РодительскийУзел <> Неопределено Тогда
				ИдентификаторыРодительскихУзловНовые[РодительскийУзел.ПолучитьИдентификатор()] = Истина;
			КонецЕсли;
		КонецЦикла;
		// Далее необходимо вычислить пометки у родителей родителей и т.д.
		// пока не будет достигнут верхний уровень иерархии
		ИдентификаторыРодительскихУзлов = ИдентификаторыРодительскихУзловНовые;
	КонецЦикла;
	
	ВыбраныШагиБЛ = СцТ_ВыбраныШагиБЛ(БлокСценария);
	//Элементы.ЗагрузитьБлок.Заголовок   = ?(ВыбраныШагиБЛ, НСтр("ru = 'Далее >'"), НСтр("ru = 'Готово'"));
	Элементы.ЗагрузитьБлок.Доступность = СцТ_ЕстьОтмеченныеШаги();
	
КонецПроцедуры

// Определяет, отмечены ли импортируемые шаги.
// Возвращаемое значение:
//	Булево: Истина - есть отмеченные шаги, Ложь - в противном случае;
//
&НаКлиенте
Функция СцТ_ЕстьОтмеченныеШаги()
	
	Для каждого Узел Из БлокСценария.ПолучитьЭлементы() Цикл
		Если Узел.Пометка > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Процедура отображения состояния текущего шага сценария
// Вызывается в обрабочике ожидания
&НаКлиенте
Процедура СцТ_ОтобразитьСостояниеТекущегоШага()
	
	СцТ_ГлавнаяФорма.СцТ_ОбновитьАвтоОписаниеШагаВДеревеБлокаСценария(Элементы.БлокСценария.ТекущиеДанные);
	
КонецПроцедуры


// Выполняет проверку дерева блока сценария на предмет возможности импорта шагов;
//
// Параметры:
//	ДеревоБлока (ДеревоЗначений, СтрокаДереваЗначений) - дерево шагов сценария;
//	ТаблицаСсылок (ТаблицаЗначений) - таблица ссылок сценария;
//	НекорректныйВышестоящий (Булево) - истина, если текущий шаг включен в
//		некорректную для текущей ИБ группу;
//
&НаСервере
Процедура СцТ_ПроверитьШагиСценария(ДеревоБлока, ТаблицаСсылок, НекорректныйВышестоящий = Ложь)
	
	Для каждого СтрокаБлока Из ДеревоБлока.Строки Цикл
		
		СтрокаБлока.НекорректныйШаг = (НекорректныйВышестоящий
			ИЛИ СцТ_ЭтоНекорректныйШаг(СтрокаБлока));
		
		СцТ_ПроверитьШагиСценария(СтрокаБлока, ТаблицаСсылок, СтрокаБлока.НекорректныйШаг);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку корректности шага сценария относительно текущей ИБ;
//
// Параметры:
//	СтрокаБлока (СтрокаДереваЗначений) - данные проверяемого шага сценария;
// Возвращаемое значение:
//	Булево:
//		Истина - это некорректный шаг, Ложь - в противном случае;
//
&НаСервере
Функция СцТ_ЭтоНекорректныйШаг(СтрокаБлока)
	
	Если СтрокаБлока.ТипШага = "АвтоГруппа" Тогда
		
		// Указанные в шаге объекты метаданных должны
		// присутствовать в конфигурации, иначе шаг добавлять нельзя
		
		Если ПустаяСтрока(СтрокаБлока.ИмяМетаданных) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			КоллекцияМетаданных = Метаданные[СтрокаБлока.ТипМетаданных];
			Если КоллекцияМетаданных.Найти(СтрокаБлока.ИмяМетаданных) = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		Исключение
			Возврат Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет, выбраны ли шаги бизнес-логики, содержащие ссылки;
//
// Параметры:
//	УзелСценария (ДанныеФормыДерево) - дерево шагов сценария;
//
// Возвращаемое значение:
//	Булево:
//		Истина - выбраны шаги БЛ, содержащие ссылки;
//		Ложь - в противном случае;
//
&НаКлиенте
Функция СцТ_ВыбраныШагиБЛ(УзелСценария)
	
	Для каждого Узел Из УзелСценария.ПолучитьЭлементы() Цикл
		
		Если Узел.Пометка > 0 Тогда
			
			Если УИШиШаговСоСсылками[Узел.УИШ] <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			
			ВыбраныВПодчиненных = СцТ_ВыбраныШагиБЛ(Узел);
			Если ВыбраныВПодчиненных Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Оповещает главную форму о необходимости импорта выбранных шагов
// сценария.
//
&НаКлиенте
Процедура СцТ_ДобавитьВыбранныеШагиВТекущийСценарий(ДобавляемыеСсылки)
	
	ПараметрыИмпорта = Новый Структура;
	ПараметрыИмпорта.Вставить("Дерево"                , БлокСценария);
	ПараметрыИмпорта.Вставить("ЭлементФормы"          , Элементы.БлокСценария);
	ПараметрыИмпорта.Вставить("ДобавляемыеСсылки"     , ДобавляемыеСсылки);
	ПараметрыИмпорта.Вставить("КомментарийНачала"     , НСтр("ru = 'Добавление шагов из сценария'"));
	
	ПараметрыИмпорта.Вставить("РазвернутыйКомментарийНачала",
		НСтр("ru = 'Добавление шагов из сценария ""'")
			+ НаименованиеСценария
			+ """.");
	
	ПараметрыИмпорта.Вставить("КомментарийОкончания"  , НСтр("ru = 'Конец добавленных шагов'"));
	ПараметрыИмпорта.Вставить("ИмяРеквизитаАктивности", "Пометка");
	
	Оповестить("СцТ_ИмпортШаговСценария", ПараметрыИмпорта, СцТ_ГлавнаяФорма);
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСсылкамиИмпортируемыхШагов

&НаКлиенте
Процедура ЗаполнитьМассивВыбранныхШагов(ВеткаДерева, МУВШ)
	
	Для каждого УзелДерева Из ВеткаДерева.ПолучитьЭлементы() Цикл
		
		Если УзелДерева.Пометка > 0 Тогда
			
			МУВШ.Добавить(УзелДерева.УИШ);
			
			ЗаполнитьМассивВыбранныхШагов(УзелДерева, МУВШ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет, какие ссылки используются импортируемыми шагами
//
// Параметры:
//	ТаблицаСсылок (ТаблицаЗначений) - таблица ссылок сценария;
//
// Возвращаемое значение:
//	Соответствие:
//		Ключ - УИШ шага; Значение - массив строк. представлений
//		используемых ссылок;
//
&НаСервереБезКонтекста
Функция СцТ_ВыделитьУИШиШаговССылкамиИзТС(ТаблицаСсылок)
	
	Результат = Новый Соответствие;
	
	ТипМассив = Тип("Массив");
	Для каждого СтрТЧСсылки Из ТаблицаСсылок Цикл
		
		Если ТипЗнч(СтрТЧСсылки.МассивУИШ) = ТипМассив Тогда
			Для каждого УИШ Из СтрТЧСсылки.МассивУИШ Цикл
				
				СсылкиВШаге = Результат[УИШ];
				Если СсылкиВШаге = Неопределено Тогда
					СсылкиВШаге = Новый Массив;
					Результат[УИШ] = СсылкиВШаге;
				КонецЕсли;
				
				СсылкиВШаге.Добавить(СтрТЧСсылки.Ссылка);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьМассивИмпортируемыхСсылок(МассивУИШ, МассивСсылок, АдресТаблицыСсылок)
	
	ТаблицаСсылок = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
	
	Если ТаблицаСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТС ИЗ ТаблицаСсылок Цикл
		МассивУИШСсылки = СтрокаТС.МассивУИШ;
		
		// МУИШ - массив УИШ
		МУИШ = Новый Массив;
		
		Для каждого УИШ Из МассивУИШСсылки Цикл
			Если МассивУИШ.Найти(УИШ) <> Неопределено Тогда
				МУИШ.Добавить(УИШ);
			КонецЕсли;
		КонецЦикла;
		
		Если МУИШ.Количество() > 0 Тогда
			// Эта ссылка импортируется
			
			// МСИ - массив структур идентификации
			МСИ = Новый Массив;
			СтрокаТС.СтруктураИдентификации.Сортировать("Имя");
			Для каждого СтрИдентификации Из СтрокаТС.СтруктураИдентификации Цикл
				// СИ - структура идентификации
				СИ = Новый Структура;
				СИ.Вставить("Имя"            , СтрИдентификации.Имя);
				СИ.Вставить("Представление"  , СтрИдентификации.Представление);
				СИ.Вставить("Значение"       , СтрИдентификации.Значение);
				СИ.Вставить("СокрТипЗначения", СтрИдентификации.СокрТипЗначения);
				МСИ.Добавить(СИ);
			КонецЦикла;
			
			СтрСсылки = Новый Структура;
			СтрСсылки.Вставить("СтруктураИдентификации", МСИ);
			СтрСсылки.Вставить("СтрокаИдентификатора"  , СтрокаТС.Ссылка);
			СтрСсылки.Вставить("Представление"         , СтрокаТС.Представление);
			СтрСсылки.Вставить("ТипМД"                 , СтрокаТС.ТипМД);
			СтрСсылки.Вставить("ИмяМД"                 , СтрокаТС.ИмяМД);
			СтрСсылки.Вставить("СинонимМД"             , СтрокаТС.СинонимМД);
			СтрСсылки.Вставить("ПоискПоЗапросу"        , СтрокаТС.ПоискПоЗапросу);
			СтрСсылки.Вставить("ТекстЗапроса"          , СтрокаТС.ТекстЗапроса);
			СтрСсылки.Вставить("МассивУИШ"             , МУИШ);
			
			МассивСсылок.Добавить(СтрСсылки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет замену ссылок в дереве значения.
//
// Параметры:
//	УзелЗначения (ДанныеФормыДерево) - дерево значения шага, в котором выполняется
//		замена ссылки;
//	СсылкаИсходная (Строка) - строк. представление исходной ссылки;
//	СсылкаНовая (Структура) - описатель подобранной ссылки;
//
&НаКлиенте
Процедура СцТ_ЗаменитьСсылкиВЗначении(УзелЗначения, СсылкаИсходная, СсылкаНовая)
	
	Для каждого ПодчиненныйУзел Из УзелЗначения.ПолучитьЭлементы() Цикл
		Если ПодчиненныйУзел.Значение     = СсылкаИсходная Тогда
			ПодчиненныйУзел.Значение      = СсылкаНовая.СсылкаСтр;
			Если ПодчиненныйУзел.Представление = СсылкаНовая.ПредставлениеИсходной Тогда
				ПодчиненныйУзел.Представление = СсылкаНовая.Представление;
			КонецЕсли;
		КонецЕсли;
		СцТ_ЗаменитьСсылкиВЗначении(ПодчиненныйУзел, СсылкаИсходная, СсылкаНовая);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииОбщегоНазначения

// Поиск строки дерева формы по значению реквизита
// Параметры
//	ДеревоФормы - Дерево данных формы
//	Реквизит - Имя реквизита,
//	ЗначениеРеквизита - значение реквизита
//	Рекурсивно - признак необходимости поиска в подчиненных узлах
// Возвращаемое значение - указатель на найденный узел
&НаКлиентеНаСервереБезКонтекста
Функция СцТ_НайтиУзелДереваФормы(
	ДеревоФормы,
	Реквизит,
	ЗначениеРеквизита,
	Рекурсивно = Ложь)
	
	Для каждого Узел Из ДеревоФормы.ПолучитьЭлементы() Цикл
		Если Узел[Реквизит] = ЗначениеРеквизита Тогда
			Возврат Узел;
		КонецЕсли;
		Если Рекурсивно Тогда
			НайденыйУзел = СцТ_НайтиУзелДереваФормы(Узел, Реквизит, ЗначениеРеквизита, Истина);
			Если НайденыйУзел <> Неопределено Тогда
				Возврат НайденыйУзел;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура СцТ_НачатьВыборСценария()
	
	// Требуется перевести фокус, чтобы данные реквизита ФайлСценария обновились
	// из поля ввода
	ТекущийЭлемент = Элементы.ЗагрузитьБлок;
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Если НЕ ПустаяСтрока(ФайлСценария) Тогда
		ВыборФайла.ПолноеИмяФайла = ФайлСценария;
		//ВыборФайла.ИндексФильтра  = ?(ВРег(Прав(ФайлСценария, 4)) = ".ZIP", 1, 0);
	КонецЕсли;
	
	МаскаВсеФайлы = ПолучитьМаскуВсеФайлы();
	ВыборФайла.Заголовок  = НСтр("ru='Выбор файла сценария'");
	ВыборФайла.Фильтр     =
		НСтр("ru='Файлы сценария (*.xml, *.zip)|*.xml;*.zip|Сценарий в формате xml (*.xml)|*.xml|Сценарий в архиве (*.zip)|*.zip|Все файлы ("
		+ МаскаВсеФайлы + ")|" + МаскаВсеФайлы + "'");
	
	Если ВыборФайла.Выбрать() Тогда
		ФайлСценария = ВыборФайла.ПолноеИмяФайла;
		СцТ_ПриИзмененииИмениФайлаСценария();
	КонецЕсли;
	
КонецПроцедуры




#КонецОбласти

#КонецОбласти