
#Область Переменные

&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимСовместимости838 Тогда
		УстановитьДействие("ПередЗакрытием", "ПередЗакрытиеБезРежимаСовместимости");
	КонецЕсли;
	
	Если Параметры.ФормаОткрытаПодВнешнимУправлением Тогда
		ФормаОткрытаПодВнешнимУправлением = Параметры.ФормаОткрытаПодВнешнимУправлением;
		
		Элементы.ВыбратьОбъектМД.Доступность               = Ложь;
		Элементы.НайтиПоЗапросу.Доступность                = Ложь;
		Элементы.ЭталонныйОбъект.Доступность               = Ложь;
		Элементы.СИ_ЗаполнитьСвойстваОбъектаМД.Доступность = Ложь;
		Элементы.СИ_ЗаполнитьЗначенияСвойств.Доступность   = Ложь;
		Элементы.ПроверитьЗапрос.Доступность               = Ложь;
		Элементы.КонструкторЗапроса.Доступность            = Ложь;
		
		
		Элементы.СтруктураИдентификацииКонтекстноеМенюУстановитьПараметр.Доступность = Ложь;
		
	КонецЕсли;
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	СписокВыбораТиповМД = Элементы.ТипМД.СписокВыбора;
	СписокВыбораТиповМД.Добавить("Справочники"            , НСтр("ru = 'Справочник'"));
	СписокВыбораТиповМД.Добавить("Документы"              , НСтр("ru = 'Документ'"));
	СписокВыбораТиповМД.Добавить("ПланыСчетов"            , НСтр("ru = 'План счетов'"));
	СписокВыбораТиповМД.Добавить("ПланыВидовРасчета"      , НСтр("ru = 'План видов расчета'"));
	СписокВыбораТиповМД.Добавить("ПланыВидовХарактеристик", НСтр("ru = 'План видов характеристик'"));
	СписокВыбораТиповМД.Добавить("БизнесПроцессы"         , НСтр("ru = 'Бизнес-процесс'"));
	СписокВыбораТиповМД.Добавить("Задачи"                 , НСтр("ru = 'Задача'"));
	
	СписокВыбораТипов = Элементы.КИ_ТипЗначения.СписокВыбора;
	СписокВыбораТипов.Добавить("Строка"            , НСтр("ru = 'Строка'"));
	СписокВыбораТипов.Добавить("Число"             , НСтр("ru = 'Число'"));
	СписокВыбораТипов.Добавить("Булево"            , НСтр("ru = 'Булево'"));
	СписокВыбораТипов.Добавить("Дата"              , НСтр("ru = 'Дата'"));
	СписокВыбораТипов.Добавить("Предопределенное"  , НСтр("ru = 'Предопределенное'"));
	
	СписокВыбораПериодов = Элементы.КИ_ОграничениеТипа.СписокВыбора;
	СписокВыбораПериодов.Добавить("СЕКУНДА");
	СписокВыбораПериодов.Добавить("МИНУТА");
	СписокВыбораПериодов.Добавить("ЧАС");
	СписокВыбораПериодов.Добавить("ДЕНЬ");
	СписокВыбораПериодов.Добавить("НЕДЕЛЯ");
	СписокВыбораПериодов.Добавить("МЕСЯЦ");
	СписокВыбораПериодов.Добавить("КВАРТАЛ");
	СписокВыбораПериодов.Добавить("ГОД");
	СписокВыбораПериодов.Добавить("ДЕКАДА");
	СписокВыбораПериодов.Добавить("ПОЛУГОДИЕ");
	
	ТипМД               = Параметры.ТипМД;
	ИмяМД               = Параметры.ИмяМД;
	СинонимМД           = Параметры.СинонимМД;
	Представление       = Параметры.Представление;
	Идентификатор       = Параметры.Идентификатор;
	АдресТаблицыКлючей  = Параметры.АдресТаблицыКлючей;
	ПоискПоЗапросу      = Параметры.ПоискПоЗапросу;
	ТекстЗапроса        = Параметры.ТекстЗапроса;
	СтруктураПараметров = Параметры.СтруктураПараметров;
	
	ПредыдущийТипМД = ТипМД;
	ПредыдущееИмяМД = ИмяМД;
	
	// Если известен объект метаданных, то заполнение свойств этого объекта
	СцТ_ЗаполнитьСписокВсехСвойствОбъектаМетаданных();
	
	// Если структура уже заполнена, то заполнение флагов и значений в таблице идентификации
	// по хранимым данным, иначе - попытка установки флагов по ключам идентификации
	ЗаполнитьСписокДоступныхСвойствОбъектаПриСозданииНаСервере();
	
	// Если можно определить эталонный объект, то определение его на основании запроса
	ЭталонныйОбъект = Неопределено;
	УстановитьТипЭталонногоОбъекта();
	
	НайтиЭталонныйОбъектПоЗапросу(СтруктураПараметров);
	
	Если Параметры.ЗапретИзмененияИд Тогда
		Элементы.Идентификатор.ТолькоПросмотр = Истина;
		Элементы.Представление.ТолькоПросмотр = Истина;
		Элементы.ТипМД.ТолькоПросмотр         = Истина;
		Элементы.ИмяМД.ТолькоПросмотр         = Истина;
		Элементы.СинонимМД.ТолькоПросмотр     = Истина;
		
		Элементы.ВыбратьОбъектМД.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СцТ_ОбработчикОтветаНаВопросОСохраненииИзменений", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Применить изменения?'");
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 0);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытиеБезРежимаСовместимости(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		Если НЕ ЗавершениеРаботы Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("СцТ_ОбработчикОтветаНаВопросОСохраненииИзменений", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Применить изменения?'");
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 0);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Изменены ключи идентификации. При закрытии эти изменения будут утеряны'");
		КонецЕсли;
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура СцТ_ОбработчикОтветаНаВопросОСохраненииИзменений(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВозвращаемаяСтруктура = ПодготовитьВозвращаемуюСтруктуру();
		Если ВозвращаемаяСтруктура = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Закрыть(ВозвращаемаяСтруктура);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		// Закрытие окна без сохранения
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбОчисткеСтруктуры(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураИдентификации.Очистить();
		Если НЕ ПоискПоЗапросу Тогда
			ТекстЗапроса = "";
		КонецЕсли;
		ЭталонныйОбъект = Неопределено;
		Элементы.ЭталонныйОбъект.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОНастройкеПоОбъектуМД(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьТипЭталонногоОбъектаИЗаполнитьСтруктуруИдентификации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОбъектаМетаданныхСсылки(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	МД_Изменены = (ТипМД <> Результат.ТипМД ИЛИ ИмяМД <> Результат.ИмяМД);
	
	ТипМД     = Результат.ТипМД;
	ИмяМД     = Результат.ИмяМД;
	СинонимМД = Результат.СинонимМД;
	
	Если МД_Изменены Тогда
		
		// Объект явно существует в информационной базе
		// автоматическая настройка выполняется без предупреждения
		УстановитьТипЭталонногоОбъектаИЗаполнитьСтруктуруИдентификации();;
		
		ПредыдущийТипМД = ТипМД;
		ПредыдущееИмяМД = ИмяМД;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеВыбораОбъектаИБ(ВозвращенноеЗначение, ДопПараметры) Экспорт
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		ЭталонныйОбъект = ВозвращенноеЗначение.ВыбранноеЗначение;
		
		Если ЗначениеЗаполнено(ЭталонныйОбъект) Тогда 
			Если ПустаяСтрока(Представление) Тогда
				Представление = Строка(ЭталонныйОбъект);
			КонецЕсли;
			
			Если ПустаяСтрока(Идентификатор) Тогда
				Идентификатор = Строка(ЭталонныйОбъект.УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКонструктораЗапроса(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТекстЗапроса = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипМДПриИзменении(Элемент)
	
	Если ТипМД <> ПредыдущийТипМД Тогда
	
		ИмяМД     = "";
		СинонимМД = "";
		
		ПредыдущийТипМД = ТипМД;
		
		
		ТекстВопроса = НСтр("ru = 'Очистить структуру идентификации объекта?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОбОчисткеСтруктуры", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяМДПриИзменении(Элемент)
	
	Если ИмяМД <> ПредыдущееИмяМД Тогда
		
		ПредыдущееИмяМД = ИмяМД;
		
		Если НЕ ПустаяСтрока(ИмяМД) И УстановитьТипЭталонногоОбъекта() Тогда
			ТекстВопроса = НСтр("ru = 'Найден объект метаданных в информационной базе. Выполнить автоматическую настройку элементов формы?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОНастройкеПоОбъектуМД", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭталонныйОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отмена = Ложь;
	Если ПустаяСтрока(ТипМД) Тогда
		СП = Новый СообщениеПользователю;
		СП.Текст = НСтр("ru = 'Не выбран тип метаданных'");
		СП.ПутьКДанным = "ТипМД";
		СП.Сообщить();
		Отмена = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяМД) Тогда
		СП = Новый СообщениеПользователю;
		СП.Текст = НСтр("ru = 'Не выбрано имя объекта метаданных'");
		СП.ПутьКДанным = "ИмяМД";
		СП.Сообщить();
		Отмена = Истина;
	КонецЕсли;
	
	Если Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеВыбораОбъектаИБ", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипМД"               , типМД);
	ПараметрыФормы.Вставить("ИмяМД"               , ИмяМД);
	ПараметрыФормы.Вставить("СинонимМД"           , СинонимМД);
	ПараметрыФормы.Вставить("ПутьКФормам"         , ПутьКФормам);
	ПараметрыФормы.Вставить("ВыбиратьОбъектМД"    , Ложь);
	ПараметрыФормы.Вставить("ТекущаяСсылка"       , ЭталонныйОбъект);
	ФормаВыбораОбъектаИБ = ОткрытьФорму(ПутьКФормам + "ВыборОбъектовИБ", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
	ФормаВыбораОбъектаИБ.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИдентификацииПриИзменении(Элемент)
	
	ТД = Элементы.СтруктураИдентификации.ТекущиеДанные;
	
	УстановитьТипЗначенияПоля(ТД.ТипЗначения, ТД);
	
КонецПроцедуры

&НаКлиенте
Процедура КИ_ТипЗначенияПриИзменении(Элемент)
	
	ТД = Элементы.СтруктураИдентификации.ТекущиеДанные;
	
	УстановитьТипЗначенияПоля(ТД.ТипЗначения, ТД);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИдентификацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТД = Элементы.СтруктураИдентификации.ТекущиеДанные;
	УстановитьТипЗначенияПоля(ТД.ТипЗначения, ТД);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_РезультатЗапроса

&НаКлиенте
Процедура РезультатЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = РезультатЗапроса.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПроверитьЗапрос(Команда)
	
	// Проверка
	Если НЕ ПроверкаПравильностиЗаполнения() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоискПоЗапросу Тогда
		ПослеОтветаНаВопросОбОбновленииТекстаЗапросаПередПроверкой(КодВозвратаДиалога.Нет, ТекстЗапроса);
		
	Иначе
		//Проверка, чтобы не затереть случайно сделанные изменения 
		НовыйТекстЗапроса = ОбновитьТекстЗапроса_НаСервере();
		
		Если ПустаяСтрока(НовыйТекстЗапроса) Тогда
			// Сообщения об ошибках уже показаны. Делать ничего не нужно
			Возврат;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) И ТекстЗапроса <> НовыйТекстЗапроса Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОбОбновленииТекстаЗапросаПередПроверкой", ЭтотОбъект, НовыйТекстЗапроса);
			ТекстВопроса = НСтр("ru = 'Текст запроса отличается от сформированного автоматически.
			|Обновить текст запроса перед выполнением?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		ИначеЕсли ПустаяСтрока(ТекстЗапроса) Тогда
			ПослеОтветаНаВопросОбОбновленииТекстаЗапросаПередПроверкой(КодВозвратаДиалога.Да, НовыйТекстЗапроса);
			
		Иначе
			ПослеОтветаНаВопросОбОбновленииТекстаЗапросаПередПроверкой(КодВозвратаДиалога.Нет, ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбОбновленииТекстаЗапросаПередПроверкой(Результат, НовыйТекстЗапроса) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Обновляем
		ТекстЗапроса = НовыйТекстЗапроса;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		// Выполняем измененный запрос
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Если НЕ СцТ_ВыполнитьЗапрос(СцТ_ГлавнаяФорма.ГлобальныеПараметры) Тогда
		
		// При выполнении запроса возникли ошибки и сообщения о результатах запроса не нужны
		Возврат;
	КОнецЕсли;
	
	Элементы.СтраницыИдентификации.ТекущаяСтраница = Элементы.СтраницаРезультат;
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'В информационной базе не удалось найти ни одного объекта, удовлетворяющего условиям поиска.
		|Рекомендуется настроить запрос. Возможно, некоторые критерии поиска указаны неверно.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	ИначеЕсли РезультатЗапроса.Количество() > 1 Тогда
		ТекстПредупреждения = НСтр("ru = 'В информационной базе найдено более одного объекта, удовлетворяющих условиям поиска.
		|Рекомендуется указать более строгие критерии поиска объекта в информационной базе.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъектМД(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипМД"                 , ТипМД);
	ПараметрыФормы.Вставить("ИмяМД"                 , ИмяМД);
	ПараметрыФормы.Вставить("ОтображатьПеречисления", Ложь);
	ПараметрыФормы.Вставить("ОтображатьРегистры"    , Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораОбъектаМетаданныхСсылки", ЭтотОбъект);
	ФормаМакрошага = ОткрытьФорму(ПутьКФормам + "ВыборОбъектаМетаданных", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвойстваОбъектаМД(Команда)
	
	ЗаполнитьСписокДоступныхСвойствОбъектаПоТипуОбъектаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияСвойствОбъекта(Команда)
	
	Если НЕ ЗначениеЗаполнено(ЭталонныйОбъект) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ПутьКДанным = "ЭталонныйОбъект";
		Сообщение.Текст = НСтр("ru = 'Свойства заполняются по эталонному объекту. Не задан эталонный объект'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если СтруктураИдентификации.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ПутьКДанным = "СтруктураИдентификации";
		Сообщение.Текст = НСтр("ru = 'Не заполнены ключи идентификации (свойства). Добавьте ключевые свойства объекта метаданных вручную или заполните по выбранному типу объекта метаданных.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойствОбъектаНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗапрос(Команда)
	
	// Проверка
	Если НЕ ПроверкаПравильностиЗаполнения() Тогда
		Возврат;
	КонецЕсли;
	
	// Начало построения текста запроса
	НовыйТекстЗапроса = ОбновитьТекстЗапроса_НаСервере();
	
	Если ПустаяСтрока(НовыйТекстЗапроса) Тогда
		// Сообщения об ошибках уже показаны. Делать ничего не нужно
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) И ТекстЗапроса <> НовыйТекстЗапроса И ПоискПоЗапросу Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОбОбновленииТекстаЗапроса", ЭтотОбъект, НовыйТекстЗапроса);
		ТекстВопроса = НСтр("ru = 'Текст запроса отличается от сформированного автоматически. Все изменения будут потеряны. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ПустаяСтрока(ТекстЗапроса) ИЛИ НЕ ПоискПоЗапросу Тогда
		ПослеОтветаНаВопросОбОбновленииТекстаЗапроса(КодВозвратаДиалога.Да, НовыйТекстЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбОбновленииТекстаЗапроса(Результат, НовыйТекстЗапроса) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекстЗапроса = НовыйТекстЗапроса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	
	КонструкторЗапроса = Неопределено;
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Выполнить("КонструкторЗапроса = Новый КонструкторЗапроса();");
	Иначе
		Выполнить("КонструкторЗапроса = Новый КонструкторЗапроса(ТекстЗапроса);");
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораЗапроса", ЭтотОбъект);
	КонструкторЗапроса.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьВыбранныйОбъектЭталонным(Команда)
	
	ТДанные = Элементы.РезультатЗапроса.ТекущиеДанные;
	Если ТДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭталонныйОбъект = ТДанные.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоЗапросу(Команда)
	
	НайтиЭталонныйОбъектПоЗапросу(СцТ_ГлавнаяФорма.ГлобальныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИЗакрыть(Команда)
	
	ВозвращаемаяСтруктура = ПодготовитьВозвращаемуюСтруктуру();
	
	Если ВозвращаемаяСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(ВозвращаемаяСтруктура);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

&НаСервере
Процедура СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя, Тип, Ограничение = "", ОграничениеИспользования = "")
	
	СтруктураПоиска = Новый Структура("Имя, ТипЗначения", Имя, Тип);
	НайденныеСтроки = СтруктураИдентификации.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НовоеСвойство = СтруктураИдентификации.Добавить();
		НовоеСвойство.Имя                      = Имя;
		НовоеСвойство.ТипЗначения              = Тип;
		НовоеСвойство.Ограничение              = Ограничение;
		НовоеСвойство.ОграничениеИспользования = ОграничениеИспользования;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ПреобразоватьВПростойТипИДобавитьСвойстваОбъектаМетаданных(Имя, ТипЗ, ОграничениеИспользования = "")
	
	ОбИБ = Новый(ТипЗ);
	ОбМД = ОбИБ.Метаданные();
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗ) Тогда
		ТипМетаданных = "Справочники";
		
		Если ОбМД.ДлинаКода > 0 Тогда
			Если ОбМД.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + ".Код", "Строка", ОбМД.ДлинаКода, ОграничениеИспользования);
			Иначе
				СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + ".Код", "Число",, ОграничениеИспользования);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбМД.ДлинаНаименования > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + ".Наименование", "Строка", ОбМД.ДлинаНаименования, ОграничениеИспользования);
		КонецЕсли;
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗ) Тогда
		ТипМетаданных = "Документы";
		
		Если ОбМД.ДлинаНомера > 0 Тогда
			Если ОбМД.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + ".Номер", "Строка", ОбМД.ДлинаНомера, ОграничениеИспользования);
			Иначе
				СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + ".Номер", "Число",, ОграничениеИспользования);
			КонецЕсли;
		КонецЕсли;
		
		СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + ".Дата"    , "Дата"  , "День", ОграничениеИспользования);
		СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + ".Проведен", "Булево",, ОграничениеИспользования);
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗ) Тогда
		ТипМетаданных = "ПланыСчетов";
		
		Если ОбМД.ДлинаКода > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Код", "Число",, ОграничениеИспользования);
		КонецЕсли;
		
		Если ОбМД.ДлинаНаименования > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Наименование", "Строка", ОбМД.ДлинаНаименования, ОграничениеИспользования);
		КонецЕсли;
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗ) Тогда
		ТипМетаданных = "ПланыВидовХарактеристик";
		
		Если ОбМД.ДлинаКода > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Код", "Число",, ОграничениеИспользования);
		КонецЕсли;
		
		Если ОбМД.ДлинаНаименования > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Наименование", "Строка", ОбМД.ДлинаНаименования, ОграничениеИспользования);
		КонецЕсли;
		
		Если ОбМД.Иерархический Тогда
			Если ОбМД.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "ЭтоГруппа", "Булево",, ОграничениеИспользования);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗ) Тогда
		ТипМетаданных = "ПланыВидовРасчета";
		
		Если ОбМД.ДлинаКода > 0 Тогда
			Если ОбМД.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаПланаВидовРасчета.Строка Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Код", "Строка", ОбМД.ДлинаКода, ОграничениеИспользования);
			Иначе
				СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Код", "Число",, ОграничениеИспользования);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбМД.ДлинаНаименования > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Наименование", "Строка", ОбМД.ДлинаНаименования, ОграничениеИспользования);
		КонецЕсли;
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗ) Тогда
		ТипМетаданных = "Перечисления";
		СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя, "Предопределенное",, ОграничениеИспользования);
		
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗ) Тогда
		ТипМетаданных = "БизнесПроцессы";
		
		Если ОбМД.ДлинаНомера > 0 Тогда
			Если ОбМД.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераБизнесПроцесса.Строка Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Номер", "Строка", ОбМД.ДлинаНомера, ОграничениеИспользования);
			Иначе
				СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Номер", "Число",, ОграничениеИспользования);
			КонецЕсли;
		КонецЕсли;
		
		СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Дата"           , "Дата", "День", ОграничениеИспользования);
		СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Стартован"      , "Булево",, ОграничениеИспользования);
		СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Завершен"       , "Булево",, ОграничениеИспользования);
		
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗ) Тогда
		ТипМетаданных = "Задачи";
		
		Если ОбМД.ДлинаНомера > 0 Тогда
			Если ОбМД.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераЗадачи.Строка Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Номер", "Строка", ОбМД.ДлинаНомера, ОграничениеИспользования);
			Иначе
				СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Номер", "Число",, ОграничениеИспользования);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбМД.ДлинаНаименования > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Наименование", "Строка", ОбМД.ДлинаНаименования, ОграничениеИспользования);
		КонецЕсли;
		
		СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Дата"           , "Дата", "День", ОграничениеИспользования);
		СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + "." + "Выполнена"      , "Булево",, ОграничениеИспользования);
		
	Иначе
		// Ничего не добавляется
		Возврат;
		
	КонецЕсли;
	
	Если ТипМетаданных <> "Перечисления" Тогда
		СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя + ".ПометкаУдаления", "Булево",, ОграничениеИспользования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ОпределитьПростойТипИДобавитьСвойствоОбъектаМетаданных(Знач Имя, Знач ОписаниеТипов, Знач ОграничениеИспользования = "")
	
	Для каждого ТипЗ Из ОписаниеТипов.Типы() Цикл
		Если ТипЗ = Тип("Дата") Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя, "Дата", "День", ОграничениеИспользования);
		ИначеЕсли ТипЗ = Тип("Строка") Тогда
			ОграничениеДлины = ОписаниеТипов.КвалификаторыСтроки.Длина;
			Если ОграничениеДлины = 0 Тогда
				ОграничениеДлины = 150;
			КонецЕсли;
			СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя, "Строка", ОграничениеДлины, ОграничениеИспользования);
		ИначеЕсли ТипЗ = Тип("Число") Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя, "Число",, ОграничениеИспользования);
		ИначеЕсли ТипЗ = Тип("Булево") Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных(Имя, "Булево",, ОграничениеИспользования);
		ИначеЕсли ТипЗ = Тип("ДвоичныеДанные")
			ИЛИ   ТипЗ = Тип("ХранилищеЗначения")
			ИЛИ   ТипЗ = Тип("УникальныйИдентификатор") Тогда
			// Эти данные не могут использоваться в качестве ключей
			Продолжить;
		Иначе
			СцТ_ПреобразоватьВПростойТипИДобавитьСвойстваОбъектаМетаданных(Имя, ТипЗ, ОграничениеИспользования);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхСвойствОбъектаПоТипуОбъектаСервере()
	
	// Заполнение списка доступных реквизитов
	СцТ_ЗаполнитьСписокВсехСвойствОбъектаМетаданных();
	
	УстановитьФлагиПоКлючамИдентификации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхСвойствОбъектаПриСозданииНаСервере()
	
	// Если есть структура данных, то заполнение значений из структуры
	// Если данных еще нет, то установка флагов активности в соответствии с ключами идентификации
	
	Если Параметры.СтруктураИдентификации = Неопределено
		ИЛИ Параметры.СтруктураИдентификации.Количество() = 0 Тогда
		
		УстановитьФлагиПоКлючамИдентификации();
		
	Иначе
		Если ТипЗнч(Параметры.СтруктураИдентификации) = Тип("ТаблицаЗначений") Тогда
			ТаблИдентификации = Параметры.СтруктураИдентификации.Выгрузить();
		Иначе
			// тип - массив структур
			ТаблИдентификации = Параметры.СтруктураИдентификации;
		КонецЕсли;
		ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
		
		Для каждого СтрокаИдентификации Из ТаблИдентификации Цикл
			
			// Для совместимости с предыдущими версиями
			Если    СтрокаИдентификации.Имя = "ТипМД"
				ИЛИ СтрокаИдентификации.Имя = "ИмяМД"
				ИЛИ СтрокаИдентификации.Имя = "ТипМетаданных"
				ИЛИ СтрокаИдентификации.Имя = "ИмяМетаданных" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПреобразованныхЗначений = ОбъектНаСервере.ПреобразоватьСтрокуСтруктурыИдентификацииКНовомуФормату(СтрокаИдентификации);
		
			ИмяПоля         = СтруктураПреобразованныхЗначений.Имя;
			ТипЗначения     = СтруктураПреобразованныхЗначений.ТипЗначения;
			Ограничение     = СтруктураПреобразованныхЗначений.ОграничениеТипа;
			Значение        = СтруктураПреобразованныхЗначений.Значение;
			
			// Добавление преобразованного значения в таблицу для отображения пользователю
			СтруктураПоиска = Новый Структура("Имя, ТипЗначения", ИмяПоля, ТипЗначения);
			НайденныеСтроки = СтруктураИдентификации.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НужнаяСтрока = НайденныеСтроки[0];
				Если ЗначениеЗаполнено(Ограничение) Тогда
					НужнаяСтрока.Ограничение = Ограничение;
				КонецЕсли;
			Иначе
				НужнаяСтрока = СтруктураИдентификации.Добавить();
				НужнаяСтрока.Имя             = ИмяПоля;
				НужнаяСтрока.ТипЗначения     = ТипЗначения;
				НужнаяСтрока.Ограничение = Ограничение;
			КонецЕсли;
			
			НужнаяСтрока.Значение        = Значение;
			НужнаяСтрока.Отметка         = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Установка флагов активности в таблице идентификации по ключам идентификации
//
Процедура УстановитьФлагиПоКлючамИдентификации()
	
	Если ПустаяСтрока(ТипМД) ИЛИ ПустаяСтрока(ИмяМД) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКлючейНаСервере = ПолучитьИзВременногоХранилища(АдресТаблицыКлючей);
	
	// Получение общих и индивидуальных ключей
	Отбор = Новый Структура;
	Отбор.Вставить("ТипМетаданных", ТипМД);
	Отбор.Вставить("ИмяМетаданных", ИмяМД);
	МассивИндивидуальныхКлючей = ТаблицаКлючейНаСервере.НайтиСтроки(Отбор);
	
	Если МассивИндивидуальныхКлючей.Количество() > 0 Тогда
		ТаблицаИндивидуальныхКлючей = МассивИндивидуальныхКлючей[0].Ключи.Скопировать();
	Иначе
		ТаблицаИндивидуальныхКлючей = Новый ТаблицаЗначений;
		ТаблицаИндивидуальныхКлючей.Колонки.Добавить("Имя");
		ТаблицаИндивидуальныхКлючей.Колонки.Добавить("Наименование");
	КонецЕсли;
	
	СписокОбщихКлючей = СцТ_ПодготовитьСписокОбщихРеквизитов_НаСервере();
	
	Для каждого ЭлементСписка Из СписокОбщихКлючей Цикл
		НайденныеСтроки = СтруктураИдентификации.НайтиСтроки(Новый Структура("Имя", ЭлементСписка.Значение));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементСписка Из ТаблицаИндивидуальныхКлючей Цикл
		НайденныеСтроки = СтруктураИдентификации.НайтиСтроки(Новый Структура("Имя", ЭлементСписка.Имя));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Отметка = НЕ НайденныеСтроки[0].Отметка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Заполнение всех полей в структуре идентификации на основе объекта метаданных
//
Процедура СцТ_ЗаполнитьСписокВсехСвойствОбъектаМетаданных()
	
	СтруктураИдентификации.Очистить();
	
	Если ПустаяСтрока(ТипМД) ИЛИ ПустаяСтрока(ИмяМД) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбъектМетаданных = Метаданные[ТипМД][ИмяМД];
	Исключение
		// Сценарйий редактируется в другой конфигурации
		Возврат;
	КонецПопытки;
	
	Если ТипМД = "Справочники" Тогда
		
		// Свойства
		Если ОбъектМетаданных.ДлинаКода > 0 Тогда
			Если ОбъектМетаданных.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных("Код", "Строка", ОбъектМетаданных.ДлинаКода);
			Иначе
				СцТ_ДобавитьСвойствоОбъектаМетаданных("Код", "Число");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных("Наименование", "Строка", ОбъектМетаданных.ДлинаНаименования);
		КонецЕсли;
		
		Если ОбъектМетаданных.Иерархический Тогда
			Если ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных("ЭтоГруппа", "Булево");
			КонецЕсли;
			
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			НазваниеТипа = СтрЗаменить(ПолноеИмя, ".", "Ссылка.");
			
			СцТ_ПреобразоватьВПростойТипИДобавитьСвойстваОбъектаМетаданных("Родитель", Тип(НазваниеТипа));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектМетаданных.Владельцы) Тогда
			Для каждого Владелец Из ОбъектМетаданных.Владельцы Цикл
				ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
				НазваниеТипа = СтрЗаменить(ПолноеИмя, ".", "Ссылка.");
				
				СцТ_ПреобразоватьВПростойТипИДобавитьСвойстваОбъектаМетаданных("Владелец", Тип(НазваниеТипа));
			КонецЦикла;
		КонецЕсли;
		
		СцТ_ДобавитьСвойствоОбъектаМетаданных("ПометкаУдаления", "Булево");
		
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			Если Реквизит.ВыборГруппИЭлементов = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
				ОграничениеИспользования = "ДляГруппы";
			ИначеЕсли Реквизит.ВыборГруппИЭлементов = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				ОграничениеИспользования = "ДляЭлемента";
			Иначе
				ОграничениеИспользования = "";
			КонецЕсли;
			СцТ_ОпределитьПростойТипИДобавитьСвойствоОбъектаМетаданных(Реквизит.Имя, Реквизит.Тип, ОграничениеИспользования);
		КонецЦикла;
		
	ИначеЕсли ТипМД = "Документы" Тогда
		
		Если ОбъектМетаданных.ДлинаНомера > 0 Тогда
			Если ОбъектМетаданных.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных("Номер", "Строка", ОбъектМетаданных.ДлинаНомера);
			Иначе
				СцТ_ДобавитьСвойствоОбъектаМетаданных("Номер", "Число", ОбъектМетаданных.ДлинаНомера);
			КонецЕсли;
		КонецЕсли;
		
		СцТ_ДобавитьСвойствоОбъектаМетаданных("ПометкаУдаления", "Булево");
		СцТ_ДобавитьСвойствоОбъектаМетаданных("Проведен"       , "Булево");
		СцТ_ДобавитьСвойствоОбъектаМетаданных("Дата"           , "Дата", "День");
		
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			СцТ_ОпределитьПростойТипИДобавитьСвойствоОбъектаМетаданных(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		
	ИначеЕсли ТипМД = "ПланыВидовХарактеристик" Тогда
		
		Если ОбъектМетаданных.ДлинаКода > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных("Код", "Число");
		КонецЕсли;
		
		Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных("Наименование", "Строка", ОбъектМетаданных.ДлинаНаименования);
		КонецЕсли;
		
		Если ОбъектМетаданных.Иерархический Тогда
			Если ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных("ЭтоГруппа", "Булево");
			КонецЕсли;
			
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			НазваниеТипа = СтрЗаменить(ПолноеИмя, ".", "Ссылка.");
			
			СцТ_ПреобразоватьВПростойТипИДобавитьСвойстваОбъектаМетаданных("Родитель", Тип(НазваниеТипа));
			
		КонецЕсли;
		
		СцТ_ДобавитьСвойствоОбъектаМетаданных("ПометкаУдаления", "Булево");
		
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			Если Реквизит.ВыборГруппИЭлементов = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
				ОграничениеИспользования = "ДляГруппы";
			ИначеЕсли Реквизит.ВыборГруппИЭлементов = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				ОграничениеИспользования = "ДляЭлемента";
			Иначе
				ОграничениеИспользования = "";
			КонецЕсли;
			СцТ_ОпределитьПростойТипИДобавитьСвойствоОбъектаМетаданных(Реквизит.Имя, Реквизит.Тип, ОграничениеИспользования);
		КонецЦикла;
		
	ИначеЕсли ТипМД = "ПланыВидовРасчета" Тогда
		
		Если ОбъектМетаданных.ДлинаКода > 0 Тогда
			Если ОбъектМетаданных.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаПланаВидовРасчета.Строка Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных("Код", "Строка", ОбъектМетаданных.ДлинаКода);
			Иначе
				СцТ_ДобавитьСвойствоОбъектаМетаданных("Код", "Число");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных("Наименование", "Строка", ОбъектМетаданных.ДлинаНаименования);
		КонецЕсли;
		
		СцТ_ДобавитьСвойствоОбъектаМетаданных("ПометкаУдаления", "Булево");
		
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			СцТ_ОпределитьПростойТипИДобавитьСвойствоОбъектаМетаданных(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		
	ИначеЕсли ТипМД = "ПланыСчетов" Тогда
		
		Если ОбъектМетаданных.ДлинаКода > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных("Код", "Число");
		КонецЕсли;
		
		Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных("Наименование", "Строка", ОбъектМетаданных.ДлинаНаименования);
		КонецЕсли;
		
		СцТ_ДобавитьСвойствоОбъектаМетаданных("ПометкаУдаления", "Булево");
		
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			СцТ_ОпределитьПростойТипИДобавитьСвойствоОбъектаМетаданных(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		
		Для каждого ПризнакУчета Из ОбъектМетаданных.ПризнакиУчета Цикл
			СцТ_ОпределитьПростойТипИДобавитьСвойствоОбъектаМетаданных(ПризнакУчета.Имя, ПризнакУчета.Тип);
		КонецЦикла;
		
	ИначеЕсли ТипМД = "Задачи" Тогда
		
		Если ОбъектМетаданных.ДлинаНомера > 0 Тогда
			Если ОбъектМетаданных.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераЗадачи.Строка Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных("Номер", "Строка", ОбъектМетаданных.ДлинаНомера);
			Иначе
				СцТ_ДобавитьСвойствоОбъектаМетаданных("Номер", "Число");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
			СцТ_ДобавитьСвойствоОбъектаМетаданных("Наименование", "Строка", ОбъектМетаданных.ДлинаНаименования);
		КонецЕсли;
		
		СцТ_ДобавитьСвойствоОбъектаМетаданных("Дата"           , "Дата", "День");
		СцТ_ДобавитьСвойствоОбъектаМетаданных("ПометкаУдаления", "Булево");
		СцТ_ДобавитьСвойствоОбъектаМетаданных("Выполнена"      , "Булево");
		
		СцТ_ОпределитьПростойТипИДобавитьСвойствоОбъектаМетаданных("БизнесПроцесс", ОбъектМетаданных.БизнесПроцесс.Тип);
		СцТ_ОпределитьПростойТипИДобавитьСвойствоОбъектаМетаданных("ТочкаМаршрута", ОбъектМетаданных.ТочкаМаршрута.Тип);
		
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			СцТ_ОпределитьПростойТипИДобавитьСвойствоОбъектаМетаданных(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		
		Для каждого Реквизит Из ОбъектМетаданных.РеквизитыАдресации Цикл
			СцТ_ОпределитьПростойТипИДобавитьСвойствоОбъектаМетаданных(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		
	ИначеЕсли ТипМД = "БизнесПроцессы" Тогда
		
		Если ОбъектМетаданных.ДлинаНомера > 0 Тогда
			Если ОбъектМетаданных.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераБизнесПроцесса.Строка Тогда
				СцТ_ДобавитьСвойствоОбъектаМетаданных("Номер", "Строка", ОбъектМетаданных.ДлинаНомера);
			Иначе
				СцТ_ДобавитьСвойствоОбъектаМетаданных("Номер", "Число");
			КонецЕсли;
		КонецЕсли;
		
		СцТ_ДобавитьСвойствоОбъектаМетаданных("Дата"           , "Дата", "День");
		СцТ_ДобавитьСвойствоОбъектаМетаданных("ПометкаУдаления", "Булево");
		СцТ_ДобавитьСвойствоОбъектаМетаданных("Стартован"      , "Булево");
		СцТ_ДобавитьСвойствоОбъектаМетаданных("Завершен"       , "Булево");
		
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			СцТ_ОпределитьПростойТипИДобавитьСвойствоОбъектаМетаданных(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СцТ_ВыполнитьЗапрос(СтруктураПараметров)
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстСообщения = НСтр("ru='Ошибка. Не заполнен текст запроса.'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "ТекстЗапроса";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	
	ТекстСообщения = "";
	ТаблицаРезультата = ОбъектНаСервере.СцТ_ПолучитьОбъектыПоТаблицеИдентификации(ТекстЗапроса, СтруктураПараметров, ТекстСообщения);
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "ТекстЗапроса";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если ТаблицаРезультата = Неопределено Тогда
		Возврат Ложь;
		
	Иначе
		ЗначениеВРеквизитФормы(ТаблицаРезультата,"РезультатЗапроса");
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции


&НаСервере
Функция СцТ_ПодготовитьСписокОбщихРеквизитов_НаСервере()
	
	//МетаданныеТипа = Метаданные[ТипМД];
	
	СписокРеквизитов = Новый СписокЗначений;
	
	Если ТипМД = "Справочники" Тогда
		
		СписокРеквизитов.Добавить("ЭтоГруппа", НСтр("ru='Это группа'"));
		СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		СписокРеквизитов.Добавить("Родитель.Наименование", НСтр("ru='Родитель'"));
		СписокРеквизитов.Добавить("Владелец.Наименование", НСтр("ru='Владелец'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
	ИначеЕсли ТипМД = "Документы" Тогда
		
		СписокРеквизитов.Добавить("Номер", НСтр("ru='Номер'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		СписокРеквизитов.Добавить("Проведен"       , НСтр("ru='Проведен'"));
		СписокРеквизитов.Добавить("Дата"           , НСтр("ru='Дата'"));
		
	ИначеЕсли ТипМД = "ПланыВидовХарактеристик" Тогда
		
		СписокРеквизитов.Добавить("ЭтоГруппа", НСтр("ru='Это группа'"));
		СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		СписокРеквизитов.Добавить("Родитель.Наименование", НСтр("ru='Родитель'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
	ИначеЕсли ТипМД = "ПланыВидовРасчета" Тогда
		
		СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
	ИначеЕсли ТипМД = "ПланыСчетов" Тогда
		
		СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
	ИначеЕсли ТипМД = "Задачи" Тогда
		
		СписокРеквизитов.Добавить("Номер", НСтр("ru='Номер'"));
		СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		СписокРеквизитов.Добавить("Дата"           , НСтр("ru='Дата'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		СписокРеквизитов.Добавить("БизнесПроцесс.Дата"  , НСтр("ru='Бизнес-процесс'"));
		СписокРеквизитов.Добавить("ТочкаМаршрута"  , НСтр("ru='Точка маршрута'"));
		СписокРеквизитов.Добавить("Выполнена"      , НСтр("ru='Выполнена'"));
		
	ИначеЕсли ТипМД = "БизнесПроцессы" Тогда
		
		СписокРеквизитов.Добавить("Номер", НСтр("ru='Номер'"));
		СписокРеквизитов.Добавить("Дата"           , НСтр("ru='Дата'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		СписокРеквизитов.Добавить("Стартован"      , НСтр("ru='Стартован'"));
		СписокРеквизитов.Добавить("Завершен"       , НСтр("ru='Завершен'"));
		
	КонецЕсли;
	
	//Если    ТипМД = "Справочники"
	//	ИЛИ ТипМД = "Документы"
	//	ИЛИ ТипМД = "ПланыВидовХарактеристик"
	//	ИЛИ ТипМД = "ПланыВидовРасчета"
	//	ИЛИ ТипМД = "ПланыСчетов"
	//	ИЛИ ТипМД = "Задачи"
	//	ИЛИ ТипМД = "БизнесПроцессы" Тогда
	//	
	//	Для каждого ОбъектМетаданных Из МетаданныеТипа Цикл
	//		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
	//			Если СписокРеквизитов.НайтиПоЗначению(Реквизит.Имя) = Неопределено Тогда
	//				СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//	
	//Если ТипМД = "ПланыСчетов" Тогда
	//	Для каждого ОбъектМетаданных Из МетаданныеТипа Цикл
	//		Для каждого ПризнакУчета Из ОбъектМетаданных.ПризнакиУчета Цикл
	//			СписокРеквизитов.Добавить(ПризнакУчета.Имя, ПризнакУчета.Синоним);
	//		КонецЦикла;
	//	КонецЦикла;
	//	
	//ИначеЕсли ТипМД = "Задачи" Тогда
	//	Для каждого ОбъектМетаданных Из МетаданныеТипа Цикл
	//		Для каждого Реквизит Из ОбъектМетаданных.РеквизитыАдресации Цикл
	//			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//// Удаление из списка уже существующих ключей
	//Для каждого СтрокаИмеющихсяОбщихКлючей Из ОбщиеКлючи Цикл
	//	УдаляемыйЭлемент = СписокРеквизитов.НайтиПоЗначению(СтрокаИмеющихсяОбщихКлючей.Имя);
	//	Если УдаляемыйЭлемент <> Неопределено Тогда
	//		СписокРеквизитов.Удалить(УдаляемыйЭлемент);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//СписокРеквизитов.СортироватьПоПредставлению();
	
	Возврат СписокРеквизитов;
	
КонецФункции

&НаСервере
Процедура УстановитьТипЭталонногоОбъектаИЗаполнитьСтруктуруИдентификации()
	
	УстановитьТипЭталонногоОбъекта();
	ЗаполнитьСписокДоступныхСвойствОбъектаПоТипуОбъектаСервере();
	
КонецПроцедуры

&НаСервере
Функция УстановитьТипЭталонногоОбъекта()
	
	Если ПустаяСтрока(ТипМД) ИЛИ ПустаяСтрока(ИмяМД) Тогда
		ЭталонныйОбъект = Неопределено;
		Элементы.ЭталонныйОбъект.ВыбиратьТип     = Истина;
		Элементы.ЭталонныйОбъект.ОграничениеТипа = Новый ОписаниеТипов();
		
		Элементы.ЭталонныйОбъект.Доступность               = Ложь;
		Элементы.НайтиПоЗапросу.Доступность                = Ложь;
		Элементы.СИ_ЗаполнитьСвойстваОбъектаМД.Доступность = Ложь;
		Элементы.СИ_ЗаполнитьЗначенияСвойств.Доступность   = Ложь;
		
		Возврат Ложь;
	Иначе
		
		Попытка
			ОбъектМД = Метаданные[ТипМД][ИмяМД];
		Исключение
			ЭталонныйОбъект = Неопределено;
			Элементы.ЭталонныйОбъект.ВыбиратьТип = Истина;
			Элементы.ЭталонныйОбъект.ОграничениеТипа = Новый ОписаниеТипов();
			
			Элементы.ЭталонныйОбъект.Доступность               = Ложь;
			Элементы.НайтиПоЗапросу.Доступность                = Ложь;
			Элементы.СИ_ЗаполнитьСвойстваОбъектаМД.Доступность = Ложь;
			Элементы.СИ_ЗаполнитьЗначенияСвойств.Доступность   = Ложь;
			
			Возврат Ложь;
		КонецПопытки;
		
		СтрокаТипа = ОбъектМД.ПолноеИмя();
		СтрокаТипа = СтрЗаменить(СтрокаТипа, ".", "Ссылка.");
		
		ОписаниеТипов = Новый ОписаниеТипов(СтрокаТипа);
		Элементы.ЭталонныйОбъект.ОграничениеТипа = ОписаниеТипов;
		ЭталонныйОбъект = ОписаниеТипов.ПривестиЗначение(ЭталонныйОбъект);
		Элементы.ЭталонныйОбъект.ВыбиратьТип = Ложь;
		Элементы.ЭталонныйОбъект.Доступность               = Истина;
		
		Если НЕ ФормаОткрытаПодВнешнимУправлением Тогда
			Элементы.НайтиПоЗапросу.Доступность                = Истина;
			Элементы.СИ_ЗаполнитьСвойстваОбъектаМД.Доступность = Истина;
			Элементы.СИ_ЗаполнитьЗначенияСвойств.Доступность   = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(СинонимМД) Тогда
			СинонимМД = ОбъектМД.Синоним;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияСвойствОбъектаНаСервере()
	
	СтрокаПолей = "";
	
	Для каждого СтрокаКлюча Из СтруктураИдентификации Цикл
		
		Если НЕ ПустаяСтрока(СтрокаПолей) Тогда
			СтрокаПолей = СтрокаПолей + "," +Символы.ПС;
		КонецЕсли;
		
		ИмяПоля = СтрокаКлюча.Имя;
		ЗаголовокПоля = СтрЗаменить(СтрокаКлюча.Имя, ".", "");
		
		СтрокаПолей = СтрокаПолей + ИмяПоля + " " + "КАК" + " " + ЗаголовокПоля;
		
	КонецЦикла;
	
	ПолноеИмяМД = Метаданные[ТипМД][ИмяМД].ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ" + " " + СтрокаПолей + " " + "ИЗ" + " " + ПолноеИмяМД + " " + "ГДЕ" + " " + "Ссылка = &Ссылка";
	Запрос.Параметры.Вставить("Ссылка", ЭталонныйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ПутьКДанным = "ЭталонныйОбъект";
		Сообщение.Текст = НСтр("ru = 'В информационной базе не удалось найти эталонный объект'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаКлюча Из СтруктураИдентификации Цикл
		
		ИмяПоля = СтрокаКлюча.Имя;
		ЗаголовокПоля = СтрЗаменить(СтрокаКлюча.Имя, ".", "");
		ИстинноеЗначение = Выборка[ЗаголовокПоля];
		
		Если ИстинноеЗначение = NULL Тогда
			СтрокаКлюча.Значение = "NULL";
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ИстинноеЗначение)) Тогда
			СтрокаКлюча.ТипЗначения = "Предопределенное";
			
			ЗначениеПеречисления = "";
			Попытка
				Для каждого ЭлементПеречисления Из ИстинноеЗначение.Метаданные().ЗначенияПеречисления Цикл
					Если Перечисления[ИстинноеЗначение.Метаданные().Имя][ЭлементПеречисления.Имя] = ИстинноеЗначение Тогда
						ЗначениеПеречисления = ЭлементПеречисления.Имя;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				СтрокаКлюча.Значение = "Перечисление." + ИстинноеЗначение.Метаданные().Имя + "." + ЗначениеПеречисления;
			Исключение
			КонецПопытки;
		Иначе
			
			СтрокаКлюча.Значение = ИстинноеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаПравильностиЗаполнения()
	
	ЕстьОшибки = Ложь;
	
	Если ПустаяСтрока(ТипМД) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ПутьКДанным = "ТипМД";
		Сообщение.Текст = НСтр("ru = 'Не задан тип метаданных'");
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяМД) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ПутьКДанным = "ТипМД";
		Сообщение.Текст = НСтр("ru = 'Не задан объект метаданных'");
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ПоискПоЗапросу Тогда
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.ПутьКДанным = "ТекстЗапроса";
			Сообщение.Текст = НСтр("ru = 'Не задан текст запроса. Необходимо изи написать запрос или сбросить флаг ""Статический запрос""'");
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	Иначе
		
		Если СтруктураИдентификации.Количество() = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.ПутьКДанным = "СтруктураИдентификации";
			Сообщение.Текст = НСтр("ru = 'Не указана структура идентификации'");
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
			
		Иначе
			КоличествоАктивныхКлючей = 0;
			КоличествоЗаполненных = 0;
			Для каждого СтрокаИдентификации Из СтруктураИдентификации Цикл
				
				Если НЕ СтрокаИдентификации.Отметка Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПустаяСтрока(СтрокаИдентификации.Имя) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.ПутьКДанным = "СтруктураИдентификации";
					Сообщение.Текст = НСтр("ru = 'Имена всех свойств должны быть заполнены'");
					Сообщение.Сообщить();
					ЕстьОшибки = Истина;
					
				КонецЕсли;
				
				Если ПустаяСтрока(СтрокаИдентификации.Значение) И СтрокаИдентификации.ТипЗначения = "Предопределенное" Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.ПутьКДанным = "СтруктураИдентификации";
					Сообщение.Текст = НСтр("ru = 'Предопределенные значения свойств должны быть заполнены'");
					Сообщение.Сообщить();
					ЕстьОшибки = Истина;
					
				КонецЕсли;
				
				Если ПустаяСтрока(СтрокаИдентификации.Значение) И СтрокаИдентификации.ТипЗначения = "Предопределенное" Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.ПутьКДанным = "СтруктураИдентификации";
					Сообщение.Текст = НСтр("ru = 'Предопределенные значения свойств должны быть заполнены'");
					Сообщение.Сообщить();
					ЕстьОшибки = Истина;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИдентификации.Значение) Тогда
					КоличествоЗаполненных = КоличествоЗаполненных + 1;
				КонецЕсли;
				
				// Считаем количество пустых значений 
				КоличествоАктивныхКлючей = КоличествоАктивныхКлючей + 1;
				
			КонецЦикла;
			
			Если КоличествоАктивныхКлючей = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.ПутьКДанным = "СтруктураИдентификации";
				Сообщение.Текст = НСтр("ru = 'Нет ни одного активного ключа идентификации. Должен быть установлен флаг хотя бы у одной строки'");
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				
			ИначеЕсли КоличествоЗаполненных = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.ПутьКДанным = "СтруктураИдентификации";
				Сообщение.Текст = НСтр("ru = 'Значения всех ключей не могут одновременно быть незаполненными'");
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция ОбновитьТекстЗапроса_НаСервере()
	
	ЕстьОшибки = Ложь;
	
	Если ПустаяСтрока(ТипМД) Тогда
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.ПутьКДанным = "ТипМД";
		//Сообщение.Текст = НСтр("ru = 'Не задан тип метаданных'");
		//Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	ИначеЕсли ТипМД <> "Справочники"
		И     ТипМД <> "Документы"
		И     ТипМД <> "ПланыСчетов"
		И     ТипМД <> "ПланыВидовХарактеристик"
		И     ТипМД <> "ПланыВидовРасчета"
		И     ТипМД <> "БизнесПроцессы"
		И     ТипМД <> "Задачи" Тогда

		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.ПутьКДанным = "ТипМД";
		//Сообщение.Текст = НСтр("ru = 'Для данного типа метаданных построение запроса не предусмотрено'");
		//Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяМД) Тогда
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.ПутьКДанным = "ИмяМД";
		//Сообщение.Текст = НСтр("ru = 'Не задан объект метаданных'");
		//Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	// Преобразование таблицы к хранимому формату
	СверткаСтруктурыИдентификации = ПреобразоватьСтруктуруИдентификацииДляХранения(СтруктураИдентификации);
	
	Если СверткаСтруктурыИдентификации.Количество() = 0 Тогда
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.ПутьКДанным = "СтруктураИдентификации";
		//Сообщение.Текст = НСтр("ru = 'Не задана структура идентификации'");
		//Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат "";
	КонецЕсли;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектНаСервере.СцТ_ПолучитьТекстЗапросПоТаблицеИдентификации(ТипМД, ИмяМД, СверткаСтруктурыИдентификации);
	
КонецФункции

&НаСервере
Процедура НайтиЭталонныйОбъектПоЗапросу(Знач СтруктураПараметров)
	
	// Кажется правильным обновлять текст запроса, только, если он еще пустой
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ОбновитьТекстЗапроса_НаСервере();
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	
	ТекстСообщения = "";
	ТаблицаРезультата = ОбъектНаСервере.СцТ_ПолучитьОбъектыПоТаблицеИдентификации(ТекстЗапроса, СтруктураПараметров, ТекстСообщения);
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "ТекстЗапроса";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если ТаблицаРезультата = Неопределено ИЛИ ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	Иначе
		ЭталонныйОбъект = ТаблицаРезультата[0].Ссылка;
	КонецЕсли;
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = Строка(ЭталонныйОбъект);
	КонецЕсли;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		Идентификатор = Строка(ЭталонныйОбъект.УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьВозвращаемуюСтруктуру()
	
	// Проверка
	Если НЕ ПроверкаПравильностиЗаполнения() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемаяСтруктура = Новый Структура;
	
	ВозвращаемаяСтруктура.Вставить("Идентификатор", Идентификатор);
	
	ВозвращаемаяСтруктура.Вставить("ТипМД", ТипМД);
	ВозвращаемаяСтруктура.Вставить("ИмяМД", ИмяМД);
	ВозвращаемаяСтруктура.Вставить("СинонимМД", СинонимМД);
	ВозвращаемаяСтруктура.Вставить("Представление", Представление);
	
	СверткаСтруктурыИдентификации = ПреобразоватьСтруктуруИдентификацииДляХранения(СтруктураИдентификации);
	
	ВозвращаемаяСтруктура.Вставить("СтруктураИдентификации", СверткаСтруктурыИдентификации);
	
	ВозвращаемаяСтруктура.Вставить("ПоискПоЗапросу", ПоискПоЗапросу);
	ВозвращаемаяСтруктура.Вставить("ТекстЗапроса"  , ТекстЗапроса);
	
	Модифицированность = Ложь;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьСтруктуруИдентификацииДляХранения(ТаблицаСтруктурыИдентификации)
	
	СверткаСтруктурыИдентификации = Новый Массив;
	Для каждого СтрокаСтруктуры Из ТаблицаСтруктурыИдентификации Цикл
		Если НЕ СтрокаСтруктуры.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		СокрТипЗн = СтрокаСтруктуры.ТипЗначения;
		Если ЗначениеЗаполнено(СтрокаСтруктуры.Ограничение) Тогда
			Ограничение = Строка(СтрокаСтруктуры.Ограничение);
			Ограничение = СтрЗаменить(Ограничение, Символ(160), "");
			СокрТипЗн = СокрТипЗн + "(" + Ограничение + ")";
		КонецЕсли;
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Имя"            , СтрокаСтруктуры.Имя);
		СтруктураКлюча.Вставить("Значение"       , СтрокаСтруктуры.Значение);
		СтруктураКлюча.Вставить("СокрТипЗначения", СокрТипЗн);
		
		СверткаСтруктурыИдентификации.Добавить(СтруктураКлюча);
	КонецЦикла;
	
	Возврат СверткаСтруктурыИдентификации;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТипЗначенияПоля(ТекущийТип, ДанныеСтроки)
	
	Если ТекущийТип = "Число" Тогда
		ОписаниеТиповПоляЗначение = Новый ОписаниеТипов("Число");
		ОписаниеТиповПоляОграничения = Новый ОписаниеТипов();
		
	ИначеЕсли ТекущийТип = "Дата" Тогда
		ОписаниеТиповПоляЗначение = Новый ОписаниеТипов("Дата");
		ОписаниеТиповПоляОграничения = Новый ОписаниеТипов("Строка");
		
	ИначеЕсли ТекущийТип = "Булево" Тогда
		ОписаниеТиповПоляЗначение = Новый ОписаниеТипов("Булево");
		ОписаниеТиповПоляОграничения = Новый ОписаниеТипов();
		
	ИначеЕсли ТекущийТип = "Предопределенное" Тогда
		ОписаниеТиповПоляЗначение = Новый ОписаниеТипов("Строка");
		ОписаниеТиповПоляОграничения = Новый ОписаниеТипов();
		
	Иначе
		ОписаниеТиповПоляЗначение = Новый ОписаниеТипов("Строка");
		ОписаниеТиповПоляОграничения = Новый ОписаниеТипов("Число");
		
	КонецЕсли;
	
	
	// Поле значение
	ДанныеСтроки.Значение = ОписаниеТиповПоляЗначение.ПривестиЗначение(ДанныеСтроки.Значение);
	
	Элементы.КИ_Значение.ОграничениеТипа = ОписаниеТиповПоляЗначение;
	
	Элементы.КИ_Значение.ВыбиратьТип     = Ложь;
	Элементы.КИ_Значение.КнопкаВыбора    = Истина;
	
	// Поле ограничения типа
	ДанныеСтроки.Ограничение = ОписаниеТиповПоляОграничения.ПривестиЗначение(ДанныеСтроки.Ограничение);
	
	Элементы.КИ_ОграничениеТипа.ОграничениеТипа = ОписаниеТиповПоляОграничения;
	
	Элементы.КИ_ОграничениеТипа.ВыбиратьТип     = Ложь;
	
	
	Если ОписаниеТиповПоляОграничения.СодержитТип(Тип("Строка")) Тогда
		Элементы.КИ_ОграничениеТипа.РежимВыбораИзСписка = Ложь;
		Элементы.КИ_ОграничениеТипа.КнопкаВыбора        = Ложь;
		Элементы.КИ_ОграничениеТипа.КнопкаРегулирования = Ложь;
		Элементы.КИ_ОграничениеТипа.КнопкаСпискаВыбора  = Ложь;
		
	ИначеЕсли  ОписаниеТиповПоляОграничения.СодержитТип(Тип("Число")) Тогда
		Элементы.КИ_ОграничениеТипа.РежимВыбораИзСписка = Ложь;
		Элементы.КИ_ОграничениеТипа.КнопкаВыбора        = Истина;
		Элементы.КИ_ОграничениеТипа.КнопкаРегулирования = Истина;
		Элементы.КИ_ОграничениеТипа.КнопкаСпискаВыбора  = Ложь;
		
	Иначе
		Элементы.КИ_ОграничениеТипа.РежимВыбораИзСписка = Ложь;
		Элементы.КИ_ОграничениеТипа.КнопкаВыбора        = Ложь;
		Элементы.КИ_ОграничениеТипа.КнопкаРегулирования = Ложь;
		Элементы.КИ_ОграничениеТипа.КнопкаСпискаВыбора  = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// 1
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СтруктураИдентификации");
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураИдентификации.Отметка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(125,125,125));
	ЭлементОформления.Использование = Истина;
	
	// 2
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КИ_ОграничениеТипа");
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураИдентификации.ТипЗначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокДоступных = Новый СписокЗначений;
	СписокДоступных.Добавить("Число");
	СписокДоступных.Добавить("Булево");
	СписокДоступных.Добавить("Предопределенный");
	
	ОтборЭлемента.ПравоеЗначение = СписокДоступных;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементОформления.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеNULL(Команда)
	
	МассивВыделенныхСтрок = Элементы.СтруктураИдентификации.ВыделенныеСтроки;
	
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ИВС Из МассивВыделенныхСтрок Цикл
	
		ТД = СтруктураИдентификации.НайтиПоИдентификатору(ИВС);
		Элементы.КИ_Значение.ОграничениеТипа = Новый ОписаниеТипов("Строка");;
		Элементы.КИ_Значение.ВыбиратьТип     = Ложь;
		Элементы.КИ_Значение.КнопкаВыбора    = Ложь;
		ТД.Значение = "NULL";
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметр(Команда)
	
	МассивВыделенныхСтрок = Элементы.СтруктураИдентификации.ВыделенныеСтроки;
	
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПерваяСтрока = Элементы.СтруктураИдентификации.ТекущиеДанные;
	ЗначениеВСтроке = ПерваяСтрока.Значение;
	
	Если ТипЗнч(ЗначениеВСтроке) = Тип("Строка") И Лев(ЗначениеВСтроке, 1) = "&" Тогда
		ИмяПараметра = Сред(ЗначениеВСтроке, 2);
	Иначе
		ИмяПараметра = "";
	КонецЕсли;
	
	ТекстПодсказки = Нстр("ru = 'Введите имя параметра'");
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаИмениПараметра", ЭтотОбъект, МассивВыделенныхСтрок);
	
	ПоказатьВводСтроки(ОписаниеОповещения, ИмяПараметра, ТекстПодсказки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаИмениПараметра(Результат, МассивВыделенныхСтрок) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) Тогда
		ТекстСообщения = Нстр("ru = 'Для удаления введите значение непосредственно в поле ввода или перевыберите тип значения'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	
	Если НЕ СцТ_ГлавнаяФорма.ПроверитьПравильностьИмениПараметра(Результат) Тогда
		// Предупреждение уже было показано
		Возврат;
	КонецЕсли;
	
	Для каждого ИВС Из МассивВыделенныхСтрок Цикл
	
		ТД = СтруктураИдентификации.НайтиПоИдентификатору(ИВС);
		Элементы.КИ_Значение.ОграничениеТипа = Новый ОписаниеТипов("Строка");;
		Элементы.КИ_Значение.ВыбиратьТип     = Ложь;
		Элементы.КИ_Значение.КнопкаВыбора    = Истина;
		ТД.Значение = "&" + Результат;
	
	КонецЦикла;
	
	// Ищем параметр в таблице параметров и при необходимости добавляем
	Если СцТ_ГлавнаяФорма.ГлобальныеПараметры = Неопределено Тогда
		СцТ_ГлавнаяФорма.ГлобальныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если НЕ СцТ_ГлавнаяФорма.ГлобальныеПараметры.Свойство(Результат) Тогда
		СцТ_ГлавнаяФорма.ГлобальныеПараметры.Вставить(Результат, ТД.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкуВШаблон(Команда)
	
	Если ПустаяСтрока(ТипМД) ИЛИ ПустаяСтрока(ИмяМД) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не задан объект метаданных. Сохранение шаблона невозможно'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкуВШаблон_НаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуВШаблон_НаСервере()
	
	ТаблицаКлючейНаСервере = ПолучитьИзВременногоХранилища(АдресТаблицыКлючей);
	
	// Индивидуальные ключи
	Отбор = Новый Структура;
	Отбор.Вставить("ТипМетаданных", ТипМД);
	Отбор.Вставить("ИмяМетаданных", ИмяМД);
	МассивИндивидуальныхКлючей = ТаблицаКлючейНаСервере.НайтиСтроки(Отбор);
	
	Если МассивИндивидуальныхКлючей.Количество() > 0 Тогда
		СтрокаИК = МассивИндивидуальныхКлючей[0];
		ИндивидуальныеКлючи = СтрокаИК.Ключи.Скопировать();
	Иначе
		СтрокаИК = ТаблицаКлючейНаСервере.Добавить();
		СтрокаИК.ИмяМетаданных = ИмяМД;
		СтрокаИК.ТипМетаданных = ТипМД;
		
		ИндивидуальныеКлючи = Новый ТаблицаЗначений;
		ИндивидуальныеКлючи.Колонки.Добавить("Имя");
		ИндивидуальныеКлючи.Колонки.Добавить("Наименование");
		
		СтрокаИК.Ключи = ИндивидуальныеКлючи.Скопировать();
	КонецЕсли;
	
	// Общие ключи - нередактируемые
	Отбор = Новый Структура;
	Отбор.Вставить("ТипМетаданных", ТипМД);
	Отбор.Вставить("ИмяМетаданных", "");
	МассивОбщихКлючей = ТаблицаКлючейНаСервере.НайтиСтроки(Отбор);
	
	Если МассивОбщихКлючей.Количество() > 0 Тогда
		СтрокаОК = МассивОбщихКлючей[0];
		ОбщиеКлючи = СтрокаОК.Ключи.Скопировать();
	Иначе
		СтрокаОК = ТаблицаКлючейНаСервере.Добавить();
		СтрокаОК.ИмяМетаданных = "";
		СтрокаОК.ТипМетаданных = ТипМД;
		
		ОбщиеКлючи = Новый ТаблицаЗначений;
		ОбщиеКлючи.Колонки.Добавить("Имя");
		ОбщиеКлючи.Колонки.Добавить("Наименование");
		
		СтрокаОК.Ключи = ОбщиеКлючи.Скопировать();
	КонецЕсли;
	
	Для каждого СтрокаИдентификации Из СтруктураИдентификации Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Имя", СтрокаИдентификации.Имя);
		ЕстьВОбщих          = (ОбщиеКлючи.НайтиСтроки(Отбор).Количество() > 0);
		ЕстьВИндивидуальных = (ИндивидуальныеКлючи.НайтиСтроки(Отбор).Количество() > 0);
		
		// Условие когда добавляется
		Если НЕ СтрокаИдентификации.Отметка
			И (ЕстьВОбщих И НЕ ЕстьВИндивидуальных)
			ИЛИ
			СтрокаИдентификации.Отметка
			И (НЕ ЕстьВОбщих И НЕ ЕстьВИндивидуальных) Тогда
			НовыйКлюч = ИндивидуальныеКлючи.Добавить();
			НовыйКлюч.Имя          = СтрокаИдентификации.Имя;
			//НовыйКлюч.Наименование = СтрокаИдентификации.Представление;
			
		// Условие, когда строка удаляется
		ИначеЕсли НЕ СтрокаИдентификации.Отметка
			И (НЕ ЕстьВОбщих И ЕстьВИндивидуальных)
			ИЛИ
			СтрокаИдентификации.Отметка
			И (ЕстьВОбщих И ЕстьВИндивидуальных) Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Имя", СтрокаИдентификации.Имя);
			ИндивидуальныеКлючи.Удалить(ИндивидуальныеКлючи.НайтиСтроки(Отбор)[0]);
			
		// В остальных случаях ничего не делаем - всё хорошо
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаИК.Ключи = ИндивидуальныеКлючи.Скопировать();
	
	ПоместитьВоВременноеХранилище(ТаблицаКлючейНаСервере, АдресТаблицыКлючей);
	
	
КонецПроцедуры




#КонецОбласти