#Область Перемнные

&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресДереваМакрошагов                 = Параметры.АдресДереваМакрошагов;
	АдресДереваМакрошаговДляИнициализации = Параметры.АдресДереваМакрошаговДляИнициализации;
	ПутьКФормам                           = Параметры.ПутьКФормам;
	РежимПрогона                          = Параметры.РежимПрогона;
	
	// Обработка ситуации, когда эта форма используется для выбора
	Если Параметры.РежимОткрытия = "Выбор" Тогда
		Элементы.ФормаВыбрать.Видимость         = Истина;
		Элементы.ФормаВыбрать.КнопкаПоУмолчанию = Истина;
		РежимВыбора = Истина;
	КонецЕсли;
	
	ОбновитьТаблицуМакрошагов();
	
	Если РежимПрогона Тогда
		Элементы.Список.ИзменятьСоставСтрок        = Ложь;
		Элементы.ФормаПрочитатьИзФайла.Доступность = Ложь;
		Элементы.ФормаОбновить.Доступность         = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_ИзменениеДереваМакрошагов" И ЭтотОбъект.Открыта() Тогда
		АдресДереваМакрошагов = Параметр;
		ОбработатьИзменениеДереваМакрошагов();
		
	ИначеЕсли ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДереваМакрошагов()
	
	// Запомнить текущее положение курсора
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийУиш = ТекущиеДанные.Идентификатор;
	Иначе
		ТекущийУиш = Неопределено;
	КонецЕсли;
	
	ОбновитьТаблицуМакрошагов();
	
	// Восстановить текущее положение курсора
	Если ТекущийУиш <> Неопределено Тогда
		ТекущиеДанныеСписка = Список.НайтиСтроки(Новый Структура("Идентификатор", ТекущийУиш));
		Если ТекущиеДанныеСписка.Количество() > 0 Тогда
			Элементы.Список.ТекущаяСтрока = ТекущиеДанныеСписка[0].ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		Если Список.Количество() > 0 Тогда
			Элементы.Список.ТекущаяСтрока = Список[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимВыбора Тогда
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Закрыть(ТекущиеДанные.Идентификатор);
		
	Иначе
		
		ДанныеМакрошага = Список.НайтиПоИдентификатору(ВыбраннаяСтрока[0]);
		ОткрытьМакрошагДляРедактирования(ДанныеМакрошага);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДанныеМакрошага = Элементы.Список.ТекущиеДанные;
	
	ОткрытьМакрошагДляРедактирования(ДанныеМакрошага);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	
	Если Копирование Тогда
		ДанныеКопируемогоМакрошага = Элементы.Список.ТекущиеДанные;
		ПараметрыФормы.Вставить("Действие", "Копирование");
		ПараметрыФормы.Вставить("УИШ"     , ДанныеКопируемогоМакрошага.Идентификатор);
		
	Иначе
		
		ПараметрыФормы.Вставить("Действие"             , "Новый");
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресДереваМакрошагов", АдресДереваМакрошагов);
	ПараметрыФормы.Вставить("ПутьКФормам"          , ПутьКФормам);
	ПараметрыФормы.Вставить("РежимПрогона"         , РежимПрогона);
	
	ПараметрыФормы.Вставить("РежимСовместимости838", СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ФормаМакрошага = ОткрытьФорму(ПутьКФормам + "Макрошаг", ПараметрыФормы, ЭтотОбъект);
	ФормаМакрошага.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	МассивВыделенныхСтрок = Элементы.Список.ВыделенныеСтроки;
	
	КоличествоВыделенныхСтрок = МассивВыделенныхСтрок.Количество();
	
	Если КоличествоВыделенныхСтрок = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны макрошаги'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивУИШ = Новый Массив;
	Для Каждого Идентификатор Из МассивВыделенныхСтрок Цикл
		ДанныеСтроки = Список.НайтиПоИдентификатору(Идентификатор);
		МассивУИШ.Добавить(ДанныеСтроки.Идентификатор);
	КонецЦикла;
	
	// Проверка что ни один из удаляемых макрошагов не открыт для редактирования
	Для каждого ИдентификаторМакрошага Из МассивУИШ Цикл
		Попытка
			ФормаМакрошага = СцТ_ГлавнаяФорма.СцТ_ОткрытыеФормыМакрошагов[ИдентификаторМакрошага];
			Если ФормаМакрошага.Открыта() Тогда
				ФормаМакрошага.Активизировать();
				ТекстСообщения = НСтр("ru = 'Макрошаг редактируется. Перед удалением необходимо закрыть форму макрошага'");
				ПоказатьПредупреждение(, ТекстСообщения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	// Если дошли до сюда - можно удалять
	УдалитьМакрошагиВДереве(МассивУИШ);
	Оповестить("СцТ_ИзменениеДереваМакрошагов", АдресДереваМакрошагов);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКоманд

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	СохранитьМакрошагиВФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайлВыделенные(Команда)
	
	МассивИдентификаторов = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Список.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивИдентификаторов.Добавить(ДанныеСтроки.Идентификатор);
	КонецЦикла;
	
	СохранитьМакрошагиВФайл(МассивИдентификаторов);
	
КонецПроцедуры


&НаКлиенте
Процедура ПрочитатьИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Расширение = "xml";
	ДиалогВыбораФайла.Фильтр = "Файлы данных (*.xml)|*.xml|Все файлы (*.*)|*.*";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
		Попытка
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
			АдресДД = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		Исключение
			Возврат;
		КонецПопытки;
		
		// Открываем форму добавляемых макрошагов
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресДереваМакрошагов"                , АдресДереваМакрошагов);
		ПараметрыФормы.Вставить("АдресДереваМакрошаговДляИнициализации", АдресДереваМакрошаговДляИнициализации);
		ПараметрыФормы.Вставить("ПутьКФормам"                          , ПутьКФормам);
		ПараметрыФормы.Вставить("АдресЗагружаемогоФайла"               , АдресДД);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияОкнаВыбораМакрошагов", ЭтотОбъект, АдресДД);
		
		ФормаМакрошага = ОткрытьФорму(
			ПутьКФормам + "СписокЗагружаемыхМакрошагов",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		ФормаМакрошага.СцТ_ГлавнаяФорма = ЭтотОбъект.СцТ_ГлавнаяФорма;
		
		//ТД = Новый ТекстовыйДокумент;
		//
		//ДополнитьДеревоМакрошаговНаСервере(АдресДД, ТД);
		//
		//Если ТД.КоличествоСтрок() > 0 Тогда
		//	ТД.ВставитьСтроку(1, НСтр("ru = 'Добавленные макрошаги с совпадающими именами переименованы:'"));
		//	ТД.ДобавитьСтроку(НСтр("ru = 'При необходимости выполните переименование макрошагов вручную.'"));
		//	ТД.Показать(НСтр("ru = 'Переименованные макрошаги'"));
		//КонецЕсли;
		//
		//Оповестить("СцТ_ИзменениеДереваМакрошагов", АдресДереваМакрошагов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(ТекущиеДанные.Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИдентификаторыВыделенных(Команда)
	
	МассивВыделенныхСтрок = Элементы.Список.ВыделенныеСтроки;
	ИзменитьИдентификаторыНаСервере(МассивВыделенныхСтрок);
	
	Оповестить("СцТ_ИзменениеДереваМакрошагов", АдресДереваМакрошагов);
	
КонецПроцедуры

#КонецОбласти


#Область ДополнительныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьТаблицуМакрошагов()
	
	ДеревоМакрошаговНаСервере = ПолучитьИзВременногоХранилища(АдресДереваМакрошагов);
	
	Список.Очистить();
	
	Для каждого СтрокаМакрошага Из ДеревоМакрошаговНаСервере.Строки Цикл
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Имя           = СтрокаМакрошага.Наименование;
		НоваяСтрока.Описание      = СтрокаМакрошага.Описание;
		НоваяСтрока.Идентификатор = СтрокаМакрошага.УИШ;
		НоваяСтрока.Изменен       = СтрокаМакрошага.Активность;
	КонецЦикла;
	
	Список.Сортировать("Имя");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМакрошагДляРедактирования(ДанныеМакрошага)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие"             , "Редактирование");
	ПараметрыФормы.Вставить("УИШ"                  , ДанныеМакрошага.Идентификатор);
	ПараметрыФормы.Вставить("АдресДереваМакрошагов", АдресДереваМакрошагов);
	ПараметрыФормы.Вставить("ПутьКФормам"          , ПутьКФормам);
	ПараметрыФормы.Вставить("РежимПрогона"         , РежимПрогона);
	
	ПараметрыФормы.Вставить("РежимСовместимости838", СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ФормаМакрошага = ОткрытьФорму(ПутьКФормам + "Макрошаг", ПараметрыФормы, ЭтотОбъект);
	ФормаМакрошага.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресДвоичныхДанныхФайла(Знач МассивИдентификаторовМеташагов = Неопределено)
	
	// Чтение схемы XSD. Начало
	МакетСхемы = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаМакрошагов");
	ТекстСхемы = МакетСхемы.ПолучитьТекст();
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(ТекстСхемы);
	
	ПостроительДОМ = Новый ПостроительDOM;
	ДокументДОМ = ПостроительДОМ.Прочитать(ЧтениеХМЛ);
	
	ПостроительСхемыХМЛ = Новый ПостроительСхемXML;
	СхемаХМЛ = ПостроительСхемыХМЛ.СоздатьСхемуXML(ДокументДОМ);
	
	НаборСхемХМЛ = Новый НаборСхемXML;
	НаборСхемХМЛ.Добавить(СхемаХМЛ);
	
	ФабрикаПакета = Новый ФабрикаXDTO(НаборСхемХМЛ);
	СериализаторПакета = Новый СериализаторXDTO(ФабрикаПакета);
	ЧтениеХМЛ.Закрыть();
	// Чтение схемы XSD. Конец
	
	// Запись данных в объекты ХДТО
	ОбъектХДТО = ФабрикаПакета.Создать(
		ФабрикаПакета.Тип("http://v8.1c.ru/stest/extforms","СоставМакрошагов"));
		
	// Заполнить свойства первого уровня
	ОбъектХДТО.Наименование                       = "Макрошаги";
	ОбъектХДТО.ВерсияСтруктурыXML                 = "82-03";
	
	
	лкДеревоМакрошагов = ПолучитьИзВременногоХранилища(АдресДереваМакрошагов);
	ОбъектХДТО.Макрошаги =
		ФабрикаПакета.Создать(
			ФабрикаПакета.Тип(
				"http://v8.1c.ru/stest/extforms",
				"типБлокСценарияДерево"));
	
	СцТ_ВыгрузитьСтрокиДереваБлокаСценария(
		ФабрикаПакета,
		СериализаторПакета,
		лкДеревоМакрошагов.Строки,
		ОбъектХДТО.Макрошаги.БлокСценарияСтрока,
		МассивИдентификаторовМеташагов);
	
	Попытка
		ОбъектХДТО.Проверить();
	Исключение
	//	ИнформацияОбОшибке = ИнформацияОбОшибке();
	//	СообщениеОбОшибке = НСтр("ru='неверный формат схемы файла сценария ('")
	//		+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + ")";
		Возврат Неопределено;
	КонецПопытки;
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ФабрикаПакета.ЗаписатьXML(ЗаписьXML, ОбъектХДТО);
		
		ЗаписьXML.Закрыть();
		
	Исключение
	//		СообщениеОбОшибке = НСтр("ru = 'ошибка при записи файла сценария ('")
	//			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + ")";
	//		Возврат Неопределено;
	КонецПопытки;
		
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;
	
	Возврат АдресДвоичныхДанных;
	
КонецФункции


// Построчная сериализация сценария
//
&НаСервере
Процедура СцТ_ВыгрузитьСтрокиДереваБлокаСценария(
	ФабрикаПакета,
	СериализаторПакета,
	лкСтрокиДереваБлокаСценария,
	Список,
	МассивИдентификаторовМеташагов = Неопределено)
	
	Для каждого ТекущаяСтрока Из лкСтрокиДереваБлокаСценария Цикл
		
		Если МассивИдентификаторовМеташагов <> Неопределено
			И ТекущаяСтрока.Уровень() = 0
			И МассивИдентификаторовМеташагов.Найти(ТекущаяСтрока.УИШ) = Неопределено Тогда
			
			// Т.е. передан массив нужных идентификаторов,
			// текущая строка верхнего уровня - заголовок макрошага
			// и ее нет в списке идентификаторов
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрока.ДанныеКартинки = Неопределено Тогда
			ТекущаяСтрока.ДанныеКартинки = 1024;
		КонецЕсли;
		
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(
			ФабрикаПакета.Тип(
				"http://v8.1c.ru/stest/extforms",
				"типБлокСценарияСтрока"));
		
		// Заполнить простые значения в строку ХДТО
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаХДТО,
			ТекущаяСтрока,
			"НомерШага, Наименование, ТипШага, ТипМетаданных, ИмяМетаданных, Автоописание,
			|Описание, НеВыводитьАвтоописание, Активность, Выполнено, ОбСсылка,
			|ПредставлениеОбъекта, ВыполнитьВручную, УИШ, Цвет, Комментарий,
			|ИмяФормы, ПредставлениеИмениМетаданных, ДанныеКартинки, ЗаголовокФормы");
		
		// Заполнить сложные значения ХДТО
		// Нет сложных значений

		// Вложенное дерево значений
		лкДеревоЗначенийСтрокиБлокаСценария = ТекущаяСтрока.Значение;
		НоваяСтрокаХДТО.ЗначениеБлокаСценарияДерево = 
			ФабрикаПакета.Создать(
				ФабрикаПакета.Тип(
					"http://v8.1c.ru/stest/extforms",
					"типЗначениеБлокаСценарияДерево"));
					
		СцТ_ВыгрузитьСтрокиДереваЗначенийСтрокиБлокаСценария(
			ФабрикаПакета,
			СериализаторПакета,
			ТекущаяСтрока.Значение.Строки,
			НоваяСтрокаХДТО.ЗначениеБлокаСценарияДерево.ЗначениеБлокаСценарияСтрока);

		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);

		// Есть подчинённые строки? Рекурсивно вложить их
		Если ТекущаяСтрока.Строки.Количество()>0 Тогда
			СцТ_ВыгрузитьСтрокиДереваБлокаСценария(
				ФабрикаПакета,
				СериализаторПакета,
				ТекущаяСтрока.Строки,
				НоваяСтрокаХДТО.БлокСценарияСтрока);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СцТ_ВыгрузитьСтрокиДереваЗначенийСтрокиБлокаСценария(
	ФабрикаПакета,
	СериализаторПакета,
	лкСтрокиДереваЗначенийСтрокиБлокаСценария,
	Список)

	Для каждого ТекущаяСтрока Из лкСтрокиДереваЗначенийСтрокиБлокаСценария Цикл
		
		НоваяСтрокаХДТО = ФабрикаПакета.Создать(
			ФабрикаПакета.Тип(
				"http://v8.1c.ru/stest/extforms",
				"типЗначениеБлокаСценарияСтрока"));
		
		// Заполнить простые значения в строку ХДТО
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаХДТО,
			ТекущаяСтрока,
			"Имя, Синоним, Активность, Представление, Действие, Скрипт, ТипУзла");
		
		НоваяСтрокаХДТО.ВклВОписание = ТекущаяСтрока.Кл; // КЛ
		
		// Заполнить сложные значения ХДТО
		НоваяСтрокаХДТО.Значение = СериализаторПакета.ЗаписатьXDTO(ЗначениеВСтрокуВнутр(ТекущаяСтрока.Значение));

		// Добавить полученную строку ХДТО в список ХДТО
		Список.Добавить(НоваяСтрокаХДТО);

		// Есть подчинённые строки? Рекурсивно вложить их
		Если ТекущаяСтрока.Строки.Количество()>0 Тогда
			СцТ_ВыгрузитьСтрокиДереваЗначенийСтрокиБлокаСценария(
				ФабрикаПакета,
				СериализаторПакета,
				ТекущаяСтрока.Строки,
				НоваяСтрокаХДТО.ЗначениеБлокаСценарияСтрока);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры


&НаСервере
Процедура ДополнитьДеревоМакрошаговНаСервере(АдресДД, МассивСтруктурЗагружаемыхМакроШагов)
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресДД);
	
	ИмяВременногофайла = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		ДвоичныеДанныеФайла.Записать(ИмяВременногофайла);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'не удалось создать временный файл ('")
			+ ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
	// Чтение данных файла
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяВременногофайла);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'ошибка чтения файла ('")
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ ")";
		Возврат;
	КонецПопытки;
	
	// Чтение схемы XSD
	Попытка
		
		// Чтение схемы XSD. Начало
		МакетСхемы = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаМакрошагов");
		ТекстСхемы = МакетСхемы.ПолучитьТекст();
		
		ЧтениеСхХМЛ = Новый ЧтениеXML;
		ЧтениеСхХМЛ.УстановитьСтроку(ТекстСхемы);
		
		ПостроительДОМ = Новый ПостроительDOM;
		ДокументДОМ = ПостроительДОМ.Прочитать(ЧтениеСхХМЛ);
		
		ПостроительСхемыХМЛ = Новый ПостроительСхемXML;
		СхемаХМЛ = ПостроительСхемыХМЛ.СоздатьСхемуXML(ДокументДОМ);
		
		НаборСхемХМЛ = Новый НаборСхемXML;
		НаборСхемХМЛ.Добавить(СхемаХМЛ);
		
		ФабрикаПакета = Новый ФабрикаXDTO(НаборСхемХМЛ);
		СериализаторПакета = Новый СериализаторXDTO(ФабрикаПакета);
		ЧтениеСхХМЛ.Закрыть();
		// Чтение схемы XSD. Конец
		
		// Чтение данных
		ТипДанныхХМЛ = ПолучитьXMLТип(ЧтениеXML);
		Если ТипЗнч(ТипДанныхХМЛ) = Тип("ТипДанныхXML")
				И ТипДанныхХМЛ.URIПространстваИмен="http://v8.1c.ru/stest/extforms"
				И ТипДанныхХМЛ.ИмяТипа="СоставМакрошагов" Тогда
			ОбъектХДТО = ФабрикаПакета.ПрочитатьXML(
				ЧтениеXML, ФабрикаПакета.Тип("http://v8.1c.ru/stest/extforms", "СоставМакрошагов"));
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'неверный формат данных файла.'");
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектХДТО) <> Тип("ОбъектXDTO") Тогда
			СообщениеОбОшибке = НСтр("ru = 'неверный формат данных файла.'");
			Возврат;
		Иначе
			Если ОбъектХДТО.Тип().URIПространстваИмен <> "http://v8.1c.ru/stest/extforms"
					ИЛИ ОбъектХДТО.Тип().Имя <> "СоставМакрошагов" Тогда
				СообщениеОбОшибке = 
					НСтр("ru = 'неверный формат данных файла (неверный URI пространства имен ""%1"").'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%1", ОбъектХДТО.Тип().URIПространстваИмен);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		лкДеревоМакрошагов = ПолучитьИзВременногоХранилища(АдресДереваМакрошагов);
		
		// Создадим структуру дерева данных шага
		лкДеревоЗначенияСтрокиБлокСценария = Новый ДеревоЗначений;
		лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Имя",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
		лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Синоним",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
		лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Активность",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
		лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Значение");
		лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка"));
		лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Действие",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Скрипт",
			Новый ОписаниеТипов("Строка"));
		лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("ТипУзла",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
		лкДеревоЗначенияСтрокиБлокСценария.Колонки.Добавить("Кл",
			Новый ОписаниеТипов("Булево"));
		
		// Непосредственное добавление новых макрошагов или замена существующих
		СцТ_ДобавитьСтрокиИзЗагруженногоДерева(
			ФабрикаПакета,
			СериализаторПакета,
			лкДеревоМакрошагов.Строки,
			ОбъектХДТО.Макрошаги.БлокСценарияСтрока,
			Истина,
			лкДеревоЗначенияСтрокиБлокСценария,
			МассивСтруктурЗагружаемыхМакроШагов);
		
		АдресДереваМакрошагов = ПоместитьВоВременноеХранилище(лкДеревоМакрошагов, Новый УникальныйИдентификатор);
		
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'возникло необрабатываемое исключение ('")
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + ")";
		Возврат;
	КонецПопытки;
	
	ОбновитьТаблицуМакрошагов();
	
КонецПроцедуры


// Чтение строк дерева сценария
//
&НаСервере
Процедура СцТ_ДобавитьСтрокиИзЗагруженногоДерева(
	ФабрикаПакета,
	СериализаторПакета,
	Строки,
	СписокХДТО,
	ЭтоПервыйУровень,
	ШаблонДЗданных,
	МассивСтруктурЗагружаемыхМакроШагов = Неопределено)
	
	Если ТипЗнч(СписокХДТО) = Тип("СписокXDTO") Тогда
		
		Для каждого ТекущаяСтрока Из СписокХДТО Цикл
			
			ДеревоДанныхШага = ШаблонДЗданных.Скопировать();
			
			Если ЭтоПервыйУровень Тогда
				
				// Это уровень характеристики макрошага. 
				// Здесь проверяется нужно ли его добавлять (Заменить существующие)
				
				ИдентификаторСтроки   = ТекущаяСтрока.УИШ;
				НаименованиеМакрошага = ТекущаяСтрока.Наименование;
				
				// Попытка найти настройки для этого макрошага
				СтруктураНастроек = Неопределено;
				Для каждого Настройка Из МассивСтруктурЗагружаемыхМакроШагов Цикл
					Если Настройка.Идентификатор = ИдентификаторСтроки Тогда
						СтруктураНастроек = Настройка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если СтруктураНастроек = Неопределено Тогда
					// Пользователь отказался от загрузки этого макрошага
					Продолжить;
				КонецЕсли;
				
				Если СтруктураНастроек.Заменить Тогда
					// В сценарии существует макрошаг, и этот макрошаг нужно заменить
					// данными из файла
					СуществующаяСтрокаПоУИШ = Строки.Найти(ИдентификаторСтроки, "УИШ");
					Если СуществующаяСтрокаПоУИШ = Неопределено Тогда
						// Этого не должно быть
						Продолжить;
					Иначе
						НоваяСтрока = СуществующаяСтрокаПоУИШ;
						// Нужно удалить все существующие подчиненные строки, так как они будут загружены
						// из файла
						НоваяСтрока.Строки.Очистить();
					КонецЕсли;
					
				Иначе
					НоваяСтрока = Строки.Добавить();
					Если СтруктураНастроек.УжеСуществует Тогда
						// В сценарии существует шаг с таким идентификатором
						// нужно добавляемому шагу присвоить другой идентификатор
						УИШСтроки = Строка(Новый УникальныйИдентификатор);
					Иначе
						// Нужно идентификатор шага оставить прежним
						УИШСтроки = ИдентификаторСтроки;
					КонецЕсли;
					НоваяСтрока.УИШ = УИШСтроки;
					
					Если ПустаяСтрока(СтруктураНастроек.НовоеИмя) Тогда
						НоваяСтрока.Наименование = СтруктураНастроек.Имя;
					Иначе
						НоваяСтрока.Наименование = СтруктураНастроек.НовоеИмя;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				// Здесь строки являются подчиненными и добавляются всегда
				НоваяСтрока = Строки.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				
				СцТ_ЗагрузитьСтрокиЗначенияДереваБлокаСценария(
				ФабрикаПакета,
				СериализаторПакета,
				ДеревоДанныхШага.Строки,
				ТекущаяСтрока.ЗначениеБлокаСценарияДерево.ЗначениеБлокаСценарияСтрока);
				
			КонецЕсли;
			
			НоваяСтрока.Значение = ДеревоДанныхШага;
			
			// Есть подчинённые строки? Загрузить их во вложенные строки
			Если ТекущаяСтрока.БлокСценарияСтрока.Количество()>0 Тогда
				СцТ_ДобавитьСтрокиИзЗагруженногоДерева(
					ФабрикаПакета,
					СериализаторПакета,
					НоваяСтрока.Строки,
					ТекущаяСтрока.БлокСценарияСтрока,
					Ложь,
					ШаблонДЗданных);
			КонецЕсли;
			
			// Приведение шагов предыдущих версий к шагам текущей версии
			Если НоваяСтрока.ТипШага = "ЗакрытьФорму" Тогда
				НоваяСтрока.ТипШага = "ЗакрытьКлиентскоеОкноФормы";
				
			ИначеЕсли НоваяСтрока.ТипШага = "НажатьКнопку" Тогда
				
				Попытка
					СцТ_ПреобразоватьШагПроверкиКнопки(НоваяСтрока);
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ПреобразоватьШагПроверкиКнопки(ДанныеШага)
	
	ДеревоЗначения = ДанныеШага.Значение;
	УзелДействия = ДеревоЗначения.Строки.Найти(
		"ДействиеСКнопкой",
		"Имя",
		Ложь);
	
	Если УзелДействия <> Неопределено
		И УзелДействия.Значение = "Проверить" Тогда
		
		ДанныеШага.ДанныеКартинки = 1000;
		УзелДействия.Имя      = "ДействиеСОбъектом";
		УзелДействия.Значение = "ПроверитьСуществование";
		
		// Шаг необходимо преобразовать к шагу "НайтиЭлементФормы"
		ДанныеШага.ТипШага = "НайтиЭлементФормы";
		УзелПредставленияЭлемента = ДеревоЗначения.Строки.Найти(
			"ПредставлениеКнопки",
			"Имя",
			Ложь);
		
		Если УзелПредставленияЭлемента <> Неопределено Тогда
			ПредставлениеКнопки = Строка(УзелПредставленияЭлемента.Значение);
			УзелПредставленияЭлемента.Имя = "ПредставлениеОбъекта";
		Иначе
			ПредставлениеКнопки = ДанныеШага.Наименование;
		КонецЕсли;
		
		ДанныеШага.Наименование = НСтр("ru = 'Проверить существование элемента: '")
			+ НРег(Лев(ПредставлениеКнопки, 1))
			+ Сред(ПредставлениеКнопки, 2);
		
		УзелИмени = ДеревоЗначения.Строки.Найти(
			"ИмяКнопки",
			"Имя",
			Ложь);
		
		УзелИмени.Имя = "ИмяОбъекта";
		
		УзелВидаОбъекта = ДеревоЗначения.Строки.Найти(
			"ВидОбъекта",
			"Имя",
			Ложь);
		
		УзелВидаОбъекта.Имя = "ТипОбъекта";
		Если УзелВидаОбъекта.Значение = "КнопкаКоманднойПанели"
			ИЛИ УзелВидаОбъекта.Значение = "ОбычнаяКнопка"
			ИЛИ УзелВидаОбъекта.Значение = "Гиперссылка" Тогда
			УзелВидаОбъекта.Значение = 5;
		ИначеЕсли УзелВидаОбъекта.Значение = "ПолеФлажка" Тогда
			УзелВидаОбъекта.Значение = 3;
		Иначе
			
			УзелПути = ДеревоЗначения.Строки.Найти(
				"ИСТЗ_ПутьКОбъекту",
				"Имя",
				Ложь);
			
			Если УзелПути = Неопределено
				ИЛИ УзелПути.Строки.Количество() = 0 Тогда
				// Тип элемента определить не удалось
				
				Если УзелВидаОбъекта.Значение = "Картинка"
					ИЛИ УзелВидаОбъекта.Значение = "Надпись" Тогда
					УзелВидаОбъекта.Значение = 6;
				Иначе
					УзелВидаОбъекта.Значение = -1;
				КонецЕсли;
				
			Иначе
				
				УзелВидаОбъекта.Значение =
					УзелПути.Строки[УзелПути.Строки.Количество() - 1].Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Удаление лишних узлов
		Узел = ДеревоЗначения.Строки.Найти("КоманднаяПанель", "Имя", Ложь);
		Если Узел <> Неопределено Тогда
			ДеревоЗначения.Строки.Удалить(Узел);
		КонецЕсли;
		Узел = ДеревоЗначения.Строки.Найти("КонтекстноеМеню", "Имя", Ложь);
		Если Узел <> Неопределено Тогда
			ДеревоЗначения.Строки.Удалить(Узел);
		КонецЕсли;
		Узел = ДеревоЗначения.Строки.Найти("Подменю", "Имя", Ложь);
		Если Узел <> Неопределено Тогда
			ДеревоЗначения.Строки.Удалить(Узел);
		КонецЕсли;
		
		ДанныеШага.Автоописание = ДанныеШага.Наименование + ".";
		
		УзелВариантаПоиска = ДеревоЗначения.Строки.Найти("ВариантПоискаОбъекта", "Имя", Ложь);
		Если УзелВариантаПоиска <> Неопределено Тогда
			ВариантПоискаОбъекта = Строка(УзелВариантаПоиска.Значение);
		Иначе
			ВариантПоискаОбъекта = "";
		КонецЕсли;
		
		ПредставлениеВариантаПоиска = "";
		
		Если Лев(ВариантПоискаОбъекта, 1) = "1" Тогда
			ПредставлениеВариантаПоиска = НСтр("ru = 'по имени ('")
				+ УзелИмени.Значение +
				")";
		КонецЕсли;
		
		Если Сред(ВариантПоискаОбъекта, 2, 1) = "1" Тогда
			ПредставлениеВариантаПоиска = ПредставлениеВариантаПоиска
				+ ?(ПустаяСтрока(ПредставлениеВариантаПоиска),
					НСтр("ru = 'по заголовку'"),
					НСтр("ru = ' и заголовку'"))
				+ " ("
				+ УзелИмени.Синоним
				+ ")";
		КонецЕсли;
		
		Если Прав(ВариантПоискаОбъекта, 1) = "1" Тогда
			ПредставлениеВариантаПоиска = ПредставлениеВариантаПоиска
				+ НСтр("ru = ', при необходимости учитывать расположение элемента'");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПредставлениеВариантаПоиска) Тогда
			ДанныеШага.Автоописание = ДанныеШага.Автоописание
				+ Символы.ПС
				+ НСтр("ru = 'Искать элемент: '")
				+ ПредставлениеВариантаПоиска
				+ ".";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Чтение значения шагов сценария
//
&НаСервере
Процедура СцТ_ЗагрузитьСтрокиЗначенияДереваБлокаСценария(
	ФабрикаПакета,
	СериализаторПакета,
	Строки,
	СписокХДТО)
	
	Если ТипЗнч(СписокХДТО) = Тип("СписокXDTO") Тогда
		Для каждого ТекущаяСтрока Из СписокХДТО Цикл
			НоваяСтрока = Строки.Добавить();
			
			// Загрузить простые значения
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			НоваяСтрока.Кл = ТекущаяСтрока.ВклВОписание; // КЛ
			
			Попытка
				НоваяСтрока.Значение = ЗначениеИзСтрокиВнутр(НоваяСтрока.Значение);
			Исключение
			КонецПопытки;
			
			// Есть подчинённые строки? Загрузить их во вложенные строки
			Если ТекущаяСтрока.ЗначениеБлокаСценарияСтрока.Количество() > 0 Тогда
				
				СцТ_ЗагрузитьСтрокиЗначенияДереваБлокаСценария(
					ФабрикаПакета,
					СериализаторПакета,
					НоваяСтрока.Строки,
					ТекущаяСтрока.ЗначениеБлокаСценарияСтрока);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМакрошагиВДереве(МассивУИШ)
	
	ДеревоМакрошаговНаСервере = ПолучитьИзВременногоХранилища(АдресДереваМакрошагов);
	
	Для каждого УИШ Из МассивУИШ Цикл
	
		УдаляемыйУзел = ДеревоМакрошаговНаСервере.Строки.Найти(УИШ, "УИШ");
		
		Если УдаляемыйУзел <> Неопределено Тогда
			ДеревоМакрошаговНаСервере.Строки.Удалить(УдаляемыйУзел);
		КонецЕсли;
		
	КонецЦикла;
	
	АдресДереваМакрошагов = ПоместитьВоВременноеХранилище(ДеревоМакрошаговНаСервере, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьМакрошагиВФайл(МассивИдентификаторов = Неопределено)
	
	АдресДанныхФайла = ПолучитьАдресДвоичныхДанныхФайла(МассивИдентификаторов);
	Если АдресДанныхФайла = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить файл'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		ДД = ПолучитьИзВременногоХранилища(АдресДанныхФайла);
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Расширение = "xml";
		ДиалогВыбораФайла.Фильтр = "Файлы данных (*.xml)|*.xml|Все файлы (*.*)|*.*";
		Если ДиалогВыбораФайла.Выбрать() Тогда
			ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
			Попытка
				ДД.Записать(ИмяФайла);
			Исключение
				ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить файл'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОкнаВыбораМакрошагов(ВозвращенныйРезультат, АдресДД) Экспорт
	
	Если ВозвращенныйРезультат <> Неопределено И ВозвращенныйРезультат.Количество() > 0 Тогда
		// Т.е. пользователь не отказался от загрузки шагов
		
		ДополнитьДеревоМакрошаговНаСервере(АдресДД, ВозвращенныйРезультат);
		
		Оповестить("СцТ_ИзменениеДереваМакрошагов", АдресДереваМакрошагов);
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ИзменитьИдентификаторыНаСервере(МассивИдентификаторовСтрок)
	
	НачатьТранзакцию();
	
	лкДеревоМакрошагов = ПолучитьИзВременногоХранилища(АдресДереваМакрошагов);
	
	Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
		ДанныеСтроки = Список.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки <> Неопределено Тогда
			СтрокаВДереве = лкДеревоМакрошагов.Строки.Найти(ДанныеСтроки.Идентификатор, "УИШ", Ложь);
			Если СтрокаВДереве = Неопределено Тогда
				Сообщить(НСтр("ru = 'Не удалось изменить идентификаторы'"));
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			НовыйИдентификатор = Строка(Новый УникальныйИдентификатор);
			СтрокаВДереве.УИШ = НовыйИдентификатор;
			ДанныеСтроки.Идентификатор = НовыйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	АдресДереваМакрошагов = ПоместитьВоВременноеХранилище(лкДеревоМакрошагов, Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти










