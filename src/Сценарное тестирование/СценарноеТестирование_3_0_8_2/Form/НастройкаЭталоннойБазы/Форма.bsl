
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	Если ПустаяСтрока(Параметры.АдресДереваНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоНастроекЭталоннойБазы_НаСервере = ПолучитьИзВременногоХранилища(Параметры.АдресДереваНастройки);
	
	// Заполнение настроек эталонной базы. В версии платформы 8.3.4.310 обнаружена ошибка
	// отображения списка полей сортировки, если он заполняется по указателю.
	// Реализовано копирование всех списков значений.
	
	ЭлементыДерева = ДеревоНастроекЭталоннойБазы.ПолучитьЭлементы();
	Для каждого СтрТМД Из ДеревоНастроекЭталоннойБазы_НаСервере.Строки Цикл
		
		УзелТМД = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(УзелТМД, СтрТМД, "Имя,Представление,ТипУзла,Активность,ЕстьДоступ,ТипМетаданных");
		
		УзелТМД.Отборы            = СтрТМД.Отборы;
		УзелТМД.ТаблицаРеквизитов = СтрТМД.ТаблицаРеквизитов.Скопировать();
		УзелТМД.Подчинение        = СтрТМД.Подчинение.Скопировать();
		УзелТМД.ПоляГруппировки   = СтрТМД.ПоляГруппировки.Скопировать();
		УзелТМД.ПоляСортировки    = СтрТМД.ПоляСортировки.Скопировать();
		
		ЭлементыУзла = УзелТМД.ПолучитьЭлементы();
		Для каждого СтрИМД Из СтрТМД.Строки Цикл
			УзелИМД = ЭлементыУзла.Добавить();
			ЗаполнитьЗначенияСвойств(УзелИМД, СтрИМД, "Имя,Представление,ТипУзла,Активность,ЕстьДоступ,ТипМетаданных");
			
			УзелИМД.Отборы            = СтрИМД.Отборы;
			УзелИМД.ТаблицаРеквизитов = СтрИМД.ТаблицаРеквизитов.Скопировать();
			УзелИМД.Подчинение        = СтрИМД.Подчинение.Скопировать();
			УзелИМД.ПоляГруппировки   = СтрИМД.ПоляГруппировки.Скопировать();
			УзелИМД.ПоляСортировки    = СтрИМД.ПоляСортировки.Скопировать();
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекущийТипМД = Параметры.ТипМетаданныхЭталоннойБазы;
	
	Для каждого УзелДерева Из ДеревоНастроекЭталоннойБазы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = ТекущийТипМД Тогда
			ИдентификаторТекущегоУзла = УзелДерева.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ДеревоНастроекЭталоннойБазы.ПолучитьЭлементы().Количество() > 0 Тогда
		Элементы.ДеревоНастроекЭталоннойБазы.Развернуть(ИдентификаторТекущегоУзла);
		Элементы.ДеревоНастроекЭталоннойБазы.ТекущаяСтрока = ИдентификаторТекущегоУзла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_ДеревоНастроекЭталоннойБазы

&НаКлиенте
Процедура ДеревоНастроекЭталоннойБазыПриАктивизацииСтроки(Элемент)
	//
	//Если Элемент.ТекущиеДанные <> Неопределено
	//	И Элемент.ТекущиеДанные.ТипУзла <> "ТипМетаданных" Тогда
	//	Элементы.КомпоновщикНастроекНастройкиОтбор.Доступность = Истина;
	//	ПодключитьОбработчикОжидания("ПодготовитьПолеОтборов", 0.1, Истина);
	//Иначе
	//	Элементы.КомпоновщикНастроекНастройкиОтбор.Доступность = Ложь;
	//	КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	//КонецЕсли;
	
	ПодключитьОбработчикОжидания("СцТ_ПодготовитьПолеОтборов", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЭталоннойБазыАктивностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастроекЭталоннойБазы.ТекущиеДанные;
	
	ЗначениеАктивностиУзла = ТекущиеДанные.Активность;
	Если ЗначениеАктивностиУзла = 2 Тогда
		ТекущиеДанные.Активность = 0;
		ЗначениеАктивностиУзла   = 0;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ТипУзла = "ТипМетаданных" Тогда
			// Это узел
						
			Для каждого ПодчиненныйУзел Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				ПодчиненныйУзел.Активность = ЗначениеАктивностиУзла;
			КонецЦикла;
		Иначе
			РодительскийУзел = ТекущиеДанные.ПолучитьРодителя();
			РодительскийУзел.Активность = ЗначениеАктивностиУзла;
			Для каждого ПодчиненныйУзел Из РодительскийУзел.ПолучитьЭлементы() Цикл
				Если ПодчиненныйУзел.Активность <> ЗначениеАктивностиУзла Тогда
					РодительскийУзел.Активность = 2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_ТаблицаРеквизитов

&НаКлиенте
Процедура ДеревоНастроекЭталоннойБазыТаблицаРеквизитовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекущаяСтрока = Элементы.ДеревоНастроекЭталоннойБазы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоНастроекЭталоннойБазы.ДанныеСтроки(ТекущаяСтрока);
	
	СписокВыбора = СцТ_ДобавитьЭлементыВТаблицуРеквизитов(ТекущаяСтрока);
	
	СписокВыбора.ПоказатьОтметкуЭлементов(
		Новый ОписаниеОповещения("СцТ_ОбработатьОтметкуЭлементовДереваНастроекЭБ", ЭтотОбъект),
		НСтр("ru = 'Отметьте добавляемые реквизиты'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_ПоляГруппировки

&НаКлиенте
Процедура ДеревоНастроекЭталоннойБазыПоляГруппировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекущаяСтрока = Элементы.ДеревоНастроекЭталоннойБазы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = СцТ_ДобавитьЭлементыВСписокПолейГруппировки(ТекущаяСтрока);
	
	СписокВыбора.ПоказатьОтметкуЭлементов(
		Новый ОписаниеОповещения("СцТ_ОбработатьОтметкуПолейГруппировки", ЭтотОбъект),
		НСтр("ru = 'Отметьте добавляемые поля группировки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЭталоннойБазыПоляГруппировкиПередУдалением(Элемент, Отказ)
	
	Для каждого ИндексЭлемента Из Элементы.ДеревоНастроекЭталоннойБазыПоляГруппировки.ВыделенныеСтроки Цикл
		ЭлементСписка = Элементы.ДеревоНастроекЭталоннойБазы.ТекущиеДанные.ПоляГруппировки[ИндексЭлемента];
		Если ЭлементСписка.Значение = "Владелец"
			ИЛИ ЭлементСписка.Значение = "Родитель"
			ИЛИ ЭлементСписка.Значение = "ИмяМетаданных" Тогда
			
			Отказ = Истина;
			
			ТекстСообщения = НСтр("ru = 'Нельзя удалять поля ""Владелец"", ""Родитель"" и ""Имя объекта метаданных""'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_ПоляСортировки

&НаКлиенте
Процедура ДеревоНастроекЭталоннойБазыПоляСортировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекущаяСтрока = Элементы.ДеревоНастроекЭталоннойБазы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоНастроекЭталоннойБазы.ДанныеСтроки(ТекущаяСтрока);
	
	СписокВыбора = СцТ_ДобавитьЭлементыВСписокПолейГруппировки(ТекущаяСтрока);
	
	СписокВыбора.ПоказатьОтметкуЭлементов(
		Новый ОписаниеОповещения("СцТ_ОбработатьОтметкуПолейСортировки", ЭтотОбъект),
		НСтр("ru = 'Отметьте добавляемые поля группировки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЭталоннойБазыПоляСортировкиПередУдалением(Элемент, Отказ)
	
	Для каждого ИндексЭлемента Из Элементы.ДеревоНастроекЭталоннойБазыПоляСортировки.ВыделенныеСтроки Цикл
		ЭлементСписка = Элементы.ДеревоНастроекЭталоннойБазы.ТекущиеДанные.ПоляСортировки[ИндексЭлемента];
		Если ЭлементСписка.Значение = "Владелец"
			ИЛИ ЭлементСписка.Значение = "Родитель"
			ИЛИ ЭлементСписка.Значение = "ИмяМетаданных" Тогда
			
			Отказ = Истина;
			
			ТекстСообщения = НСтр("ru = 'Нельзя удалять поля ""Владелец"", ""Родитель"" и ""Имя объекта метаданных""'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_Отбор

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СкопироватьОборы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПослеУдаления(Элемент)
	
	СкопироватьОборы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПрименитьИЗакрытьФорму(Команда)
	
	ВозвращаемыеПарметры = СцТ_ПодготовитьДанныеНастройкиЭталоннойБазы_НаСервере();
	
	Оповестить("ПрименитьИзмененияНастроекЭталоннойБазы", ВозвращаемыеПарметры);
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура СцТ_ОбработатьОтметкуЭлементовДереваНастроекЭБ(СписокВыбора, ДопПараметры) Экспорт
	
	Если СписокВыбора <> Неопределено Тогда
		ТекущиеДанные = Элементы.ДеревоНастроекЭталоннойБазы.ТекущиеДанные;
		Для каждого ЭлементСписка Из СписокВыбора Цикл
			Если ЭлементСписка.Пометка Тогда
				ТекущиеДанные.ТаблицаРеквизитов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОбработатьОтметкуПолейГруппировки(СписокВыбора, ДопПараметры) Экспорт
	
	Если СписокВыбора <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.ДеревоНастроекЭталоннойБазы.ТекущиеДанные;
		Для каждого ЭлементСписка Из СписокВыбора Цикл
			Если ЭлементСписка.Пометка Тогда
				ТекущиеДанные.ПоляГруппировки.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// При добавлении реквизитов в таблицу группировки они должны быть добавлены в
	// таблицу сортировки в том же порядке, что и в таблице группировки
	Сообщения = "";
	СцТ_СинхронизироватьТаблицыГруппировкиИСортировки(Сообщения);
	
	Если НЕ ПустаяСтрока(Сообщения) Тогда
		ОткрытьФорму(ПутьКФормам + "Сообщения",
			Новый Структура("ЗаголовокФормы,ТекстСообщения",
				НСтр("ru = 'Информация об обновлении'"),
				Сообщения),
			ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОбработатьОтметкуПолейСортировки(СписокВыбора, ДопПараметры) Экспорт
	
	Если СписокВыбора <> Неопределено Тогда
		ТекущиеДанные = Элементы.ДеревоНастроекЭталоннойБазы.ТекущиеДанные;
		Для каждого ЭлементСписка Из СписокВыбора Цикл
			Если ЭлементСписка.Пометка Тогда
				ТекущиеДанные.ПоляСортировки.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

&НаСервере
Функция СцТ_ПодготовитьДанныеНастройкиЭталоннойБазы_НаСервере()
	
	ДеревоНастроекЭталоннойБазы_НаСервере = РеквизитФормыВЗначение("ДеревоНастроекЭталоннойБазы");
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("АдресДереваНастройки", ПоместитьВоВременноеХранилище(ДеревоНастроекЭталоннойБазы_НаСервере, Новый УникальныйИдентификатор));
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

&НаСервере
Функция СцТ_ДобавитьЭлементыВТаблицуРеквизитов(ИдентификаторДерева)
	
	ДанныеСтроки = ДеревоНастроекЭталоннойБазы.НайтиПоИдентификатору(ИдентификаторДерева);
	
	ПолныйСписокРеквизитов = Новый СписокЗначений;
	
	Если ДанныеСтроки.ТипУзла = "ТипМетаданных" Тогда
		ТипМетаданных = ДанныеСтроки.Имя;
		Для каждого УзелОбъектаМетаданных Из ДанныеСтроки.ПолучитьЭлементы() Цикл
			ИмяМетаданных = УзелОбъектаМетаданных.Имя;
			СцТ_ДобавитьВСписокРеквизитыОбъекта(ПолныйСписокРеквизитов, ТипМетаданных, ИмяМетаданных);
		КонецЦикла;
	Иначе
		ТипМетаданных = ДанныеСтроки.ПолучитьРодителя().Имя;
		ИмяМетаданных = ДанныеСтроки.Имя;
		СцТ_ДобавитьВСписокРеквизитыОбъекта(ПолныйСписокРеквизитов, ТипМетаданных, ИмяМетаданных);
	КонецЕсли;
	
	// Сортировка
	ПолныйСписокРеквизитов.СортироватьПоПредставлению();
	
	// Добавление ИмяМетаданных
	ПолныйСписокРеквизитов.Вставить(0,"ИмяМетаданных","Представление объекта метаданных");
	
	// Удаление уже имеющихся реквизитов
	Если ДанныеСтроки.ТипУзла = "ИмяМетаданных" Тогда
		УзелТипаМетаданных = ДанныеСтроки.ПолучитьРодителя();
		Для каждого ЭлементСпискаОбщихРеквизитов Из УзелТипаМетаданных.ТаблицаРеквизитов Цикл
			НайденныйРеквизит = ПолныйСписокРеквизитов.НайтиПоЗначению(ЭлементСпискаОбщихРеквизитов.Значение);
			Если НайденныйРеквизит <> Неопределено Тогда
				ПолныйСписокРеквизитов.Удалить(НайденныйРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаРеквизита Из ДанныеСтроки.ТаблицаРеквизитов Цикл
		НайденныйРеквизит = ПолныйСписокРеквизитов.НайтиПоЗначению(СтрокаРеквизита.Значение);
		Если НайденныйРеквизит <> Неопределено Тогда
			ПолныйСписокРеквизитов.Удалить(НайденныйРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолныйСписокРеквизитов;
	
КонецФункции

&НаСервере
Процедура СцТ_ДобавитьВСписокРеквизитыОбъекта(ПолныйСписокРеквизитов, ТипМетаданных, ИмяМетаданных)
	
	СписокРеквизитов = СцТ_ПолучитьСписокВсехРеквизитовИСвойствОбъектаМетаданных(ТипМетаданных, ИмяМетаданных);
	
	// Добавление реквизитов
	Для каждого ЭлементСписка Из СписокРеквизитов Цикл
		Если ПолныйСписокРеквизитов.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
			ПолныйСписокРеквизитов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СцТ_ПолучитьСписокВсехРеквизитовИСвойствОбъектаМетаданных(ТипМетаданных, ИмяМетаданных)
	
	СписокРеквизитов = Новый СписокЗначений;
	
	Если ПустаяСтрока(ТипМетаданных)
		ИЛИ ПустаяСтрока(ИмяМетаданных)
		ИЛИ ТипМетаданных = "ОбщаяФорма" Тогда
		Возврат СписокРеквизитов;
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные[ТипМетаданных][ИмяМетаданных];
	
	Если ТипМетаданных = "Справочники" Тогда
		
		// Свойства
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.Иерархический Тогда
			СписокРеквизитов.Добавить("Родитель", НСтр("ru='Родитель'"));
			Если МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				СписокРеквизитов.Добавить("ЭтоГруппа", НСтр("ru='Это группа'"));
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МетаданныеОбъекта.Владельцы) Тогда
			СписокРеквизитов.Добавить("Владелец", НСтр("ru='Владелец'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "Документы" Тогда
		
		// Свойства
		Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			СписокРеквизитов.Добавить("Номер", НСтр("ru='Номер'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		СписокРеквизитов.Добавить("Проведен"       , НСтр("ru='Проведен'"));
		СписокРеквизитов.Добавить("Дата"           , НСтр("ru='Дата'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "ПланыВидовХарактеристик" Тогда
		
		// Свойства
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.Иерархический Тогда
			СписокРеквизитов.Добавить("Родитель", НСтр("ru='Родитель'"));
			СписокРеквизитов.Добавить("ЭтоГруппа", НСтр("ru='Это группа'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "ПланыВидовРасчета" Тогда
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "ПланыСчетов" Тогда
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
		Для каждого ПризнакУчета Из МетаданныеОбъекта.ПризнакиУчета Цикл
			СписокРеквизитов.Добавить(ПризнакУчета.Имя, ПризнакУчета.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "РегистрыСведений" Тогда
		
		Если МетаданныеОбъекта.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
			И МетаданныеОбъекта.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
			СписокРеквизитов.Добавить("Период", НСтр("ru='Период'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.РежимЗаписи <> Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			СписокРеквизитов.Добавить("Регистратор", НСтр("ru='Регистратор'"));
			СписокРеквизитов.Добавить("Активность" , НСтр("ru='Активность'"));
			СписокРеквизитов.Добавить("НомерСтроки", НСтр("ru='НомерСтроки'"));
		КонецЕсли;
		
		Для каждого Ресурс Из МетаданныеОбъекта.Ресурсы Цикл
			СписокРеквизитов.Добавить(Ресурс.Имя, Ресурс.Синоним);
		КонецЦикла;
		
		Для каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
			СписокРеквизитов.Добавить(Измерение.Имя, Измерение.Синоним);
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "РегистрыНакопления"
		ИЛИ   ТипМетаданных = "РегистрыБухгалтерии"
		ИЛИ   ТипМетаданных = "РегистрыРасчета" Тогда
		
		СписокРеквизитов.Добавить("ВидДвижения", НСтр("ru='Вид движения'"));
		СписокРеквизитов.Добавить("Период"     , НСтр("ru='Период'"));
		СписокРеквизитов.Добавить("Регистратор", НСтр("ru='Регистратор'"));
		СписокРеквизитов.Добавить("Активность" , НСтр("ru='Активность'"));
		СписокРеквизитов.Добавить("НомерСтроки", НСтр("ru='Номер cтроки'"));
		
		Для каждого Ресурс Из МетаданныеОбъекта.Ресурсы Цикл
			СписокРеквизитов.Добавить(Ресурс.Имя, Ресурс.Синоним);
		КонецЦикла;
		
		Для каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
			СписокРеквизитов.Добавить(Измерение.Имя, Измерение.Синоним);
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "ЖурналыДокументов" Тогда
		
		Для каждого Графа Из МетаданныеОбъекта.Графы Цикл
			СписокРеквизитов.Добавить(Графа.Имя, Графа.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "Задачи" Тогда
		
		// Свойства
		Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			СписокРеквизитов.Добавить("Номер", НСтр("ru='Номер'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("Дата"           , НСтр("ru='Дата'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		СписокРеквизитов.Добавить("БизнесПроцесс"  , НСтр("ru='Бизнес-процесс'"));
		СписокРеквизитов.Добавить("ТочкаМаршрута"  , НСтр("ru='Точка маршрута'"));
		СписокРеквизитов.Добавить("Выполнена"      , НСтр("ru='Выполнена'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеОбъекта.РеквизитыАдресации Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "БизнесПроцессы" Тогда
		
		// Свойства
		Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			СписокРеквизитов.Добавить("Номер", НСтр("ru='Номер'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("Дата"           , НСтр("ru='Дата'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		СписокРеквизитов.Добавить("Стартован"      , НСтр("ru='Стартован'"));
		СписокРеквизитов.Добавить("Завершен"       , НСтр("ru='Завершен'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "Отчеты"
		ИЛИ ТипМетаданных = "Обработки" Тогда
		
		// Свойств нет
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокРеквизитов;
	
КонецФункции

&НаСервере
Функция СцТ_ДобавитьЭлементыВСписокПолейГруппировки(ИдентификаторДерева)
	
	ДанныеСтроки = ДеревоНастроекЭталоннойБазы.НайтиПоИдентификатору(ИдентификаторДерева);
	
	ПолныйСписокРеквизитов = Новый СписокЗначений;
	
	Если ДанныеСтроки.ТипУзла = "ТипМетаданных" Тогда
		ТипМетаданных = ДанныеСтроки.Имя;
		Для каждого УзелОбъектаМетаданных Из ДанныеСтроки.ПолучитьЭлементы() Цикл
			ИмяМетаданных = УзелОбъектаМетаданных.Имя;
			СцТ_ДобавитьВСписокРеквизитыОбъекта(ПолныйСписокРеквизитов, ТипМетаданных, ИмяМетаданных);
		КонецЦикла;
	Иначе
		Возврат ПолныйСписокРеквизитов;
	КонецЕсли;
	
	// Сортировка
	ПолныйСписокРеквизитов.СортироватьПоПредставлению();
	
	// Добавление ИмяМетаданных
	ПолныйСписокРеквизитов.Вставить(0, "ИмяМетаданных", "Представление объекта метаданных");
	
	// Удаление уже имеющихся реквизитов
	Для каждого ЭлементСписка Из ДанныеСтроки.ПоляГруппировки Цикл
		НайденныйРеквизит = ПолныйСписокРеквизитов.НайтиПоЗначению(ЭлементСписка.Значение);
		Если НайденныйРеквизит <> Неопределено Тогда
			ПолныйСписокРеквизитов.Удалить(НайденныйРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолныйСписокРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура СцТ_СинхронизироватьТаблицыГруппировкиИСортировки(Сообщения = "")
	
	ТекущиеДанные = Элементы.ДеревоНастроекЭталоннойБазы.ТекущиеДанные;
	
	КоличествоГруппировок = ТекущиеДанные.ПоляГруппировки.Количество();
	
	Если КоличествоГруппировок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для ПрямойИндекс = 0 По КоличествоГруппировок - 1 Цикл
		
		СтрокаГруппировки = ТекущиеДанные.ПоляГруппировки[ПрямойИндекс];
		
		СтрокаСортировки = ТекущиеДанные.ПоляСортировки.НайтиПоЗначению(СтрокаГруппировки.Значение);
		Если СтрокаСортировки = Неопределено Тогда
			СтрокаСортировки = ТекущиеДанные.ПоляСортировки.Добавить(СтрокаГруппировки.Значение, СтрокаГруппировки.Представление);
			
			ТекстСообщения = НСтр("ru = 'Для объектов метаданных ""<NAMEMD>"" добавлено поле сортировки ""<FIELD>""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "<NAMEMD>", ТекущиеДанные.ТипМетаданных);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "<FIELD>", СтрокаСортировки.Представление);
			Сообщения = Сообщения
				+ ?(ПустаяСтрока(Сообщения), "", Символы.ПС)
				+ ТекстСообщения;
		КонецЕсли;
		
		ИндексСтрокиСортировки = ТекущиеДанные.ПоляСортировки.Индекс(СтрокаСортировки);
		Если ИндексСтрокиСортировки <> ПрямойИндекс Тогда
			ТекущиеДанные.ПоляСортировки.Сдвинуть(СтрокаСортировки, ПрямойИндекс - ИндексСтрокиСортировки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПодготовитьПолеОтборов()
	
	ТекущаяСтрока = Элементы.ДеревоНастроекЭталоннойБазы.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		СцТ_ЗаполнитьОтборы(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ЗаполнитьОтборы(ТекущаяСтрока)
	
	// Формирование текста запроса
	ТекущиеДанные = ДеревоНастроекЭталоннойБазы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ТипМетаданных = ТекущиеДанные.ТипМетаданных;
	Если ТипМетаданных = "Справочники" Тогда
		Подстановка = "Справочник.";
		
	ИначеЕсли ТипМетаданных = "Документы" Тогда
		Подстановка = "Документ.";
		
	ИначеЕсли ТипМетаданных = "ПланыВидовХарактеристик" Тогда
		Подстановка = "ПланВидовХарактеристик.";
		
	ИначеЕсли ТипМетаданных = "ПланыСчетов" Тогда
		Подстановка = "ПланСчетов.";
		
	ИначеЕсли ТипМетаданных = "ПланыВидовРасчета" Тогда
		Подстановка = "ПланВидовРасчета.";
		
	ИначеЕсли ТипМетаданных = "РегистрыСведений" Тогда
		Подстановка = "РегистрСведений.";
		
	ИначеЕсли ТипМетаданных = "БизнесПроцессы" Тогда
		Подстановка = "БизнесПроцесс.";
		
	ИначеЕсли ТипМетаданных = "Задачи" Тогда
		Подстановка = "Задача.";
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Если ТекущиеДанные.ТипУзла <> "ТипМетаданных" Тогда
		
		СписокОбщихПолей = СцТ_ПолучитьСписокВсехРеквизитовИСвойствОбъектаМетаданных(ТипМетаданных, ТекущиеДанные.Имя);
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ";
		
		Если ТипМетаданных <> "РегистрыСведений" Тогда
			СписокОбщихПолей.Добавить("Ссылка", "Ссылка");
		КонецЕсли;
		
		Для каждого ЭлементСписка Из СписокОбщихПолей Цикл
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + ЭлементСписка.Значение + ",";
		КонецЦикла;
		ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ " + Подстановка + ТекущиеДанные.Имя;
		
	Иначе
		Если  Метаданные[ТипМетаданных].Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СписокОбщихПолей = СцТ_ПолучитьСписокВсехРеквизитовИСвойствОбъектаМетаданных(ТипМетаданных, Метаданные[ТипМетаданных][0].Имя);
		
		// Нужно выбрать и включить в запрос только общие поля
		Для каждого УзелВетки Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			
			Если НЕ УзелВетки.Активность Тогда
				Продолжить;
			КонецЕсли;
			
			СписокРеквизитов = СцТ_ПолучитьСписокВсехРеквизитовИСвойствОбъектаМетаданных(ТипМетаданных, УзелВетки.Имя);
			
			КоличествоОбщихПолей = СписокОбщихПолей.Количество();
			Для ОбратныйИндекс = 1 По КоличествоОбщихПолей Цикл
				ЭлементСписка = СписокОбщихПолей[КоличествоОбщихПолей - ОбратныйИндекс];
				Если СписокРеквизитов.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
					СписокОбщихПолей.Удалить(ЭлементСписка);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Если ТипМетаданных <> "РегистрыСведений" Тогда
			СписокОбщихПолей.Добавить("Ссылка", "Ссылка");
		КонецЕсли;
		
		Если СписокОбщихПолей.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого УзелВетки Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			
			Если НЕ УзелВетки.Активность Тогда
				Продолжить;
			КонецЕсли;
			
			
			Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ";
			Для каждого ЭлементСписка Из СписокОбщихПолей Цикл
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + ЭлементСписка.Значение + ",";
			КонецЦикла;
			ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ " + Подстановка + УзелВетки.Имя;
			
		КонецЦикла;
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Возврат;
		КонецЕсли;
		
		ПодстрокаЗапроса = "ВЫБРАТЬ";
		Для каждого ЭлементСписка Из СписокОбщихПолей Цикл
			ПодстрокаЗапроса = ПодстрокаЗапроса + Символы.ПС + ЭлементСписка.Значение + ",";
		КонецЦикла;
		ПодстрокаЗапроса = Лев(ПодстрокаЗапроса,СтрДлина(ПодстрокаЗапроса)-1);
		
		ТекстЗапроса = ПодстрокаЗапроса + " ИЗ (" + ТекстЗапроса + ") КАК Подзапрос";
		
	КонецЕсли;
	
	//Инициализация компоновщика настроек
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя                = "Локальный";
	ИсточникДанных.СтрокаСоединения   = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанныхЗапрос = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанныхЗапрос.Имя                          = "ОсновнойЗапрос";
	НаборДанныхЗапрос.Запрос                       = ТекстЗапроса;
	НаборДанныхЗапрос.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанныхЗапрос.ИсточникДанных               = "Локальный";
	
	Для каждого ЭлементСписка Из СписокОбщихПолей Цикл
		ПолеНабора = НаборДанныхЗапрос.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.ПутьКДанным = ЭлементСписка.Значение;
		ПолеНабора.Заголовок   = ЭлементСписка.Значение;
		ПолеНабора.Поле        = ЭлементСписка.Значение;
	КонецЦикла;
	
	НоваяГруппировка = СхемаКомпоновки.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	НоваяГруппировка.Использование = истина;
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ВыбранныеПоля = НоваяГруппировка.Выбор.Элементы;
	Для каждого ЭлементСписка Из СписокОбщихПолей Цикл
		ВыбранноеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(ЭлементСписка.Значение);
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Заголовок     = ЭлементСписка.Значение;
		
	КонецЦикла;
	
	// Добавление отборов из существующей таблицы
	СуществующиеОтборы = ТекущиеДанные.Отборы.Элементы;
	
	Для каждого СуществующийОтбор Из СуществующиеОтборы Цикл
		
		НовыйЭлементОтбора = СхемаКомпоновки.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		НовыйЭлементОтбора.ВидСравнения   = СуществующийОтбор.ВидСравнения;
		НовыйЭлементОтбора.Использование  = СуществующийОтбор.Использование;
		НовыйЭлементОтбора.ЛевоеЗначение  = СуществующийОтбор.ЛевоеЗначение;
		НовыйЭлементОтбора.ПравоеЗначение = СуществующийОтбор.ПравоеЗначение;
		НовыйЭлементОтбора.Представление  = СуществующийОтбор.Представление;
		
	КонецЦикла;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, Новый УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОборы()
	
	ТекущиеДанные = Элементы.ДеревоНастроекЭталоннойБазы.ТекущиеДанные;
	
	ТекущиеОтборы = ТекущиеДанные.Отборы.Элементы;
	
	ОтборыКомпоновщика = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	Для каждого СуществующийОтбор Из ОтборыКомпоновщика Цикл
		
		Если ПустаяСтрока(Строка(СуществующийОтбор.ЛевоеЗначение)) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийОтбор = Неопределено;
		Для каждого ОтборТекущейСтроки Из ТекущиеОтборы Цикл
			Если ОтборТекущейСтроки.ЛевоеЗначение = СуществующийОтбор.ЛевоеЗначение Тогда
				ТекущийОтбор = ОтборТекущейСтроки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущийОтбор = Неопределено Тогда
			
			ТекущийОтбор = ТекущиеОтборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ТекущийОтбор.ЛевоеЗначение  = СуществующийОтбор.ЛевоеЗначение;
		КонецЕсли;
		
		ТекущийОтбор.ВидСравнения   = СуществующийОтбор.ВидСравнения;
		ТекущийОтбор.Использование  = СуществующийОтбор.Использование;
		ТекущийОтбор.ПравоеЗначение = СуществующийОтбор.ПравоеЗначение;
		ТекущийОтбор.Представление  = СуществующийОтбор.Представление;
		
	КонецЦикла;
	
	// Удаление лишних
	КоличествоОтборов = ТекущиеОтборы.Количество();
	Для ОбрИндекс = 1 По КоличествоОтборов Цикл
		ОтборСтроки = ТекущиеОтборы[КоличествоОтборов - ОбрИндекс];
		
		РедактируемыйОтбор = Неопределено;
		Для каждого ОтборТекущейСтроки Из ОтборыКомпоновщика Цикл
			Если ОтборТекущейСтроки.ЛевоеЗначение = ОтборСтроки.ЛевоеЗначение Тогда
				РедактируемыйОтбор = ОтборТекущейСтроки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РедактируемыйОтбор = Неопределено Тогда
			
			ТекущиеОтборы.Удалить(ОтборСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры



#КонецОбласти
