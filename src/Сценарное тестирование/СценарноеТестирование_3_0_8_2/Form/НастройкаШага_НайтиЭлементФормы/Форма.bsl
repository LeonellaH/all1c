
#Область Переменные

// Форма - владелец текущей формы (для краткости и наглядности вместо "ЭтаФорма.ВладелецФормы")
&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

// Указатель на форму (главная или макрошага), из которой была открыта эта форма
&НаКлиенте
Перем ВызвавшаяФорма Экспорт;

// Указатель на ветку в дереве. Заполненяется, если шаг не новый
&НаКлиенте
Перем ДанныеШага Экспорт;

// Идентификатор узла в дереве. Заполнено если шаг не новый
&НаКлиенте
Перем ИдентификаторУзла Экспорт;

// Содержит интерактивный контейнер, соответствующий интерактивному шагу:
//	форма или таблица формы
&НаКлиенте
Перем ИнтерактивныйКонтейнер Экспорт;

// Окно-объект, которому подчинена текущая форма
&НаКлиенте
Перем ОкноВыбраннойФормы Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимСовместимости838 Тогда
		УстановитьДействие("ПередЗакрытием", "ПередЗакрытиеБезРежимаСовместимости");
	КонецЕсли;
	
	// Если форма открыта под внешним управлением, то не вся функциональность
	// должна работать
	Если Параметры.ОткрытаПодВнешнимУправлением Тогда
		
		Элементы.ФормаОбновитьПоДаннымФормы.Доступность = Ложь;
		Элементы.ВыбратьЭлемент.Доступность             = Ложь;
		Элементы.ВыбратьКнопку.Доступность              = Ложь;
		
	КонецЕсли;
	///
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ПутьКФормам  = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	// Управление доступностью
	ЭтотОбъект.ТолькоПросмотр = Параметры.ТолькоПросмотр;
	Элементы.ПрименитьИЗакрыть.Доступность  = НЕ Параметры.ТолькоПросмотр;
	Элементы.ПрименитьИзменения.Доступность = НЕ Параметры.ТолькоПросмотр;
	
	// основные атрибуты шага (ОА)
	// атрибуты, для редактирования, которых не требуется открытие формы настройки
	// или свернутые для хранения атрибуты
	ОА_ТипШага                          = Параметры.ТипШага;
	ОА_НомерШага                        = Параметры.НомерШага;
	ОА_Активность                       = Параметры.Активность;
	ОА_ОписательПоложенияШагаВДереве    = Параметры.ОписательПоложенияШагаВДереве;
	ОА_ЭтоНовый                         = Параметры.ЭтоНовый;
	ОА_СтруктураДанныхШага              = Параметры.СтруктураДанныхШага;
	
	// 1. Раскрытие структуры шага и определение типа шага
	Если ОА_СтруктураДанныхШага = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ДШ_Наименование                 = ОА_СтруктураДанныхШага.Наименование;
	ДШ_ТипМетаданных                = ОА_СтруктураДанныхШага.ТипМетаданных;
	ДШ_ИмяМетаданных                = ОА_СтруктураДанныхШага.ИмяМетаданных;
	ДШ_Автоописание                 = ОА_СтруктураДанныхШага.Автоописание;
	ДШ_Описание                     = ОА_СтруктураДанныхШага.Описание;
	ДШ_СкрытьАвтоописание           = ОА_СтруктураДанныхШага.СкрытьАвтоописание;
	ДШ_ОбСсылка                     = ОА_СтруктураДанныхШага.ОбСсылка;
	ДШ_ПредставлениеОбъекта         = ОА_СтруктураДанныхШага.ПредставлениеОбъекта;
	ДШ_ПредставлениеИмениМетаданных = ОА_СтруктураДанныхШага.ПредставлениеИмениМетаданных;
	ДШ_ИмяФормы                     = ОА_СтруктураДанныхШага.ИмяФормы;
	ДШ_ВыполнитьВручную             = ОА_СтруктураДанныхШага.ВыполнитьВручную;
	ДШ_Комментарий                  = ОА_СтруктураДанныхШага.Комментарий;
	ДШ_ЗаголовокФормы               = ОА_СтруктураДанныхШага.ЗаголовокФормы;
	ДШ_ДанныеКартинки               = ОА_СтруктураДанныхШага.ДанныеКартинки;
	
	Если ТипЗнч(ОА_СтруктураДанныхШага.ДеревоЗначения) = Тип("Структура") Тогда
		// Данные дерева переданы в виде структуры из главной формы обработки
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоЗначения,
			ОА_СтруктураДанныхШага.ДеревоЗначения);
	ИначеЕсли ТипЗнч(ОА_СтруктураДанныхШага.ДеревоЗначения) = Тип("ХранилищеЗначения") Тогда
		// Данные из конфигурации могут поступить в виде данных ХЗ
		Попытка
			ДЗ_НаСервере = ОА_СтруктураДанныхШага.ДеревоЗначения.Получить();
			ПреобразоватьЗначенияВДереве(ДЗ_НаСервере, Истина);
			ЗначениеВРеквизитФормы(ДЗ_НаСервере, "ДеревоЗначения");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	
	// Признак, что наименование установлено вручную
	НаименованиеШагаИзмененоВручную = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ИСТЗ_НаименованиеРучное",
		Ложь);
		
	// Картинки для закладок описания и комментария
	АдресКартинкиКомментария = ПоместитьВоВременноеХранилище(ЭтаОбработка.ПолучитьМакет("КартинкаКомментария"));
	КартинкаКомментария = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинкиКомментария));
	
	Элементы.Страница_РедактируемоеОписание.Картинка = ?(
		ПустаяСтрока(ДШ_Описание),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Элементы.Страница_Комментарий.Картинка = ?(
		ПустаяСтрока(ДШ_Комментарий),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	СцТ_НастроитьФормуДляШага();
	
	// Заполнение поведения при ошибке для группового шага
	СцТ_ЗаполнитьДействиеГрупповогоШагаПриОшибке(ЭтотОбъект);
	
	// Модифицированность
	Модифицированность = ОА_ЭтоНовый;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущийЭлемент = Элементы.ЭлементФормы_Заголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_УдалениеШаговСценария" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметр.НайтиПоЗначению(ДанныеШага.ПолучитьИдентификатор()) <> Неопределено Тогда
			Модифицированность = Ложь;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли  ИмяСобытия = "СцТ_ПеремещениеУзловСценария" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		НовыйУзел = Параметр[ДанныеШага];
		Если НовыйУзел <> Неопределено Тогда
			ДанныеШага = НовыйУзел;
			ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
			ДШ_НомерШага      = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ОбновленыДанныеГрупповогоШага" Тогда
		
		Если Параметр = ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя Тогда
			СцТ_СформироватьПредставлениеРодителя();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ИзмениласьНумерацияШагов" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ДанныеШага = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,ИдентификаторУзла);
			ОА_НомерШага = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		Исключение
		КонецПопытки;
		
	ИначеЕсли ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("СцТ_ОбработатьЗапросОСохраненииДанныхШага", ЭтотОбъект),
			НСтр("ru = 'Данные шага были изменены. Применить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиеБезРежимаСовместимости(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Если НЕ ЗавершениеРаботы Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СцТ_ОбработатьЗапросОСохраненииДанныхШага", ЭтотОбъект),
				НСтр("ru = 'Данные шага были изменены. Применить изменения?'"),
				РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Данные шага ""Действие с элементом формы"" были изменены. При закрытии все изменения будут утеряны'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Попытка
		СцТ_ГлавнаяФорма.СцТ_ОткрытыеФормыНастройкиШагов.Удалить(ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура СохранитьИЗакрытьФорму(Команда)
	
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Сохранение шага'"), , НСтр("ru = 'Данные шага сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтоназвание(Команда)
	
	СцТ_ОбновитьНаименование_НаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ХранимыеДанныеШага(Команда)
	
	// Всегда отображаются имеено хранимые данные, которые сохранены в дереве шагов
	Если ОА_ЭтоНовый Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага еще не записаны. Отобразить структуру хранения данных невозможно. Сохранить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеОтветаНаВопросОСохраненииНового", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
		Возврат;
	ИначеЕсли НЕ ОА_ЭтоНовый И Модифицированность Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага были изменены. Сохранить изменения перед отображением структуры?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеОтветаНаВопросОСохраненииСуществующего", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АктивностьПриИзменении(Элемент)
	
	Если ОА_Активность = 2 Тогда
		ОА_Активность = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПроверочноеНаименование = СцТ_СформироватьОписаниеШага_НаКлиенте(Истина);
	
	НаименованиеШагаИзмененоВручную = (ДШ_Наименование <> ПроверочноеНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("СцТ_ОбновитьЗаголовкиЗакладок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("СцТ_ОбновитьЗаголовкиЗакладок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГруппыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ОА_ЭтоНовый Тогда
		РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Иначе
		РодительУзла = ДанныеШага.ПолучитьРодителя();
	КонецЕсли;
	
	Если РодительУзла <> Неопределено Тогда
		СцТ_ГлавнаяФорма.СцТ_ОткрытьФормуНастройкиШага(РодительУзла, ВызвавшаяФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриОшибкеВПодчиненныхШагахПриИзменении(Элемент)
	
	УправлениеДоступностьюПеременнойОшибкиГрупповогоШага(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиОповещений

// Обрабатывает нажатие пользователем кнопки в диалоге вопроса о сохранении
// данных шага перед закрытием формы
// Параметры
//	КодВозврата - код нажатой кнопки (Да, Нет, Отмена);
//	ДопДанные - дополнительные данные;
//
&НаКлиенте
Процедура СцТ_ОбработатьЗапросОСохраненииДанныхШага(КодВозврата, ДопДанные) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли КодВозврата = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
		
		// При Отмене ничего не выполняется
		
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос диалога о Сохранении нового шага перед
// отображением хранимых данных
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииНового(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка нажатия "ДА"
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить шаг'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос диалога о Сохранении уже существующего модифицированного шага перед
// отображением хранимых данных
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииСуществующего(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		// Показываем, что хранится
		СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
		
	Иначе
		
		Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
			СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить изменения в шаге'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеПроцедурыИФункции

#Область НастрокаПриЗагрузкеДанныхШага

// Индивидуальная настройка формы для шага
//
&НаСервере
Процедура СцТ_НастроитьФормуДляШага()
	
	// СВТ - список выбора типа
	СВТ = Элементы.ЭлементФормы_Тип.СписокВыбора;
	СВТ.Добавить("ТестируемоеПолеФормы"     , НСтр("ru = 'Поле формы'"));
	СВТ.Добавить("ТестируемаяГруппаФормы"   , НСтр("ru = 'Группа формы'"));
	СВТ.Добавить("ТестируемаяКнопкаФормы"   , НСтр("ru = 'Кнопка'"));
	Если ОА_ОписательПоложенияШагаВДереве.ТипРодителя <> "АвтоГруппаТаблицаФормы" Тогда
		СВТ.Добавить("ТестируемаяТаблицаФормы"  , НСтр("ru = 'Таблица (дерево)'"));
		СВТ.Добавить("ТестируемаяДекорацияФормы", НСтр("ru = 'Декорация (надпись, картинка)'"));
	КонецЕсли;
	
	//СВ = Элементы.ЭлементФормы_Тип.СписокВыбора;
	//СВ.Добавить("Гиперссылка"                         , "Гиперссылка");
	//СВ.Добавить("ГруппаКнопок"                        , "Группа кнопок");
	//СВ.Добавить("ГруппаКолонок"                       , "Группа колонок");
	//СВ.Добавить("Картинка"                            , "Картинка");
	//СВ.Добавить("КнопкаКоманднойПанели"               , "Кнопка командной панели");
	//СВ.Добавить("КоманднаяПанель"                     , "Командная панель");
	//СВ.Добавить("КонтекстноеМеню"                     , "Контекстное меню");
	//СВ.Добавить("Надпись"                             , "Надпись");
	//СВ.Добавить("ОбычнаяГруппа"                       , "Группа элементов");
	//СВ.Добавить("ОбычнаяКнопка"                       , "Кнопка");
	//СВ.Добавить("Подменю"                             , "Подменю");
	//СВ.Добавить("ПолеHTMLДокумента"                   , "Поле HTML-документа");
	//СВ.Добавить("ПолеВвода"                           , "Поле ввода");
	//СВ.Добавить("ПолеГеографическойСхемы"             , "Географическая схема");
	//СВ.Добавить("ПолеГрафическойСхемы"                , "Графическая схема");
	//СВ.Добавить("ПолеДендрограммы"                    , "Дендрограма");
	//СВ.Добавить("ПолеДиаграммы"                       , "Диаграмма");
	//СВ.Добавить("ПолеДиаграммыГанта"                  , "Диаграмма Ганта");
	//СВ.Добавить("ПолеИндикатора"                      , "Индикатор");
	//СВ.Добавить("ПолеКалендаря"                       , "Календарь");
	//СВ.Добавить("ПолеПереключателя"                   , "Переключатель");
	//СВ.Добавить("ПолеПолосыРегулирования"             , "Полоса регулирования");
	//СВ.Добавить("ПолеТабличногоДокумента"             , "Табличный документ");
	//СВ.Добавить("ПолеТекстовогоДокумента"             , "Текстовый документ");
	//СВ.Добавить("ПолеФлажка"                          , "Флажок");
	//СВ.Добавить("ПолеФорматированногоДокумента"       , "Форматированный документ");
	//СВ.Добавить("Страница"                            , "Страница");
	//СВ.Добавить("Страницы"                            , "Набор страниц");
	//СВ.Добавить("ТаблицаФормы"                        , "Таблица");
	//СВ.Добавить("ТестируемаяФорма"                    , "Форма");
	//СВ.Добавить("ТестируемоеОкноКлиентскогоПриложения", "Окно");
	//СВ.Добавить("ТестируемоеПриложение"               , "Тестирумеое приложение");
	//СВ.Добавить("ТестируемоеПриложение"               , "Тестирумеое приложение");
	//СВ.Добавить("КомандныйИнтерфейс"                  , "Командный интерфейс");
	//СВ.Добавить("ГруппаКомандногоИнтерфейса"          , "Группа интерфейса");
	//СВ.Добавить("КнопкаКомандногоИнтерфейса"          , "Кнопка командного интерфейса");
	
	
	ТипЭлемента = СцТ_ЗначениеВДереве(ДеревоЗначения, "ТипОбъекта", "ТестируемоеПолеФормы");
	Если ТипЗнч(ТипЭлемента) = Тип("Число") Тогда
		Если ТипЭлемента = 3 Тогда
			ЭлементФормы_Тип = "ТестируемоеПолеФормы";
		ИначеЕсли ТипЭлемента = 4 Тогда
			ЭлементФормы_Тип = "ТестируемаяГруппаФормы";
		ИначеЕсли ТипЭлемента = 5 Тогда
			ЭлементФормы_Тип = "ТестируемаяКнопкаФормы";
		ИначеЕсли ТипЭлемента = 6 Тогда
			ЭлементФормы_Тип = "ТестируемаяДекорацияФормы";
		ИначеЕсли ТипЭлемента = 7 Тогда
			ЭлементФормы_Тип = "ТестируемаяТаблицаФормы";
		Иначе
			ЭлементФормы_Тип = "ТестируемоеПолеФормы";
			// Это значение по умолчанию
		КонецЕсли;
		
	Иначе
		ЭлементФормы_Тип = ТипЭлемента;
	КонецЕсли;
	
	УзелОписанияЭлемента = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ИмяОбъекта");
	Если УзелОписанияЭлемента <> Неопределено Тогда
		ЭлементФормы_Имя           = УзелОписанияЭлемента.Значение;
		ЭлементФормы_Заголовок     = УзелОписанияЭлемента.Синоним;
		ЭлементФормы_Вид           = УзелОписанияЭлемента.ТипУзла;
	Иначе
		ЭлементФормы_Имя           = "";
		ЭлементФормы_Заголовок     = "";
		ЭлементФормы_Вид           = "";
	КонецЕсли;
	
	ЗаполнитьПутьКЭлементуФормы(ДеревоЗначения);
	
	ВариантПоискаОбъекта = СцТ_ЗначениеВДереве(ДеревоЗначения, "ВариантПоискаОбъекта", "100");
	
	// Список выбора для Действия
	СцТ_НастроитьСписокДействийШагаНайтиЭлемент(ЭтотОбъект, ЭлементФормы_Тип);
	
	// Заполнение. Продолжение
	ДействиеСЭлементом = СцТ_ЗначениеВДереве(ДеревоЗначения, "ДействиеСОбъектом"   , "");
	
	// Заполнение таблицы свойств
	УзелСвойств = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "СвойстваОбъекта");
	Если УзелСвойств <> Неопределено Тогда
		УзелСвойстваВидимость      = СцТ_НайтиУзелДереваФормы(УзелСвойств, "Имя", "Видимость");
		УзелСвойстваДоступность    = СцТ_НайтиУзелДереваФормы(УзелСвойств, "Имя", "Доступность");
		УзелСвойстваЗаголовок      = СцТ_НайтиУзелДереваФормы(УзелСвойств, "Имя", "Заголовок");
		УзелСвойстваПодсказка      = СцТ_НайтиУзелДереваФормы(УзелСвойств, "Имя", "ТекстПодсказки");
		УзелСвойстваТолькоПросмотр = СцТ_НайтиУзелДереваФормы(УзелСвойств, "Имя", "ТолькоПросмотр");
	КонецЕсли;
	
	Если УзелСвойстваВидимость <> Неопределено Тогда
		СцТ_ДобавитьСвойствоЭлемента(
			ТаблицаСвойств,
			"Видимость",
			УзелСвойстваВидимость.Активность,
			УзелСвойстваВидимость.Значение);
	Иначе
		СцТ_ДобавитьСвойствоЭлемента(ТаблицаСвойств, "Видимость", Ложь, Ложь);
	КонецЕсли;
	
	Если УзелСвойстваДоступность <> Неопределено Тогда
		СцТ_ДобавитьСвойствоЭлемента(
			ТаблицаСвойств,
			"Доступность",
			УзелСвойстваДоступность.Активность,
			УзелСвойстваДоступность.Значение);
	Иначе
		СцТ_ДобавитьСвойствоЭлемента(ТаблицаСвойств, "Доступность", Ложь, Ложь);
	КонецЕсли;
	
	Если ЭлементФормы_Тип <> "ТестируемаяКнопкаФормы" И ЭлементФормы_Тип <> "ТестируемаяДекорацияФормы" Тогда
		Если УзелСвойстваТолькоПросмотр <> Неопределено Тогда
			СцТ_ДобавитьСвойствоЭлемента(
				ТаблицаСвойств,
				"ТолькоПросмотр",
				УзелСвойстваТолькоПросмотр.Активность,
				УзелСвойстваТолькоПросмотр.Значение);
		Иначе
			СцТ_ДобавитьСвойствоЭлемента(ТаблицаСвойств, "ТолькоПросмотр", Ложь, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если УзелСвойстваЗаголовок <> Неопределено Тогда
		СцТ_ДобавитьСвойствоЭлемента(
			ТаблицаСвойств,
			"Заголовок",
			УзелСвойстваЗаголовок.Активность,
			УзелСвойстваЗаголовок.Значение);
	Иначе
		СцТ_ДобавитьСвойствоЭлемента(ТаблицаСвойств, "УзелСвойстваЗаголовок", "", Ложь);
	КонецЕсли;
	
	Если УзелСвойстваПодсказка <> Неопределено Тогда
		СцТ_ДобавитьСвойствоЭлемента(
			ТаблицаСвойств,
			"ТекстПодсказки",
			УзелСвойстваПодсказка.Активность,
			УзелСвойстваПодсказка.Значение);
	Иначе
		СцТ_ДобавитьСвойствоЭлемента(ТаблицаСвойств, "УзелСвойстваПодсказка", "", Ложь);
	КонецЕсли;
	
	ИскатьТолькоСредиВидимых = СцТ_ЗначениеВДереве(ДеревоЗначения, "ИскатьТолькоСредиВидимых", Истина);
	
	// Заполнение сведений о кнопке
	УправляющаяКнопка = СцТ_ЗначениеВДереве(ДеревоЗначения, "ПредставлениеКнопки", "");
	
	УзелКнопкиЭлемента = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "КнопкаЭлемента");
	
	УзелОписанияКнопки = СцТ_НайтиУзелДереваФормы(УзелКнопкиЭлемента, "Имя", "ИмяКнопки");
	Если УзелОписанияКнопки <> Неопределено Тогда
		ЭлементКнопка_Имя           = УзелОписанияКнопки.Значение;
		ЭлементКнопка_Заголовок     = УзелОписанияКнопки.Синоним;
		ЭлементКнопка_Вид           = УзелОписанияКнопки.ТипУзла;
	Иначе
		ЭлементКнопка_Имя           = "";
		ЭлементКнопка_Заголовок     = "";
		ЭлементКнопка_Вид           = "";
	КонецЕсли;
	
	ВариантПоискаКнопки = СцТ_ЗначениеВДереве(УзелКнопкиЭлемента, "ВариантПоискаОбъекта", "100");
	
	ЗаполнитьПутьКЭлементуФормы(ДеревоЗначения, ПутьККнопке);
	
	//
	
	СцТ_НастроитьОтображениеШагаНайтиЭлемент(ЭтотОбъект);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страница_ДанныеШага;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СцТ_ДобавитьСвойствоЭлемента(ТабСвойств, Имя, Активность, Значение = Ложь)
	
	ОтобранныеСтроки = ТабСвойств.НайтиСтроки(Новый Структура("Имя", Имя));
	Если ОтобранныеСтроки.Количество() > 0 Тогда
		СтрокаСвойства = ОтобранныеСтроки[0];
	Иначе
		СтрокаСвойства = ТабСвойств.Добавить();
		СтрокаСвойства.Имя = Имя;
		Если Имя = "Видимость" Тогда
			СтрокаСвойства.Синоним = НСтр("ru = 'Видимость'");
		ИначеЕсли Имя = "Доступность" Тогда
			СтрокаСвойства.Синоним = НСтр("ru = 'Доступность'");
		ИначеЕсли Имя = "ТолькоПросмотр" Тогда
			СтрокаСвойства.Синоним = НСтр("ru = 'Только просмотр'");
		Иначе
			СтрокаСвойства.Синоним = Имя;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаСвойства.Активность = Активность;
	СтрокаСвойства.Значение   = Значение;
	
КонецПроцедуры

// Выполняет настройку отображения элементов для шага "НайтиЭлементФормы"
//
// Параметры:
//	Форма (УправляемаяФорма) - текущая форма на сервере или клиенте;
//
&НаКлиентеНаСервереБезКонтекста
Процедура СцТ_НастроитьОтображениеШагаНайтиЭлемент(Форма)
	
	Если Форма.ДействиеСЭлементом = "НажатьКнопку" Тогда
		Форма.Элементы.СтраницыНайтиЭлементДополнительно.ТекущаяСтраница = Форма.Элементы.СтраницаНайтиЭлементКнопка;
	ИначеЕсли Форма.ДействиеСЭлементом = "ПроверитьСвойства" Тогда
		Форма.Элементы.СтраницыНайтиЭлементДополнительно.ТекущаяСтраница = Форма.Элементы.СтраницаНайтиЭлементСвойства;
	ИначеЕсли Форма.ДействиеСЭлементом = "ПроверитьСуществование"
		ИЛИ Форма.ДействиеСЭлементом = "ПроверитьОтсутствие" Тогда
		Форма.Элементы.СтраницыНайтиЭлементДополнительно.ТекущаяСтраница = Форма.Элементы.СтраницаНайтиЭлементОбластьПоиска;
	Иначе
		Форма.Элементы.СтраницыНайтиЭлементДополнительно.ТекущаяСтраница = Форма.Элементы.СтраницаНайтиЭлементПустая;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СцТ_НастроитьСписокДействийШагаНайтиЭлемент(Форма, ТипЭлемента)
	
	// Список выбора для Действия
	СписокДоступныхДействий = Форма.Элементы.ДействиеСЭлементом.СписокВыбора;
	СписокДоступныхДействий.Очистить();
	СписокДоступныхДействий.Добавить("ПроверитьСуществование"      , НСтр("ru = 'Найти элемент и проверить существование'"));
	СписокДоступныхДействий.Добавить("ПроверитьСвойства"           , НСтр("ru = 'Проверить свойства'"));
	СписокДоступныхДействий.Добавить("ПроверитьОтсутствие"         , НСтр("ru = 'Проверить отсутствие'"));
	СписокДоступныхДействий.Добавить("ПроверитьЧтоТекущий"         , НСтр("ru = 'Проверить, что это текущий элемент'"));
	
	Если ТипЭлемента <> "ТестируемаяКнопкаФормы" Тогда
		СписокДоступныхДействий.Добавить("Активизировать", НСтр("ru = 'Найти и активизировать'"));
		СписокДоступныхДействий.Добавить("НажатьКнопку"  , НСтр("ru = 'Нажать кнопку на командной панели элемента или кнопку контекстного меню'"));
	КонецЕсли;
	
	Если ТипЭлемента = "ТестируемаяГруппаФормы" Тогда
		СписокДоступныхДействий.Добавить("Свернуть"  , НСтр("ru = 'Свернуть группу формы'"));
		СписокДоступныхДействий.Добавить("Развернуть", НСтр("ru = 'Развернуть группу формы'"));
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура СцТ_ЗаполнитьДействиеГрупповогоШагаПриОшибке(ЭтотОбъект)
	
	СписокВыбора = Элементы.ДействиеПриОшибке.СписокВыбора;
	СписокВыбора.Добавить("Остановить", НСтр("ru = 'Остановить выполнение'"));
	СписокВыбора.Добавить("Продолжить", НСтр("ru = 'Продолжить выполнение'"));
	
	// Параметры действий при ошибке находятся в корне
	ДействиеПриОшибке = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ДействиеПриОшибке",
		"Остановить");
		
	ПеременнаяПриОшибке = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ПеременнаяПриОшибке",
		"");
	
	УправлениеДоступностьюПеременнойОшибкиГрупповогоШага(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область СохранениеШагаВСценарии

// Сохранение реализовано в виде функции, т.к. потребуется
// ее выполнение в обработчике ПередЗакрытием
//
&НаКлиенте
Функция СцТ_ПрименитьИзменения_НаКлиенте() Экспорт
	
	// Проверка, что владелец формы еще не закрыт
	Если НЕ ВладелецФормы.Открыта() Тогда
		ТекстСообщения = НСтр("ru = 'Форма с деревом шагов уже закрыта. Применить изменения невозможно'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка правильности данных
	Отказ = Ложь;
	
	Если ПустаяСтрока(ДШ_Наименование) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнено наименование.'");
		
		СП = Новый СообщениеПользователю;
		СП.Текст = ТекстСообщения;
		СП.ПутьКДанным = "ДШ_Наименование";
		СП.Сообщить();
		
		Отказ = Истина;
			
	КонецЕсли;
	
	Если ПустаяСтрока(ЭлементФормы_Имя) Тогда
		ТекстСообщения = НСтр("ru = 'Имя элемента должно быть заполнено.'");
		
		СП = Новый СообщениеПользователю;
		СП.Текст = ТекстСообщения;
		СП.ПутьКДанным = "ЭлементФормы_Имя";
		СП.Сообщить();
		
		Отказ = Истина;
	КонецЕсли;
	
	Если ДействиеСЭлементом = "НажатьКнопку" И ПустаяСтрока(ЭлементФормы_Имя) Тогда
		ТекстСообщения = НСтр("ru = 'Имя кнопки должно быть заполнено.'");
		
		СП = Новый СообщениеПользователю;
		СП.Текст = ТекстСообщения;
		СП.ПутьКДанным = "ЭлементФормы_Имя";
		СП.Сообщить();
		
		Отказ = Истина;
	КонецЕсли;
	
	// Проверка индивидуальных настроек шага и заполнение ДереваЗначения
	СцТ_ПодготовитьДанныеШагаДляСохранения_НаКлиенте(Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	ОбновитьПользовательскоеОписание();
	
	ВозвращаемаяСтруктура = СцТ_СформироватьСтруктуруданныхШага_НаКлиенте();
	
	Если ОА_ЭтоНовый Тогда
		
		ДанныеШага = СцТ_ГлавнаяФорма.СцТ_СохранитьНовыйШаг(ВызвавшаяФорма, ВозвращаемаяСтруктура);
		
		ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
		ОА_НомерШага      = ДанныеШага.НомерШага;
		ОА_ЭтоНовый       = Ложь;
		
	Иначе
		СцТ_ГлавнаяФорма.СцТ_ПрименитьИзмененияВШаге(ВызвавшаяФорма, ДанныеШага, ВозвращаемаяСтруктура);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Заполнение дерева значения данными формы.
// Проверка корректности специфических для этого шага данных
&НаКлиенте
Процедура СцТ_ПодготовитьДанныеШагаДляСохранения_НаКлиенте(Отказ)
	
	// Проверки
	
	// формирование дерева
	
	Если НаименованиеШагаИзмененоВручную Тогда
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ИСТЗ_НаименованиеРучное",
			Истина);
	Иначе
		НайденныйУзел = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(
			ДеревоЗначения,
			"Имя",
			"ИСТЗ_НаименованиеРучное");
			
		Если НайденныйУзел <> Неопределено Тогда
			ДеревоЗначения.ПолучитьЭлементы().Удалить(НайденныйУзел);
		КонецЕсли;
	КонецЕсли;
	
	///////////////////////////////////
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ТипОбъекта",
		ЭлементФормы_Тип);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ИмяОбъекта",
		ЭлементФормы_Имя,
		ЭлементФормы_Заголовок,,,,,,
		ЭлементФормы_Вид);
		
	УзелСвойств = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"СвойстваОбъекта");
		
	УзелСвойств.ПолучитьЭлементы().Очистить();
		
	Для каждого СтрокаСвойства Из ТаблицаСвойств Цикл
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелСвойств,
		СтрокаСвойства.Имя,
		СтрокаСвойства.Значение,
		СтрокаСвойства.Синоним,
		СтрокаСвойства.Активность);
	КонецЦикла;
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДействиеСОбъектом",
		ДействиеСЭлементом);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ИскатьТолькоСредиВидимых",
		ИскатьТолькоСредиВидимых);
	
	// Способ поиска объекта
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелПутиПоискаОбъекта(
			ДеревоЗначения,
			ПутьКЭлементуФормы);
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ВариантПоискаОбъекта",
		ВариантПоискаОбъекта);
		
	//////////////////////////////////
	
	// Кнопка
	УзелКнопкиЭлемента = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"КнопкаЭлемента");
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелКнопкиЭлемента,
		"ИмяКнопки",
		ЭлементКнопка_Имя,
		ЭлементКнопка_Заголовок,,,,,,
		ЭлементКнопка_Вид);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелКнопкиЭлемента,
		"ВариантПоискаОбъекта",
		ВариантПоискаКнопки);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелПутиПоискаОбъекта(
			УзелКнопкиЭлемента,
			ПутьККнопке);
	
	//////////////////////////////////
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДействиеПриОшибке",
		ДействиеПриОшибке);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ПеременнаяПриОшибке",
		ПеременнаяПриОшибке);
	
КонецПроцедуры

// Свертка данных шага в структуру
// и подготовка возвращаемой структуры отредактированного шага
&НаКлиенте
Функция СцТ_СформироватьСтруктуруданныхШага_НаКлиенте()
	
	// СДШ - структура данных шага
	СДШ = Новый Структура;
	
	СДШ.Вставить("ИдентификаторШага"           , ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
	СДШ.Вставить("НаименованиеШага"            , ДШ_Наименование);
	СДШ.Вставить("ТипМетаданных"               , ДШ_ТипМетаданных);
	СДШ.Вставить("ИмяМетаданных"               , ДШ_ИмяМетаданных);
	СДШ.Вставить("Автоописание"                , ДШ_Автоописание);
	СДШ.Вставить("Описание"                    , ДШ_Описание);
	СДШ.Вставить("СкрытьАвтоописание"          , ДШ_СкрытьАвтоописание);
	СДШ.Вставить("ОбСсылка"                    , ДШ_ОбСсылка);
	СДШ.Вставить("ПредставлениеОбъекта"        , ДШ_ПредставлениеОбъекта);
	СДШ.Вставить("ВыполнитьВручную"            , ДШ_ВыполнитьВручную);
	СДШ.Вставить("Комментарий"                 , ДШ_Комментарий);
	СДШ.Вставить("ИмяФормы"                    , ДШ_ИмяФормы);
	СДШ.Вставить("ПредставлениеИмениМетаданных", ДШ_ПредставлениеИмениМетаданных);
	СДШ.Вставить("ЗаголовокФормы"              , ДШ_ЗаголовокФормы);
	СДШ.Вставить("ДанныеКартинки"              , ДШ_ДанныеКартинки);
	СДШ.Вставить("ДеревоЗначения"              , СцТ_ГлавнаяФорма.СцТ_ДеревоформыВДеревоСтруктур(ДеревоЗначения));
	
	
	// ВСД - возвращаемая структура данных
	ВСД = Новый Структура;
	ВСД.Вставить("ОписательПоложенияШагаВДереве", ОА_ОписательПоложенияШагаВДереве);
	ВСД.Вставить("Наименование"                 , ДШ_Наименование);
	ВСД.Вставить("Активность"                   , ОА_Активность);
	ВСД.Вставить("СтруктураДанныхШага"          , СДШ);
	ВСД.Вставить("ЭтоНовый"                     , ОА_ЭтоНовый);
	ВСД.Вставить("ТипШага"                      , ОА_ТипШага);
	
	Возврат ВСД;
	
КонецФункции

#КонецОбласти

#Область ФормированеОписанийИНаименований

// Формирование описания шага на клиенте
&НаКлиенте
Функция СцТ_СформироватьОписаниеШага_НаКлиенте(Краткое = Ложь)
	
	СцТ_Видимость      = Неопределено;
	СцТ_Доступность    = Неопределено;
	СцТ_ТолькоПросмотр = Неопределено;
	СцТ_Заголовок      = "";
	СцТ_ТекстПодсказки = "";
	
	// СТС - строка таблицы свойств
	Для каждого СТС Из ТаблицаСвойств Цикл
		Если СТС.Имя = "Видимость" Тогда
			СцТ_Видимость = СТС.Значение;
		ИначеЕсли СТС.Имя = "Доступность" Тогда
			СцТ_Доступность = СТС.Значение;
		ИначеЕсли СТС.Имя = "ТолькоПросмотр" Тогда
			СцТ_ТолькоПросмотр = СТС.Значение;
		ИначеЕсли СТС.Имя = "Заголовок" Тогда
			СцТ_Заголовок = СТС.Значение;
		ИначеЕсли СТС.Имя = "ТекстПодсказки" Тогда
			СцТ_ТекстПодсказки = СТС.Значение;
		КонецЕсли;
	КонецЦикла;
	
	СДО = Новый Структура;
	СДО.Вставить("ДействиеСОбъектом", ДействиеСЭлементом);
	СДО.Вставить("Тип"              , ЭлементФормы_Тип);
	СДО.Вставить("Имя"              , ЭлементФормы_Имя);
	СДО.Вставить("Заголовок"        , ЭлементФормы_Заголовок);
	
	СДО.Вставить("Видимость"        , СцТ_Видимость);
	СДО.Вставить("Доступность"      , СцТ_Доступность);
	СДО.Вставить("ТолькоПросмотр"   , СцТ_ТолькоПросмотр);
	СДО.Вставить("Заголовок"        , СцТ_Заголовок);
	СДО.Вставить("ТекстПодсказки"   , СцТ_ТекстПодсказки);
	
	СДО.Вставить("ВариантПоиска"    , ВариантПоискаОбъекта);
	
	ВозвращаемоеОписание = СцТ_ГлавнаяФорма.СцТ_ПолучитьОписаниеШага_НайтиЭлементФормы(СДО, Краткое);
	
	Возврат ВозвращаемоеОписание;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ОбновитьНаименование_НаКлиенте(Принудительно = Ложь)
	
	Если НЕ НаименованиеШагаИзмененоВручную ИЛИ Принудительно Тогда
		//ДШ_Наименование = СцТ_ГлавнаяФорма.СцТ_ПолучитьОписаниеШага_НайтиФорму("", Истина);
	КонецЕсли;
	
	Если Принудительно Тогда
		НаименованиеШагаИзмененоВручную = Ложь;
		Модифицированность = Истина;
		// В остальных случаях менять модифицированность не нужно,
		// так как ее должно изменить изменение другого элемента формы
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСДеревомЗначения

// Возвращает значение заданного поля в дереве данных
//
// Параметры
//	ДерЗнач              - дерево с данными в котором ведется поиск
//	ИмяПараметра         - имя искомого параметра
//	ЕслиНеНайдено        - что вернуть, если значение не найдено
//	ВозвращаемыйРеквизит - имя колонки, которую нужно вернуть
//	Рекурсивно           - признак рекурсии
// Возвращаемое значение - значение нужного поля найденного узла
&НаСервереБезКонтекста
Функция СцТ_ЗначениеВДереве(
	ДерЗнач,
	ИмяПараметра,
	ЕслиНеНайдено = Неопределено,
	ВозвращаемыйРеквизит = "Значение",
	Рекурсивно = Истина)
	
	УзелЗначения = СцТ_НайтиУзелДереваФормы(ДерЗнач, "Имя", ИмяПараметра, Рекурсивно);
	Если УзелЗначения = Неопределено Тогда
		Возврат ЕслиНеНайдено;
	Иначе
		Возврат УзелЗначения[ВозвращаемыйРеквизит];
	КонецЕсли;
	
КонецФункции

// Поиск нужного узла в дереве данных
//
// Параметры
//	ДеревоФормы       - дерево, в котором ведется поиск
//	Реквизит          - имя поля в котором ведется поиск
//	ЗначениеРеквизита - значение в поле
//	Рекурсивно        - признак рекурсивного поиска
// Возвращаемое значение - найденный узел
&НаСервереБезКонтекста
Функция СцТ_НайтиУзелДереваФормы(
	ДеревоФормы,
	Реквизит,
	ЗначениеРеквизита,
	Рекурсивно = Ложь)
	
	Если ДеревоФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Узел Из ДеревоФормы.ПолучитьЭлементы() Цикл
		Если Узел[Реквизит] = ЗначениеРеквизита Тогда
			Возврат Узел;
		КонецЕсли;
		Если Рекурсивно Тогда
			НайденыйУзел = СцТ_НайтиУзелДереваФормы(Узел, Реквизит, ЗначениеРеквизита, Истина);
			Если НайденыйУзел <> Неопределено Тогда
				Возврат НайденыйУзел;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Заполнение дерева значения данными из структуры
//
// параметры
//	ДеревоФормы - заполняемое дерево
//	ДеревоСтруктур - структура с данными
&НаСервереБезКонтекста
Процедура СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоФормы, ДеревоСтруктур)
	
	СтрокиДереваФормы = ДеревоФормы.ПолучитьЭлементы();
	Для каждого СтрокаДереваСтруктур Из ДеревоСтруктур.ИСТЗ_Строки Цикл
		СтрокаДереваФормы = СтрокиДереваФормы.Добавить();
		Для каждого КлючЗначение Из СтрокаДереваСтруктур Цикл
			Если КлючЗначение.Ключ <> "ИСТЗ_Строки" Тогда
				СтрокаДереваФормы[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(СтрокаДереваФормы, СтрокаДереваСтруктур);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПреобразоватьЗначенияВДереве(ВеткаДерева, ДляОтображения = Истина)
	
	Для каждого СтрокаДерева Из ВеткаДерева.Строки Цикл
		
		Если ДляОтображения Тогда
			СтрокаДерева.Значение = ЗначениеИзСтрокиВнутр(СтрокаДерева.Значение);
		Иначе
			СтрокаДерева.Значение = ЗначениеВСтрокуВнутр(СтрокаДерева.Значение);
		КонецЕсли;
		
		ПреобразоватьЗначенияВДереве(СтрокаДерева, ДляОтображения);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Обновление картинок на закладках
// Вызывается посредством обработки ожидания, чтобы форма нормально закрывалась после редактирования
&НаКлиенте
Процедура СцТ_ОбновитьЗаголовкиЗакладок()
	
	Элементы.Страница_РедактируемоеОписание.Картинка = ?(
		ПустаяСтрока(ДШ_Описание),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Элементы.Страница_Комментарий.Картинка = ?(
		ПустаяСтрока(ДШ_Комментарий),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
КонецПроцедуры

// Отображение родительского шага
// Параметры:
// ПриОткрытии - устанавливает признак, что настройка выполняется при открытии
// или (в противном случае) по обработке оповещения
&НаКлиенте
Процедура СцТ_СформироватьПредставлениеРодителя(ПриОткрытии = Истина) Экспорт
	
	Если ОА_ЭтоНовый И ПриОткрытии Тогда
		Если ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя = Неопределено Тогда
			ПредставлениеГруппы = "";
		Иначе
			// Поиск данных родительского узла в дереве по идентификатору шага
			СцТ_РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,
				ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
			
			Если СцТ_РодительУзла = Неопределено Тогда
				ПредставлениеГруппы = "";
			Иначе
				ОтобразитьПредставлениеСуществующегоРодительскогоШага(СцТ_РодительУзла);
			КонецЕсли;
		КонецЕсли;
		
		// Если родительский узел будет изменен у нового шага, то редактируемый шаг уже не имеет смысла,
		// так как неизвестно куда его вставить
		
	ИначеЕсли НЕ ОА_ЭтоНовый Тогда
		Если ДанныеШага = Неопределено Тогда
			ПредставлениеГруппы = "";
		Иначе
			СцТ_РодительУзла = ДанныеШага.ПолучитьРодителя();
			Если СцТ_РодительУзла = Неопределено Тогда
				ПредставлениеГруппы = "";
			Иначе
				ОтобразитьПредставлениеСуществующегоРодительскогоШага(СцТ_РодительУзла);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПредставлениеГруппы = "" Тогда
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы.СтраницаПустойГруппы;
	Иначе
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы.СтраницаЗаполненнойГруппы;
	КонецЕсли;
	
КонецПроцедуры

// Формирование представление существующего шага
// параметры
// РодительскийШаг - указатель на данные родительского шага.
// НЕ может быть Неопределено
&НаКлиенте
Процедура ОтобразитьПредставлениеСуществующегоРодительскогоШага(РодительскийШаг)
	
	ПредставлениеГруппы = НСтр("ru = 'Шаг №%1 ""%2""'");
	ПредставлениеГруппы = СтрЗаменить(
		ПредставлениеГруппы,
		"%1",
		Формат(РодительскийШаг.НомерШага, "ЧГ=0"));
	
	ПредставлениеГруппы = СтрЗаменить(
		ПредставлениеГруппы,
		"%2",
		РодительскийШаг.Наименование);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюПеременнойОшибкиГрупповогоШага(УпрФорма)
	
	Если УпрФорма.ДействиеПриОшибке = "Остановить" Тогда
		УпрФорма.Элементы.СтраницыПеременнойОшибки.ТекущаяСтраница = УпрФорма.Элементы.СтраницыПеременнойОшибки_Пустая;
	Иначе
		УпрФорма.Элементы.СтраницыПеременнойОшибки.ТекущаяСтраница = УпрФорма.Элементы.СтраницыПеременнойОшибки_Заполненная;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОбъектаМетаданных(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДШ_ИмяМетаданных = Результат.Значение;
	ДШ_ПредставлениеИмениМетаданных = Результат.Представление;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПользовательскоеОписание()
	
	ТекстОписания = ДШ_Описание;
	
	Если НЕ ДШ_СкрытьАвтоописание Тогда
		ДШ_Автоописание = СцТ_СформироватьОписаниеШага_НаКлиенте();
		ТекстОписания = СцТ_ГлавнаяФорма.СцТ_ДобавитьПодстроку(ТекстОписания, ДШ_Автоописание, Символы.ПС);
	КонецЕсли;
	
	ПользовательскоеОписание = ТекстОписания;
	
КонецПроцедуры

&НаКлиенте
Процедура ДШ_СкрытьАвтоописаниеПриИзменении(Элемент)
	
	ОбновитьПользовательскоеОписание();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница = Элементы.Страница_ОписаниеШага Тогда
		ОбновитьПользовательскоеОписание();
	КонецЕсли;
	
КонецПроцедуры


// Выполняет обработку выбора типа добавляемых элементов, по которым требуется
// искать форму в шаге "Найти форму"
//
// Параметры
//	ЭлементОписанияДобавляемых - выбранный элемент списка элементов;
//	ДопДанные - дополнительные данные
//
&НаКлиенте
Процедура СцТ_ОбработатьВыборТипаДобавляемыхЭлементовШагаНайтиФорму(ДобавляемыйЭлемент, ДопДанные) Экспорт
	
	Если ДобавляемыйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидимостьКолонок = Новый Соответствие;
	ВидимостьКолонок["ДеревоОбъектовЗначение"] = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗапретитьВыборПодсвеченных", Истина);
	
	
	//ВладелецОбъектов,
	//Знач ТипыВыбираемыхОбъектов        = Неопределено,
	//Знач ТипыОтображаемыхОбъектов      = Неопределено,
	//ТекущиеЭлементы                    = Неопределено,
	//МножественныйВыбор                 = Ложь,
	//ВладелецФормыВыбора                = Неопределено,
	//ЗаголовокФормыВыбораЭлементов      = "",
	//Автоматически                      = Ложь,
	//НеВыбиратьПодчиненныеИзТаблиц      = Ложь,
	//ПодсвечиваемыеПриВыборе            = Неопределено,
	//ВидимостьКолонок                   = Неопределено,
	//ДополнительныеПараметры            = Неопределено,
	//ОписаниеОповещенияОЗакрытииФормы = Неопределено) Экспорт
	
КонецПроцедуры


// Получение контейнера тестируемого приложения
// Привязка
//
&НаКлиенте
Процедура СцТ_ПолучитьИнтерактивныйКонтейнер()
	
	// Так как шаг может быть еще не записан, то удобно получить форму для родительского шага
	Если ОА_ЭтоНовый Тогда
		РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Иначе
		РодительУзла = ДанныеШага.ПолучитьРодителя();
	КонецЕсли;
	
	// Сообщения об ошибках показывать не нужно, так как редактирование шага может
	// выполняться без использования тестируемой формы
	ОписаниеОшибкиПолученияКонтейнера = "";
	ИнтерактивныйКонтейнер = СцТ_ГлавнаяФорма.СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(
		РодительУзла,
		ОписаниеОшибкиПолученияКонтейнера,
		Истина);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибкиПолученияКонтейнера) Тогда
		ИнтерактивныйКонтейнер = Неопределено;
		//ПоказатьПредупреждение(, СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(ОписаниеОшибкиПолученияКонтейнера));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИнтерактивныйКонтейнер) = Тип("ТестируемаяФорма") Тогда
		// Проверить, открыта ли форма
		Попытка
			ФормаЗакрыта = ИнтерактивныйКонтейнер.ОжидатьЗакрытие(0);
		Исключение
			ФормаЗакрыта = Истина;
		КонецПопытки;
		
		Если ФормаЗакрыта Тогда
			ИнтерактивныйКонтейнер = Неопределено;
			//ПоказатьПредупреждение(, НСтр("ru = 'Не удалось обратиться к форме тестируемого приложения:
			//	|форма была закрыта, либо тестируемое приложение не запущено.'"));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИнтерактивныйКонтейнер) = Тип("ТестируемаяТаблицаФормы") Тогда
		// Ничего делать не нужно
		
	Иначе
		
		ИнтерактивныйКонтейнер = Неопределено;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьАктивностьВыделенныхСтрок(Команда)
	
	УстановитИлиСброситьФлагиАктивности(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьАктивность(Команда)
	
	УстановитИлиСброситьФлагиАктивности(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитИлиСброситьФлагиАктивности(ЗначениеФлага)
	
	
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьПутьКЭлементуФормы(РодительскийУзелПути, ДанныеПутиВФорме = Неопределено)
	
	Если ДанныеПутиВФорме = Неопределено Тогда
		ДанныеПутиВФорме = ПутьКЭлементуФормы;
	КонецЕсли;
	
	УзелПутиВДереве = СцТ_НайтиУзелДереваФормы(РодительскийУзелПути, "Имя", "ИСТЗ_ПутьКОбъекту");
	
	Если УзелПутиВДереве = Неопределено Тогда
		ДанныеПутиВФорме = Неопределено;
		Возврат;
	КонецЕсли;
	
	ДанныеПутиВФорме = Новый Структура;
	Счетчик = 1;
	
	Для каждого УзелЭлементаПути Из УзелПутиВДереве.Получитьэлементы() Цикл
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("ИмяОбъекта"      , УзелЭлементаПути.Имя);
		СтруктураСтроки.Вставить("ЗаголовокОбъекта", УзелЭлементаПути.Синоним);
		
		// Для совместимости с предыдущими версиями
		Если ЗначениеЗаполнено(УзелЭлементаПути.ТипУзла) Тогда
			СтруктураСтроки.Вставить("ТипОбъекта", УзелЭлементаПути.ТипУзла);
		Иначе
			Если ТипЗнч(УзелЭлементаПути.Значение) = Тип("Число") Тогда
				Если УзелЭлементаПути.Значение = 0 Тогда
					НовыйТип = "ТестируемоеПриложение";
				ИначеЕсли УзелЭлементаПути.Значение = 1 Тогда
					НовыйТип = "ТестируемоеОкноКлиентскогоПриложения";
				ИначеЕсли УзелЭлементаПути.Значение = 2 Тогда
					НовыйТип = "ТестируемаяФорма";
				ИначеЕсли УзелЭлементаПути.Значение = 3 Тогда
					НовыйТип = "ТестируемоеПолеФормы";
				ИначеЕсли УзелЭлементаПути.Значение = 4 Тогда
					НовыйТип = "ТестируемаяГруппаФормы";
				ИначеЕсли УзелЭлементаПути.Значение = 5 Тогда
					НовыйТип = "ТестируемаяКнопкаФормы";
				ИначеЕсли УзелЭлементаПути.Значение = 6 Тогда
					НовыйТип = "ТестируемаяДекорацияФормы";
				ИначеЕсли УзелЭлементаПути.Значение = 7 Тогда
					НовыйТип = "ТестируемаяТаблицаФормы";
				ИначеЕсли УзелЭлементаПути.Значение = 8 Тогда
					НовыйТип = "ТестируемыйКомандныйИнтерфейсОкна";
				ИначеЕсли УзелЭлементаПути.Значение = 9 Тогда
					НовыйТип = "ТестируемаяГруппаКомандногоИнтерфейса";
				ИначеЕсли УзелЭлементаПути.Значение = 10 Тогда
					НовыйТип = "ТестируемаяКнопкаКомандногоИнтерфейса";
				Иначе
					НовыйТип = "";
				КонецЕсли;
			КонецЕсли;
			
			СтруктураСтроки.Вставить("ТипОбъекта", НовыйТип);
		КонецЕсли;
		
		ИмяСтруктурыСтроки = "Str_" + Формат(Счетчик, "ЧГ=0");
		ДанныеПутиВФорме.Вставить(ИмяСтруктурыСтроки, СтруктураСтроки);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПоиска(Команда)
	
	Если ПустаяСтрока(ЭлементФормы_Имя) И ПустаяСтрока(ЭлементФормы_Заголовок) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран элемент формы'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ЗапретДоступаКПути = (ПутьКЭлементуФормы <> Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантПоискаЭлемента"          , ВариантПоискаОбъекта);
	ПараметрыФормы.Вставить("ТипЭлемента"                    , ЭлементФормы_Тип);
	ПараметрыФормы.Вставить("ВидЭлемента"                    , ЭлементФормы_Вид);
	ПараметрыФормы.Вставить("ИмяЭлемента"                    , ЭлементФормы_Имя);
	ПараметрыФормы.Вставить("ЗаголовокЭлемента"              , ЭлементФормы_Заголовок);
	ПараметрыФормы.Вставить("ЗапретДоступаКПути"             , ЗапретДоступаКПути);
	ПараметрыФормы.Вставить("ЗапретДоступаКПути"             , ЗапретДоступаКПути);
	ПараметрыФормы.Вставить("ПутьКЭлементуФормы"             , ПутьКЭлементуФормы);
	
	ПараметрыФормы.Вставить("ФормаОткрытаПодВнешнимУправлением", ФормаОткрытаПодВнешнимУправлением);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СцТ_ПослеЗакрытияФормыСпособаПоискаЭлементовФормы", ЭтотОбъект, Ложь);
	
	ФормаПравилаПоиска = ОткрытьФорму(ПутьКФормам + "СпособПоискаЭлементаФормы",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОповещениеОЗакрытии);
		
	ФормаПравилаПоиска.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеЗакрытияФормыСпособаПоискаЭлементовФормы(РезультатОкна, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатОкна) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВариантПоискаОбъекта   = РезультатОкна.ВариантПоискаЭлемента;
	ЭлементФормы_Имя       = РезультатОкна.ИмяЭлемента;
	ЭлементФормы_Заголовок = РезультатОкна.ЗаголовокЭлемента;
	ПутьКЭлементуФормы     = РезультатОкна.ПутьКЭлементуФормы;
	ЭлементФормы_Вид       = РезультатОкна.ВидЭлемента;
	
	//Если ПустаяСтрока(ИмяИскомогоОбъекта) Тогда
	//	ИмяИскомогоОбъекта = "$" + ЗаголовокИскомогоОбъекта;
	//ИначеЕсли ПустаяСтрока(ЗаголовокИскомогоОбъекта) Тогда
	//	ЗаголовокИскомогоОбъекта = ИмяИскомогоОбъекта;
	//КонецЕсли;
	
	//// Изменить имя и заголовок объекта
	//Если ТипШага = "ЗаполнитьОдинРеквизитФормы" ИЛИ ТипШага = "ЗаполнитьКолонкуТаблицы" Тогда
	//	
	//	УзелПоля = ДеревоЗначения.ПолучитьЭлементы()[0].ПолучитьЭлементы()[0];
	//	УзелПоля.Имя     = ИмяИскомогоОбъекта;
	//	УзелПоля.Синоним = ЗаголовокИскомогоОбъекта;
	//	
	//ИначеЕсли ТипШага = "ЗаполнитьРеквизитыФормы" ИЛИ ТипШага = "ЗаполнитьСтрокуТаблицы" Тогда
	//	
	//	ТекДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
	//	Если ТекДанные = Неопределено Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ТекДанные.ДополнительныеДанные.ВариантПоискаОбъекта = ПравилоПоиска.ВариантПоискаОбъекта;
	//	ТекДанные.Имя     = ИмяИскомогоОбъекта;
	//	ТекДанные.Синоним = ЗаголовокИскомогоОбъекта;
	//	
	//	ПутьКОбъекту = Неопределено;
	//	Если ТекДанные.ДополнительныеДанные.Свойство("ПутьКОбъекту", ПутьКОбъекту) Тогда
	//		Если ПутьКОбъекту <> Неопределено И ПутьКОбъекту.Количество() > 0 Тогда
	//			ПоследнийЭлементПоискаПути = ПутьКОбъекту[ПутьКОбъекту.ВГраница()];
	//			ПоследнийЭлементПоискаПути.ИмяОбъекта       = ИмяИскомогоОбъекта;
	//			ПоследнийЭлементПоискаПути.ЗаголовокОбъекта = ЗаголовокИскомогоОбъекта;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Возврат;
	//	
	//ИначеЕсли ТипШага = "НажатьКнопку" Тогда
	//	
	//	УзелИмениКнопки = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ИмяКнопки");
	//	УзелИмениКнопки.Значение = ИмяИскомогоОбъекта;
	//	УзелИмениКнопки.Синоним  = ЗаголовокИскомогоОбъекта;
	//	
	//ИначеЕсли ТипШага = "НайтиЭлементФормы" Тогда
	//	
	//	УзелЭлемента = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ИмяОбъекта");
	//	Если УзелЭлемента <> Неопределено Тогда
	//		УзелЭлемента.Значение = ИмяИскомогоОбъекта;
	//		УзелЭлемента.Синоним  = ЗаголовокИскомогоОбъекта;
	//	КонецЕсли;
	//	
	//	СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте(Истина);
	//	
	//ИначеЕсли ТипШага = "НажатьКнопкуКИ" Тогда
	//	
	//	УзелОписанияКнопки = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ОписаниеКнопкиКИ");
	//	УзелОписанияКнопки.Синоним = ЗаголовокИскомогоОбъекта;
	//	
	//ИначеЕсли ТипШага = "АвтоГруппаТаблицаФормы" Тогда
	//	
	//	Если ПустаяСтрока(ПредставлениеТаблицы) Тогда
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = НСтр("ru = 'Не выбрана таблица формы.'");
	//		Сообщение.Поле = "ПредставлениеТаблицы";
	//		Сообщение.Сообщить();
	//		Возврат;
	//	КонецЕсли;
	//	
	//	УзелОписанияТаблицы = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ОписаниеТаблицы");
	//	УзелОписанияТаблицы.Значение = ИмяИскомогоОбъекта;
	//	УзелОписанияТаблицы.Синоним  = ЗаголовокИскомогоОбъекта;
	//	
	//Иначе
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	
	/////////////////////
	
	//Если ПутьПоискаОбъекта <> Неопределено И ПутьПоискаОбъекта.Количество() > 0 Тогда
	//	ПоследнийЭлементПоискаПути = ПутьПоискаОбъекта[ПутьПоискаОбъекта.ВГраница()];
	//	ПоследнийЭлементПоискаПути.ИмяОбъекта = ЭлементФормы_Имя;
	//	ПоследнийЭлементПоискаПути.ЗаголовокОбъекта = ЭлементФормы_Заголовок;
	//КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКнопкуКИ(Команда)
	
	СцТ_ПолучитьИнтерактивныйКонтейнер();
	
	Если ИнтерактивныйКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТекущегоЭлементаФормы = Новый Структура;
	
	ОписаниеТекущегоЭлементаФормы.Вставить("Тип"      , ЭлементФормы_Тип);
	ОписаниеТекущегоЭлементаФормы.Вставить("Заголовок", ЭлементФормы_Заголовок);
	ОписаниеТекущегоЭлементаФормы.Вставить("Имя"      , ЭлементФормы_Имя);
	
	// Тип выбираемых объектов определяется типом шага
	ТипыВыбираемыхОбъектов = Новый СписокЗначений;
	
	ТипыОтображаемых       = Новый СписокЗначений;
	
	Если ПустаяСтрока(ЭлементФормы_Тип) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран тип элемента'");
		Сообщение.Поле = "ЭлементФормы_Тип";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТипыОтображаемых = Новый СписокЗначений;
	ТипыОтображаемых.Добавить("ГруппаКнопок");
	ТипыОтображаемых.Добавить("ГруппаКолонок");
	ТипыОтображаемых.Добавить("КоманднаяПанель");
	ТипыОтображаемых.Добавить("КонекстноеМеню");
	ТипыОтображаемых.Добавить("ОбычнаяГруппа");
	ТипыОтображаемых.Добавить("Подменю");
	ТипыОтображаемых.Добавить("Страница");
	ТипыОтображаемых.Добавить("Страницы");
	
	ТипыВыбираемыхОбъектов = Новый СписокЗначений;
	ТипыВыбираемыхОбъектов.Добавить(СцТ_ГлавнаяФорма.СцТ_ТипТестируемогоОбъектаИзЧисла(ЭлементФормы_Тип));
	
	/////////////////////////////////////////////////////
	
	// Виды элементов формы
	//
	//// Поля формы
	//ТипыВыбираемыхОбъектов.Добавить("ПолеHTMLДокумента");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеГеографическойСхемы");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеГрафическойСхемы");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеДендрограммы");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеДиаграммыГанта");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеИндикатора");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеКалендаря");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеКартинки");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеНадписи");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеПереключателя");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеПериода");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеПланировщика");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеПолосыРегулирования");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеТабличногоДокумента");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеТекстовогоДокумента");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеФлажка");
	//ТипыВыбираемыхОбъектов.Добавить("ПолеФорматированногоДокумента");
	//
	//// группы формы
	//ТипыВыбираемыхОбъектов.Добавить("ГруппаКнопок");
	//ТипыВыбираемыхОбъектов.Добавить("ГруппаКолонок");
	//ТипыВыбираемыхОбъектов.Добавить("КоманднаяПанель");
	//ТипыВыбираемыхОбъектов.Добавить("КонекстноеМеню");
	//ТипыВыбираемыхОбъектов.Добавить("ОбычнаяГруппа");
	//ТипыВыбираемыхОбъектов.Добавить("Подменю");
	//ТипыВыбираемыхОбъектов.Добавить("Страница");
	//ТипыВыбираемыхОбъектов.Добавить("Страницы");
	//
	//// Кнопки
	//ТипыВыбираемыхОбъектов.Добавить("Гиперссылка");
	//ТипыВыбираемыхОбъектов.Добавить("КнопкаКоманднойПанели");
	//ТипыВыбираемыхОбъектов.Добавить("ОбычнаяКнопка");
	//
	//// декорации
	//ТипыВыбираемыхОбъектов.Добавить("Картинка");
	//ТипыВыбираемыхОбъектов.Добавить("Надпись");
	//
	//ТипыОтображаемых.Добавить("ГруппаКнопок");
	//ТипыОтображаемых.Добавить("ГруппаКолонок");
	//ТипыОтображаемых.Добавить("КоманднаяПанель");
	//ТипыОтображаемых.Добавить("КонекстноеМеню");
	//ТипыОтображаемых.Добавить("ОбычнаяГруппа");
	//ТипыОтображаемых.Добавить("Подменю");
	//ТипыОтображаемых.Добавить("Страница");
	//ТипыОтображаемых.Добавить("Страницы");
	
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СцТ_ПослеВыбораТекстируемогоЭлементаФормы", ЭтотОбъект);
	
	СцТ_ГлавнаяФорма.СцТ_ВыбратьОбъектыТестируемогоПриложения(
		ИнтерактивныйКонтейнер,
		ТипыВыбираемыхОбъектов,
		ТипыОтображаемых,
		ОписаниеТекущегоЭлементаФормы,,
		ЭтотОбъект,,,,,,,
		ОбработчикОповещения);
	
КонецПроцедуры


&НаКлиенте
Процедура СцТ_ПослеВыбораТекстируемогоЭлементаФормы(РезультатФормы, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормы_Заголовок = РезультатФормы.Заголовок;
	ЭлементФормы_Имя       = РезультатФормы.Имя;
	
	Если РезультатФормы.Вид = "ПолеТабличногоДокумента" Тогда
		ЭлементФормы_Вид = "ТабличныйДокумент";
	Иначе
		ЭлементФормы_Вид    = РезультатФормы.Вид;
	КонецЕсли;
	
	ПутьКЭлементуФормы = Новый Структура;
	НомерСтроки = 1;
	Для каждого СтруктураМассива Из РезультатФормы.ПутьКОбъекту Цикл
		ИмяСтруктурыСтроки = "Str_" + Формат(НомерСтроки, "ЧГ=0");
		
		// Тип объекта не сериализуется на сервере
		Если СтруктураМассива.ТипОбъекта = Тип("ТестируемаяГруппаКомандногоИнтерфейса") Тогда
			НовыйТип = "ТестируемаяГруппаКомандногоИнтерфейса";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяГруппаФормы") Тогда
			НовыйТип = "ТестируемаяГруппаФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяДекорацияФормы") Тогда
			НовыйТип = "ТестируемаяДекорацияФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяКнопкаКомандногоИнтерфейса") Тогда
			НовыйТип = "ТестируемаяКнопкаКомандногоИнтерфейса";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяКнопкаФормы") Тогда
			НовыйТип = "ТестируемаяКнопкаФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяТаблицаФормы") Тогда
			НовыйТип = "ТестируемаяТаблицаФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемоеПолеФормы") Тогда
			НовыйТип = "ТестируемоеПолеФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяФорма") Тогда
			НовыйТип = "ТестируемаяФорма";
		Иначе
			Продолжить;
		КонецЕсли;
		СтруктураМассива.ТипОбъекта = НовыйТип;
		
		ПутьКЭлементуФормы.Вставить(ИмяСтруктурыСтроки, СтруктураМассива);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	
	ОбновитьСвойстваЭлементаПослеПереВыбора(РезультатФормы);
	
	//СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте(Истина);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойстваЭлементаПослеПереВыбора(СтруктураОписанияЭлемента)
	
	СвойстваОбъекта = СцТ_ГлавнаяФорма.СцТ_АтрибутыДоступностиИнтерактивногоОбъекта(СтруктураОписанияЭлемента.Объект);
	
	Попытка
		СцТ_ТекстПодсказки = СтруктураОписанияЭлемента.Объект.ПолучитьТекстПодсказки();
	Исключение
		СцТ_ТекстПодсказки = "";
	КонецПопытки;
	
	СцТ_Заголовок      = СтруктураОписанияЭлемента.Заголовок;
	
	ТаблицаСвойств.Очистить();
	
	Для каждого КлЗн Из СвойстваОбъекта Цикл
		СтрокаСвойства = ТаблицаСвойств.Добавить();
		СтрокаСвойства.Активность = Истина;
		СтрокаСвойства.Имя        = КлЗн.Ключ;
		СтрокаСвойства.Значение   = КлЗн.Значение;
		СтрокаСвойства.Синоним    = КлЗн.Ключ;
	КонецЦикла;
	
	СтрокаСвойства = ТаблицаСвойств.Добавить();
		СтрокаСвойства.Активность = Истина;
		СтрокаСвойства.Имя        = "Заголовок";
		СтрокаСвойства.Значение   = СцТ_Заголовок;
		СтрокаСвойства.Синоним    = "Заголовок";
		
	СтрокаСвойства = ТаблицаСвойств.Добавить();
		СтрокаСвойства.Активность = Истина;
		СтрокаСвойства.Имя        = "ТекстПодсказки";
		СтрокаСвойства.Значение   = СцТ_ТекстПодсказки;
		СтрокаСвойства.Синоним    = "Текст подсказки";
	
КонецПроцедуры


&НаКлиенте
Процедура СпособПоискаКнопки(Команда)
	
	Если ПустаяСтрока(ЭлементКнопка_Имя) И ПустаяСтрока(ЭлементКнопка_Заголовок) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана управляющая кнопка для элемента'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ЗапретДоступаКПути = (ПутьККнопке <> Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантПоискаЭлемента"          , ВариантПоискаКнопки);
	ПараметрыФормы.Вставить("ТипЭлемента"                    , ЭлементКнопка_Тип);
	ПараметрыФормы.Вставить("ВидЭлемента"                    , ЭлементКнопка_Вид);
	ПараметрыФормы.Вставить("ИмяЭлемента"                    , ЭлементКнопка_Имя);
	ПараметрыФормы.Вставить("ЗаголовокЭлемента"              , ЭлементКнопка_Заголовок);
	ПараметрыФормы.Вставить("ЗапретДоступаКПути"             , ЗапретДоступаКПути);
	ПараметрыФормы.Вставить("ПутьКЭлементуФормы"             , ПутьККнопке);
	
	ПараметрыФормы.Вставить("ФормаОткрытаПодВнешнимУправлением", ФормаОткрытаПодВнешнимУправлением);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СцТ_ОбработатьИзменениеПравилаПоискаКнопкиЭлемента", ЭтотОбъект, Ложь);
	
	ФормаПравилаПоиска = ОткрытьФорму(ПутьКФормам + "СпособПоискаЭлементаФормы",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОповещениеОЗакрытии);
		
	ФормаПравилаПоиска.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОбработатьИзменениеПравилаПоискаКнопкиЭлемента(ПравилоПоиска, ДопПараметры) Экспорт
	
	Если ТипЗнч(ПравилоПоиска) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВариантПоискаКнопки     = ПравилоПоиска.ВариантПоискаЭлемента;
	ЭлементКнопка_Имя       = ПравилоПоиска.ИмяЭлемента;
	ЭлементКнопка_Заголовок = ПравилоПоиска.ЗаголовокЭлемента;
	ПутьККнопке             = ПравилоПоиска.ПутьКЭлементуФормы;
	ЭлементКнопка_Вид       = ПравилоПоиска.ВидЭлемента;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКнопку(Команда)
	
	//Если НЕ СцТ_ГлавнаяФорма.СцТ_ТестируемоеПриложениеАктивно() Тогда
	//	ПоказатьПредупреждение(, НСтр("ru = 'Тестируемый клиент не запущен. Выбор интерфейсных элементов недоступен'"));
	//	Возврат;
	//КонецЕсли;
	//
	//СцТ_ПолучитьИнтерактивныйКонтейнер();
	//
	//Если ИнтерактивныйКонтейнер = Неопределено Тогда
	//	ПоказатьПредупреждение(, НСтр("ru = 'Не удалось определить текущую форму'"));
	//	Возврат;
	//КонецЕсли;
	//	
	//ТекущийЭлементТестируемойФормы = ИнтерактивныйКонтейнер.ПолучитьТекущийЭлемент();
	//Если ТекущийЭлементТестируемойФормы = Неопределено Тогда
	//	ПоказатьПредупреждение(, НСтр("ru = 'Не удалось определить текущий элемент формы'"));
	//	Возврат;
	//КонецЕсли;
	//
	//ОписательТекущегоЭлемента = Неопределено;
	//Если ИнтерактивныйКонтейнер <> Неопределено Тогда
	//	
	//	ТекущийТестируемыйЭлемент = ИнтерактивныйКонтейнер.ПолучитьТекущийЭлемент();
	//	Если ТекущийТестируемыйЭлемент <> Неопределено Тогда
	//		ИмяТекущегоЭлемента = СцТ_ГлавнаяФорма.СцТ_ИмяИнтерактивногоОбъекта(ТекущийТестируемыйЭлемент);
	//		
	//		ЭлементыТестируемойФормы = СцТ_ГлавнаяФорма.СцТ_ВыбратьОбъектыТестируемогоПриложения(
	//			ИнтерактивныйКонтейнер,,,,,,,
	//			Истина,
	//			Истина);
	//		
	//		Для каждого ОписательЭлемента Из ЭлементыТестируемойФормы Цикл
	//				Если ОписательЭлемента.Имя = ИмяТекущегоЭлемента Тогда
	//					ОписательТекущегоЭлемента = ОписательЭлемента;
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//Если    ЭлементФормы_Тип       <> СцТ_ГлавнаяФорма.СцТ_ТипТестируемогоОбъектаВСтроку(ОписательТекущегоЭлемента.Тип)
	//	ИЛИ ЭлементФормы_Имя       <> ОписательТекущегоЭлемента.Имя
	//	ИЛИ ЭлементФормы_Заголовок <> ОписательТекущегоЭлемента.Заголовок Тогда
	//	
	//	ПоказатьПредупреждение(, НСтр("ru = 'Текущий элемент на тестируемой форме не соответствует сведениям о текущем элементе в шаге'"));
	//	Возврат;
	//	
	//КонецЕсли;
	//
	//
	//КонтекстноеМеню = ТекущийЭлементТестируемойФормы.ПолучитьКонтекстноеМеню();
	//СписокКнопок = Новый СписокЗначений;
	
	//ИтерационноЗаполнитьСписокКнопок(КонтекстноеМеню, СписокКнопок);
	//
	//Если СписокКнопок.Количество() = 0 Тогда
	//	ПоказатьПредупреждение(, НСтр("ru = 'Не удалось найти тестируемых кнопок'"));
	//	Возврат;
	//КонецЕсли;
	//
	//
	//ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораКнопкиКонтекстногоМеню", ЭтотОбъект);
	//СписокКнопок.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Кнопки контекстного меню'"));

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	////////////////////////////
	
	ВидНажимаемогоОбъекта = "Кнопка";
	
	СцТ_ПолучитьИнтерактивныйКонтейнер();
	
	Если ИнтерактивныйКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ИмяКнопки       = СцТ_ЗначениеВДереве(ДеревоЗначения, "ИмяКнопки", "");
	//ЗаголовокКнопки = СцТ_ЗначениеВДереве(ДеревоЗначения, "ИмяКнопки", "", "Синоним");
	
	Если ПустаяСтрока(ЭлементКнопка_Имя) Тогда
		ОписаниеТекущейКнопки = Неопределено;
	Иначе
		
		ОписаниеТекущейКнопки = Новый Структура;
		
		Если Лев(ВариантПоискаКнопки, 1) = "1" Тогда
			ОписаниеТекущейКнопки.Вставить("ИмяОбъекта", ЭлементКнопка_Имя);
		КонецЕсли;
		
		Если Сред(ВариантПоискаКнопки, 2, 1) = "1" Тогда
			ОписаниеТекущейКнопки.Вставить("ЗаголовокОбъекта", ЭлементКнопка_Заголовок);
		КонецЕсли;
		
		Если Прав(ВариантПоискаКнопки, 1) = "1" И ПутьККнопке <> Неопределено Тогда
			ОписаниеТекущейКнопки.Вставить("ПутьКОбъекту", ПутьККнопке);
		КонецЕсли;
		
	КонецЕсли;
	
	ТипыОтображаемых       = Новый СписокЗначений;
	ТипыВыбираемыхОбъектов = Новый СписокЗначений;
	Если ВидНажимаемогоОбъекта = "Кнопка" Тогда
		ТипыВыбираемыхОбъектов.Добавить("КнопкаКоманднойПанели");
		ТипыВыбираемыхОбъектов.Добавить("ОбычнаяКнопка");
		ТипыОтображаемых.Добавить(Тип("ТестируемоеПолеФормы"));
	Иначе
		
		ТипыВыбираемыхОбъектов.Добавить(ВидНажимаемогоОбъекта);
		
	КонецЕсли;
	
	ТипыОтображаемых.Добавить("КоманднаяПанель");
	ТипыОтображаемых.Добавить("КонтекстноеМеню");
	ТипыОтображаемых.Добавить("Подменю");
	ТипыОтображаемых.Добавить("Страница");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораКнопки", ЭтотОбъект);
	
	ОписаниеКнопкиФормы = СцТ_ГлавнаяФорма.СцТ_ВыбратьОбъектыТестируемогоПриложения(
		ИнтерактивныйКонтейнер.ПолучитьТекущийЭлемент(),
		ТипыВыбираемыхОбъектов,
		ТипыОтображаемых,
		ОписаниеТекущейКнопки,,,,,
		Истина,,,,
		ОписаниеОповещения,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКнопки(ОписаниеКнопкиФормы, ДопПараметры) Экспорт
	
	Если ТипЗнч(ОписаниеКнопкиФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПутьПоискаКнопки        = ОписаниеКнопкиФормы.ПутьКОбъекту;
	ЭлементКнопка_Имя       = ОписаниеКнопкиФормы.Имя;
	ЭлементКнопка_Заголовок = ОписаниеКнопкиФормы.Заголовок;
	ЭлементКнопка_Тип       = ОписаниеКнопкиФормы.Тип;
	ЭлементКнопка_Вид       = ОписаниеКнопкиФормы.ВидЭлемента;
	
	
	
	
	//ИмяПодменю                             = "";
	//ЗаголовокПодменю                       = "";
	//ИмяКоманднойПанели                     = "";
	//ПредставлениеВладельцаКонтекстногоМеню = Неопределено;
	//
	//ОписаниеРодителя = ОписаниеКнопкиФормы.ОписаниеРодительскогоОбъекта;
	//Пока ОписаниеРодителя <> Неопределено Цикл
	//	
	//	Если ОписаниеРодителя.Вид = "Подменю" Тогда
	//		ИмяПодменю       = ОписаниеРодителя.Имя;
	//		ЗаголовокПодменю = ОписаниеРодителя.Заголовок;
	//	ИначеЕсли ОписаниеРодителя.Вид = "КоманднаяПанель" Тогда
	//		ИмяКоманднойПанели = ОписаниеРодителя.Имя;
	//		Прервать;
	//	ИначеЕсли ОписаниеРодителя.Вид = "КонтекстноеМеню" Тогда
	//		Если ОписаниеРодителя.ОписаниеРодительскогоОбъекта <> Неопределено Тогда
	//			ПредставлениеВладельцаКонтекстногоМеню =
	//				ОписаниеРодителя.ОписаниеРодительскогоОбъекта.ПредставлениеОбъектаПриложения;
	//		Иначе
	//			ПредставлениеВладельцаКонтекстногоМеню = "";
	//		КонецЕсли;
	//		Прервать;
	//	КонецЕсли;
	//	
	//	ОписаниеРодителя = ОписаниеРодителя.ОписаниеРодительскогоОбъекта;
	//	
	//КонецЦикла;
	//
	//УзелКнопкиЭлемента = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
	//	ДеревоЗначения,
	//	"КнопкаЭлемента");
	//	
	//СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
	//	УзелКнопкиЭлемента,
	//	"ИмяКнопки",
	//	ОписаниеКнопкиФормы.Имя,
	//	ОписаниеКнопкиФормы.Заголовок);
	//
	//ВыбраннаяКнопка = ОписаниеКнопкиФормы.ПредставлениеОбъектаПриложения;
	//Если НЕ ПустаяСтрока(ИмяКоманднойПанели) Тогда
	//	ВыбраннаяКнопка = 
	//		  ВыбраннаяКнопка
	//		+ НСтр("ru = ' на командной панели ""'")
	//		+ ИмяКоманднойПанели
	//		+ """";
	//ИначеЕсли ПредставлениеВладельцаКонтекстногоМеню <> Неопределено Тогда
	//	ВыбраннаяКнопка = ВыбраннаяКнопка
	//		+ ?(ПустаяСтрока(ПредставлениеВладельцаКонтекстногоМеню),
	//			НСтр("ru = ' контекстного меню'"),
	//			  НСтр("ru = ' контекстного меню элемента ""'")
	//			+ ПредставлениеВладельцаКонтекстногоМеню
	//			+ """");
	//КонецЕсли;
	//
	//СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
	//	УзелКнопкиЭлемента,
	//	"ПредставлениеКнопки",
	//	ВыбраннаяКнопка);
	//	
	//СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
	//	УзелКнопкиЭлемента,
	//	"ВариантПоискаОбъекта",
	//	"100");
	//	
	//
	////СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
	////	УзелКнопкиЭлемента,
	////	"КоманднаяПанель",
	////	ИмяКоманднойПанели,
	////	"");
	////	
	////СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
	////	УзелКнопкиЭлемента,
	////	"ПредставлениеВладельцаКонтекстногоМеню",
	////	ПредставлениеВладельцаКонтекстногоМеню,
	////	"");
	////
	////СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
	////	УзелКнопкиЭлемента,
	////	"Подменю",
	////	ИмяПодменю,
	////	ЗаголовокПодменю);
	//
	////СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте(Истина);
	//Модифицированность = Истина;
	//
	//НайтиЭлементКнопка = ВыбраннаяКнопка;

	
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСЭлементомПриИзменении(Элемент)
	
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДействиеСОбъектом",
		ДействиеСЭлементом,
		"");
		
	СцТ_НастроитьСписокДействийШагаНайтиЭлемент(ЭтотОбъект, ЭлементФормы_Тип);
	
	// Установка значения по умолчанию при смене типа элемента или действия
	Если ЭлементФормы_Тип = "ТестируемаяКнопкаФормы"
		И (ДействиеСЭлементом = "Активизировать"
			ИЛИ ДействиеСЭлементом = "НажатьКнопку") Тогда
		
		ДействиеСЭлементом = "ПроверитьЧтоТекущий";
		
	ИначеЕсли ЭлементФормы_Тип <> "ТестируемаяГруппаФормы"
		И (ДействиеСЭлементом = "Свернуть"
			ИЛИ ДействиеСЭлементом = "Развернуть") Тогда
		
		ДействиеСЭлементом = "ПроверитьЧтоТекущий";
		
	КонецЕсли;
	
	СцТ_НастроитьОтображениеШагаНайтиЭлемент(ЭтотОбъект);
	
	//СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте(Истина);

	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоДаннымФормы(Команда)
	
	СцТ_ПолучитьИнтерактивныйКонтейнер();
	Если ИнтерактивныйКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ИнтерактивныйКонтейнер.Активизировать();
	Исключение
		Возврат;
	КонецПопытки;
	
	// попытка найти нужный элемент формы
	ПолеФормы = ИнтерактивныйКонтейнер.ПолучитьТекущийЭлемент();
	
	Если ПолеФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваОбъекта = СцТ_ГлавнаяФорма.СцТ_АтрибутыДоступностиИнтерактивногоОбъекта(ПолеФормы);
	
	Попытка
		СцТ_ТекстПодсказки = ПолеФормы.ПолучитьТекстПодсказки();
	Исключение
		СцТ_ТекстПодсказки = "";
	КонецПопытки;
	
	СвойстваОбъекта.Вставить("Заголовок"     , ПолеФормы.ТекстЗаголовка);
	СвойстваОбъекта.Вставить("ТекстПодсказки", СцТ_ТекстПодсказки);
	
	МассивОтредактированных = Новый Массив;
	СтруктураОтбора = Новый Структура("Имя", Неопределено);
	
	Для каждого КлЗн Из СвойстваОбъекта Цикл
		СтруктураОтбора.Имя = КлЗн.Ключ;
		ОтобранныеСтроки = ТаблицаСвойств.НайтиСтроки(СтруктураОтбора);
		
		Если ОтобранныеСтроки.Количество() = 0 Тогда
			РедактируемаяСтрока = ТаблицаСвойств.Добавить();
			РедактируемаяСтрока.Активность = Истина;
			РедактируемаяСтрока.Имя        = КлЗн.Ключ;
			Если КлЗн.Ключ = "ТолькоПросмотр" Тогда
				Синоним = НСтр("ru = 'Только просмотр'");
			ИначеЕсли КлЗн.Ключ = "ТекстПодсказки" Тогда
				Синоним = НСтр("ru = 'Текст подсказки'");
			Иначе
				Синоним = КлЗн.Ключ;
			КонецЕсли;
			РедактируемаяСтрока.Синоним    = Синоним;
		Иначе
			РедактируемаяСтрока = ОтобранныеСтроки[0];
		КонецЕсли;
		
		РедактируемаяСтрока.Значение   = КлЗн.Значение;
		МассивОтредактированных = КлЗн.Ключ;
		
	КонецЦикла;
	
	//	СтрокаСвойства = ТаблицаСвойств.Добавить();
	//	СтрокаСвойства.Активность = Истина;
	//	СтрокаСвойства.Имя        = "Заголовок";
	//	СтрокаСвойства.Значение   = СцТ_Заголовок;
	//	СтрокаСвойства.Синоним    = "Заголовок";
	//	
	//	СтрокаСвойства = ТаблицаСвойств.Добавить();
	//	СтрокаСвойства.Активность = Истина;
	//	СтрокаСвойства.Имя        = "ТекстПодсказки";
	//	СтрокаСвойства.Значение   = СцТ_ТекстПодсказки;
	//	СтрокаСвойства.Синоним    = "Текст подсказки";
		

	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

