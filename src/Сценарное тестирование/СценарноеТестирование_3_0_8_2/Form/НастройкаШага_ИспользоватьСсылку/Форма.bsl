
#Область Переменные

// Форма - владелец текущей формы (для краткости и наглядности вместо "ЭтаФорма.ВладелецФормы")
&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

&НаКлиенте
Перем СцТ_РодительУзла;

// Указатель на форму (главная или макрошага), из которой была открыта эта форма
&НаКлиенте
Перем ВызвавшаяФорма Экспорт;

// Указатель на ветку в дереве. Заполненяется, если шаг не новый
&НаКлиенте
Перем ДанныеШага Экспорт;

// Идентификатор узла в дереве. Заполнено если шаг не новый
&НаКлиенте
Перем ИдентификаторУзла Экспорт;

// Для хранения предыдущеего значения типа в таблице, чтобы отслеживать изменения
// Устанавливается перед началом изменения и проверяется при изменении
&НаКлиенте
Перем ПредыдущийТип;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимСовместимости838 Тогда
		УстановитьДействие("ПередЗакрытием", "ПередЗакрытиеБезРежимаСовместимости");
	КонецЕсли;
	
	// Если форма открыта под внешним управлением, то не вся функциональность
	// должна работать
	Если Параметры.ОткрытаПодВнешнимУправлением Тогда
		
		ФормаОткрытаПодВнешнимУправлением = Истина;
		
		Элементы.ФормаВыполнитьЗапрос.Доступность               = Ложь;
		Элементы.КонструкторЗапроса.Доступность                 = Ложь;
		Элементы.ТаблицаРеквизитовОбновитьПараметры.Доступность = Ложь;
		Элементы.КМ_ТР_ВыбратьОбъектИБ.Доступность              = Ложь;
		Элементы.ВыполнитьЗапрос.Доступность                    = Ложь;
		Элементы.СравнитьТаблицуВизуально.Доступность           = Ложь;
		
	КонецЕсли;
	///

	
	
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	// Управление доступностью
	ТолькоПросмотр = Параметры.ТолькоПросмотр;
	Элементы.ПрименитьИЗакрыть.Доступность  = НЕ Параметры.ТолькоПросмотр;
	Элементы.ПрименитьИзменения.Доступность = НЕ Параметры.ТолькоПросмотр;
	
	// Таблицы передаваемые по адресам
	АдресТаблицыКлючей = Параметры.АдресТаблицыКлючей;
	АдресТаблицыСсылок = Параметры.АдресТаблицыСсылок;
	
	// основные атрибуты шага (ОА)
	// атрибуты, для редактирования, которых не требуется открытие формы настройки
	// или свернутые для хранения атрибуты
	ОА_ТипШага                          = Параметры.ТипШага;
	ОА_НомерШага                        = Параметры.НомерШага;
	ОА_Активность                       = Параметры.Активность;
	ОА_ОписательПоложенияШагаВДереве    = Параметры.ОписательПоложенияШагаВДереве;
	ОА_ЭтоНовый                         = Параметры.ЭтоНовый;
	ОА_СтруктураДанныхШага              = Параметры.СтруктураДанныхШага;
	
	// 1. Раскрытие структуры шага и определение типа шага
	Если ОА_СтруктураДанныхШага = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ДШ_Наименование                 = ОА_СтруктураДанныхШага.Наименование;
	ДШ_ТипМетаданных                = ОА_СтруктураДанныхШага.ТипМетаданных;
	ДШ_ИмяМетаданных                = ОА_СтруктураДанныхШага.ИмяМетаданных;
	ДШ_Автоописание                 = ОА_СтруктураДанныхШага.Автоописание;
	ДШ_Описание                     = ОА_СтруктураДанныхШага.Описание;
	ДШ_СкрытьАвтоописание           = ОА_СтруктураДанныхШага.СкрытьАвтоописание;
	ДШ_ОбСсылка                     = ОА_СтруктураДанныхШага.ОбСсылка;
	ДШ_ПредставлениеОбъекта         = ОА_СтруктураДанныхШага.ПредставлениеОбъекта;
	ДШ_ПредставлениеИмениМетаданных = ОА_СтруктураДанныхШага.ПредставлениеИмениМетаданных;
	ДШ_ИмяФормы                     = ОА_СтруктураДанныхШага.ИмяФормы;
	ДШ_ВыполнитьВручную             = ОА_СтруктураДанныхШага.ВыполнитьВручную;
	ДШ_Комментарий                  = ОА_СтруктураДанныхШага.Комментарий;
	ДШ_ЗаголовокФормы               = ОА_СтруктураДанныхШага.ЗаголовокФормы;
	ДШ_ДанныеКартинки               = ОА_СтруктураДанныхШага.ДанныеКартинки;
	
	Если ТипЗнч(ОА_СтруктураДанныхШага.ДеревоЗначения) = Тип("Структура") Тогда
		// Данные дерева переданы в виде структуры из главной формы обработки
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоЗначения,
			ОА_СтруктураДанныхШага.ДеревоЗначения);
	ИначеЕсли ТипЗнч(ОА_СтруктураДанныхШага.ДеревоЗначения) = Тип("ХранилищеЗначения") Тогда
		// Данные из конфигурации могут поступить в виде данных ХЗ
		Попытка
			ДЗ_НаСервере = ОА_СтруктураДанныхШага.ДеревоЗначения.Получить();
			ПреобразоватьЗначенияВДереве(ДЗ_НаСервере, Истина);
			ЗначениеВРеквизитФормы(ДЗ_НаСервере, "ДеревоЗначения");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Заполнение временной таблицы ссылок шага
	Если ОА_СтруктураДанныхШага.Свойство("МассивСсылокШага") И ТипЗнч(ОА_СтруктураДанныхШага.МассивСсылокШага) = Тип("Массив") Тогда
		ЭтаОбработка.СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(ТаблицаСсылокШага, ОА_СтруктураДанныхШага.МассивСсылокШага);
	КонецЕсли;
	
	// Добавление ссылок из общей таблицы ссылок
	ЭтаОбработка.СцТ_ДобавитьВТаблицуСсылокШагаСведенияИзТаблицыСсылок(
		ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага,
		АдресТаблицыСсылок,
		ТаблицаСсылокШага);
	
	// Признак, что наименование установлено вручную
	НаименованиеШагаИзмененоВручную = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ИСТЗ_НаименованиеРучное",
		Ложь);
		
	// Картинки для закладок описания и комментария
	АдресКартинкиКомментария = ПоместитьВоВременноеХранилище(ЭтаОбработка.ПолучитьМакет("КартинкаКомментария"));
	КартинкаКомментария = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинкиКомментария));
	
	Элементы.Страница_РедактируемоеОписание.Картинка = ?(
		ПустаяСтрока(ДШ_Описание),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Элементы.Страница_Комментарий.Картинка = ?(
		ПустаяСтрока(ДШ_Комментарий),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Если НЕ ОА_ЭтоНовый И Параметры.ВыполнятьПреобразованиеСсылочныхТипов Тогда
		ЭтаОбработка.ПреобразоватьДеревоЗначенийДляНовогоФормата(ДеревоЗначения, АдресТаблицыСсылок, ТаблицаСсылокШага, АдресТаблицыКлючей);
		Модифицированность = Истина;
	КонецЕсли;
	
	СцТ_НастроитьФормуДляШага();
	
	// Заполнение поведения при ошибке
	СцТ_ЗаполнитьДействиеШагаПриОшибке(ЭтотОбъект);
	
	// Модифицированность
	Если НЕ Модифицированность И ОА_ЭтоНовый Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущийЭлемент = Элементы.ТекстЗапроса;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_УдалениеШаговСценария" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметр.НайтиПоЗначению(ДанныеШага.ПолучитьИдентификатор()) <> Неопределено Тогда
			Модифицированность = Ложь;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли  ИмяСобытия = "СцТ_ПеремещениеУзловСценария" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		НовыйУзел = Параметр[ДанныеШага];
		Если НовыйУзел <> Неопределено Тогда
			ДанныеШага = НовыйУзел;
			ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
			ДШ_НомерШага      = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ОбновленыДанныеГрупповогоШага" Тогда
		
		Если Параметр = ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя Тогда
			СцТ_СформироватьПредставлениеРодителя();
			
			ТекстПредупреждения = НСтр("ru = 'Данные группового шага изменились. Требуется обновление данных.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ИзмениласьНумерацияШагов" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ДанныеШага = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,ИдентификаторУзла);
			ОА_НомерШага = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		Исключение
		КонецПопытки;
		
	ИначеЕсли ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СцТ_ПослеОтветаНаВопросОСохраненииДанныхПриЗакрытииФормы",
			ЭтотОбъект);
			
		ТекстЫопроса = НСтр("ru = 'Данные шага были изменены. Применить изменения?'");
		ПоказатьВопрос(ОписаниеОповещения,
			ТекстЫопроса,
			РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиеБезРежимаСовместимости(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Если НЕ ЗавершениеРаботы Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СцТ_ОбработатьЗапросОСохраненииДанныхШага", ЭтотОбъект),
				НСтр("ru = 'Данные шага были изменены. Применить изменения?'"),
				РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Данные шага ""Использовать существующий объект"" были изменены. При закрытии все изменения будут утеряны'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()
	
	Попытка
		СцТ_ГлавнаяФорма.СцТ_ОткрытыеФормыНастройкиШагов.Удалить(ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура СохранитьИЗакрытьФорму(Команда)
	
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Сохранение шага'"), , НСтр("ru = 'Данные шага сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтоназвание(Команда)
	
	СцТ_ОбновитьНаименование_НаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ХранимыеДанныеШага(Команда)
	
	// Всегда отображаются имеено хранимые данные, которые сохранены в дереве шагов
	Если ОА_ЭтоНовый Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага еще не записаны. Отобразить структуру хранения данных невозможно.
								         |Сохранить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеОтветаНаВопросОСохраненииНового", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
		Возврат;
	ИначеЕсли НЕ ОА_ЭтоНовый И Модифицированность Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага были изменены. Сохранить изменения перед отображением структуры?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеОтветаНаВопросОСохраненииСуществующего", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИдентификацииТаблицы(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипУзла <> "Ссылка" Тогда
		ТекстСообщения = НСтр("ru = 'Настройка структры идентификации может быть выполнена только для ссылочных типов.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыИдентификации = СцТ_ГлавнаяФорма.СцТ_ПолучитьСтруктуруИдентификацииСсылки(
		ТекущиеДанные.Значение,
		ТаблицаСсылокШага,
		ТекущиеДанные.Представление);
		
	ПараметрыФормыИдентификации.Вставить("ФормаОткрытаПодВнешнимУправлением", ФормаОткрытаПодВнешнимУправлением);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СцТ_ПослеИзмененияСтруктурыИдентификацииВТаблице",
		ЭтотОбъект,
		ТекущиеДанные);
		
	ПараметрыФормыИдентификации.Вставить("РежимСовместимости838" , СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ФормаИдентификации = ОткрытьФорму(ПутьКФормам + "КлючиИдентификации",
		ПараметрыФормыИдентификации,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
		
	ФормаИдентификации.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьТаблицуВизуально(Команда)
	
	ТекстСообщения = "";
	
	ДанныеДляСравнения = СцТ_ПодготовитьДанныеДляВизуальногоСравненияТаблицНаСервере(
		СцТ_ГлавнаяФорма.ГлобальныеПараметры,
		ТекстСообщения);
	
	Если ДанныеДляСравнения = Неопределено Тогда
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ПоказатьПредупреждение(, ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ДанныеДляСравнения.Вставить("РежимСовместимости838", СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ОткрытьФорму(ПутьКФормам + "ВизуальноеСравнениеТаблиц", ДанныеДляСравнения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуТаблицы(Команда)
	
	УзелТаблицы = ОпределитьУзелТаблицыВДереве("РезультатЗапроса");
	
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение текущей строки в ТД. Строка заголовка тоже считается
	НомерТекущейСтроки = ОпределитьНомерТекущейСтрокиВТабличномДокументе();
	
	УзелШапки = ПолучитьУзелШапкиТаблицы(УзелТаблицы);
	
	Если УзелШапки = Неопределено Тогда
		// Нарушена структура дерева
		Возврат;
	КонецЕсли;
	
	// Считаем структуру дерева правильной: сначала строка шапки, затем строки по-порядку
	КоличествоСтрокВТаблице = УзелТаблицы.ПолучитьЭлементы().Количество();
	
	// Необходимо учесть и узел шапки
	Если НомерТекущейСтроки >= КоличествоСтрокВТаблице ИЛИ НомерТекущейСтроки <= 1 Тогда
		// Добавление в конец
		РеальныйНомерСтроки = КоличествоСтрокВТаблице;
		
		УзелНовойСтроки = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			УзелТаблицы,
			"СтрокаТаблицы_" + Формат(РеальныйНомерСтроки, "ЧГ=0"),
			РеальныйНомерСтроки);
		
	Иначе
		// Вставка после текущей строки. НомерТекущейСтроки уже учитывает, что индекс начинается с 0
		// и что первая строка является заголовком
		РеальныйНомерСтроки = НомерТекущейСтроки;
		
		УзелНовойСтроки = УзелТаблицы.ПолучитьЭлементы().Вставить(РеальныйНомерСтроки);
		УзелНовойСтроки.Имя        = "СтрокаТаблицы_" + Формат(РеальныйНомерСтроки, "ЧГ=0");
		УзелНовойСтроки.Значение   = РеальныйНомерСтроки;
		УзелНовойСтроки.Активность = Истина;
		
		// Перенумерация последующих строк
		НомерСтроки = 0;
		Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
			Если УзелДерева.Имя = "ШапкаТаблицы" Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			Если НомерСтроки > РеальныйНомерСтроки Тогда
				УзелДерева.Имя = "СтрокаТаблицы_" + Формат(НомерСтроки, "ЧГ=0");
				УзелНовойСтроки.Значение = НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НомерКолонки = 0;
	Для каждого КолонкаВШапке Из УзелШапки.ПолучитьЭлементы() Цикл
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			УзелНовойСтроки,
			КолонкаВШапке.Имя,
			Неопределено,
			КолонкаВШапке.Синоним,
			КолонкаВШапке.Активность,
			"",
			КолонкаВШапке.Действие);
			
	КонецЦикла;
	
	СцТ_ЗаполнитьТаблицуДанныхЗначениями();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокуТаблицы(Команда)
	
	УзелТаблицы = ОпределитьУзелТаблицыВДереве("РезультатЗапроса");
	
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение текущей строки в ТД. Строка заголовка тоже считается
	НомерТекущейСтроки = ОпределитьНомерТекущейСтрокиВТабличномДокументе();
	
	// Считаем структуру дерева правильной: сначала строка шапки, затем строки по-порядку
	КоличествоСтрокВТаблице = УзелТаблицы.ПолучитьЭлементы().Количество();
	
	Если НомерТекущейСтроки <=1 ИЛИ НомерТекущейСтроки > КоличествоСтрокВТаблице Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана строка для копирования'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = Неопределено;
	ИмяСтрокиИсточника = "СтрокаТаблицы_" + Формат(НомерТекущейСтроки - 1, "ЧГ=0");
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = ИмяСтрокиИсточника Тогда
			СтрокаИсточник = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаИсточник = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не найдена строка для копирования'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	УзелНовойСтроки = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			УзелТаблицы,
			"СтрокаТаблицы_" + Формат(КоличествоСтрокВТаблице, "ЧГ=0"),
			КоличествоСтрокВТаблице);
	
	Для каждого КолонкаИсточник Из СтрокаИсточник.ПолучитьЭлементы() Цикл
		НовыйУзел = УзелНовойСтроки.ПОлучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйУзел, КолонкаИсточник);
		
	КонецЦикла;
	
	СцТ_ЗаполнитьТаблицуДанныхЗначениями();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоследнююСтроку(Команда)
	
	УзелТаблицы = ОпределитьУзелТаблицыВДереве("РезультатЗапроса");
	
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение текущей строки в ТД. Строка заголовка тоже считается
	НомерТекущейСтроки = ОпределитьНомерТекущейСтрокиВТабличномДокументе();
	
	// Считаем структуру дерева правильной: сначала строка шапки, затем строки по-порядку
	КоличествоСтрокВТаблице = УзелТаблицы.ПолучитьЭлементы().Количество();
	
	Если НомерТекущейСтроки <=1 ИЛИ НомерТекущейСтроки > КоличествоСтрокВТаблице Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана строка'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	УдаляемаяСтрока = Неопределено;
	ИмяУдаляемойСтроки = "СтрокаТаблицы_" + Формат(НомерТекущейСтроки - 1, "ЧГ=0");
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = ИмяУдаляемойСтроки Тогда
			УдаляемаяСтрока = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УдаляемаяСтрока = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не найдена удаляемая строка'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	УзелТаблицы.ПолучитьЭлементы().Удалить(УдаляемаяСтрока);
	
	// Изменение индексов у остальных строк
	НомерСтроки = 0;
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = "ШапкаТаблицы" Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки >= (НомерТекущейСтроки - 1) Тогда
			УзелДерева.Имя = "СтрокаТаблицы_" + Формат(НомерСтроки, "ЧГ=0");
			УзелДерева.Значение = НомерСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	СцТ_ЗаполнитьТаблицуДанныхЗначениями();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	УзелТаблицы = ОпределитьУзелТаблицыВДереве("РезультатЗапроса");
	
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение текущей строки в ТД. Строка заголовка тоже считается
	НомерТекущейСтроки = ОпределитьНомерТекущейСтрокиВТабличномДокументе();
	
	// Считаем структуру дерева правильной: сначала строка шапки, затем строки по-порядку
	КоличествоСтрокВТаблице = УзелТаблицы.ПолучитьЭлементы().Количество();
	
	Если НомерТекущейСтроки <=1 ИЛИ НомерТекущейСтроки > КоличествоСтрокВТаблице Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана строка для перемещения'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли; 
	
	Если НомерТекущейСтроки = 2 Тогда
		ТекстПредупреждения = НСтр("ru = 'Это первая строка. Перемещение вверх невозможно'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = Неопределено;
	СтрокаПриемник = Неопределено;
	ИмяСтрокиИсточника = "СтрокаТаблицы_" + Формат(НомерТекущейСтроки - 1, "ЧГ=0");
	ИмяСтрокиПриемника = "СтрокаТаблицы_" + Формат(НомерТекущейСтроки - 2, "ЧГ=0");
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = ИмяСтрокиИсточника Тогда
			СтрокаИсточник = УзелДерева;
		ИначеЕсли УзелДерева.Имя = ИмяСтрокиПриемника Тогда
			СтрокаПриемник = УзелДерева;
		КонецЕсли;
		
		Если СтрокаИсточник <> Неопределено И СтрокаПриемник <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаИсточник = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не найдена перемещаемая строка'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник.Имя = ИмяСтрокиПриемника;
	СтрокаИсточник.Значение = НомерТекущейСтроки - 2;
	
	СтрокаПриемник.Имя      = ИмяСтрокиИсточника;
	СтрокаПриемник.Значение = НомерТекущейСтроки - 1;
	
	УзелТаблицы.ПолучитьЭлементы().Сдвинуть(НомерТекущейСтроки - 1, -1);
	
	СцТ_ЗаполнитьТаблицуДанныхЗначениями();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	УзелТаблицы = ОпределитьУзелТаблицыВДереве("РезультатЗапроса");
	
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение текущей строки в ТД. Строка заголовка тоже считается
	НомерТекущейСтроки = ОпределитьНомерТекущейСтрокиВТабличномДокументе();
	
	// Считаем структуру дерева правильной: сначала строка шапки, затем строки по-порядку
	КоличествоСтрокВТаблице = УзелТаблицы.ПолучитьЭлементы().Количество();
	
	Если НомерТекущейСтроки <=1 ИЛИ НомерТекущейСтроки > КоличествоСтрокВТаблице Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана строка для перемещения'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли; 
	
	Если НомерТекущейСтроки = КоличествоСтрокВТаблице Тогда
		ТекстПредупреждения = НСтр("ru = 'Это последняя строка. Перемещение вниз невозможно'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = Неопределено;
	СтрокаПриемник = Неопределено;
	ИмяСтрокиИсточника = "СтрокаТаблицы_" + Формат(НомерТекущейСтроки - 1, "ЧГ=0");
	ИмяСтрокиПриемника = "СтрокаТаблицы_" + Формат(НомерТекущейСтроки, "ЧГ=0");
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = ИмяСтрокиИсточника Тогда
			СтрокаИсточник = УзелДерева;
		ИначеЕсли УзелДерева.Имя = ИмяСтрокиПриемника Тогда
			СтрокаПриемник = УзелДерева;
		КонецЕсли;
		
		Если СтрокаИсточник <> Неопределено И СтрокаПриемник <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаИсточник = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не найдена перемещаемая строка'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник.Имя = ИмяСтрокиПриемника;
	СтрокаИсточник.Значение = НомерТекущейСтроки;
	
	СтрокаПриемник.Имя      = ИмяСтрокиИсточника;
	СтрокаПриемник.Значение = НомерТекущейСтроки - 1;
	
	УзелТаблицы.ПолучитьЭлементы().Сдвинуть(НомерТекущейСтроки - 1, 1);
	
	СцТ_ЗаполнитьТаблицуДанныхЗначениями();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъектИБ(Команда)
	
	ТекущиеДанныеСтроки = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ТекущиеДанныеСтроки = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана редактируемая строка'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТипМД_Строки     = "";
	ИмяМД_Строки     = "";
	СинонимМД_Строки = "";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеВыбораОбъектаИБ_ВТаблице", ЭтотОбъект, ТекущиеДанныеСтроки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипМД"           , ТипМД_Строки);
	ПараметрыФормы.Вставить("ИмяМД"           , ИмяМД_Строки);
	ПараметрыФормы.Вставить("СинонимМД"       , СинонимМД_Строки);
	ПараметрыФормы.Вставить("ПутьКФормам"     , ПутьКФормам);
	ПараметрыФормы.Вставить("ВыбиратьОбъектМД", Истина);
	
	
	Если ТекущиеДанныеСтроки.ТипУзла = "Предопределенное" И ЗначениеЗаполнено(ТекущиеДанныеСтроки.Значение) Тогда
		ПараметрыФормы.Вставить("Предопределенное", ТекущиеДанныеСтроки.Значение);
		
	ИначеЕсли ТекущиеДанныеСтроки.ТипУзла = "Ссылка" И ЗначениеЗаполнено(ТекущиеДанныеСтроки.Значение) Тогда
		
		СтруктураПоиска = Новый Структура("СтрокаИдентификатора", ТекущиеДанныеСтроки.Значение);
		НайденныеСтроки = ТаблицаСсылокШага.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НужнаяСтрока = НайденныеСтроки[0];
			ПараметрыФормы.ТипМД     = НужнаяСтрока.ТипМД;
			ПараметрыФормы.ИмяМД     = НужнаяСтрока.ИмяМД;
			ПараметрыФормы.СинонимМД = НужнаяСтрока.СинонимМД;
			
			ПараметрыФормы.Вставить("СтруктураИдентификации", НужнаяСтрока.СтруктураИдентификации);
			
		КонецЕсли;
	КонецЕсли;
	
	ФормаВыбораОбъектаИБ = ОткрытьФорму(ПутьКФормам + "ВыборОбъектовИБ", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
	ФормаВыбораОбъектаИБ.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АктивностьПриИзменении(Элемент)
	
	Если ОА_Активность = 2 Тогда
		ОА_Активность = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПроверочноеНаименование = СцТ_СформироватьОписаниеШага_НаКлиенте(Истина);
	
	НаименованиеШагаИзмененоВручную = (ДШ_Наименование <> ПроверочноеНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("СцТ_ОбновитьЗаголовкиЗакладок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("СцТ_ОбновитьЗаголовкиЗакладок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГруппыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ОА_ЭтоНовый Тогда
		РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Иначе
		РодительУзла = ДанныеШага.ПолучитьРодителя();
	КонецЕсли;
	
	Если РодительУзла <> Неопределено Тогда
		СцТ_ГлавнаяФорма.СцТ_ОткрытьФормуНастройкиШага(РодительУзла, ВызвавшаяФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриОшибкеПриИзменении(Элемент)
	
	УправлениеДоступностьюПеременнойОшибки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитовПриИзменении(Элемент)
	
	ТД = Элементы.ТаблицаПараметров.ТекущиеДанные;
	УстановитьТипЗначенияПоля(ТД.ТипУзла, ТД);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТР_ТипЗначенияПриИзменении(Элемент)
	
	ТД = Элементы.ТаблицаПараметров.ТекущиеДанные;
	
	Если ПредыдущийТип <> ТД.ТипУзла Тогда
		УстановитьТипЗначенияПоля(ТД.ТипУзла, ТД);
		
		Если ТД.ТипУзла = "Ссылка" Тогда
			// Ссылки еще нет, так как пользователь только еще выбрал тип ссылка
			
			ПараметрыФормыИдентификации = Новый Структура;
			ПараметрыФормыИдентификации.Вставить("ТипМД"                 , "");
			ПараметрыФормыИдентификации.Вставить("ИмяМД"                 , "");
			ПараметрыФормыИдентификации.Вставить("Идентификатор"         , ТД.Значение);
			ПараметрыФормыИдентификации.Вставить("СинонимМД"             , "");
			ПараметрыФормыИдентификации.Вставить("Представление"         , ТД.Представление);
			ПараметрыФормыИдентификации.Вставить("СтруктураИдентификации", Неопределено);
			ПараметрыФормыИдентификации.Вставить("АдресТаблицыКлючей"    , СцТ_ГлавнаяФорма.АдресТаблицыКлючей);
			ПараметрыФормыИдентификации.Вставить("ПоискПоЗапросу"        , Ложь);
			ПараметрыФормыИдентификации.Вставить("ТекстЗапроса"          , "");
			
			ПараметрыФормыИдентификации.Вставить("РежимСовместимости838" , СцТ_ГлавнаяФорма.РежимСовместимости838);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеИзмененияСтруктурыИдентификацииВТаблице", ЭтотОбъект, ТД);
			
			ФормаНастройкиИдентификации = ОткрытьФорму(ПутьКФормам + "КлючиИдентификации",
				ПараметрыФормыИдентификации,
				ЭтотОбъект,,,,
				ОписаниеОповещения);
				
			ФормаНастройкиИдентификации.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
			
			Элементы.ТаблицаПараметров.ЗакончитьРедактированиеСтроки(Ложь);
			
		ИначеЕсли ТД.ТипУзла = "УникальныйИдентификатор" Тогда
			ТД.Значение = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		ПредыдущийТип = ТД.ТипУзла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючЗаписиРегистраПередНачаломИзменения(Элемент, Отказ)
	
	ТД = Элементы.ТаблицаПараметров.ТекущиеДанные;
	ПредыдущийТип = ТД.ТипУзла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДШ_СкрытьАвтоописаниеПриИзменении(Элемент)
	
	ОбновитьПользовательскоеОписание();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница = Элементы.Страница_ОписаниеШага Тогда
		ОбновитьПользовательскоеОписание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеТаблицыВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ИмяОбласти = Область.Имя;
	
	ПозицияКолонки = Найти(ВРег(ИмяОбласти), "C");
	Если ПозицияКолонки < 2 Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки_Строкой = Сред(ИмяОбласти, 2, ПозицияКолонки - 2);
	Попытка
		НомерСтроки = Число(НомерСтроки_Строкой);
	Исключение
		Возврат;
	КонецПопытки;
	
	НомерКолонки_Строкой = Сред(ИмяОбласти, ПозицияКолонки + 1);
	Попытка
		НомерКолонки = Число(НомерКолонки_Строкой);
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НомерСтроки = 1 Тогда
		ТекстПредупреждения = НСтр("ru = 'Редактировать заголовок запрещено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	РедактируемаяОбласть = Область;
	
	// Получение данных из дерева
	УзелТаблицы = Неопределено;
	Для каждого УзелДерева Из ДеревоЗначения.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = "РезультатЗапроса" Тогда
			УзелТаблицы = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеСтрокиТаблицы = "СтрокаТаблицы_" + Формат(НомерСтроки - 1, "ЧГ=0");
	УзелСтроки = Неопределено;
	УзелШапки = Неопределено;
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = НазваниеСтрокиТаблицы Тогда
			УзелСтроки = УзелДерева;
		ИначеЕсли УзелДерева.Имя = "ШапкаТаблицы" Тогда
			УзелШапки = УзелДерева;
		КонецЕсли;
		
		Если УзелСтроки <> Неопределено И УзелШапки <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Если УзелСтроки = Неопределено ИЛИ УзелШапки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Сортируется только шапка, поэтому имя колонки нужно искать по шапке
	УзелКолонкиВШапке = Неопределено;
	Итератор = 0;
	Для каждого УзелДерева Из УзелШапки.ПолучитьЭлементы() Цикл
		Если УзелДерева.Активность Тогда
			Итератор = Итератор + 1;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Итератор = НомерКолонки Тогда
			УзелКолонкиВШапке = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелКолонкиВШапке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКолонки = Неопределено;
	Для каждого УзелДерева Из УзелСтроки.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = УзелКолонкиВШапке.Имя Тогда
			УзелКолонки = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелКолонки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПФ = Новый Структура;
	ПФ.Вставить("Имя"               , УзелДерева.Имя);
	ПФ.Вставить("Синоним"           , УзелДерева.Синоним);
	ПФ.Вставить("ТипРеквизита"      , УзелДерева.ТипУзла);
	ПФ.Вставить("Значение"          , УзелДерева.Значение);
	ПФ.Вставить("Представление"     , УзелДерева.Представление);
	ПФ.Вставить("МТИ"               , СцТ_ГлавнаяФорма.СцТ_УпаковатьВМассивТаблицуСсылокШага(ТаблицаСсылокШага));
	ПФ.Вставить("АдресТаблицыКлючей", АдресТаблицыКлючей);
	ПФ.Вставить("РежимСовместимости838", СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("РедактируемыйУзел"  , УзелКолонки);
	ДопПараметры.Вставить("РедактируемаяЯчейка", РедактируемаяОбласть);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеИзмененияДанныхЯчейки", ЭтотОбъект, ДопПараметры);
	
	ФормаРедактированияЯчейки = ОткрытьФорму(ПутьКФормам + "РедактированиеЯчейкиТаблицы", ПФ, ЭтотОбъект,,,, ОписаниеОповещения);
	
	ФормаРедактированияЯчейки.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиОповещений

// Обрабатывает нажатие пользователем кнопки в диалоге вопроса о сохранении
// данных шага перед закрытием формы
//
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииДанныхПриЗакрытииФормы(КодВозврата, ДопДанные) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли КодВозврата = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
		
		// При Отмене ничего не выполняется
		
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос диалога о Сохранении нового шага перед
// отображением хранимых данных
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииНового(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка нажатия "ДА"
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить шаг'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос диалога о Сохранении уже существующего модифицированного шага перед
// отображением хранимых данных
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииСуществующего(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		// Показываем, что хранится
		СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
		
	Иначе
		
		Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
			СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить изменения в шаге'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отображение родительского шага
// Параметры:
// ПриОткрытии - устанавливает признак, что настройка выполняется при открытии
// или (в противном случае) по обработке оповещения
&НаКлиенте
Процедура СцТ_СформироватьПредставлениеРодителя(ПриОткрытии = Истина) Экспорт
	
	Если ОА_ЭтоНовый И ПриОткрытии Тогда
		Если ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя = Неопределено Тогда
			ПредставлениеГруппы = "";
		Иначе
			// Поиск данных родительского узла в дереве по идентификатору шага
			СцТ_РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,
				ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
			
			Если СцТ_РодительУзла = Неопределено Тогда
				ПредставлениеГруппы = "";
			Иначе
				ОтобразитьПредставлениеСуществующегоРодительскогоШага(СцТ_РодительУзла);
			КонецЕсли;
		КонецЕсли;
		
		// Если родительский узел будет изменен у нового шага, то редактируемый шаг уже не имеет смысла,
		// так как неизвестно куда его вставить
		
	ИначеЕсли НЕ ОА_ЭтоНовый Тогда
		Если ДанныеШага = Неопределено Тогда
			ПредставлениеГруппы = "";
		Иначе
			СцТ_РодительУзла = ДанныеШага.ПолучитьРодителя();
			Если СцТ_РодительУзла = Неопределено Тогда
				ПредставлениеГруппы = "";
			Иначе
				ОтобразитьПредставлениеСуществующегоРодительскогоШага(СцТ_РодительУзла);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПредставлениеГруппы = "" Тогда
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы.СтраницаПустойГруппы;
	Иначе
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы.СтраницаЗаполненнойГруппы;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура СцТ_ПослеВыбораОбъектаИБ_ВТаблице(ВозвращенноеЗначение, ТекущиеДанныеСтроки) Экспорт
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		СтруктураДанных = ОбработатьВыборЗначенияВТаблицеНаСервере(ВозвращенноеЗначение);
		
		ТекущиеДанныеСтроки.ТипУзла       = СтруктураДанных.ТипЗначения;
		ТекущиеДанныеСтроки.Значение      = СтруктураДанных.Значение;
		ТекущиеДанныеСтроки.Представление = СтруктураДанных.Представление;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения, которой обрабатывается после закрытия формы
// редактирования структуры идентификации ссылки в таблице реквизитов
&НаКлиенте
Процедура СцТ_ПослеИзмененияСтруктурыИдентификацииВТаблице(Результат, ТекущиеДанныеСтроки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Изменение данных этой формы
	ТекущиеДанныеСтроки.Представление = Результат.Представление;
	ТекущиеДанныеСтроки.Значение      = Результат.Идентификатор;
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьВСтруктуруИдентификацииШагаСведенияОНовойСсылке(
		Результат.Идентификатор,
		ТаблицаСсылокШага,
		Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеИзмененияДанныхЯчейки(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЯчейкаТаблицы = ДопПараметры.РедактируемаяЯчейка;
	
	Ячейкатаблицы.Текст = Результат.Представление;
	
	РеадктируемыйУзел = ДопПараметры.РедактируемыйУзел;
	
	РеадктируемыйУзел.Имя           = Результат.Имя;
	РеадктируемыйУзел.Синоним       = Результат.Синоним;
	РеадктируемыйУзел.ТипУзла       = Результат.ТипРеквизита;
	РеадктируемыйУзел.Значение      = Результат.Значение;
	РеадктируемыйУзел.Представление = Результат.Представление;
	
	
	// Обновление таблицы ссылок шага
	ТаблицаСсылокШага.Очистить();
	
	Для каждого СтрИ Из Результат.МТИ Цикл
		
		НоваяСтрока = ТаблицаСсылокШага.Добавить();
		НоваяСтрока.СтрокаИдентификатора = СтрИ.СтрокаИдентификатора;
		НоваяСтрока.Представление        = СтрИ.Представление;
		НоваяСтрока.ТипМД                = СтрИ.ТипМД;
		НоваяСтрока.ИмяМД                = СтрИ.ИмяМД;
		НоваяСтрока.СинонимМД            = СтрИ.СинонимМД;
		НоваяСтрока.ПоискПоЗапросу       = СтрИ.ПоискПоЗапросу;
		НоваяСтрока.ТекстЗапроса         = СтрИ.ТекстЗапроса;
		
		Для каждого СИ Из СтрИ.СтруктураИдентификации Цикл
			
			НовСтр = НоваяСтрока.СтруктураИдентификации.Добавить();
			
			НовСтр.Имя             = СИ.Имя;
			НовСтр.Представление   = СИ.Представление;
			НовСтр.Значение        = СИ.Значение;
			НовСтр.СокрТипЗначения = СИ.СокрТипЗначения;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры



#КонецОбласти


#Область ВспомогательныеПроцедурыИФункции

#Область НастрокаПриЗагрузкеДанныхШага

// Индивидуальная настройка формы для шага
//
&НаСервере
Процедура СцТ_НастроитьФормуДляШага()
	
	ДеревоЗначенияНаСервере = РеквизитФормыВЗначение("ДеревоЗначения");
	
	// Подготовка данных
	УзелТекстаЗапроса = ДеревоЗначенияНаСервере.Строки.Найти("ТекстЗапроса", "Имя");
	Если УзелТекстаЗапроса <> Неопределено Тогда
		ТекстЗапроса = УзелТекстаЗапроса.Значение;
	КонецЕсли;
	
	СцТ_ОтобразитьТаблицуПараметров(ДеревоЗначенияНаСервере);
	
	СцТ_ОтобразитьТаблицуРезультатаЗапроса(ДеревоЗначенияНаСервере);
	
	// Заполнение локальной таблицы ссылок
	Если НЕ ПустаяСтрока(АдресТаблицыСсылок) И НЕ ОА_ЭтоНовый Тогда
		
		ИстиннаяТаблицаСсылок = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
		Если ИстиннаяТаблицаСсылок.Колонки.Найти("СинонимМД") = Неопределено Тогда
			ИстиннаяТаблицаСсылок.Колонки.Добавить("СинонимМД", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		Для каждого СтрокаСсылки Из ИстиннаяТаблицаСсылок Цикл
			ИндексВМассиве = СтрокаСсылки.МассивУИШ.Найти(ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
			Если ИндексВМассиве <> Неопределено Тогда
				// Копируем описание ссылки
				СсылкаВШаге = ТаблицаСсылокШага.Добавить();
				СсылкаВШаге.СтрокаИдентификатора = СтрокаСсылки.Ссылка;
				
				СсылкаВШаге.Представление  = СтрокаСсылки.Представление;
				СсылкаВШаге.ТипМД          = СтрокаСсылки.ТипМетаданных;
				СсылкаВШаге.ИмяМД          = СтрокаСсылки.ИмяМетаданных;
				СсылкаВШаге.СинонимМД      = СтрокаСсылки.СинонимМД;
				СсылкаВШаге.ПоискПоЗапросу = СтрокаСсылки.ПоискПоЗапросу;
				СсылкаВШаге.ТекстЗапроса   = СтрокаСсылки.ТекстЗапроса;
				
				Если ПустаяСтрока(СсылкаВШаге.СинонимМД) Тогда
					Попытка
						СсылкаВШаге.СинонимМД = Метаданные[СсылкаВШаге.ТипМД][СсылкаВШаге.ИмяМД].Синоним;
					Исключение
						СсылкаВШаге.СинонимМД = СсылкаВШаге.ИмяМД;
					КонецПопытки;
				КонецЕсли;
				
				Для каждого КлючИдентификации Из СтрокаСсылки.СтруктураИдентификации Цикл
					НовыйКлюч = СсылкаВШаге.СтруктураИдентификации.Добавить();
					НовыйКлюч.Имя             = КлючИдентификации.Имя;
					НовыйКлюч.Представление   = КлючИдентификации.Представление;
					НовыйКлюч.Значение        = КлючИдентификации.Значение;
					НовыйКлюч.СокрТипЗначения = КлючИдентификации.СокрТипЗначения;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если таблицы ссылок еще не существует, то и описания ссылок еще нет
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страница_ТекстЗапроса;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ОтобразитьТаблицуПараметров(ДеревоДанных)
	
	СписокВыбора = Элементы.ТП_ТипЗначения.СписокВыбора;
	
	СписокВыбора.Добавить("Число"                  , НСтр("ru = 'Число'"));
	СписокВыбора.Добавить("Строка"                 , НСтр("ru = 'Строка'"));
	СписокВыбора.Добавить("Дата"                   , НСтр("ru = 'Дата'"));
	СписокВыбора.Добавить("Булево"                 , НСтр("ru = 'Булево'"));
	СписокВыбора.Добавить("Предопределенное"       , НСтр("ru = 'Предопределенное значение'"));
	СписокВыбора.Добавить("Ссылка"                 , НСтр("ru = 'Ссылка (Идентификатор)'"));
	СписокВыбора.Добавить("УникальныйИдентификатор", НСтр("ru = 'Уникальный идентификатор'"));
	СписокВыбора.Добавить("СистемноеПеречисление"  , НСтр("ru = 'Системное перечисление'"));
	СписокВыбора.Добавить("Параметр"               , НСтр("ru = 'Параметр'"));
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	
	УзелПараметров = ДеревоДанных.Строки.Найти("ПараметрыЗапроса", "Имя");
	
	Если УзелПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПараметров.Очистить();
	Для каждого СтрокаРеквизита Из УзелПараметров.Строки Цикл
		
		СтрокаПараметраЗапроса = ТаблицаПараметров.Добавить();
		СтрокаПараметраЗапроса.Имя           = СтрокаРеквизита.Имя;
		СтрокаПараметраЗапроса.Синоним       = СтрокаРеквизита.Синоним;
		
		СтрокаПараметраЗапроса.Значение      = СтрокаРеквизита.Значение;
		СтрокаПараметраЗапроса.Представление = СтрокаРеквизита.Представление;
		СтрокаПараметраЗапроса.Действие      = СтрокаРеквизита.Действие;
		СтрокаПараметраЗапроса.Активность    = СтрокаРеквизита.Активность;
		
		ТипУзла = СтрокаРеквизита.ТипУзла;
		Если  ТипУзла <> "Число"
			И ТипУзла <> "Строка"
			И ТипУзла <> "Дата"
			И ТипУзла <> "Булево"
			И ТипУзла <> "Предопределенное"
			И ТипУзла <> "Ссылка"
			И ТипУзла <> "УникальныйИдентификатор"
			И ТипУзла <> "СистемноеПеречисление"
			И ТипУзла <> "Параметр" Тогда
			
			// Это старый тип хранения данных.
			// Если тип не указан, то будет попытка вычислить истинное значение по старому типу
			// Если пользователь открыл объект для редактирования, то онтможет сам указать тип
			ТипУзла = "";
			
		КонецЕсли;
		
		СтрокаПараметраЗапроса.ТипУзла = ТипУзла;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготовка к отображению табличных частей объекта по данным дерева с данными
//
&НаСервере
Процедура СцТ_ОтобразитьТаблицуРезультатаЗапроса(ДеревоЗначения);
	
	УзелТаблицыРезультата = ДеревоЗначения.Строки.Найти("РезультатЗапроса", "Имя", Истина);
	
	Если УзелТаблицыРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ЗаполнитьТаблицуЗначениями(УзелТаблицыРезультата);
	
КонецПроцедуры

// Заполнение таблицы значениями по данным дерева
// 
// Параметры
// УзелТаблицы - узел дерева данных со значениями для заполнения
&НаСервере
Процедура СцТ_ЗаполнитьТаблицуЗначениями(УзелТаблицы)
	
	ТаблицаРезультата.Очистить();
	
	// Заполнение шапки
	СписокКолонок = Новый СписокЗначений;
	
	// Добавление колонок таблицы
	УзелШапкиТаблицы = УзелТаблицы.Строки.Найти("ШапкаТаблицы", "Имя", Истина);
	
	Если УзелШапкиТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Вывод ячеек шапки
	НомерКолонки = 1;
	Для каждого СтрокаРеквизита Из УзелШапкиТаблицы.Строки Цикл
		Если СтрокаРеквизита.Активность Тогда
			СписокКолонок.Добавить(СтрокаРеквизита.Имя, СтрокаРеквизита.Синоним);
			
			АдресЯчейки = "R1C%2";
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(НомерКолонки, "ЧГ=0"));
			
			Ячейка = ТаблицаРезультата.Область(АдресЯчейки);
			Ячейка.Текст = СтрокаРеквизита.Синоним;
			НомерКолонки = НомерКолонки + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Оформление колонок
	Если НомерКолонки > 1 Тогда
		
		ШиринаКолонки = Окр(160/НомерКолонки, 0);
		
		Если ШиринаКолонки < 14 Тогда
			ШиринаКолонки = 14;
		КонецЕсли;
		
		Для П=1 По НомерКолонки - 1 Цикл
			АдресЯчейки = "C%2";
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(П, "ЧГ=0"));
			
			Ячейка = ТаблицаРезультата.Область(АдресЯчейки);
			
			Ячейка.ШиринаКолонки = ШиринаКолонки;
			
			Ячейка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
			Ячейка.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			
			АдресЯчейки = "R1C%2";
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(П, "ЧГ=0"));
			Ячейка = ТаблицаРезультата.Область(АдресЯчейки);
			
			Ячейка.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3); 
			Ячейка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3);
			
			Ячейка.ЦветФона = Новый Цвет(215,215,215);
			
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение значениями оставшейся части таблицы
	НомерСтроки = 2;
	Для каждого УзелСтроки Из УзелТаблицы.Строки Цикл
		
		Если УзелСтроки.Имя = "ШапкаТаблицы" Тогда
			Продолжить;
		КонецЕсли;
		
		НомерКолонки = 1;
		Для каждого ЭлементСписка Из СписокКолонок Цикл
			// Цикл выполняется по списку колонок, который содержит только отображаемые колонки
			// Отсортированные в нужном порядке
			
			ТекстЯчейки = "";
			УзелКолонки = УзелСтроки.Строки.Найти(ЭлементСписка.Значение, "Имя");
			Если УзелКолонки <> Неопределено Тогда
				АдресЯчейки = "R%1C%2";
				АдресЯчейки = СтрЗаменить(АдресЯчейки, "%1", Формат(НомерСтроки , "ЧГ=0"));
				АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(НомерКолонки, "ЧГ=0"));
				
				Ячейка = ТаблицаРезультата.Область(АдресЯчейки);
				
				Ячейка.Текст = УзелКолонки.Представление;
				Ячейка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
				Ячейка.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
				
			КонецЕсли;
			// Номер колонки нужно увеличить независимо от того,
			// Нашли или нет текущий узел - иначе собъются колонки
			НомерКолонки = НомерКолонки + 1;
			
		КонецЦикла;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла; 
	
КонецПроцедуры


&НаСервере
Процедура СцТ_ЗаполнитьДействиеШагаПриОшибке(ЭтотОбъект)
	
	СписокВыбора = Элементы.ДействиеПриОшибке.СписокВыбора;
	СписокВыбора.Добавить("Остановить", НСтр("ru = 'Остановить выполнение'"));
	СписокВыбора.Добавить("Продолжить", НСтр("ru = 'Продолжить выполнение'"));
	
	// Параметры действий при ошибке находятся в корне
	ДействиеПриОшибке = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ДействиеПриОшибке",
		"Остановить");
		
	ИмяПеременнойРеузльтатаВыполнения = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ПеременнаяОшибки",
		"");
	
	УправлениеДоступностьюПеременнойОшибки(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область СохранениеШагаВСценарии

// Сохранение реализовано в виде функции, т.к. потребуется
// ее выполнение в обработчике ПередЗакрытием
//
&НаКлиенте
Функция СцТ_ПрименитьИзменения_НаКлиенте() Экспорт
	
	// Проверка, что владелец формы еще не закрыт
	Если НЕ ВладелецФормы.Открыта() Тогда
		ТекстСообщения = НСтр("ru = 'Форма с деревом шагов уже закрыта. Применить изменения невозможно'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка правильности данных
	Отказ = Ложь;
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	ОбновитьПользовательскоеОписание();
	
	Если ПустаяСтрока(ДШ_Наименование) Тогда
		
		СцТ_СообщитьПользователю(НСтр("ru = 'Не заполнено наименование.'"),
			Отказ,
			"ДШ_Наименование");
	КонецЕсли;
	
	ОбновитьПользовательскоеОписание();
	
	// Проверка индивидуальных настроек шага и заполнение ДереваЗначения
	СцТ_ПодготовитьДанныеШагаДляСохранения_НаКлиенте(Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВозвращаемаяСтруктура = СцТ_СформироватьСтруктуруданныхШага_НаКлиенте();
	
	Если ОА_ЭтоНовый Тогда
		
		ДанныеШага = СцТ_ГлавнаяФорма.СцТ_СохранитьНовыйШаг(ВызвавшаяФорма, ВозвращаемаяСтруктура);
		
		ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
		ОА_НомерШага      = ДанныеШага.НомерШага;
		ОА_ЭтоНовый       = Ложь;
		
	Иначе
		СцТ_ГлавнаяФорма.СцТ_ПрименитьИзмененияВШаге(ВызвавшаяФорма, ДанныеШага, ВозвращаемаяСтруктура);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Заполнение дерева значения данными формы.
// Проверка корректности специфических для этого шага данных
&НаКлиенте
Процедура СцТ_ПодготовитьДанныеШагаДляСохранения_НаКлиенте(Отказ)
	
	// Проверки
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		СП = Новый СообщениеПользователю;
		СП.Текст = НСтр("ru = 'Не заполнен текст запроса.'");
		СП.ПутьКДанным = "ТекстЗапроса";
		СП.Сообщить();
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Очищать дерево значения нельзя, так как оно содержит все сделанные изменения
	// А таблица запроса редактируется непосредственно в дереве
	
	УзелРеквизитов = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ТекстЗапроса",
			ТекстЗапроса);
	
	// Сохранение таблицы параметров запроса
	УзелПараметровЗапроса = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ПараметрыЗапроса",
			"ПараметрыЗапроса");
	
	УзелПараметровЗапроса.ПолучитьЭлементы().Очистить();
	
	Для каждого СтрПараметра Из ТаблицаПараметров Цикл
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			УзелПараметровЗапроса,
			СтрПараметра.Имя,
			СтрПараметра.Значение,
			СтрПараметра.Синоним,
			Истина,
			СтрПараметра.Представление,
			"Заполнить",
			"",
			СтрПараметра.ТипУзла);
		
	КонецЦикла;
	
	Если НаименованиеШагаИзмененоВручную Тогда
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ИСТЗ_НаименованиеРучное",
			Истина);
	Иначе
		НайденныйУзел = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(
			ДеревоЗначения,
			"Имя",
			"ИСТЗ_НаименованиеРучное");
			
		Если НайденныйУзел <> Неопределено Тогда
			ДеревоЗначения.ПолучитьЭлементы().Удалить(НайденныйУзел);
		КонецЕсли;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДействиеПриОшибке",
		ДействиеПриОшибке);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ПеременнаяОшибки",
		ИмяПеременнойРеузльтатаВыполнения);
	
КонецПроцедуры

// Свертка данных шага в структуру
// и подготовка возвращаемой структуры отредактированного шага
&НаКлиенте
Функция СцТ_СформироватьСтруктуруданныхШага_НаКлиенте()
	
	// СДШ - структура данных шага
	СДШ = Новый Структура;
	
	СДШ.Вставить("ИдентификаторШага"           , ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
	СДШ.Вставить("НаименованиеШага"            , ДШ_Наименование);
	СДШ.Вставить("ТипМетаданных"               , ДШ_ТипМетаданных);
	СДШ.Вставить("ИмяМетаданных"               , ДШ_ИмяМетаданных);
	СДШ.Вставить("Автоописание"                , ДШ_Автоописание);
	СДШ.Вставить("Описание"                    , ДШ_Описание);
	СДШ.Вставить("СкрытьАвтоописание"          , ДШ_СкрытьАвтоописание);
	СДШ.Вставить("ОбСсылка"                    , ДШ_ОбСсылка);
	СДШ.Вставить("ПредставлениеОбъекта"        , ДШ_ПредставлениеОбъекта);
	СДШ.Вставить("ВыполнитьВручную"            , ДШ_ВыполнитьВручную);
	СДШ.Вставить("Комментарий"                 , ДШ_Комментарий);
	СДШ.Вставить("ИмяФормы"                    , ДШ_ИмяФормы);
	СДШ.Вставить("ПредставлениеИмениМетаданных", ДШ_ПредставлениеИмениМетаданных);
	СДШ.Вставить("ЗаголовокФормы"              , ДШ_ЗаголовокФормы);
	СДШ.Вставить("ДанныеКартинки"              , ДШ_ДанныеКартинки);
	СДШ.Вставить("ДеревоЗначения"              , СцТ_ГлавнаяФорма.СцТ_ДеревоформыВДеревоСтруктур(ДеревоЗначения));
	
	//Сначала из таблицы ссылок нужно удалить неиспользованные ссылки
	СписокИспользуемыхСсылокВШаге = Новый СписокЗначений;
	СцТ_ГлавнаяФорма.ИтерационноеЗаполнениеСпискаСсылок(ДеревоЗначения, СписокИспользуемыхСсылокВШаге);
	Если НЕ ПустаяСтрока(ДШ_ОбСсылка) И СписокИспользуемыхСсылокВШаге.НайтиПоЗначению(ДШ_ОбСсылка) = Неопределено Тогда
		СписокИспользуемыхСсылокВШаге.Добавить(ДШ_ОбСсылка);
	КонецЕсли;
	
	Если СписокИспользуемыхСсылокВШаге.Количество() = 0 Тогда
		ТаблицаСсылокШага.Очистить();
	Иначе
		КоличествоСтрок = ТаблицаСсылокШага.Количество();
		// Таблицу нужно обходить только сначала!
		Если КоличествоСтрок > 0 Тогда
			Итератор = 0;
			Пока Итератор < КоличествоСтрок Цикл
				СтрокаТаблицы = ТаблицаСсылокШага[Итератор];
				ЭлементСписка = СписокИспользуемыхСсылокВШаге.НайтиПоЗначению(СтрокаТаблицы.СтрокаИдентификатора);
				Если ЭлементСписка = Неопределено ИЛИ ЭлементСписка.Пометка Тогда
					// Пометка в списке отвечает за дублирующие строки
					ТаблицаСсылокШага.Удалить(Итератор);
					КоличествоСтрок = КоличествоСтрок - 1;
				Иначе
					Итератор = Итератор + 1;
					// Переход на следующую строку
					ЭлементСписка.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// МТИ - массив таблицы идентификации
	МТИ = СцТ_ГлавнаяФорма.СцТ_УпаковатьВМассивТаблицуСсылокШага(ТаблицаСсылокШага);
	
	// ВСД - возвращаемая структура данных
	ВСД = Новый Структура;
	ВСД.Вставить("ОписательПоложенияШагаВДереве", ОА_ОписательПоложенияШагаВДереве);
	ВСД.Вставить("Наименование"                 , ДШ_Наименование);
	ВСД.Вставить("Активность"                   , ОА_Активность);
	ВСД.Вставить("СтруктураДанныхШага"          , СДШ);
	ВСД.Вставить("ЭтоНовый"                     , ОА_ЭтоНовый);
	ВСД.Вставить("ТипШага"                      , ОА_ТипШага);
	ВСД.Вставить("СсылкиШага"                   , МТИ);
	
	Возврат ВСД;
	
КонецФункции



#КонецОбласти

#Область ФормированеОписанийИНаименований

// Формирование описания шага на клиенте
&НаКлиенте
Функция СцТ_СформироватьОписаниеШага_НаКлиенте(Краткое = Ложь)
	
	ВозвращаемоеОписание = СцТ_ГлавнаяФорма.СцТ_ПолучитьОписаниеШага_ЗаменаСсылки(, СцТ_РодительУзла);
	
	Возврат ВозвращаемоеОписание;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ОбновитьНаименование_НаКлиенте(Принудительно = Ложь)
	
	Если НЕ НаименованиеШагаИзмененоВручную ИЛИ Принудительно Тогда
		ДШ_Наименование = СцТ_СформироватьОписаниеШага_НаКлиенте(Истина);
	КонецЕсли;
	
	Если Принудительно Тогда
		НаименованиеШагаИзмененоВручную = Ложь;
		Модифицированность = Истина;
		// В остальных случаях менять модифицированность не нужно,
		// так как ее должно изменить изменение другого элемента формы
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСДеревомЗначения

// Возвращает значение заданного поля в дереве данных
//
// Параметры
//	ДерЗнач              - дерево с данными в котором ведется поиск
//	ИмяПараметра         - имя искомого параметра
//	ЕслиНеНайдено        - что вернуть, если значение не найдено
//	ВозвращаемыйРеквизит - имя колонки, которую нужно вернуть
//	Рекурсивно           - признак рекурсии
// Возвращаемое значение - значение нужного поля найденного узла
&НаСервереБезКонтекста
Функция СцТ_ЗначениеВДереве(
	ДерЗнач,
	ИмяПараметра,
	ЕслиНеНайдено = Неопределено,
	ВозвращаемыйРеквизит = "Значение",
	Рекурсивно = Истина)
	
	УзелЗначения = СцТ_НайтиУзелДереваФормы(ДерЗнач, "Имя", ИмяПараметра, Рекурсивно);
	Если УзелЗначения = Неопределено Тогда
		Возврат ЕслиНеНайдено;
	Иначе
		Возврат УзелЗначения[ВозвращаемыйРеквизит];
	КонецЕсли;
	
КонецФункции

// Поиск нужного узла в дереве данных
//
// Параметры
//	ДеревоФормы       - дерево, в котором ведется поиск
//	Реквизит          - имя поля в котором ведется поиск
//	ЗначениеРеквизита - значение в поле
//	Рекурсивно        - признак рекурсивного поиска
// Возвращаемое значение - найденный узел
&НаСервереБезКонтекста
Функция СцТ_НайтиУзелДереваФормы(
	ДеревоФормы,
	Реквизит,
	ЗначениеРеквизита,
	Рекурсивно = Ложь)
	
	Если ДеревоФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Узел Из ДеревоФормы.ПолучитьЭлементы() Цикл
		Если Узел[Реквизит] = ЗначениеРеквизита Тогда
			Возврат Узел;
		КонецЕсли;
		Если Рекурсивно Тогда
			НайденыйУзел = СцТ_НайтиУзелДереваФормы(Узел, Реквизит, ЗначениеРеквизита, Истина);
			Если НайденыйУзел <> Неопределено Тогда
				Возврат НайденыйУзел;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Заполнение дерева значения данными из структуры
//
// параметры
//	ДеревоФормы - заполняемое дерево
//	ДеревоСтруктур - структура с данными
&НаСервереБезКонтекста
Процедура СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоФормы, ДеревоСтруктур)
	
	СтрокиДереваФормы = ДеревоФормы.ПолучитьЭлементы();
	Для каждого СтрокаДереваСтруктур Из ДеревоСтруктур.ИСТЗ_Строки Цикл
		СтрокаДереваФормы = СтрокиДереваФормы.Добавить();
		Для каждого КлючЗначение Из СтрокаДереваСтруктур Цикл
			Если КлючЗначение.Ключ <> "ИСТЗ_Строки" Тогда
				СтрокаДереваФормы[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(СтрокаДереваФормы, СтрокаДереваСтруктур);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПреобразоватьЗначенияВДереве(ВеткаДерева, ДляОтображения = Истина)
	
	Для каждого СтрокаДерева Из ВеткаДерева.Строки Цикл
		
		Если ДляОтображения Тогда
			СтрокаДерева.Значение = ЗначениеИзСтрокиВнутр(СтрокаДерева.Значение);
		Иначе
			СтрокаДерева.Значение = ЗначениеВСтрокуВнутр(СтрокаДерева.Значение);
		КонецЕсли;
		
		ПреобразоватьЗначенияВДереве(СтрокаДерева, ДляОтображения);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Обновление картинок на закладках
// Вызывается посредством обработки ожидания, чтобы форма нормально закрывалась после редактирования
&НаКлиенте
Процедура СцТ_ОбновитьЗаголовкиЗакладок()
	
	Элементы.Страница_РедактируемоеОписание.Картинка = ?(
		ПустаяСтрока(ДШ_Описание),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Элементы.Страница_Комментарий.Картинка = ?(
		ПустаяСтрока(ДШ_Комментарий),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
КонецПроцедуры


// Формирование представление существующего шага
// параметры
// РодительскийШаг - указатель на данные родительского шага.
// НЕ может быть Неопределено
&НаКлиенте
Процедура ОтобразитьПредставлениеСуществующегоРодительскогоШага(РодительскийШаг)
	
	ПредставлениеГруппы = НСтр("ru = 'Шаг №%1 ""%2""'");
	ПредставлениеГруппы = СтрЗаменить(
		ПредставлениеГруппы,
		"%1",
		Формат(РодительскийШаг.НомерШага, "ЧГ=0"));
	
	ПредставлениеГруппы = СтрЗаменить(
		ПредставлениеГруппы,
		"%2",
		РодительскийШаг.Наименование);
	
КонецПроцедуры

// Вывод сообщения пользователю
//
// Параметры
// ТекстСообщения - отображаемый текст
// Отказ - ссылка на переменную отказ в вызываемой процедуре
// ПолеДанных - поле, которое должно получить фокус
&НаКлиенте
Процедура СцТ_СообщитьПользователю(ТекстСообщения, Отказ = Неопределено, ПолеДанных = "")
	
	Отказ = Истина;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Поле  = ПолеДанных;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюПеременнойОшибки(УпрФорма)
	
	Если УпрФорма.ДействиеПриОшибке = "Остановить" Тогда
		УпрФорма.Элементы.СтраницыПеременнойОшибки.ТекущаяСтраница = УпрФорма.Элементы.СтраницыПеременнойОшибки_Пустая;
	Иначе
		УпрФорма.Элементы.СтраницыПеременнойОшибки.ТекущаяСтраница = УпрФорма.Элементы.СтраницыПеременнойОшибки_Заполненная;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыборЗначенияВТаблицеНаСервере(ВозвращеннаяСтруктураДанных)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	ОписаниеВыбранногоЗначения = МодульОбработки.СцТ_ПолучитьОписаниеЗначения(
		ВозвращеннаяСтруктураДанных.ВыбранноеЗначение);
		
	Если ОписаниеВыбранногоЗначения.ТипЗначения = "Ссылка" Тогда
		// Нужно добавить структуру идентификации в таблицу ссылок шага
		
		// МСИ - массив структур идентификации
		МСИ = МодульОбработки.СцТ_ПреобразоватьДанныеФормыТаблицыСсылокШагаВСтруктуру(ТаблицаСсылокШага);
		
		МодульОбработки.СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(
			ВозвращеннаяСтруктураДанных.ВыбранноеЗначение,
			МСИ,
			ВозвращеннаяСтруктураДанных.ТипМД,
			ВозвращеннаяСтруктураДанных.ИмяМД,
			ВозвращеннаяСтруктураДанных.СинонимМД,
			АдресТаблицыКлючей,
			ОписаниеВыбранногоЗначения.ВнутрЗначение);
			
		// Обратное преобразование МСИ в таблицу ссылок шага
		МодульОбработки.СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(ТаблицаСсылокШага, МСИ);
		
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ТипЗначения"  , ОписаниеВыбранногоЗначения.ТипЗначения);
	СтруктураОтвета.Вставить("Значение"     , ОписаниеВыбранногоЗначения.ВнутрЗначение);
	СтруктураОтвета.Вставить("Представление", ОписаниеВыбранногоЗначения.Представление);
	
	Возврат СтруктураОтвета;
	
	
	
	
	//Если ВозвращеннаяСтруктураДанных.ТипМД = "Перечисления" Тогда
	//	
	//	МассивЗначений = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Метаданные().ЗначенияПеречисления;
	//	НужноеИмя = "";
	//	Для каждого ЗначениеПеречисления Из МассивЗначений ЦИкл
	//		ПолноеИмяПредопределенного = "Перечисление." + ВозвращеннаяСтруктураДанных.ИмяМД + "." + ЗначениеПеречисления.Имя;
	//		Если ПредопределенноеЗначение(ПолноеИмяПредопределенного) = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение Тогда
	//			НужноеИмя = ПолноеИмяПредопределенного;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	СтруктураСтроки.Вставить("ТипЗначения"  , "Предопределенное");
	//	СтруктураСтроки.Вставить("Значение"     , НужноеИмя);
	//	СтруктураСтроки.Вставить("Представление", Строка(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение));
	//	
	//Иначе
	//	Попытка
	//		Предопределенное = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Предопределенное;
	//	Исключение
	//		Предопределенное = Ложь;
	//	КонецПопытки;
	//	
	//	Если Предопределенное Тогда
	//		
	//		ИмяМ = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Метаданные().Имя;
	//		
	//		
	//		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "Справочник";
	//			
	//		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "Документ";
	//			
	//		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "ПланСчетов";
	//			
	//		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "ПланВидовХарактеристик";
	//			
	//		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "ПланВидовРасчета";
	//			
	//		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "Перечисление";
	//			
	//		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "БизнесПроцесс";
	//			
	//		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "Задача";
	//			
	//		Иначе
	//			ТМД = "";
	//			
	//		КонецЕсли;
	//		
	//		Если ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Пустая() Тогда
	//			ВнутрЗначение = ТМД + "." + ИмяМ + ".ПустоеЗначение";
	//		Иначе
	//			МассивИменПредопределенных = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Метаданные().ПолучитьИменаПредопределенных();
	//			НужноеИмя = "";
	//			Для каждого ИмяПредопределенного Из МассивИменПредопределенных ЦИкл
	//				ПолноеИмяПредопределенного = ТМД + "." + ИмяМ + "." + ИмяПредопределенного;
	//				Если ПредопределенноеЗначение(ПолноеИмяПредопределенного) = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение Тогда
	//					НужноеИмя = ПолноеИмяПредопределенного;
	//					Прервать;
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//			ВнутрЗначение = НужноеИмя;
	//		КонецЕсли;
	//		ТипЗначения = "Предопределенное";
	//		
	//		СтруктураСтроки.Вставить("ТипЗначения"  , "Предопределенное");
	//		СтруктураСтроки.Вставить("Значение"     , ВнутрЗначение);
	//		СтруктураСтроки.Вставить("Представление", Строка(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение));
	//		
	//	Иначе
	//		ИдентификаторСсылки = Строка(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.УникальныйИдентификатор());
	//		
	//		МодульОбработки = РеквизитФормыВЗначение("Объект");
	//		
	//		// МСИ - массив структур идентификации
	//		МСИ = МодульОбработки.СцТ_ПреобразоватьДанныеФормыТаблицыСсылокШагаВСтруктуру(ТаблицаСсылокШага);
	//		
	//		МодульОбработки.СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(
	//			ВозвращеннаяСтруктураДанных.ВыбранноеЗначение,
	//			МСИ,
	//			ВозвращеннаяСтруктураДанных.ТипМД,
	//			ВозвращеннаяСтруктураДанных.ИмяМД,
	//			ВозвращеннаяСтруктураДанных.СинонимМД,
	//			АдресТаблицыКлючей,
	//			ИдентификаторСсылки);
	//			
	//		// Обратное преобразование МСИ в таблицу ссылок шага
	//		МодульОбработки.СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(ТаблицаСсылокШага, МТИ);
	//		
	//		СтруктураСтроки.Вставить("ТипЗначения"  , "Ссылка");
	//		СтруктураСтроки.Вставить("Значение"     , ИдентификаторСсылки);
	//		СтруктураСтроки.Вставить("Представление", Строка(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение));
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//Возврат СтруктураСтроки;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТипЗначенияПоля(ТекущийТип, ДанныеСтроки)
	
	Если ТекущийТип = "Число" Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Число");
		
	ИначеЕсли ТекущийТип = "Дата" Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Дата");
		
	ИначеЕсли ТекущийТип = "Булево" Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Булево");
		
	Иначе
		
		ОписаниеТипов = Новый ОписаниеТипов("Строка");
		
	КонецЕсли;
	
	ДанныеСтроки.Значение = ОписаниеТипов.ПривестиЗначение(ДанныеСтроки.Значение);
	
	Элементы.ТП_Значение.ОграничениеТипа = ОписаниеТипов;
	
	Элементы.ТП_Значение.ВыбиратьТип     = Ложь;
	Элементы.ТП_Значение.КнопкаВыбора    = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПользовательскоеОписание()
	
	ТекстОписания = ДШ_Описание;
	
	Если НЕ ДШ_СкрытьАвтоописание Тогда
		ДШ_Автоописание = СцТ_СформироватьОписаниеШага_НаКлиенте();
		ТекстОписания = СцТ_ГлавнаяФорма.СцТ_ДобавитьПодстроку(ТекстОписания, ДШ_Автоописание, Символы.ПС);
	КонецЕсли;
	
	ПользовательскоеОписание = ТекстОписания;
	
КонецПроцедуры


// Подготовка данных для визуального сравнения двух таблиц
//
// Параметры
// Знач ПараметрыДляПоискаОбъекта - структура параметров родительского шага, для поиска объекта или записи ИБ
//	Знач ИмяТаблицы - имя таблицы
//	Знач АдресТаблицыСсылок - адрес таблицы ссылок сценария для поиска объекта или записи ИБ
//	Знач ГлобальныеПараметры - структура глобальны параметров для определения истинных значений параметров
//	ТекстСообщения  - возвращаемое сообщение об ошибках в случае неудачи
&НаСервере
Функция СцТ_ПодготовитьДанныеДляВизуальногоСравненияТаблицНаСервере(
	Знач ГлобальныеПараметры,
	ТекстСообщения = "")
	
	МодульЭтойОбработки = РеквизитФормыВЗначение("Объект");
	
	// ***************************
	// Построение эталонной таблицы
	
	ДеревоНаСервере = РеквизитФормыВЗначение("ДеревоЗначения");
	
	УзелТаблицы = ДеревоНаСервере.Строки.Найти("РезультатЗапроса", "Имя");
	
	Если УзелТаблицы = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти узел таблицы с результатом запроса в структуре данных шага.'");
		Возврат Неопределено;
	КонецЕсли;
	
	МассивИсключений    = Новый Массив;
	МассивКлючевыхПолей = Новый Массив;
	
	// Вместо таблицы ссылок нужно передать таблицу ссылок шага
	АдрВременнойТаблСсылок = ПолучитьАдресТаблицыСсылокШагаДляВычисленияИстинныхЗначений();
	
	ЭталоннаяТаблица = МодульЭтойОбработки.СцТ_СформироватьТаблицуПоУзлуОписанияТаблицы(
		УзелТаблицы,
		МассивИсключений,
		МассивКлючевыхПолей,
		АдрВременнойТаблСсылок,
		ГлобальныеПараметры,
		ТекстСообщения);
		
	Если ЭталоннаяТаблица = Неопределено ИЛИ ЭталоннаяТаблица.Колонки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать эталонную таблицу. Проверьте, что таблица результата заполнена.'");
		Возврат Неопределено;
	КонецЕсли;
		
	// ***************************
	// Построение тестируемой таблицы
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	
	Отказ = Ложь;
	СцТ_ОбновитьПараметрыЗапросаНаСервере(Отказ);
	
	// Обновление параметров. Все неустановленные параметры будут считаться пустыми
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось обновить параметры запроса.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		Запрос.УстановитьПараметр(СтрокаПараметров.Имя, СтрокаПараметров.Значение);
	КонецЦикла;
	
	// Предусмотреть все возможные ошибки в запросе достаточно сложно
	// Предполагается, что запрос должен быть достаточно простым
	Попытка
		ТестоваяТаблица = Запрос.Выполнить().Выгрузить();
	Исключение
		ИнфОшибка = ИнформацияОбОшибке();
		ТекстСообщения = 
			НСтр("ru = 'Ошибка при проверке запроса.
				|Краткое описание ошибки: '")
				+ КраткоеПредставлениеОшибки(ИнфОшибка)
				+ Символы.ПС
				+ НСтр("ru = 'Подробное описание ошибки: '")
				+ ПодробноеПредставлениеОшибки(ИнфОшибка);
		Возврат Неопределено;
	КонецПопытки;
	
	ТипОбъекта = "ТабличныйДокумент";
	
	МодульЭтойОбработки.СцТ_ПреобразоватьВТаблицеХранилищеЗначенияВСтроку(ТестоваяТаблица);
	
	// Возвращаемая структура
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("АдресЭталоннойТЗ",
		ПоместитьВоВременноеХранилище(ЭталоннаяТаблица, УникальныйИдентификатор));
	СтруктураОтвета.Вставить("АдресТестовойТЗ",
		ПоместитьВоВременноеХранилище(ТестоваяТаблица , УникальныйИдентификатор));
	СтруктураОтвета.Вставить("МассивИсключений"   , МассивИсключений);
	СтруктураОтвета.Вставить("МассивКлючевыхПолей", МассивКлючевыхПолей);
	СтруктураОтвета.Вставить("ТипОбъекта"         , ТипОбъекта);
	СтруктураОтвета.Вставить("ИмяТаблицы"         , "Результат запроса");
	
	Возврат СтруктураОтвета;
	
КонецФункции


// Сохранение во временное хранилище таблицы ссылок шага
// для вычисления истинных значений ссылочного типа в шаге
&НаСервере
Функция ПолучитьАдресТаблицыСсылокШагаДляВычисленияИстинныхЗначений()
	
	ТаблицаСсылокНаСервере = РеквизитФормыВЗначение("ТаблицаСсылокШага");
	
	// Преобразование таблицы ссылок шага к формату хранимой таблицы ссылок
	ТаблицаСсылокНаСервере.Колонки.Добавить("Ссылка");
	ТаблицаСсылокНаСервере.ЗагрузитьКолонку(ТаблицаСсылокНаСервере.ВыгрузитьКолонку("СтрокаИдентификатора"), "Ссылка");
	ТаблицаСсылокНаСервере.Колонки.Добавить("СоответствиеСсылок");
	ТаблицаСсылокНаСервере.Колонки.Добавить("ТипМетаданных");
	ТаблицаСсылокНаСервере.ЗагрузитьКолонку(ТаблицаСсылокНаСервере.ВыгрузитьКолонку("ТипМД"), "ТипМетаданных");
	ТаблицаСсылокНаСервере.Колонки.Добавить("ИмяМетаданных");
	ТаблицаСсылокНаСервере.ЗагрузитьКолонку(ТаблицаСсылокНаСервере.ВыгрузитьКолонку("ИмяМД"), "ИмяМетаданных");
	
	АдрВременнойТаблСсылок = ПоместитьВоВременноеХранилище(ТаблицаСсылокНаСервере, Новый УникальныйИдентификатор);
	
	Возврат АдрВременнойТаблСсылок;
	
КонецФункции

&НаКлиенте
Функция ОпределитьНомерТекущейСтрокиВТабличномДокументе()
	
	ИмяТекущейОбласти = Элементы.ТаблицаРезультата.ТекущаяОбласть.Имя;
	
	КоличествоСимволов = СтрДлина(ИмяТекущейОбласти);
	Если КоличествоСимволов = 0 Тогда
		НомерТекущейСтроки = 0;
	Иначе          
		НомерТекущейСтроки_Строкой = "";
		ЕстьНачалоСтроки = Ложь;
		Для Индекс = 1 ПО КоличествоСимволов Цикл
			ТекущийСимвол = ВРег(Сред(ИмяТекущейОбласти, Индекс, 1));
			Если НЕ ЕстьНачалоСтроки И ТекущийСимвол = "R" Тогда
				ЕстьНачалоСтроки = Истина;
			ИначеЕсли ЕстьНачалоСтроки И (ТекущийСимвол = "C" ИЛИ ТекущийСимвол = ":") Тогда
				ЕстьНачалоСтроки = Ложь;
				Прервать;
			ИначеЕсли ЕстьНачалоСтроки И НЕ(ТекущийСимвол = "C" ИЛИ ТекущийСимвол = ":") Тогда
				НомерТекущейСтроки_Строкой = НомерТекущейСтроки_Строкой + ТекущийСимвол;
				
				// Иначе просто переход к следующему символу
			КонецЕсли;
			
		КонецЦикла;
		
		НомерТекущейСтроки_Строкой = СтрЗаменить(НомерТекущейСтроки_Строкой, " ", "");
		НомерТекущейСтроки_Строкой = СтрЗаменить(НомерТекущейСтроки_Строкой, Символ(160), "");
		
		Если ПустаяСтрока(НомерТекущейСтроки_Строкой) Тогда
			НомерТекущейСтроки = 0;
		Иначе
			Попытка
				НомерТекущейСтроки = Число(НомерТекущейСтроки_Строкой);
			Исключение
				НомерТекущейСтроки = 0;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерТекущейСтроки;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьУзелШапкиТаблицы(УзелТаблицы)
	
	УзелШапки           = Неопределено;
	
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = "ШапкаТаблицы" Тогда
			УзелШапки = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УзелШапки;
	
КонецФункции
&НаКлиенте
Функция ОпределитьУзелТаблицыВДереве(ИмяТаблицы)
	
	УзелТаблицы = Неопределено;
	Для каждого УзелДерева Из ДеревоЗначения.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = ИмяТаблицы Тогда
			УзелТаблицы = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УзелТаблицы;
	
КонецФункции
&НаСервере
Процедура СцТ_ЗаполнитьТаблицуДанныхЗначениями()
	
	ДеревоЗначенияНаСервере = РеквизитФормыВЗначение("ДеревоЗначения");
	СцТ_ОтобразитьТаблицуРезультатаЗапроса(ДеревоЗначенияНаСервере)
	//
	//Попытка
	//	ТД = ЭтотОбъект["СцТ_Таблица_" + ИмяТаблицы];
	//Исключение
	//	Возврат;
	//КонецПопытки;
	//
	//УзелТаблицы = ДеревоЗначения.НайтиПоИдентификатору(ИД_Таблицы);
	//
	//ТД.Очистить();
	//
	//// Заполнение шапки
	//СписокКолонок = Новый СписокЗначений;
	//
	//УзелШапкиТаблицы = ПолучитьУзелШапкиТаблицы(УзелТаблицы);
	//Если УзелШапкиТаблицы = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//// Добавление колонок таблицы
	//
	//// Вывод ячеек шапки
	//НомерКолонки = 1;
	//Для каждого СтрокаРеквизита Из УзелШапкиТаблицы.ПолучитьЭлементы() Цикл
	//	Если СтрокаРеквизита.Активность Тогда
	//		СписокКолонок.Добавить(СтрокаРеквизита.Имя, СтрокаРеквизита.Синоним);
	//		
	//		АдресЯчейки = "R1C%2";
	//		АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(НомерКолонки, "ЧГ=0"));
	//		
	//		Ячейка = ТД.Область(АдресЯчейки);
	//		Ячейка.Текст = СтрокаРеквизита.Синоним;
	//		НомерКолонки = НомерКолонки + 1;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//// Оформление колонок
	//Если НомерКолонки > 1 Тогда
	//	
	//	ШиринаКолонки = Окр(160/НомерКолонки, 0);
	//	
	//	Если ШиринаКолонки < 14 Тогда
	//		ШиринаКолонки = 14;
	//	КонецЕсли;
	//	
	//	Для П=1 По НомерКолонки - 1 Цикл
	//		АдресЯчейки = "C%2";
	//		АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(П, "ЧГ=0"));
	//		
	//		Ячейка = ТД.Область(АдресЯчейки);
	//		
	//		Ячейка.ШиринаКолонки = ШиринаКолонки;
	//		
	//		Ячейка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
	//		Ячейка.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	//		
	//		АдресЯчейки = "R1C%2";
	//		АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(П, "ЧГ=0"));
	//		Ячейка = ТД.Область(АдресЯчейки);
	//		
	//		Ячейка.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3); 
	//		Ячейка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3);
	//		
	//		Ячейка.ЦветФона = Новый Цвет(215,215,215);
	//		
	//	КонецЦикла;
	//КонецЕсли;
	//
	//// Заполнение значениями оставшейся части таблицы
	//НомерСтроки = 2;
	//Для каждого УзелСтроки Из УзелТаблицы.ПолучитьЭлементы() Цикл
	//	
	//	Если УзелСтроки.Имя = "ШапкаТаблицы" Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	НомерКолонки = 1;
	//	Для каждого ЭлементСписка Из СписокКолонок Цикл
	//		// Цикл выполняется по списку колонок, который содержит только отображаемые колонки
	//		// Отсортированные в нужном порядке
	//		
	//		ТекстЯчейки = "";
	//		УзелКолонки = Неопределено;
	//		Для каждого УзелДерева Из УзелСтроки.ПолучитьЭлементы() Цикл
	//			Если УзелДерева.Имя = ЭлементСписка.Значение Тогда
	//				УзелКолонки = УзелДерева;
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		Если УзелКолонки <> Неопределено Тогда
	//			АдресЯчейки = "R%1C%2";
	//			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%1", Формат(НомерСтроки , "ЧГ=0"));
	//			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(НомерКолонки, "ЧГ=0"));
	//			
	//			Ячейка = ТД.Область(АдресЯчейки);
	//			
	//			Ячейка.Текст = УзелКолонки.Представление;
	//			Ячейка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
	//			Ячейка.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
	//			
	//		КонецЕсли;
	//		// Номер колонки нужно увеличить независимо от того,
	//		// Нашли или нет текущий узел - иначе собъются колонки
	//		НомерКолонки = НомерКолонки + 1;
	//		
	//	КонецЦикла;
	//	НомерСтроки = НомерСтроки + 1;
	//КонецЦикла; 
	
КонецПроцедуры
&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	
	КонструкторЗапроса = Неопределено;
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Выполнить("КонструкторЗапроса = Новый КонструкторЗапроса();");
	Иначе
		Выполнить("КонструкторЗапроса = Новый КонструкторЗапроса(ТекстЗапроса);");
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораЗапроса", ЭтотОбъект);
	КонструкторЗапроса.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияКонструктораЗапроса(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТекстЗапроса = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметры(Команда)
	
	Отказ = Ложь;
	СцТ_ОбновитьПараметрыЗапросаНаСервере(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обновление параметров запроса
//
&НаСервере
Процедура СцТ_ОбновитьПараметрыЗапросаНаСервере(Отказ)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		ТаблицаПараметров.Очистить();
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Попытка
			ПараметрыИзЗапроса = Запрос.НайтиПараметры();
		Исключение
			ИнфОшибка = ИнформацияОбОшибке();
			СП = Новый СообщениеПользователю;
			СП.Текст = НСтр("ru = 'Ошибка при получении параметров запроса.
						|Краткое описание ошибки: '")
						+ КраткоеПредставлениеОшибки(ИнфОшибка)
						+ Символы.ПС
						+ НСтр("ru = 'Подробное описание ошибки: '")
						+ ПодробноеПредставлениеОшибки(ИнфОшибка);
			СП.ПутьКДанным = "ТекстЗапроса";
			СП.Сообщить();
			
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		Для каждого ПарамЗапроса Из ПараметрыИзЗапроса Цикл
			Отбор = Новый Структура("Имя", ПарамЗапроса.Имя);
			СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Отбор);
			Если СтрокиПараметров.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.Имя           = ПарамЗапроса.Имя;
				
				ИстинноеЗначение = ПарамЗапроса.ТипЗначения.ПривестиЗначение(Неопределено);
				ОписаниеЗначения = МодульОбработки.СцТ_ПолучитьОписаниеЗначения(ИстинноеЗначение);
				
				НоваяСтрока.Значение      = ОписаниеЗначения.ВнутрЗначение;
				НоваяСтрока.ТипУзла       = ОписаниеЗначения.ТипЗначения;
				НоваяСтрока.Представление = ОписаниеЗначения.Представление;
			КонецЕсли;
		КонецЦикла;
		
		КоличествоПараметров = ТаблицаПараметров.Количество();
		Если КоличествоПараметров > 0 Тогда
			Для ОбратныйИндекс = 1 По КоличествоПараметров Цикл
				СтрокаПараметров = ТаблицаПараметров[КоличествоПараметров - ОбратныйИндекс];
				Если ПараметрыИзЗапроса.Найти(СтрокаПараметров.Имя) = Неопределено Тогда
					ТаблицаПараметров.Удалить(СтрокаПараметров);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстСообщения = НСтр("ru='Ошибка. Не заполнен текст запроса.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СцТ_ВыполнитьЗапрос(СцТ_ГлавнаяФорма.ГлобальныеПараметры);
	
КонецПроцедуры

// Инициализация выполнения запроса
//
&НаСервере
Процедура СцТ_ВыполнитьЗапрос(СтруктураГлобальныхПараметров)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	
	// Эта проверка используется при сохранении
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		//СцТ_ДобавитьСообщениеПользователю(СцТ_СообщенияПользователю,
		//	НСтр("ru='Не заполнен текст запроса.'"),
		//	Отказ,
		//	"ТекстЗапроса");
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	
	Отказ = Ложь;
	СцТ_ОбновитьПараметрыЗапросаНаСервере(Отказ);
	
	// Обновление параметров. Все неустановленные параметры будут считаться пустыми
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресЛокальнойТаблицыСсылок = ПолучитьАдресТаблицыСсылокШагаДляВычисленияИстинныхЗначений();
	
	Для каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		
		ИстинноеЗначениеПараметра = МодульОбработки.СцТ_ПолучитьЗначение_НаСервере(
			СтрокаПараметров.Значение,
			АдресЛокальнойТаблицыСсылок,
			СтрокаПараметров.ТипУзла,
			СтруктураГлобальныхПараметров);
		
		Запрос.УстановитьПараметр(СтрокаПараметров.Имя, ИстинноеЗначениеПараметра);
	КонецЦикла;
	
	// Предусмотреть все возможные ошибки в запросе достаточно сложно
	// Предполагается, что запрос должен быть достаточно простым
	Попытка
		ПолученныйРезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Исключение
		ИнфОшибка = ИнформацияОбОшибке();
		//СцТ_ДобавитьСообщениеПользователю(СцТ_СообщенияПользователю,
		//	НСтр("ru = 'Ошибка при проверке запроса.
		//		|Краткое описание ошибки: '")
		//		+ КраткоеПредставлениеОшибки(ИнфОшибка)
		//		+ Символы.ПС
		//		+ НСтр("ru = 'Подробное описание ошибки: '")
		//		+ ПодробноеПредставлениеОшибки(ИнфОшибка),
		//	Отказ,
		//	"");
		Возврат;
	КонецПопытки;
	
	ДеревоЗначенийНаСервере = РеквизитФормыВЗначение("ДеревоЗначения");
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	
	УзелРезультата = ДеревоЗначенийНаСервере.Строки.Найти("РезультатЗапроса", "Имя", Истина);
	Если УзелРезультата = Неопределено Тогда
		УзелРезультата = ДеревоЗначенийНаСервере.Строки.Добавить();
		УзелРезультата.Имя        = "РезультатЗапроса";
		УзелРезультата.Синоним    = "Результат запроса";
		УзелРезультата.Активность = Истина;
		УзелРезультата.ТипУзла    = "РезультатЗапроса";
	КонецЕсли;
	
	УзелРезультата.Строки.Очистить();
	
	// Заполнение дерева по таблице
	МассивИдентификацииСсылок = Новый Массив;
	
	МодульОбработки.СцТ_ДобавитьТаблицуЗначенийВВеткуДерева_НаСервере(
		УзелРезультата,
		ПолученныйРезультатЗапроса,
		Неопределено,
		Новый Массив,
		"Проверить",,,,
		МассивИдентификацииСсылок,
		АдресТаблицыКлючей);
		
	ЗначениеВРеквизитФормы(ДеревоЗначенийНаСервере, "ДеревоЗначения");
	МодульОбработки.СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(ТаблицаСсылокШага, МассивИдентификацииСсылок);
	
	СцТ_ЗаполнитьТаблицуЗначениями(УзелРезультата);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страница_РезультатЗапроса;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

