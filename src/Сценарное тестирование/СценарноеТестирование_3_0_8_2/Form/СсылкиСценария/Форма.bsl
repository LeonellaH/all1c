
#Область ОбластьПеременных

&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

&НаКлиенте
Перем РежимСклейки;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	АдресТаблицыКлючей = Параметры.АдресТаблицыКлючей;
	
	АдресТаблицыСсылок = Параметры.АдресТаблицыСсылок;
	СцТ_ОбновитьОтображениеТаблицыСсылок_НаСервере(АдресТаблицыСсылок);
	
	РежимВыбора = Параметры.РежимВыбора;
	
	Если РежимВыбора Тогда
		Элементы.ТаблицаСсылок.ТолькоПросмотр = Истина;
		
		Элементы.ФормаВыбрать.Видимость         = Истина;
		Элементы.ФормаВыбрать.КнопкаПоУмолчанию = Истина;
		
		Элементы.ТС_КМ_ЗаменитьСсылкиВТесте.Видимость        = Ложь;
		Элементы.ТС_КМ_НастроитьКлючиИдентификации.Видимость = Ложь;
		Элементы.ТС_КМ_ОткрытьШаг.Видимость                  = Ложь;
		Элементы.ТС_КМ_ПодобратьСсылки.Видимость             = Ложь;
		
	Иначе
		Элементы.ТаблицаСсылок.ТолькоПросмотр = Ложь;
		
		Элементы.ФормаВыбрать.Видимость         = Ложь;
		Элементы.ФормаВыбрать.КнопкаПоУмолчанию = Ложь;
		
		Элементы.ТС_КМ_ЗаменитьСсылкиВТесте.Видимость        = Истина;
		Элементы.ТС_КМ_НастроитьКлючиИдентификации.Видимость = Истина;
		Элементы.ТС_КМ_ОткрытьШаг.Видимость                  = Истина;
		Элементы.ТС_КМ_ПодобратьСсылки.Видимость             = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьТаблицуСсылокИКлючей" Тогда
		
		СцТ_ОбновитьОтображениеТаблицыСсылок_НаСервере(Параметр);
		
	
	ИначеЕсли ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы_ТаблицаСсылок

&НаКлиенте
Процедура ТаблицаСсылокПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ТаблицаСсылок.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.СоответствиеСсылок) Тогда
		ДанныеСтроки.Пустая = Истина;
	Иначе
		ДанныеСтроки.Пустая = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСсылокПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТаблицаСсылок.ТекущиеДанные;
	
	//Элементы.ТаблицаСсылокСоответствиеСсылок.ВыбиратьТип = (НЕ ЗначениеЗаполнено(ТекущиеДанные.СоответствиеСсылок));
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПодобратьСсылки(Команда)
	
	МассивВыделенныхСтрок = Элементы.ТаблицаСсылок.ВыделенныеСтроки;
	СцТ_ПодобратьСсылкиДляВыделенныхСтрок_НаСервере(МассивВыделенныхСтрок, СцТ_ГлавнаяФорма.ГлобальныеПараметры);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Подбор ссылок'"),,
		НСтр("ru = 'Подбор ссылок выполнен'"),
		ВладелецФормы.КартинкаИнформация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьСсылкиВТесте(Команда)
	
	КоличествоСсылок = Элементы.ТаблицаСсылок.ВыделенныеСтроки.Количество();
	
	Если КоличествоСсылок = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Нет выделенных ссылок'");
		Сообщение.Поле  = "ТаблицаСсылок";
		Сообщение.Сообщить();
		Возврат;
	ИначеЕсли КоличествоСсылок > 1 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Замена ссылок выполняется по одной'");
		Сообщение.Поле  = "ТаблицаСсылок";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ДанныеУдаляемойСсылки = Элементы.ТаблицаСсылок.ТекущиеДанные;
	
	ПараметрыФормыСсылок = Новый Структура;
	ПараметрыФормыСсылок.Вставить("АдресТаблицыСсылок"           , АдресТаблицыСсылок);
	ПараметрыФормыСсылок.Вставить("АдресТаблицыКлючей"           , АдресТаблицыКлючей);
	ПараметрыФормыСсылок.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормыСсылок.Вставить("РежимВыбора", Истина);
	
	Если ПараметрыФормыСсылок <> Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ОбработатьВоспросЗаменыСсылок", ЭтотОбъект, ДанныеУдаляемойСсылки);
		ФормаТаблицыСсылок = ОткрытьФорму(ПутьКФормам + "СсылкиСценария",
			ПараметрыФормыСсылок,
			ЭтотОбъект,
			Истина,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		ФормаТаблицыСсылок.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
		ФорматаблицыСсылок.Заголовок = НСтр("ru = 'Выбор ссылки, на которую будет выполнена замена'");
	КонецЕсли;
	
		//
		//ТекстВопроса = НСтр("ru = 'Заменить <COUNT> ссылок в тесте?'");
		//ТекстВопроса = СтрЗаменить(ТекстВопроса, "<COUNT>", Строка(КоличествоСсылок));
		//ПоказатьВопрос(,
		//	ТекстВопроса,
		//	РежимДиалогаВопрос.ДаНет,
		//	0);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКлючиИдентификации(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаСсылок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПФ = Новый Структура();
	ПФ.Вставить("ТипМД"             , ТекущиеДанные.ТипМД);
	ПФ.Вставить("ИмяМД"             , ТекущиеДанные.ИмяМД);
	ПФ.Вставить("Идентификатор"     , ТекущиеДанные.Ссылка);
	ПФ.Вставить("СинонимМД"         , ТекущиеДанные.СинонимМД);
	ПФ.Вставить("Представление"     , ТекущиеДанные.Представление);
	ПФ.Вставить("ПоискПоЗапросу"    , ТекущиеДанные.ПоискПоЗапросу);
	ПФ.Вставить("ТекстЗапроса"      , ТекущиеДанные.ТекстЗапроса);
	
	МС = Новый Массив; // МассивСтруктур
	Для каждого СтрСИ ИЗ ТекущиеДанные.СтруктураИдентификации Цикл
		СИ = Новый Структура; // Структура идентификации
		СИ.Вставить("Имя"            , СтрСИ.Имя);
		СИ.Вставить("Представление"  , СтрСИ.Представление);
		СИ.Вставить("Значение"       , СтрСИ.Значение);
		СИ.Вставить("СокрТипЗначения", СтрСИ.СокрТипЗначения);
		
		МС.Добавить(СИ);
	КонецЦикла;
	
	ПФ.Вставить("СтруктураИдентификации", МС);
	
	ПФ.Вставить("АдресТаблицыКлючей" , СцТ_ГлавнаяФорма.АдресТаблицыКлючей);
	ПФ.Вставить("СтруктураПараметров", СцТ_ГлавнаяФорма.ГлобальныеПараметры);
	
	ПФ.Вставить("РежимСовместимости838" , СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПослеНастройкиСтруктурыИдентификации", ЭтотОбъект, ТекущиеДанные);
	
	ФормаНастройкиСИ = ОткрытьФорму(ПутьКФормам + "КлючиИдентификации", ПФ, ЭтотОбъект,,,,ОбработчикОповещения);
	
	ФормаНастройкиСИ.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНастройкиСтруктурыИдентификации(Результат, ТекущиеДанныеСтроки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Изменение данных этой формы
	ТекущиеДанныеСтроки.Представление  = Результат.Представление;
	ТекущиеДанныеСтроки.Ссылка         = Результат.Идентификатор;
	ТекущиеДанныеСтроки.ТипМД          = Результат.ТипМД;
	ТекущиеДанныеСтроки.ИмяМД          = Результат.ИмяМД;
	ТекущиеДанныеСтроки.СинонимТипаМД  = СцТ_СинонимТипаМетаданных(Результат.ТипМД);
	ТекущиеДанныеСтроки.СинонимМД      = Результат.СинонимМД;
	ТекущиеДанныеСтроки.ПоискПоЗапросу = Результат.ПоискПоЗапросу;
	ТекущиеДанныеСтроки.ТекстЗапроса   = Результат.ТекстЗапроса;
	
	ТекущиеДанныеСтроки.СтруктураИдентификации.Очистить();
	
	Для каждого СтрИдент Из Результат.СтруктураИдентификации Цикл
		НовыйКлюч = ТекущиеДанныеСтроки.СтруктураИдентификации.Добавить();
		НовыйКлюч.Имя             = СтрИдент.Имя;
		НовыйКлюч.Значение        = СтрИдент.Значение;
		НовыйКлюч.СокрТипЗначения = СтрИдент.СокрТипЗначения;
	КонецЦикла;
	
	СцТ_СохранитьТаблицуСсылок_НаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьШаг(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаСсылок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокШагов = ТекущиеДанные.МассивУИШ.Скопировать();
	
	СцТ_ИтерационноПодобратьНазваниеШагов(СписокШагов, ВладелецФормы.БлокСценария);
	
	// Удаление неподобранных шагов
	КоличествоШагов = СписокШагов.Количество();
	Для ОбратныйИндекс = 1 По КоличествоШагов Цикл
		ТекЭлемент = СписокШагов[КоличествоШагов - ОбратныйИндекс];
		Если НЕ ТекЭлемент.Пометка Тогда
			СписокШагов.Удалить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	СписокШагов.ПоказатьВыборЭлемента(
		Новый ОписаниеОповещения("СцТ_ОбработатьВыборЭлементаСпискаШагов", ЭтотОбъект),
		НСтр("ru = 'Шаги сценария, содержащие ссылку'"));
	
КонецПроцедуры


#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
Процедура СцТ_ИтерационноПодобратьНазваниеШагов(СписокШагов, ВеткаСценария)
	
	Для каждого УзелСценария Из ВеткаСценария.ПолучитьЭлементы() Цикл
		ЭлементСписка = СписокШагов.НайтиПоЗначению(УзелСценария.УИШ);
		Если ЭлементСписка <> Неопределено Тогда
			ПредставлениеШага = Строка(УзелСценария.НомерШага) + " - " + УзелСценария.Наименование;
			ЭлементСписка.Значение      = УзелСценария.ПолучитьИдентификатор();
			ЭлементСписка.Представление = ПредставлениеШага;
			ЭлементСписка.Пометка       = Истина;
		КонецЕсли;
		
		СцТ_ИтерационноПодобратьНазваниеШагов(СписокШагов, УзелСценария);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает нажжатие кнопки пользователем в диалоге вопроса
// о замене выбранных ссылок теста
// Параметры
//	КодВозврата - код нажатой клавиши;
//	ДопПараметры - дополнительные параметры;
//
&НаКлиенте
Процедура СцТ_ОбработатьВоспросЗаменыСсылок(Результат, ДанныеУдаляемойСсылки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НужныеСтроки = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка", Результат.ИдентификаторСсылки));
	
	Если НужныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось найти строку-приемник'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтрокаПриемник = Неопределено;
	Для каждого НужнаяСтрока Из НужныеСтроки Цикл
		Если Строка(НужнаяСтрока.МассивУИШ) = Строка(Результат.МассивУИШ) Тогда
			СтрокаПриемник = НужнаяСтрока;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаПриемник = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось найти строку-приемник'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если СтрокаПриемник = ДанныеУдаляемойСсылки Тогда
		ТекстПредупреждения = НСтр("ru = 'Строка не может быть заменена на саму себя'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ЗаменитьСсылкиВТестеПоТаблицеЗамены(ДанныеУдаляемойСсылки.Ссылка, СтрокаПриемник.Ссылка, ДанныеУдаляемойСсылки.МассивУИШ);
	
	// перенос сведений об идентификаторах узлов
	Для каждого ЭлементСписка Из ДанныеУдаляемойСсылки.МассивУИШ ЦИкл
		Если СтрокаПриемник.МассивУИШ.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено Тогда
			СтрокаПриемник.МассивУИШ.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Удаление строки
	ТаблицаСсылок.Удалить(ДанныеУдаляемойСсылки);
	
	Элементы.ТаблицаСсылок.ТекущаяСтрока = СтрокаПриемник.ПолучитьИдентификатор();
	
	СцТ_СохранитьТаблицуСсылок_НаСервере();
	
КонецПроцедуры

// Обрабатывает выбор шага из списка шагов
// Параметры
//	ВыбранноеЗначениеЩага - выбранный элемент списка;
//	ДопПараметры - дополнительные параметры;
//
&НаКлиенте
Процедура СцТ_ОбработатьВыборЭлементаСпискаШагов(ВыбранноеЗначениеЩага, ДопПараметры) Экспорт
	
	// Открытие шага
	Если ВыбранноеЗначениеЩага <> Неопределено Тогда
		СцТ_ГлавнаяФорма.СцТ_ОткрытьФормуНастройкиШага(ВыбранноеЗначениеЩага.Значение);
	КонецЕсли;
	
КонецПроцедуры

// Процедура отображения данных в таблице формы
// Параметры
// ДанныеДляОбновления - структура с данными
&НаСервере
Процедура СцТ_ОбновитьОтображениеТаблицыСсылок_НаСервере(АдресТаблицыСсылок)
	
	Если НЕ ПустаяСтрока(АдресТаблицыСсылок) Тогда
		ИстиннаяТаблицаСсылок = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
		
		ТаблицаСсылок.Очистить();
		ТипСписокЗначений   = Тип("СписокЗначений");
		ТипМассив           = Тип("Массив");
		
		ПустыеСсылкиТиповМД = Новый Соответствие;
		Для каждого СтрокаТаблицы Из ИстиннаяТаблицаСсылок Цикл
			
			НоваяСтрока = ТаблицаСсылок.Добавить();
			НоваяСтрока.Ссылка                  = СтрокаТаблицы.Ссылка;
			НоваяСтрока.ТипМД                   = СтрокаТаблицы.ТипМД;
			НоваяСтрока.ИмяМД                   = СтрокаТаблицы.ИмяМД;
			НоваяСтрока.Представление           = СтрокаТаблицы.Представление;
			НоваяСтрока.СоответствиеСсылок      = СтрокаТаблицы.СоответствиеСсылок;
			НоваяСтрока.ПоискПоЗапросу          = СтрокаТаблицы.ПоискПоЗапросу;
			НоваяСтрока.ТекстЗапроса            = СтрокаТаблицы.ТекстЗапроса;
			
			НоваяСтрока.СинонимТипаМД           = СцТ_СинонимТипаМетаданных(СтрокаТаблицы.ТипМД);
			НоваяСтрока.СинонимМД               = СцТ_СинонимМД(СтрокаТаблицы.ТипМД, СтрокаТаблицы.ИмяМД);
			
			Для каждого СтрокаИдентификации Из СтрокаТаблицы.СтруктураИдентификации Цикл
				НоваяСтрокаИдентификации = НоваяСтрока.СтруктураИдентификации.Добавить();
				НоваяСтрокаИдентификации.Имя             = СтрокаИдентификации.Имя;
				НоваяСтрокаИдентификации.Представление   = СтрокаИдентификации.Представление;
				НоваяСтрокаИдентификации.Значение        = СтрокаИдентификации.Значение;
				НоваяСтрокаИдентификации.СокрТипЗначения = СтрокаИдентификации.СокрТипЗначения;
			КонецЦикла;
			
			ТипМУИШ = ТипЗнч(СтрокаТаблицы.МассивУИШ);
			Если ТипМУИШ = ТипМассив Тогда
				НоваяСтрока.МассивУИШ.ЗагрузитьЗначения(СтрокаТаблицы.МассивУИШ);
			ИначеЕсли ТипМУИШ = ТипСписокЗначений Тогда
				НоваяСтрока.МассивУИШ = СтрокаТаблицы.МассивУИШ;
			КонецЕсли;
			
			// Приведение типа соответсвия ссылки
			Если НоваяСтрока.СоответствиеСсылок = Неопределено Тогда
				
				ПолноеИмяМДВРег   = ВРег(НоваяСтрока.ТипМД + "." + НоваяСтрока.ИмяМД);
				ВычисленнаяПустая = ПустыеСсылкиТиповМД[ПолноеИмяМДВРег];
				Если ВычисленнаяПустая = Неопределено Тогда
					Попытка
						ВычисленнаяПустая = Вычислить(ПолноеИмяМДВРег + ".ПустаяСсылка()");
						ПустыеСсылкиТиповМД[ПолноеИмяМДВРег] = ВычисленнаяПустая;
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				Если ВычисленнаяПустая <> Неопределено Тогда
					НоваяСтрока.СоответствиеСсылок = ВычисленнаяПустая;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура подбора ссылок в информационной базе
// для всех выделенных строк таблицы ссылок
&НаСервере
Процедура СцТ_ПодобратьСсылкиДляВыделенныхСтрок_НаСервере(Знач МассивВыделенныхСтрок, Знач ГлобальныеПараметры)
	
	ПустыеСсылкиТиповМД = Новый Соответствие;
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	
	Для каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
		
		ДанныеСтроки = ТаблицаСсылок.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ЗначениеСсылки = МодульОбработки.ПолучитьЗначениеСсылкиПоСтрокеИдентификации(ДанныеСтроки, ГлобальныеПараметры);
		
		ДанныеСтроки.СоответствиеСсылок = ЗначениеСсылки;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготовка таблицы к сохранению  - удаление лишних колонок
// и сохранение во временном хранилище
// так как адрес хранилища не изменился, то ничего делать не нужно
&НаСервере
Процедура СцТ_СохранитьТаблицуСсылок_НаСервере()
	
	ТаблицаСсылокНаСервере = РеквизитФормыВЗначение("ТаблицаСсылок");
	КолонкиТС = ТаблицаСсылокНаСервере.Колонки;
	КолонкиТС.Удалить("СинонимТипаМД");
	КолонкиТС.Удалить("СинонимМД");
	КолонкиТС.Удалить("Примечание");
	КолонкиТС.Удалить("Пустая");
	
	КолонкиТС.Добавить("МассивУИШКАКМассив");
	
	// Преобразование списка значений ссылок в массив
	Для каждого СтрТС Из ТаблицаСсылокНаСервере Цикл
		СтрТС.МассивУИШКАКМассив = СтрТС.МассивУИШ.ВыгрузитьЗначения();
	КонецЦикла;
	
	КолонкиТС.Удалить("МассивУИШ");
	КолонкиТС.МассивУИШКАКМассив.Имя = "МассивУИШ";
	
	// Для однообразной и корректной работы пустые ссылки заменяются на Неопределено
	Для каждого СтрТаблицыСсылок Из ТаблицаСсылокНаСервере Цикл
		Если СтрТаблицыСсылок.СоответствиеСсылок <> Неопределено
			И СтрТаблицыСсылок.СоответствиеСсылок.Пустая() Тогда
			СтрТаблицыСсылок.СоответствиеСсылок = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаСсылокНаСервере, АдресТаблицыСсылок);
	
КонецПроцедуры

// Функция для преобразования типа метаданных
// в пользовательское представление
&НаКлиентеНаСервереБезКонтекста
Функция СцТ_СинонимТипаМетаданных(ИмяТипМетаданных)
	
	Если ИмяТипМетаданных = "Справочники" Тогда
		Возврат НСтр("ru='Справочник'");
	ИначеЕсли ИмяТипМетаданных = "Документы" Тогда
		Возврат НСтр("ru='Документ'");
	ИначеЕсли ИмяТипМетаданных = "ПланыВидовХарактеристик" Тогда
		Возврат НСтр("ru='План видов характеристик'");
	ИначеЕсли ИмяТипМетаданных = "ПланыСчетов" Тогда
		Возврат НСтр("ru='План счетов'");
	ИначеЕсли ИмяТипМетаданных = "ПланыВидовРасчета" Тогда
		Возврат НСтр("ru='План видов расчета'");
	ИначеЕсли ИмяТипМетаданных = "БизнесПроцессы" Тогда
		Возврат НСтр("ru='Бизнес-процесс'");
	ИначеЕсли ИмяТипМетаданных = "Задачи" Тогда
		Возврат НСтр("ru='Задача'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Функция определения синонима объекта метаданных
// для отображения в таблице
&НаСервере
Функция СцТ_СинонимМД(ТипМД, ИмяМД)
	
	Попытка
		Если ПустаяСтрока(ТипМД) ИЛИ ПустаяСтрока(ИмяМД) Тогда
			Возврат "";
		Иначе
			Возврат Метаданные[ТипМД][ИмяМД].Синоним;
		КонецЕсли;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура Выбрать(Команда)
	
	ВозвращаемаяСтруктура = ПодготовитьСтруктуруОтветаПриВыборе();
	
	Если ВозвращаемаяСтруктура <> Неопределено Тогда
		Закрыть(ВозвращаемаяСтруктура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСсылокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если РежимВыбора Тогда
		СтандартнаяОбработка = Ложь;
		
		ВозвращаемаяСтруктура = ПодготовитьСтруктуруОтветаПриВыборе();
		
		Если ВозвращаемаяСтруктура <> Неопределено Тогда
			Закрыть(ВозвращаемаяСтруктура);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСтруктуруОтветаПриВыборе()
	
	ТекущиеДанные = Элементы.ТаблицаСсылок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ИдентификаторСсылки", ТекущиеДанные.Ссылка);
	СтруктураОтвета.Вставить("МассивУИШ"          , ТекущиеДанные.МассивУИШ.Скопировать());
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура Скопировать(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаСсылок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаСсылок.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные,,"СтруктураИдентификации, МассивУИШ");
	
	НоваяСтрока.МассивУИШ.ЗагрузитьЗначения(ТекущиеДанные.МассивУИШ.ВыгрузитьЗначения());
	
	Для каждого СтрИ Из ТекущиеДанные.СтруктураИдентификации Цикл
		СИ = НоваяСтрока.СтруктураИдентификации.Добавить();
		ЗаполнитьЗначенияСвойств(СИ, СтрИ);
	КонецЦикла;
	
	Элементы.ТаблицаСсылок.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	СцТ_СохранитьТаблицуСсылок_НаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранныеПривязкиКШагам(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаСсылок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокШагов = ТекущиеДанные.МассивУИШ.Скопировать();
	
	СцТ_ИтерационноПодобратьНазваниеШаговДляУдаления(СписокШагов, СцТ_ГлавнаяФорма.БлокСценария);
	
	// Удаление неподобранных шагов
	КоличествоШагов = СписокШагов.Количество();
	Для ОбратныйИндекс = 1 По КоличествоШагов Цикл
		ТекЭлемент = СписокШагов[КоличествоШагов - ОбратныйИндекс];
	КонецЦикла;
	
	СписокШагов.ПоказатьОтметкуЭлементов(
		Новый ОписаниеОповещения("СцТ_ОбработатьУдалениеШаговИзПривязкиССылок", ЭтотОбъект, ТекущиеДанные),
		НСтр("ru = 'Шаги сценария, содержащие ссылку'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОбработатьУдалениеШаговИзПривязкиССылок(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНеотмеченные = Ложь;
	Для каждого ЭлементСписка Из Результат Цикл
		Если НЕ ЭлементСписка.Пометка Тогда
			ЕстьНеотмеченные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьНеотмеченные Тогда
		ТекстПредупреждения = НСтр("ru = 'Все шаги не могут быть удалены из привязки. Нужгно хотя бы один шаг оставить неотмеченным'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Для каждого ЭС Из Результат Цикл
		УдаляемыйУИ = ТекущиеДанные.МассивУИШ.НайтиПоЗначению(ЭС.Значение);
		Если УдаляемыйУИ <> Неопределено Тогда
			ТекущиеДанные.МассивУИШ.Удалить(УдаляемыйУИ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ИтерационноПодобратьНазваниеШаговДляУдаления(СписокШагов, ВеткаСценария)
	
	Для каждого УзелСценария Из ВеткаСценария.ПолучитьЭлементы() Цикл
		ЭлементСписка = СписокШагов.НайтиПоЗначению(УзелСценария.УИШ);
		Если ЭлементСписка <> Неопределено Тогда
			ПредставлениеШага = Строка(УзелСценария.НомерШага) + " - " + УзелСценария.Наименование;
			ЭлементСписка.Представление = ПредставлениеШага;
		КонецЕсли;
		
		СцТ_ИтерационноПодобратьНазваниеШагов(СписокШагов, УзелСценария);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСсылокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры



#КонецОбласти
