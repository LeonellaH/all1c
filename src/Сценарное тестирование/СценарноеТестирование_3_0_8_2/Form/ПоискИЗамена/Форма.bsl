
#Область Переменные

&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

#КонецОбласти

#Область ОбработчикиСобытий_Формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Параметры_СписокТиповШагов.Доступность = Параметры_ТолькоВШагахУказанныхТипов;
	
	ЧтоИскать = "";
	Элементы.ЧтоИскать.ВыбиратьТип = Ложь;
	
	УправлениеДоступностьюЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если  НЕ ОбластьПоиска_Данные
		И НЕ ОбластьПоиска_Комментарий
		И НЕ ОбластьПоиска_Наименование
		И НЕ ОбластьПоиска_Описание Тогда
		
		ОбластьПоиска_Наименование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Элементов_Формы

&НаКлиенте
Процедура Параметры_ТолькоВШагахУказанныхТиповПриИзменении(Элемент)
	
	Элементы.Параметры_СписокТиповШагов.Доступность = Параметры_ТолькоВШагахУказанныхТипов;
	
КонецПроцедуры

&НаКлиенте
Процедура Параметры_СписокТиповШаговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДляВыбора = СцТ_ГлавнаяФорма.СписокТиповШагов.Скопировать();
	
	Для каждого ЭлементТипа Из Параметры_СписокТиповШагов Цикл
		НайденныйЭлемент = СписокДляВыбора.НайтиПоЗначению(ЭлементТипа.Значение);
		Если НайденныйЭлемент <> Неопределено Тогда
			НайденныйЭлемент.Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОписаниеоповещенияОбОтметкеСписка", ЭтотОбъект);
	СписокДляВыбора.ПоказатьОтметкуЭлементов(ОписаниеОповещения, НСтр("ru = ''"));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтоИскатьОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.ВыбиратьТип = Истина;
	
	УправлениеДоступностьюЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтоИскатьПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЧтоИскать) Тогда
		Элементы.ЧтоИскать.ВыбиратьТип = Ложь;
		Элементы.ЗаменитьНа.ВыбиратьТип = Ложь;
	КонецЕсли;
	
	УправлениеДоступностьюЭлементов(ЭтотОбъект);
	
	РезультатПоиска.ПолучитьЭлементы().Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Текущиеданные = Элемент.Текущиеданные;
	Если Текущиеданные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.РезультатПоискаОтметка Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТекущиеДанные.Номер = 0 Тогда
		ТекущиеДанные = Текущиеданные.ПолучитьРодителя();
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ОткрытьФормуНастройкиШага(Текущиеданные.ИдентификаторВДереве);
	
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиКоманд

&НаКлиенте
Процедура УстановитьФлажкиВОбласти(Команда)
	
	ОбластьПоиска_Данные       = Истина;
	ОбластьПоиска_Комментарий  = Истина;
	ОбластьПоиска_Наименование = Истина;
	ОбластьПоиска_Описание     = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьФлажкиВОбласти(Команда)
	
	ОбластьПоиска_Данные       = Ложь;
	ОбластьПоиска_Комментарий  = Ложь;
	ОбластьПоиска_Наименование = Ложь;
	ОбластьПоиска_Описание     = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНайти(Команда)
	
	Если  НЕ ОбластьПоиска_Данные
		И НЕ ОбластьПоиска_Комментарий
		И НЕ ОбластьПоиска_Наименование
		И НЕ ОбластьПоиска_Описание Тогда
		
		СП = Новый СообщениеПользователю;
		СП.Текст       = НСтр("ru = 'Не задана область поиска'");
		СП.ПутьКДанным = "ОбластьПоиска_Наименование";
		СП.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЧтоИскать) Тогда
		СП = Новый СообщениеПользователю;
		СП.Текст       = НСтр("ru = 'Не задано значение для поиска'");
		СП.ПутьКДанным = "ЧтоИскать";
		СП.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	РезультатПоиска.ПолучитьЭлементы().Очистить();
	ИтерационныйПоискВДереве(СцТ_ГлавнаяФорма.БлокСценария);
	
	Если РезультатПоиска.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Ничего не найдено.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыделенные(Команда)
	
	УстановитьОтметкуВыделенныхВДереве(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтметкуВыделенных(Команда)
	
	УстановитьОтметкуВыделенныхВДереве(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьОтмеченныеСтрокиВДереве(Команда)
	
	ВыделитьОтмеченныеСтрокиВДеревеСценария(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКВыделеннымШагам(Команда)
	
	ВыделитьОтмеченныеСтрокиВДеревеСценария(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаЗаменить(Команда)
	
	Для каждого СтрокаРезультата Из РезультатПоиска.ПолучитьЭлементы() Цикл
		Если НЕ СтрокаРезультата.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки = СцТ_ГлавнаяФорма.БлокСценария.НайтиПоИдентификатору(СтрокаРезультата.ИдентификаторВДереве);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Непосредственная замена
		
		Если ОбластьПоиска_Наименование Тогда
			СцТ_ЗаменитьВхождение(ДанныеСтроки.Наименование);
		КонецЕсли;
		
		Если ОбластьПоиска_Описание Тогда
			СцТ_ЗаменитьВхождение(ДанныеСтроки.Описание);
			СцТ_ЗаменитьВхождение(ДанныеСтроки.Автоописание);
		КонецЕсли;
		
		Если ОбластьПоиска_Комментарий Тогда
			СцТ_ЗаменитьВхождение(ДанныеСтроки.Комментарий);
		КонецЕсли;
		
		Если ОбластьПоиска_Данные Тогда
			ИтерационноЗаменитьВхождение(ДанныеСтроки.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	СцТ_ГлавнаяФорма.Модифицированность = Истина;
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
Процедура ОписаниеоповещенияОбОтметкеСписка(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры_СписокТиповШагов.Очистить();
	
	Для каждого ЭлементОтмеченногоСписка Из Результат Цикл
		Если ЭлементОтмеченногоСписка.Пометка Тогда
			Параметры_СписокТиповШагов.Добавить(ЭлементОтмеченногоСписка.Значение, ЭлементОтмеченногоСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюЭлементов(УпрФорма)
	
	Если УпрФорма.ЧтоИскать = Неопределено Тогда
		УпрФорма.Элементы.Параметры_ИскатьСловоЦеликом.Доступность = Ложь;
		УпрФорма.Элементы.Параметры_УчитыватьРегистр.Доступность   = Ложь;
		
		УпрФорма.Элементы.ОбластьПоиска_Наименование.Доступность = Ложь;
		УпрФорма.Элементы.ОбластьПоиска_Данные.Доступность       = Ложь;
		УпрФорма.Элементы.ОбластьПоиска_Описание.Доступность     = Ложь;
		УпрФорма.Элементы.ОбластьПоиска_Комментарий.Доступность  = Ложь;
		
	ИначеЕсли ТипЗнч(УпрФорма.ЧтоИскать) = Тип("Строка") Тогда
		УпрФорма.Элементы.Параметры_ИскатьСловоЦеликом.Доступность = Истина;
		УпрФорма.Элементы.Параметры_УчитыватьРегистр.Доступность   = Истина;
		
		УпрФорма.Элементы.ОбластьПоиска_Наименование.Доступность = Истина;
		УпрФорма.Элементы.ОбластьПоиска_Данные.Доступность       = Истина;
		УпрФорма.Элементы.ОбластьПоиска_Описание.Доступность     = Истина;
		УпрФорма.Элементы.ОбластьПоиска_Комментарий.Доступность  = Истина;
		
	Иначе
		// Ссылки, числа, даты и др
		УпрФорма.Элементы.Параметры_ИскатьСловоЦеликом.Доступность = Ложь;
		УпрФорма.Элементы.Параметры_УчитыватьРегистр.Доступность   = Ложь;
		
		УпрФорма.Элементы.ОбластьПоиска_Наименование.Доступность = Ложь;
		УпрФорма.Элементы.ОбластьПоиска_Данные.Доступность       = Ложь;
		УпрФорма.Элементы.ОбластьПоиска_Описание.Доступность     = Ложь;
		УпрФорма.Элементы.ОбластьПоиска_Комментарий.Доступность  = Ложь;
		
		УпрФорма.Параметры_ИскатьСловоЦеликом = Истина;
		УпрФорма.Параметры_УчитыватьРегистр   = Истина;
		
		УпрФорма.ОбластьПоиска_Наименование = Ложь;
		УпрФорма.ОбластьПоиска_Данные       = Истина;
		УпрФорма.ОбластьПоиска_Описание     = Ложь;
		УпрФорма.ОбластьПоиска_Комментарий  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтерационныйПоискВДереве(РодительскийУзел)
	
	Для каждого ПодчиненныйУзел Из РодительскийУзел.ПолучитьЭлементы() Цикл
		
		Если Параметры_ТолькоВАктивныхШагах И НЕ ПодчиненныйУзел.Активность
			ИЛИ Параметры_ТолькоВШагахУказанныхТипов И Параметры_СписокТиповШагов.НайтиПоЗначению(ПодчиненныйУзел.ТипШага) = Неопределено Тогда
			ВыполнятьПоискВШаге = Ложь;
		Иначе
			ВыполнятьПоискВШаге = Истина;
		КонецЕсли;
		
		Если ВыполнятьПоискВШаге Тогда
			
			Если ОбластьПоиска_Наименование Тогда
				Если СцТ_НайденоВхождение(ПодчиненныйУзел.Наименование) Тогда
					ПредставлениеОбласти = НСтр("ru = 'Наименование шага'");
					СцТ_ДобавитьСтрокуВДеревоРезультата(ПодчиненныйУзел, ПредставлениеОбласти);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбластьПоиска_Описание Тогда
				Если СцТ_НайденоВхождение(ПодчиненныйУзел.Описание) ИЛИ СцТ_НайденоВхождение(ПодчиненныйУзел.Автоописание) Тогда
					ПредставлениеОбласти = НСтр("ru = 'Описание'");
					СцТ_ДобавитьСтрокуВДеревоРезультата(ПодчиненныйУзел, ПредставлениеОбласти);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбластьПоиска_Комментарий Тогда
				Если СцТ_НайденоВхождение(ПодчиненныйУзел.Комментарий) Тогда
					ПредставлениеОбласти = НСтр("ru = 'Комментарий'");
					СцТ_ДобавитьСтрокуВДеревоРезультата(ПодчиненныйУзел, ПредставлениеОбласти);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбластьПоиска_Данные Тогда
				КоличествоВхождений = ИтерационноПроверитьВхождениеВВеткеДерева(ПодчиненныйУзел.Значение);
				
				Если КоличествоВхождений > 0 Тогда
					ПредставлениеОбласти = НСтр("ru = 'Данные (%1)'");
					ПредставлениеОбласти = СтрЗаменить(ПредставлениеОбласти, "%1", Строка(КоличествоВхождений));
					СцТ_ДобавитьСтрокуВДеревоРезультата(ПодчиненныйУзел, ПредставлениеОбласти);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИтерационныйПоискВДереве(ПодчиненныйУзел);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_НайденоВхождение(Знач МестоПоиска)
	
	ЕстьВхождение = Ложь;
	
	Если ТипЗнч(ЧтоИскать) <> ТипЗнч(МестоПоиска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ЧтоИскать) = Тип("Строка") Тогда
		
		Если Параметры_ИскатьСловоЦеликом Тогда
			Если НЕ Параметры_УчитыватьРегистр Тогда
				СтрокаПоиска = ВРег(МестоПоиска);
				СтрокаИскать = ВРег(ЧтоИскать);
			Иначе
				СтрокаПоиска = МестоПоиска;
				СтрокаИскать = ЧтоИскать;
			КонецЕсли;
			
			Если СтрокаПоиска = СтрокаИскать Тогда
				ЕстьВхождение = Истина;;
			КонецЕсли;
			
		Иначе
			Если НЕ Параметры_УчитыватьРегистр Тогда
				СтрокаПоиска = ВРег(МестоПоиска);
				СтрокаИскать = ВРег(ЧтоИскать);
			Иначе
				СтрокаПоиска = МестоПоиска;
				СтрокаИскать = ЧтоИскать;
			КонецЕсли;
			
			НакопленныйСдвиг = 0;
			
			Если Найти(СтрокаПоиска, СтрокаИскать) > 0 Тогда
				ЕстьВхождение = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		// Имеем дело с сылкой, дато или числом
		Если ЧтоИскать = МестоПоиска Тогда
			ЕстьВхождение = Истина;
		Иначе
			ЕстьВхождение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьВхождение;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ДобавитьСтрокуВДеревоРезультата(УзелДерева, ОбластьПоиска)
	
	ИдентификаторУЗла = УзелДерева.ПолучитьИдентификатор();
	
	НужныйУзел = Неопределено;
	Для каждого ТекУзел Из РезультатПоиска.ПолучитьЭлементы() Цикл
		Если ТекУзел.ИдентификаторВДереве = ИдентификаторУЗла Тогда
			НужныйУзел = ТекУзел;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужныйУзел = Неопределено Тогда
		
		НужныйУзел = РезультатПоиска.ПолучитьЭлементы().Добавить();
		НужныйУзел.ИдентификаторВДереве = ИдентификаторУзла;
		НужныйУзел.Наименование = УзелДерева.Наименование;
		НужныйУзел.Номер        = УзелДерева.НомерШага;
		НужныйУзел.Отметка      = Истина;
		
	КонецЕсли;
	
	СтрокаДетализации = НужныйУзел.ПолучитьЭлементы().Добавить();
	СтрокаДетализации.Наименование = ОбластьПоиска;
	
КонецПроцедуры

&НаКлиенте
Функция ИтерационноПроверитьВхождениеВВеткеДерева(РодительскаяВетка)
	
	КоличествоСовпадений = 0;
	Для каждого ПодчиненнаяВетка Из РодительскаяВетка.ПолучитьЭлементы() Цикл
		
		// Перебор всех проверяемых полей
		Если СцТ_НайденоВхождение(ПодчиненнаяВетка.Имя)
			ИЛИ СцТ_НайденоВхождение(ПодчиненнаяВетка.Синоним)
			ИЛИ СцТ_НайденоВхождение(ПодчиненнаяВетка.Значение)
			ИЛИ СцТ_НайденоВхождение(ПодчиненнаяВетка.Представление)
			ИЛИ СцТ_НайденоВхождение(ПодчиненнаяВетка.Действие)
			ИЛИ СцТ_НайденоВхождение(ПодчиненнаяВетка.Скрипт)
			ИЛИ СцТ_НайденоВхождение(ПодчиненнаяВетка.ТипУзла) Тогда
			КоличествоСовпадений = КоличествоСовпадений + 1;
		КонецЕсли;
		
		КоличествоВПодчиненных = ИтерационноПроверитьВхождениеВВеткеДерева(ПодчиненнаяВетка);
		КоличествоСовпадений = КоличествоСовпадений + КоличествоВПодчиненных;
	КонецЦикла;
	
	Возврат КоличествоСовпадений;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтметкуВыделенныхВДереве(ЗначениеОтметки)
	
	МассивВыделенных = Элементы.РезультатПоиска.ВыделенныеСтроки;
	
	Для каждого Идентификатор Из МассивВыделенных Цикл
		ДанныеСтроки = РезультатПоиска.НайтиПоИдентификатору(Идентификатор);
		Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Номер = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки.Отметка = ЗначениеОтметки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ЗаменитьВхождение(МестоПоиска)
	
	Если ТипЗнч(ЧтоИскать) <> ТипЗнч(МестоПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЧтоИскать) = Тип("Строка") Тогда
		
		Если Параметры_ИскатьСловоЦеликом Тогда
			Если НЕ Параметры_УчитыватьРегистр Тогда
				СтрокаПоиска = ВРег(МестоПоиска);
				СтрокаИскать = ВРег(ЧтоИскать);
			Иначе
				СтрокаПоиска = МестоПоиска;
				СтрокаИскать = ЧтоИскать;
			КонецЕсли;
			
			Если СтрокаПоиска = СтрокаИскать Тогда
				МестоПоиска = ЗаменитьНа;
			КонецЕсли;
			
		Иначе
			Если НЕ Параметры_УчитыватьРегистр Тогда
				СтрокаПоиска = ВРег(МестоПоиска);
				СтрокаИскать = ВРег(ЧтоИскать);
			Иначе
				СтрокаПоиска = МестоПоиска;
				СтрокаИскать = ЧтоИскать;
			КонецЕсли;
			
			НакопленныйСдвиг = 0;
			
			Пока Найти(СтрокаПоиска, СтрокаИскать) > 0 Цикл
				НачалоВхождения = Найти(СтрокаПоиска, СтрокаИскать);
				
				СтрокаПоиска = ?(СтрДлина(СтрокаПоиска) > (НачалоВхождения + СтрДлина(ЧтоИскать)), Сред(СтрокаПоиска, НачалоВхождения + СтрДлина(ЧтоИскать)), "");
				
				НачалоВхождения = НакопленныйСдвиг + НачалоВхождения;
				
				МестоПоиска =
					?(НачалоВхождения > 1, Сред(МестоПоиска, 1, НачалоВхождения - 1), "")
					+ ЗаменитьНа
					+ ?(СтрДлина(МестоПоиска) > (НачалоВхождения + СтрДлина(ЧтоИскать)), Сред(МестоПоиска, НачалоВхождения + СтрДлина(ЧтоИскать)), "");
					
				НакопленныйСдвиг = НачалоВхождения + СтрДлина(ЗаменитьНа) - 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЧтоИскать) = Тип("Число") Тогда
		Если МестоПоиска = ЧтоИскать Тогда
			МестоПоиска = ЗаменитьНа;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЧтоИскать) = Тип("Дата") Тогда
		Если МестоПоиска = ЧтоИскать Тогда
			МестоПоиска = ЗаменитьНа;
		КонецЕсли;
		
	Иначе
		// Имеем дело с сылкой
		Если МестоПоиска = ЧтоИскать Тогда
			МестоПоиска = ЗаменитьНа;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтерационноЗаменитьВхождение(РодительскаяВетка)
	
	Для каждого ПодчиненнаяВетка Из РодительскаяВетка.ПолучитьЭлементы() Цикл
		
		// Перебор всех проверяемых полей
		СцТ_ЗаменитьВхождение(ПодчиненнаяВетка.Имя);
		СцТ_ЗаменитьВхождение(ПодчиненнаяВетка.Синоним);
		СцТ_ЗаменитьВхождение(ПодчиненнаяВетка.Значение);
		СцТ_ЗаменитьВхождение(ПодчиненнаяВетка.Представление);
		СцТ_ЗаменитьВхождение(ПодчиненнаяВетка.Действие);
		СцТ_ЗаменитьВхождение(ПодчиненнаяВетка.Скрипт);
		СцТ_ЗаменитьВхождение(ПодчиненнаяВетка.ТипУзла);
		
		ИтерационноЗаменитьВхождение(ПодчиненнаяВетка);
	КонецЦикла;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыделитьОтмеченныеСтрокиВДеревеСценария(ДобавлятьКВыделенным = Ложь)
	
	МассивВыделенныхСтрок = Новый Массив;
	
	Если ДобавлятьКВыделенным Тогда
		Для каждого ВыделеннаяСтрока Из СцТ_ГлавнаяФорма.Элементы.БлокСценария.ВыделенныеСтроки Цикл
			МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаРезультата Из РезультатПоиска.ПолучитьЭлементы() Цикл
		Если СтрокаРезультата.Отметка Тогда
			// Перед добавлением узел дерева при необходимости нужно распахнуть
			ДанныеСтроки = СцТ_ГлавнаяФорма.БлокСценария.НайтиПоИдентификатору(СтрокаРезультата.ИдентификаторВДереве);
			Если ДанныеСтроки <> Неопределено Тогда
				Родительскийузел = ДанныеСтроки.ПолучитьРодителя();
				Пока Родительскийузел <> Неопределено Цикл
					Если НЕ СцТ_ГлавнаяФорма.Элементы.БлокСценария.Развернут(Родительскийузел.ПолучитьИдентификатор()) Тогда
						СцТ_ГлавнаяФорма.Элементы.БлокСценария.Развернуть(Родительскийузел.ПолучитьИдентификатор());
					КонецЕсли;
					Родительскийузел = Родительскийузел.ПолучитьРодителя();
				КонецЦикла;
			СцТ_ГлавнаяФорма.Элементы.БлокСценария.ТекущаяСтрока = СтрокаРезультата.ИдентификаторВДереве;
			
			МассивВыделенныхСтрок.Добавить(СтрокаРезультата.ИдентификаторВДереве);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СцТ_ГлавнаяФорма.Элементы.БлокСценария.ВыделенныеСтроки.Очистить();
	Для каждого Идентификатор Из МассивВыделенныхСтрок Цикл
		СцТ_ГлавнаяФорма.Элементы.БлокСценария.ВыделенныеСтроки.Добавить(Идентификатор);
	КонецЦикла;
	
	Если НЕ ДобавлятьКВыделенным Тогда
		Закрыть();
	Иначе
		ТекстВопроса = НСтр("ru = 'Найденные строки выделены. Продолжить поиск?'");
		ОписаниеОповещения =  Новый ОписаниеОповещения("ПослеОтветаНаВопросОПродолжении", ЭтотОбъект);
		ПоказатьВопрос(Описаниеоповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОПродолжении(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РезультатПоиска.ПолучитьЭлементы().Очистить();
		ТекущийЭлемент = Элементы.ЧтоИскать;
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти










