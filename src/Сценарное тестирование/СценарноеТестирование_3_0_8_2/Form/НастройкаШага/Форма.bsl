
#Область Переменные

// Форма - владелец текущей формы (для краткости и наглядности вместо "ЭтаФорма.ВладелецФормы")
&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

// Указатель на ветку в дереве. Заполненяется, если шаг не новый
&НаКлиенте
Перем ДанныеШага Экспорт;

// Идентификатор узла в дереве. Заполнено если шаг не новый
&НаКлиенте
Перем ИдентификаторУзла Экспорт;

// Содержит интерактивный контейнер, соответствующий интерактивному шагу:
//	форма или таблица формы
&НаКлиенте
Перем ИнтерактивныйКонтейнер Экспорт;

// Окно-объект, которому подчинена текущая форма
&НаКлиенте
Перем ОкноВыбраннойФормы Экспорт;

// Тип окна текущей формы - главное или клиентское
&НаКлиенте
Перем ТипОкнаВыбраннойФормы;

// Сигнализирует о том, что в шаге интерактивной автогруппы была выбрана новая форма
&НаКлиенте
Перем БылаВыбранаФорма;

// Хранит путь поиска для любого одиночного объекта
&НаКлиенте
Перем ПутьПоискаОбъекта;

// Вид объекта поля формы или кнопки перед началом выбора
&НаКлиенте
Перем ВидОбъектаПередИзменением;

&НаКЛиенте
Перем ВызвавшаяФорма Экспорт;


#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимСовместимости838 Тогда
		УстановитьДействие("ПередЗакрытием", "ПередЗакрытиеБезРежимаСовместимости");
	КонецЕсли;
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	ТипВсеПеречисления = Перечисления.ТипВсеСсылки();
	
	НетПодчиненныхУзлов          = Параметры.НетПодчиненныхУзлов;
	ПризнакПрогона               = Параметры.ПризнакПрогона;
	ТипКонтейнераШага            = Параметры.ТипКонтейнераШага;
	АдресНачальныхУстановокШагов = Параметры.АдресНачальныхУстановокШагов;
	АдресДереваМакрошагов        = Параметры.АдресДереваМакрошагов;
	
	АдресТаблицыСсылок           = Параметры.АдресТаблицыСсылок;
	
	// 1. Раскрытие структуры шага и определение типа шага
	СтруктураДанныхШага = Параметры.СтруктураДанныхШага;
	НомерШага                    = СтруктураДанныхШага.НомерШага;
	Наименование                 = СтруктураДанныхШага.Наименование;
	ТипШага                      = СтруктураДанныхШага.ТипШага;
	ТипМетаданных                = СтруктураДанныхШага.ТипМетаданных;
	ИмяМетаданных                = СтруктураДанныхШага.ИмяМетаданных;
	Автоописание                 = СтруктураДанныхШага.Автоописание;
	Описание                     = СтруктураДанныхШага.Описание;
	НеВыводитьАвтоописание       = СтруктураДанныхШага.СкрытьАвтоописание;
	Активность                   = СтруктураДанныхШага.Активность;
	//Выполнено                    = СтруктураДанныхШага.Выполнено;
	ПредставлениеОбъекта         = СтруктураДанныхШага.ПредставлениеОбъекта;
	ВыполнитьВручную             = СтруктураДанныхШага.ВыполнитьВручную;
	УИШ                          = СтруктураДанныхШага.УИШ;
	//Цвет                         = СтруктураДанныхШага.Цвет;
	Комментарий                  = СтруктураДанныхШага.Комментарий;
	ИмяУправляемойФормы          = СтруктураДанныхШага.ИмяФормы;
	ПредставлениеИмениМетаданных = СтруктураДанныхШага.ПредставлениеИмениМетаданных;
	ЗаголовокФормы               = СтруктураДанныхШага.ЗаголовокФормы;
	
	ОбСсылкаСтр                  = СтруктураДанныхШага.ОбСсылка;
	
	// Заполнение структуры ДеревоЗначения
	СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоЗначения,
		СтруктураДанныхШага.ДеревоЗначения);
	
	УзелНаименованиеИзмененоВручную = СцТ_НайтиУзелДереваФормы(
		ДеревоЗначения,
		"Имя",
		"ИСТЗ_НаименованиеРучное",
		Ложь);
	
	Если УзелНаименованиеИзмененоВручную <> Неопределено Тогда
		Если ТипЗнч(УзелНаименованиеИзмененоВручную.Значение) = Тип("Булево") Тогда
			НаименованиеШагаИзмененоВручную = УзелНаименованиеИзмененоВручную.Значение;
		КонецЕсли;
		ДеревоЗначения.ПолучитьЭлементы().Удалить(УзелНаименованиеИзмененоВручную);
	КонецЕсли;
	
	// 2. Настройка формы в зависимости от типа шага,
	//    Заполнение переменных, индивидуальных для данного шага
	СцТ_НачальнаяУстановкаФормы();
	
	КлючСохраненияПоложенияОкна = ТипШага;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_УдалениеШаговСценария" И Источник = СцТ_ГлавнаяФорма Тогда
		
		Если Параметр.НайтиПоЗначению(ДанныеШага.ПолучитьИдентификатор()) <> Неопределено Тогда
			Модифицированность = Ложь;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ПеремещениеУзловСценария" И Источник = СцТ_ГлавнаяФорма Тогда
		
		НовыйУзел = Параметр[ИдентификаторУзла];
		Если НовыйУзел <> Неопределено Тогда
			ДанныеШага = НовыйУзел;
			ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
			НомерШага         = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ОбновленыДанныеГрупповогоШага"
		И Источник = СцТ_ГлавнаяФорма
		И ДанныеШага.ПолучитьРодителя() = Параметр Тогда
		
		СцТ_СформироватьПредставлениеРодителя();
		
	ИначеЕсли ИмяСобытия = "СцТ_ОбновилисьДанныеАвтогруппы"
		//И Источник = СцТ_ГлавнаяФорма
		И Открыта()
		И Параметр = ДанныеШага.ПолучитьРодителя() Тогда
		
		Если ТипШага <> "Группа"
			И ТипШага <> "АвтоГруппа"
			И ТипШага <> "ИнтерактивнаяАвтоГруппа"
			И ТипШага <> "ВыполнитьВРучную"
			И ТипШага <> "ВыполнитьЗапрос"
			И ТипШага <> "ВыполнитьПроцедуру"
			И ТипШага <> "Комментарий"
			И ТипШага <> "ВыполнитьСкрипт"
			И ТипШага <> "СохранитьПечатнуюФорму" Тогда
			
			РодительУзла = ДанныеШага.ПолучитьРодителя();
			
			ТипМетаданных                = Параметр.ТипМетаданных;
			ИмяМетаданных                = Параметр.ИмяМетаданных;
			ОбСсылка                     = Параметр.ОбСсылка;
			ПредставлениеОбъекта         = Параметр.ПредставлениеОбъекта;
			ИмяУправляемойФормы          = Параметр.ИмяФормы;
			ПредставлениеИмениМетаданных = Параметр.ПредставлениеИмениМетаданных;
			Если ТипШага <> "НайтиФорму" Тогда
				ЗаголовокФормы = Параметр.ЗаголовокФормы; // Пользователь мог отредактировать шаблон заголовка
			КонецЕсли;
			
			СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ИзмениласьНумерацияШагов"
		И Источник = ВызвавшаяФорма Тогда
		
		Попытка
			НомерШага = ДанныеШага.НомерШага;
		Исключение
		КонецПопытки;
		
	ИначеЕсли ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("СцТ_ОбработатьЗапросОСохраненииДанныхШага", ЭтотОбъект),
			НСтр("ru = 'Данные шага были изменены. Применить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Попытка
			СцТ_ГлавнаяФорма.СцТ_ОткрытыеФормыНастройкиШагов.Удалить(УИШ);
		Исключение
		КонецПопытки;
		
		СцТ_ГлавнаяФорма.СцТ_ОбновитьДоступностьПовышенияИлиПониженияУровня(, ВызвавшаяФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиеБезРежимаСовместимости(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если НЕ ЗавершениеРаботы Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("СцТ_ОбработатьЗапросОСохраненииДанныхШага", ЭтотОбъект),
				НСтр("ru = 'Данные шага были изменены. Применить изменения?'"),
				РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Данные шага были изменены. При закрытии изменения будут утеряны?'")
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ И НЕ ЗавершениеРаботы Тогда
		Попытка
			СцТ_ГлавнаяФорма.СцТ_ОткрытыеФормыНастройкиШагов.Удалить(УИШ);
		Исключение
		КонецПопытки;
		
		СцТ_ГлавнаяФорма.СцТ_ОбновитьДоступностьПовышенияИлиПониженияУровня(, ВызвавшаяФорма);
	КонецЕсли;
	
КонецПроцедуры




#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура СохранитьИЗакрытьФорму(Команда)
	
	Если СцТ_ВыполнитьСохранениеДанныхШага_НаКлиенте() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	ОбСсылкаПередСохранением = ОбСсылка;
	Если СцТ_ВыполнитьСохранениеДанныхШага_НаКлиенте() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение'"), , НСтр("ru = 'Данные шага сохранены.'"));
	КонецЕсли;
	
	ОбСсылка = ОбСсылкаПередСохранением;
	
КонецПроцедуры



&НаКлиенте
Процедура НайтиПараметр(Команда)
	
	ТекущийЭлементФормы = ТекущийЭлемент;
	
	Попытка
		ТекстРедактирования = ТекущийЭлементФормы.ТекстРедактирования;
	Исключение
		ТекстПредупреждения = НСтр("ru = 'Не удалось получить текст в поле ввода'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецПопытки;
	
	Если Лев(ТекстРедактирования, 1) <> "&" ИЛИ Лев(ТекстРедактирования, 2) = "&&" Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось определить имя параметра. Проверьте правильность написания параметра (&<ИмяПараметра>)'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СцТ_ИмяПараметра = Сред(ТекстРедактирования, 2);
	
	СтруктураПараметровФормы = Новый Структура;
	СтруктураПараметровФормы.Вставить("СтруктураГлобальныхПараметров", СцТ_ГлавнаяФорма.ГлобальныеПараметры);
	СтруктураПараметровФормы.Вставить("ИмяПараметра"                 , СцТ_ИмяПараметра);
	СтруктураПараметровФормы.Вставить("РежимСовместимости838"        ,СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ОписаниеОповещения  = Новый ОписаниеОповещения("ПослеЗакрытияФормыГлобальныхПараметров", СцТ_ГлавнаяФорма);
	
	ФормаПеременных = ОткрытьФорму(ПутьКФормам + "ФормаГлобальныхпараметров",
		СтруктураПараметровФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
		
	ФормаПеременных.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;

	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтоназвание(Команда)
	
	Наименование = СцТ_СформироватьОписаниеШага_НаКлиенте(Истина);
	
	НаименованиеШагаИзмененоВручную = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#Область КомандыСтраницы_ПроверитьТабличныйДокумент

&НаКлиенте
Процедура ПолучитьДанныеТаблДок(Команда)
	
	ТаблДокОбъект  = СцТ_ПолучитьТаблДокНаФорме();
	Если ТаблДокОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбластиТабДок = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(ТД_Область);
	
	Попытка
		КоординатыОбласти = СцТ_ГлавнаяФорма.СцТ_КоординатыОбластиИзАдреса(ИмяОбластиТабДок);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Неверно задана область табличного документа. Пример области: ""R2C3:R4C6"" или ""R2C3"".'");
		Сообщение.Поле  = "ТД_Область";
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
	УзелДанных      = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(ДеревоЗначения, "ДанныеТабличногоДокумента");
	УзелОбъединений = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(ДеревоЗначения, "ОбъединенныеОбласти");
	
	СцТ_ПолучитьДанныеТабличногоДокумента(УзелДанных,
														УзелОбъединений,
														ТаблДокОбъект,
														ИмяОбластиТабДок);
	Модифицированность = Истина;
	
	СцТ_ОбновитьТаблДокПоДаннымФормы_НаСервере(ИмяОбластиТабДок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОбластьТаблДок(Команда)
	
	ТаблДокОбъект  = СцТ_ПолучитьТаблДокНаФорме();
	Если ТаблДокОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТД_Область = ТаблДокОбъект.ПолучитьАдресТекущейОбласти();
	СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблДокПрочитатьИзФайла(Команда)
	
	ДиалогВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВФ.Фильтр = "Таблицы 1С (*.mxl)|*|*.mxl|Все файлы (*.*)|*.*";
	ДиалогВФ.Расширение = "mxl";
	
	Если НЕ ПустаяСтрока(ТД_ИмяФайла) Тогда
		ПроверочныйФайл = Новый Файл(ТД_ИмяФайла);
		ДиалогВФ.Каталог = ПроверочныйФайл.Путь;
		
		ДиалогВФ.ПолноеИмяФайла = ПроверочныйФайл.Имя;
	КонецЕсли;
	
	Если НЕ ДиалогВФ.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ДиалогВФ.ПолноеИмяФайла;
	
	ПроверочныйФайл = Новый Файл(ИмяФайла);
	
	ОписаниеоповещенияСуществованияФайла = Новый ОписаниеОповещения(
		"ПослеПроверкиСуществованияФайлаТД",
		ЭтотОбъект,
		ИмяФайла);
		
	ПроверочныйФайл.НачатьПроверкуСуществования(ОписаниеоповещенияСуществованияФайла);
	
КонецПроцедуры



&НаКлиенте
Процедура ТаблДокСохранитьВФайл(Команда)
	
	ДиалогВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВФ.Фильтр = "Таблицы 1С (*.mxl)|*|*.mxl|Все файлы (*.*)|*.*";
	ДиалогВФ.Расширение = "mxl";
	
	Если НЕ ПустаяСтрока(ТД_ИмяФайла) Тогда
		ПроверочныйФайл = Новый Файл(ТД_ИмяФайла);
		ДиалогВФ.Каталог        = ПроверочныйФайл.Путь;
		ДиалогВФ.ПолноеИмяФайла = ПроверочныйФайл.Имя;
	КонецЕсли;
	
	Если ДиалогВФ.Выбрать() Тогда
		ИмяФайла = ДиалогВФ.ПолноеИмяФайла;
		Попытка
			ТД_Данные.Записать(ИмяФайла);
			ПоказатьОповещениеПользователя("Таблица сохранена в файл",,ИмяФайла);
		Исключение
			ТекстПредупреждения = НСтр("ru = 'Не удалось записать файл %1'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ИмяФайла);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьТабличныйДокументВизуально(Команда)
	
	ТестируемыйТабличныйДокумент = Новый ТабличныйДокумент;
	ТаблДокОбъект  = СцТ_ПолучитьТаблДокНаФорме();
	Если ТаблДокОбъект <> Неопределено Тогда
		
		ИмяОбластиТаблДок = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(ТД_Область);
		
		Попытка
			КоординатыОбласти = СцТ_ГлавнаяФорма.СцТ_КоординатыОбластиИзАдреса(ИмяОбластиТаблДок);
		Исключение
			ТекстСообщения = НСтр("ru = 'Неверно задана область табличного документа'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		ИспользованныеОбъединенияЯчеек = Новый Массив;
		
		НовыйНомерСтроки = 1;
		Для НомерСтроки = КоординатыОбласти.НачальнаяСтрока По КоординатыОбласти.КонечнаяСтрока Цикл
			НовыйНомерКолонки = 1;
			
			Для НомерКолонки = КоординатыОбласти.НачальнаяКолонка По КоординатыОбласти.КонечнаяКолонка Цикл
				АдресЯчейки = СцТ_ГлавнаяФорма.СцТ_АдресЯчейки(НомерСтроки, НомерКолонки);
				ТаблДокОбъект.УстановитьТекущуюОбласть(АдресЯчейки);
				ФактическийАдрес = ТаблДокОбъект.ПолучитьАдресТекущейОбласти();
				
				Если ИспользованныеОбъединенияЯчеек.Найти(ФактическийАдрес) = Неопределено Тогда
					// Этого адреса еще нету
					//ТекстЯчейки = ТаблДокОбъект.ПолучитьТекстТекущейОбласти();
					ТекстЯчейки = ТаблДокОбъект.ПолучитьТекстОбласти(ФактическийАдрес);
					ИспользованныеОбъединенияЯчеек.Добавить(ФактическийАдрес);
				Иначе
					// Этот адрес уже есть - это очередная ячейка из объединенных
					ТекстЯчейки = "";
				КонецЕсли;
				
				ЯчейкаТестируемогоДокумента = ТестируемыйТабличныйДокумент.Область(СцТ_ГлавнаяФорма.СцТ_АдресЯчейки(НовыйНомерСтроки, НовыйНомерКолонки));
				ЯчейкаТестируемогоДокумента.Текст = ТекстЯчейки;
				НовыйНомерКолонки = НовыйНомерКолонки + 1;
			КонецЦикла;
			
			НовыйНомерСтроки = НовыйНомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	// Восстановление выделения
	Попытка
		ТаблДокОбъект.УстановитьТекущуюОбласть(ИмяОбластиТаблДок);
	Исключение
	КонецПопытки;
	
	ДанныеДляСравнения = СцТ_ПодготовитьДанныеДляВизуальногоСравненияТабличныхДокументовНаСервере(ТестируемыйТабличныйДокумент);
		
	Если ДанныеДляСравнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляСравнения.Вставить("РежимСовместимости838", СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ОткрытьФорму(ПутьКФормам + "ВизуальноеСравнениеТаблиц", ДанныеДляСравнения, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбновитьАвтоописание(Команда)
	
	СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОбработатьИзменениеПравилаПоискаКнопкиЭлемента(ПравилоПоиска, ДопПараметры) Экспорт
	
	Если ТипЗнч(ПравилоПоиска) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВариантПоискаОбъекта  = ПравилоПоиска.ВариантПоискаОбъекта;
	ИмяНужнойКнопки       = ПравилоПоиска.ИмяОбъекта;
	ЗаголовокНужнойКнопки = ПравилоПоиска.ЗаголовокОбъекта;
	
	Если ПустаяСтрока(ИмяНужнойКнопки) Тогда
		ИмяНужнойКнопки = "$" + ЗаголовокНужнойКнопки;
	ИначеЕсли ПустаяСтрока(ЗаголовокНужнойКнопки) Тогда
		ЗаголовокНужнойКнопки = ИмяНужнойКнопки;
	КонецЕсли;
	
	УзелКнопкиЭлемента =  СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "КнопкаЭлемента", Ложь);
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелКнопкиЭлемента,
		"ИмяКнопки",
		ИмяНужнойКнопки,
		ЗаголовокНужнойКнопки);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелКнопкиЭлемента,
		"ВариантПоискаОбъекта",
		ВариантПоискаОбъекта);
		
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЭлементФормыОбновитьСвойства(Команда)
	
	ОбновитьСвойстваЭлементаФормыДляШагаНайтиЭлементФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ХранимыеДанныеШага(Команда)
	
	Если Модифицированность Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага еще не записаны. Отобразить структуру хранения данных невозможно'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.ОтобразитьДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НеВыводитьАвтоописаниеПриИзменении(Элемент)
	
	СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВручнуюПриИзменении(Элемент)
	
	Если ТипШага = "ВыполнитьВручную"
		ИЛИ ТипШага = "Группа"
		ИЛИ ТипШага = "АвтоГруппа" Тогда
		ВыполнитьВручную = 2;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивностьПриИзменении(Элемент)
	
	Если Активность = 2 Тогда
		Активность = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПеременнойОшибкиВШагеПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(ИмяПеременнойОшибкиВШаге) Тогда
		Если НЕ СцТ_ГлавнаяФорма.ПроверитьПравильностьИмениПараметра(ИмяПеременнойОшибкиВШаге) Тогда
			ТекущийЭлемент = Элемент;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов_Страницы_ДанныеШага

&НаКлиенте
Процедура ПредставлениеГруппыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РодительУзла = ДанныеШага.ПолучитьРодителя();
	Если РодительУзла <> Неопределено Тогда
		СцТ_ГлавнаяФорма.СцТ_ОткрытьФормуНастройкиШага(РодительУзла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	НаименованиеШагаИзмененоВручную = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов_Страницы_Комментарий

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	СцТ_ОбновитьЗаголовкиЗакладок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов_Страницы_Страница_РедактируемоеОписание

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте();
	
	СцТ_ОбновитьЗаголовкиЗакладок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыНайтиФорму

&НаКлиенте
Процедура ДействиеПриОшибкеВШагеПриИзменении(Элемент)
	
	Если ДействиеПриОшибкеВШаге = "Остановить" Тогда
		Элементы.СтраницыПеременнойОшибкиВШаге.ТекущаяСтраница = Элементы.СтраницаПеременнойОшибкивШагеПустая;
	Иначе
		Элементы.СтраницыПеременнойОшибкиВШаге.ТекущаяСтраница = Элементы.СтраницаПеременнойЗаполненная;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_Страницы_ПроверитьТабличныйДокумент

&НаКлиенте
Процедура ТД_ЭлементФормыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СцТ_ПолучитьИнтерактивныйКонтейнер(ДанныеШага.ПолучитьРодителя());
	
	Если ИнтерактивныйКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелТаблДок = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ТабличныйДокумент");
	
	Если УзелТаблДок = Неопределено Тогда
		ОписаниеТекущегоТаблдок = Неопределено;
	Иначе
		ОписаниеТекущегоТаблДок = Новый Структура;
		ОписаниеТекущегоТаблДок.Вставить("Тип"      , Тип("ТестируемоеПолеФормы"));
		ОписаниеТекущегоТаблДок.Вставить("Заголовок", УзелТаблДок.Синоним);
		ОписаниеТекущегоТаблДок.Вставить("Имя"      , УзелТаблДок.Значение);
	КонецЕсли;
	
	ТипыВыбираемыхОбъектов = Новый СписокЗначений;
	ТипыВыбираемыхОбъектов.Добавить("ПолеТабличногоДокумента");
	
	ТипыОтображаемых = Новый СписокЗначений;
	ТипыОтображаемых.Добавить("Страница");
	
	ОписаниеТаблДок = СцТ_ГлавнаяФорма.СцТ_ВыбратьОбъектыТестируемогоПриложения(
		ИнтерактивныйКонтейнер,
		ТипыВыбираемыхОбъектов,
		ТипыОтображаемых,
		ОписаниеТекущегоТаблДок,
		,
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТД_ЭлементФормыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеТаблДок = ВыбранноеЗначение;
	Если ТипЗнч(ОписаниеТаблДок) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТД_ТабличныйДокумент = ?(ПустаяСтрока(ОписаниеТаблДок.Заголовок),
						     ОписаниеТаблДок.Имя,
						     ОписаниеТаблДок.Заголовок);
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(ДеревоЗначения,
		"ТабличныйДокумент",
		ОписаниеТаблДок.Имя,
		ОписаниеТаблДок.Заголовок,
		,
		,//ОписаниеТаблДок.Объект.ПолучитьАдресТекущейОбласти(),
		"Проверить",
		,
		"ТабличныйДокумент");
	
	СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте(Истина);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТД_ДействиеПриИзменении(Элемент)
	
	СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТД_ОбластьПриИзменении(Элемент)
	
	Если НЕ СцТ_ГлавнаяФорма.ПроверитьПравильностьУказателяНаПараметр(ТД_Область) Тогда
		ТекущийЭлемент = Элемент;
		Возврат;
	КонецЕсли;
	
	СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТД_ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДВФ.Фильтр = НСтр("ru = 'Таблицы mxl|*.mxl|Все файлы (*.*)|*.*'");
	ДВФ.Расширение = "mxl";
	
	Если НЕ ПустаяСтрока(ТД_ИмяФайла) Тогда
		ПроверочныйФайл = Новый Файл(ТД_ИмяФайла);
		ДВФ.Каталог = ПроверочныйФайл.Путь;
		
		ДВФ.ПолноеИмяФайла = ПроверочныйФайл.Имя;
	КонецЕсли;
	
	Если ДВФ.Выбрать() Тогда
		ТД_ИмяФайла = ДВФ.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТД_ИмяФайлаПриИзменении(Элемент)
	
	Если НЕ СцТ_ГлавнаяФорма.ПроверитьПравильностьУказателяНаПараметр(ТД_ИмяФайла) Тогда
		ТекущийЭлемент = Элемент;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормы_ИмяПриИзменении(Элемент)
	
	Если НЕ СцТ_ГлавнаяФорма.ПроверитьПравильностьУказателяНаПараметр(ЭлементФормы_Имя) Тогда
		ТекущийЭлемент = Элемент;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормы_ЗаголовокПриИзменении(Элемент)
	
	Если НЕ СцТ_ГлавнаяФорма.ПроверитьПравильностьУказателяНаПараметр(ЭлементФормы_Заголовок) Тогда
		ТекущийЭлемент = Элемент;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#КонецОбласти


#Область ОбработчикиОповещений


// Обрабатывает нажатие пользователем кнопки в диалоге вопроса о сохранении
// данных шага перед закрытием формы
// Параметры
//	КодВозврата - код нажатой кнопки;
//	ДопДанные - дополнительные данные;
//
&НаКлиенте
Процедура СцТ_ОбработатьЗапросОСохраненииДанныхШага(КодВозврата, ДопДанные) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		Если СцТ_ВыполнитьСохранениеДанныхШага_НаКлиенте() Тогда
			Закрыть();
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Нет Тогда
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

#Область НастрокаПриЗагрузкеДанныхШага


// Начальная установка формы при открытии формы
// Выполняется чтение данных из шага, преобразование данных к нужному формату и настройка отображения
&НаСервере
Процедура СцТ_НачальнаяУстановкаФормы()
	
	// Установка визуального отображения заголовка страницы Комментарий в зависимости от содержания
	Если ПустаяСтрока(Комментарий) Тогда
		Элементы.Страница_Комментарий.Заголовок = "Комментарий";
	Иначе
		Элементы.Страница_Комментарий.Заголовок = "Комментарий +";
	КонецЕсли;
	
	СцТ_НастроитьФормуДляШага_ПроверитьТабличныйДокумент();
	
	
	СцТ_СформироватьОписаниеШага();
	
	Если ПустаяСтрока(ВариантПоискаОбъекта) Тогда
		ВариантПоискаОбъекта = "100";
	КонецЕсли;
	
КонецПроцедуры // НачальнаяУстановкаФормы



// Индивидуальная настройка формы для шага "Проверить табличный документ"
//
&НаСервере
Процедура СцТ_НастроитьФормуДляШага_ПроверитьТабличныйДокумент()
	
	// Управление видимостью флагов шага
	Элементы.Активность.Видимость             = Истина;
	Элементы.ВыполнитьВручную.Видимость       = Истина;
	
	// Управление видимостью кнопок формы
	Элементы.ЭлементФормы_СпособПоиска.Видимость   = Ложь;
	
	// Управление действием при ошибке
	УстановитьДействияПриОшибке();
	
	// Свойства шага
	УзелОписанияТД = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ТабличныйДокумент");
	
	ЗаполнитьСписокВыбораВидовЭлементовФормы(Элементы.ЭлементФормы_Вид.СписокВыбора);
	ЭлементФормы_Вид = "ТабличныйДокумент";
	ЭлементФормы_Тип = "ТестируемоеПолеФормы";
	
	Элементы.ЭлементФормы_СтраницыТипов.ТекущаяСтраница = Элементы.ЭлементФормы_СтраницаТипов_Вид;
	
	Если УзелОписанияТД = Неопределено Тогда
		// Поля будут заполнены в процессе настройки шага
		// Здесь заполняются только поля по-умолчанию
		ДействиеНадРеквизитомФормы = "Проверить";
	Иначе
		ДействиеНадРеквизитомФормы = УзелОписанияТД.Действие;
		ЭлементФормы_Имя           = УзелОписанияТД.Значение;
		ЭлементФормы_Заголовок     = УзелОписанияТД.Синоним;
		
		ТД_ТабличныйДокумент = ?(ПустаяСтрока(УзелОписанияТД.Синоним),
							     УзелОписанияТД.Значение,
							     УзелОписанияТД.Синоним);
		
		ТД_Область             = УзелОписанияТД.Представление;
		
		Если Лев(ТД_Область, 1) <> "&" Тогда
			СцТ_ОбновитьТаблДокПоДаннымФормы_НаСервере(ТД_Область);
		КонецЕсли;
		
	КонецЕсли;
	
	УзелОписанияФайлаТД = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ФайлТабличногоДокумента");
	Если УзелОписанияФайлаТД = Неопределено Тогда
		ТД_ВзятьИзФайла = 0;
		ТД_ИмяФайла     = "";
	Иначе
		ТД_ВзятьИзФайла = ?(УзелОписанияФайлаТД.Активность, 1, 0);
		ТД_ИмяФайла     = УзелОписанияФайлаТД.Значение;
	КонецЕсли;
	
	Элементы.ТД_ИмяФайла.Доступность = ТД_ВзятьИзФайла;
	
	ВариантПоискаОбъекта             = СцТ_ЗначениеВДереве(ДеревоЗначения, "ВариантПоискаОбъекта", "100");
	
	ЗаполнитьПутьКЭлементуФормы(УзелОписанияТД);
	
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страница_ПроверитьТабличныйДокумент;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПутьКЭлементуФормы(РодительскийУзелПути)
	
	УзелПутиВДереве = СцТ_НайтиУзелДереваФормы(РодительскийУзелПути, "Имя", "ИСТЗ_ПутьКОбъекту");
	
	Если УзелПутиВДереве = Неопределено Тогда
		ПутьКЭлементуФормы = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПутьКЭлементуФормы = Новый Структура;
	Счетчик = 1;
	
	Для каждого УзелЭлементаПути Из УзелПутиВДереве.Получитьэлементы() Цикл
		
		ИмяСтруктурыСтроки = "Str_" + Формат(Счетчик, "ЧГ=0");
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("ИмяОбъекта"      , УзелЭлементаПути.Имя);
		СтруктураСтроки.Вставить("ЗаголовокОбъекта", УзелЭлементаПути.Синоним);
		
		ПреобразованныйТипЭлемента = УзелЭлементаПути.Значение;
		Если ТипЗнч(ПреобразованныйТипЭлемента) = Тип("Число") Тогда
	
			Если ПреобразованныйТипЭлемента = 0 Тогда
				ПреобразованныйТипЭлемента = "ТестируемоеПриложение";
			ИначеЕсли ПреобразованныйТипЭлемента = 1 Тогда
				ПреобразованныйТипЭлемента = "ТестируемоеОкноКлиентскогоПриложения";
			ИначеЕсли ПреобразованныйТипЭлемента = 2 Тогда
				ПреобразованныйТипЭлемента = "ТестируемаяФорма";
			ИначеЕсли ПреобразованныйТипЭлемента = 3 Тогда
				ПреобразованныйТипЭлемента = "ТестируемоеПолеФормы";
			ИначеЕсли ПреобразованныйТипЭлемента = 4 Тогда
				ПреобразованныйТипЭлемента = "ТестируемаяГруппаФормы";
			ИначеЕсли ПреобразованныйТипЭлемента = 5 Тогда
				ПреобразованныйТипЭлемента = "ТестируемаяКнопкаФормы";
			ИначеЕсли ПреобразованныйТипЭлемента = 6 Тогда
				ПреобразованныйТипЭлемента = "ТестируемаяДекорацияФормы";
			ИначеЕсли ПреобразованныйТипЭлемента = 7 Тогда
				ПреобразованныйТипЭлемента = "ТестируемаяТаблицаФормы";
			ИначеЕсли ПреобразованныйТипЭлемента = 8 Тогда
				ПреобразованныйТипЭлемента = "ТестируемыйКомандныйИнтерфейсОкна";
			ИначеЕсли ПреобразованныйТипЭлемента = 9 Тогда
				ПреобразованныйТипЭлемента = "ТестируемаяГруппаКомандногоИнтерфейса";
			ИначеЕсли ПреобразованныйТипЭлемента = 10 Тогда
				ПреобразованныйТипЭлемента = "ТестируемаяКнопкаКомандногоИнтерфейса";
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		
		СтруктураСтроки.Вставить("ТипОбъекта", ПреобразованныйТипЭлемента);
		
		ПутьКЭлементуФормы.Вставить(ИмяСтруктурыСтроки, СтруктураСтроки);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ВспомогательныеПроцедурыДляНастройкиОтображенияШага

// Обновление заголовков закладок
//
&НаКлиенте
Процедура СцТ_ОбновитьЗаголовкиЗакладок()
	
	Элементы.Страница_РедактируемоеОписание.Заголовок = ?(ПустаяСтрока(Описание),
		НСтр("ru = 'Редактируемое описание'"),
		НСтр("ru = 'Редактируемое описание +'"));
	
	Элементы.Страница_Комментарий.Заголовок = ?(ПустаяСтрока(Комментарий),
		НСтр("ru = 'Комментарий'"),
		НСтр("ru = 'Комментарий +'"));
	
КонецПроцедуры

#КонецОбласти


#Область СохранениеШагаВСценарии

// Индивидуальные операции сохранения для шага работы с табличным документом
//
// Параметры
// РезультатВыполнения - текст для протокола выполнения
&НаКлиенте
Процедура СцТ_ОбработатьСохранениеШага_ПроверитьТабличныйДокумент_НаКлиенте(Отказ)
	
	// Проверки
	Если  ПустаяСтрока(ЭлементФормы_Имя)
		И ПустаяСтрока(ЭлементФормы_Заголовок) Тогда
		СцТ_СообщитьПользователю(НСтр("ru = 'Не выбран табличный документ.'"),
			Отказ,
			"ТД_ЭлементФормы");
	КонецЕсли;
	
	Если ПустаяСтрока(ТД_Область) Тогда
		СцТ_СообщитьПользователю(НСтр("ru = 'Не указана область табличного документа.'"),
			Отказ,
			"ТД_Область");
	ИначеЕсли Найти(ТД_Область, "&")=1 Тогда
		// Возможно, что это параметр
		ТекстСообщения = "";
		Если НЕ СцТ_ГлавнаяФорма.ПроверитьПравильностьУказателяНаПараметр(ТД_Область, Истина, ТекстСообщения) Тогда
			СцТ_СообщитьПользователю(
				ТекстСообщения,
				Отказ,
				"ТД_Область");
		КонецЕсли;
		
		Если Лев(ТД_Область, 1) <> "&" Тогда
			Попытка
				КоординатыОбласти = СцТ_ГлавнаяФорма.СцТ_КоординатыОбластиИзАдреса(ТД_Область);
			Исключение
				СцТ_СообщитьПользователю(НСтр("ru = 'Вероятно не задано значение параметра, указанного в адресе области. Сначала нужно установить значение параметра'"),
					Отказ,
					"ТД_Область");
				КонецПопытки;
		КонецЕсли;
		
	Иначе
		// Проверка области табл. док.
		Попытка
			КоординатыОбласти = СцТ_ГлавнаяФорма.СцТ_КоординатыОбластиИзАдреса(ТД_Область);
		Исключение
			СцТ_СообщитьПользователю(НСтр("ru = 'Неверно задана область табличного документа. Пример области: ""R2C3:R4C6"" или ""R2C3"".'"),
				Отказ,
				"ТД_Область");
		КонецПопытки;
	КонецЕсли;
	
	Если ПустаяСтрока(ДействиеНадРеквизитомФормы) Тогда
		СцТ_СообщитьПользователю(НСтр("ru = 'Не выбрано действие с табличным документом.'"),
			Отказ,
			"ДействиеНадРеквизитомФормы");
	КонецЕсли;
	
	Если  ДействиеНадРеквизитомФормы <> "Проверить"
		И ДействиеНадРеквизитомФормы <> "Заполнить" Тогда
		
		СцТ_СообщитьПользователю(НСтр("ru = 'Неизвестное действие над табличным документом.'"),
			Отказ,
			"ТД_Действие");
	КонецЕсли;
	
	// Проверка правильности параметра
	Если ТД_ВзятьИзФайла Тогда
		
		Если ПустаяСтрока(ТД_ИмяФайла) Тогда
			СцТ_СообщитьПользователю(НСтр("ru = 'Не Задано имя файла'"),
			Отказ,
			"ТД_ИмяФайла");
		ИначеЕсли Найти(ТД_ИмяФайла, "&")=1 Тогда
			// Возможно, что это параметр
			ТекстСообщения = "";
			Если НЕ СцТ_ГлавнаяФорма.ПроверитьПравильностьУказателяНаПараметр(ТД_ИмяФайла, Истина, ТекстСообщения) Тогда
				СцТ_СообщитьПользователю(
					ТекстСообщения,
					Отказ,
					"ТД_Область");
				КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Приведение области в типовой вид
	Если Лев(ТД_Область, 1) <> "&"
		И ТипЗнч(КоординатыОбласти) = Тип("Структура") Тогда
		// т.е. Область не является параметром
		НормальныйАдресОбласти = СцТ_ГлавнаяФорма.СцТ_АдресЯчейки(
			КоординатыОбласти.НачальнаяСтрока,
			КоординатыОбласти.НачальнаяКолонка);
		
		Если КоординатыОбласти.НачальнаяСтрока <> КоординатыОбласти.КонечнаяСтрока
			ИЛИ КоординатыОбласти.НачальнаяКолонка <> КоординатыОбласти.КонечнаяКолонка Тогда
			
			НормальныйАдресОбласти = НормальныйАдресОбласти
				+ ":"
				+ СцТ_ГлавнаяФорма.СцТ_АдресЯчейки(
					КоординатыОбласти.КонечнаяСтрока,
					КоординатыОбласти.КонечнаяКолонка);
			
		КонецЕсли;
		
		ТД_Область = НормальныйАдресОбласти;
	КонецЕсли;
	
	// Сохранение данных
	
	УзелТД = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ТабличныйДокумент",
		ЭлементФормы_Имя,
		ЭлементФормы_Заголовок,,
		ТД_Область,
		ДействиеНадРеквизитомФормы,,
		"ТабличныйДокумент");
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДействиеПриОшибке",
		ДействиеПриОшибкеВШаге);
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ПеременнаяПриОшибке",
		ИмяПеременнойОшибкиВШаге);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ВариантПоискаОбъекта",
		ВариантПоискаОбъекта);
	
	ДобавитьПутьПоискаЭлемента(УзелТД);
		
	УзелДанных      = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДанныеТабличногоДокумента");
	
	УзелОбъединений = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ОбъединенныеОбласти");
	
	УзелДанных.ПолучитьЭлементы().Очистить();
	УзелОбъединений.ПолучитьЭлементы().Очистить();
	
	Если КоординатыОбласти = Неопределено Тогда
		ПерваяСтрока = 1;
		ПоследняяСтрока = ТД_Данные.ВысотаТаблицы;
		Если ПоследняяСтрока = 0 Тогда
			ПоследняяСтрока = 1;
		КонецЕсли;
		
		ПерваяКолонка = 1;
		ПоследняяКолонка = ТД_Данные.ШиринаТаблицы;
		Если ПоследняяКолонка = 0 Тогда
			ПоследняяКолонка = 1;
		КонецЕсли;
	ИначеЕсли Лев(ТД_Область, 1) <> "&"
		И ТипЗнч(КоординатыОбласти) = Тип("Структура") Тогда
		
		ПерваяСтрока     = КоординатыОбласти.НачальнаяСтрока;
		ПоследняяСтрока  = КоординатыОбласти.КонечнаяСтрока;
		ПерваяКолонка    = КоординатыОбласти.НачальнаяКолонка;
		ПоследняяКолонка = КоординатыОбласти.КонечнаяКолонка;
		
	КонецЕсли;
	
	НСтроки = 0;
	Для ТекСтрока = ПерваяСтрока По ПоследняяСтрока Цикл
		НСтроки  = НСтроки + 1;
		УзелСтроки = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(УзелДанных,
			"R" + СтрЗаменить(Строка(ТекСтрока), Символ(160), ""));
		НСтолбца = 0;
		Для ТекКолонка = ПерваяКолонка По ПоследняяКолонка Цикл
			
			НСтолбца = НСтолбца + 1;
			Обл = ТД_Данные.Область(НСтроки, НСтолбца);
			СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(УзелСтроки,
				"C" + СтрЗаменить(Строка(ТекКолонка), Символ(160), ""),
				Обл.Текст);
			
			// Если область состоит более чем из одной ячейки, тогда
			// добавить объединение
			Если (Обл.Верх <> Обл.Низ ИЛИ Обл.Лево <> Обл.Право)
				И НСтроки = Обл.Верх И НСтолбца = Обл.Лево Тогда
				
				РАдрес = СцТ_ГлавнаяФорма.СцТ_АдресЯчейки(Обл.Верх + КоординатыОбласти.НачальнаяСтрока - 1,
													   Обл.Лево + КоординатыОбласти.НачальнаяКолонка - 1);
				РАдрес = РАдрес
					+ ":"
					+ СцТ_ГлавнаяФорма.СцТ_АдресЯчейки(Обл.Низ   + КоординатыОбласти.НачальнаяСтрока - 1,
													Обл.Право + КоординатыОбласти.НачальнаяКолонка - 1);
				
				СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(УзелОбъединений, РАдрес);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ФайлТабличногоДокумента",
		ТД_ИмяФайла,,
		ТД_ВзятьИзФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПутьПоискаЭлемента(РодительскийУзел)
	
	УзелПутиПоиска = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(РодительскийУзел, "ИСТЗ_ПутьКОбъекту");
	
	//УзелПутиПоиска = СцТ_НайтиУзелДереваФормы(РодительскийУзел, "Имя", "ИСТЗ_ПутьКОбъекту", Ложь);
	
	Если УзелПутиПоиска <> Неопределено Тогда
		УзелПутиПоиска.ПолучитьЭлементы().Очистить();
		Если ПутьКЭлементуФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого СтруктураПути Из ПутьКЭлементуФормы Цикл
			
			УзелЭлементаПути = СцТ_ДобавитьУзелВДеревоЗначения_НаКлиенте(
				УзелПутиПоиска,
				СтруктураПути.Значение.ИмяОбъекта,
				СтруктураПути.Значение.ЗаголовокОбъекта,,
				СтруктураПути.Значение.ТипОбъекта,,,,,
				Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохранение реализовано в виде функции, т.к. потребуется
// ее выполнение в обработчике ПередЗакрытием
//
&НаКлиенте
Функция СцТ_ВыполнитьСохранениеДанныхШага_НаКлиенте() Экспорт
	
	ОчиститьСообщения();
	
	// Проверка общих полей
	Если ПустаяСтрока(Наименование) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Поле ""Наименование"" не заполнено.'");
		Сообщение.Поле = "Наименование";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Отказ                        = Ложь;
	
	СцТ_ОбработатьСохранениеШага_ПроверитьТабличныйДокумент_НаКлиенте(Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте(Истина);
	
	СцТ_СохранитьДанныеШагаВУзлеБлокаСценарияОсновнойФормы_НаКлиенте();
	
	Модифицированность = Ложь;
	//СцТ_ГлавнаяФорма.СцТ_НовыеШаги.Удалить(ДанныеШага.ПолучитьИдентификатор());
	СцТ_ГлавнаяФорма.СцТ_ОбработатьИзменениеДанныхШага(ДанныеШага, ВызвавшаяФорма);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыСохранениеДанныхШага

// Передача данных в основную форму
//
&НаКлиенте
Процедура СцТ_СохранитьДанныеШагаВУзлеБлокаСценарияОсновнойФормы_НаКлиенте()
	
	ДанныеШага.Наименование                 = Наименование;
	ДанныеШага.ТипШага                      = ТипШага;
	ДанныеШага.ТипМетаданных                = ТипМетаданных;
	ДанныеШага.ИмяМетаданных                = ИмяМетаданных;
	ДанныеШага.Автоописание                 = Автоописание;
	ДанныеШага.Описание                     = Описание;
	ДанныеШага.НеВыводитьАвтоописание       = НеВыводитьАвтоописание;
	ДанныеШага.Активность                   = Активность;
	ДанныеШага.Выполнено                    = Выполнено;
	ДанныеШага.ОбСсылка                     = ОбСсылкаСтр;
	ДанныеШага.ПредставлениеОбъекта         = ПредставлениеОбъекта;
	ДанныеШага.ВыполнитьВручную             = ВыполнитьВручную;
	ДанныеШага.УИШ                          = УИШ;
	ДанныеШага.Цвет                         = Цвет;
	ДанныеШага.Комментарий                  = Комментарий;
	ДанныеШага.ИмяФормы                     = ИмяУправляемойФормы;
	ДанныеШага.ПредставлениеИмениМетаданных = ПредставлениеИмениМетаданных;
	ДанныеШага.ЗаголовокФормы               = ЗаголовокФормы;
	
	Если НаименованиеШагаИзмененоВручную Тогда
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(ДеревоЗначения, "ИСТЗ_НаименованиеРучное", Истина);
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_СкопироватьДеревоФормы(ДеревоЗначения, ДанныеШага.Значение);
	
	// Если это автогруппа работы с формой, тогда тогда передать указатель на форму основной форме обработки
	Если ТипШага = "ИнтерактивнаяАвтоГруппа" И БылаВыбранаФорма = Истина Тогда
		СцТ_ГлавнаяФорма.СцТ_ФормыТестируемогоПриложения[ДанныеШага.УИШ] = 
			Новый Структура("ФормаОбъект,ОкноОбъект,ТипОкна",
				ИнтерактивныйКонтейнер,
				ОкноВыбраннойФормы,
				ТипОкнаВыбраннойФормы);
	КонецЕсли;
	
	ДанныеШага.ДанныеКартинки =
		СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеКартинки_НаКлиенте(ДанныеШага);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированеОписанийИНаименований

// Процедура формирования и отображения общего описания шага
//
&НаСервере
Процедура СцТ_СформироватьОписаниеШага()
	
	ПользовательскоеОписание = Описание;
	
	Если НЕ НеВыводитьАвтоОписание И НЕ ПустаяСтрока(АвтоОписание) Тогда
		Если НЕ ПустаяСтрока(ПользовательскоеОписание) Тогда
			ПользовательскоеОписание = ПользовательскоеОписание + Символы.ПС;
		КонецЕсли;
		
		ПользовательскоеОписание = ПользовательскоеОписание + АвтоОписание;
	КонецЕсли;
	
КонецПроцедуры

// ФОрмирование описания шага на клиенте
&НаКлиенте
Функция СцТ_СформироватьОписаниеШага_НаКлиенте(Краткое = Ложь)
	
	Если ТипШага = "ПроверитьТабличныйДокумент" Тогда
		Возврат СцТ_СформироватьОписаниеШага_ПроверитьТабличныйДокумент_НаКлиенте(Краткое);
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СцТ_СформироватьОписаниеШага_ПроверитьТабличныйДокумент_НаКлиенте(Краткое)
	
	Если ДействиеНадРеквизитомФормы = "Заполнить" Тогда
		ВозвращаемоеОписание = НСтр("ru = 'Заполнить табличный документ%1'");
	Иначе
		ВозвращаемоеОписание = НСтр("ru = 'Проверить табличный документ%1'");
	КонецЕсли;
	
	УзелТаблДок = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ТабличныйДокумент");
	Если УзелТаблДок = Неопределено Тогда
		ПредставлениеТаблДок = "";
	Иначе
		ПредставлениеТаблДок = " """
			+ ?(ПустаяСтрока(УзелТаблДок.Синоним), УзелТаблДок.Значение, УзелТаблДок.Синоним)
			+ """";
	КонецЕсли;
	
	ВозвращаемоеОписание = СтрЗаменить(ВозвращаемоеОписание, "%1", ПредставлениеТаблДок);
	
	Если Краткое Тогда
		Возврат ВозвращаемоеОписание;
	КонецЕсли;
	
	ВозвращаемоеОписание = ВозвращаемоеОписание
		+ Символы.ПС
		+ НСтр("ru = 'Область табличного документа: '")
		+ ТД_Область;
	
	Возврат ВозвращаемоеОписание;
	
КонецФункции


// Обновление описания шага
//
// Параметры
// ОбновитьНаименование - признак, что нужно обновить еще и наименование
&НаКлиенте
Процедура СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте(ОбновитьНаименование = Ложь)
	
	Если ОбновитьНаименование Тогда
		Если НЕ НаименованиеШагаИзмененоВручную Тогда
			Наименование = СцТ_СформироватьОписаниеШага_НаКлиенте(Истина);
		КонецЕсли;
	КонецЕсли;
	
	Автоописание = СцТ_СформироватьОписаниеШага_НаКлиенте();
	
	Если ТипШага = "Комментарий" Тогда
		
		ПользовательскоеОписание = НСтр("ru = 'Комментарий:'") + Символы.ПС + Комментарий;
		
	ИначеЕсли ТипШага = "ВыполнитьВРучную" Тогда
		
		ПользовательскоеОписание = Описание;
		
	Иначе
		
		ПользовательскоеОписание = Описание;
		
		Если НЕ НеВыводитьАвтоОписание И НЕ ПустаяСтрока(АвтоОписание) Тогда
			Если НЕ ПустаяСтрока(ПользовательскоеОписание) Тогда
				ПользовательскоеОписание = ПользовательскоеОписание + Символы.ПС;
			КонецЕсли;
			ПользовательскоеОписание = ПользовательскоеОписание + АвтоОписание;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ПроцедурыИФункцииРаботыСДеревомЗначения

// Возвращает значение заданного поля в дереве данных
//
// Параметры
//	ДерЗнач              - дерево с данными в котором ведется поиск
//	ИмяПараметра         - имя искомого параметра
//	ЕслиНеНайдено        - что вернуть, если значение не найдено
//	ВозвращаемыйРеквизит - имя колонки, которую нужно вернуть
//	Рекурсивно           - признак рекурсии
// Возвращаемое значение - значение нужного поля найденного узла
&НаКлиентеНаСервереБезКонтекста
Функция СцТ_ЗначениеВДереве(
	ДерЗнач,
	ИмяПараметра,
	ЕслиНеНайдено = Неопределено,
	ВозвращаемыйРеквизит = "Значение",
	Рекурсивно = Истина)
	
	УзелЗначения = СцТ_НайтиУзелДереваФормы(ДерЗнач, "Имя", ИмяПараметра, Рекурсивно);
	Если УзелЗначения = Неопределено Тогда
		Возврат ЕслиНеНайдено;
	Иначе
		Возврат УзелЗначения[ВозвращаемыйРеквизит];
	КонецЕсли;
	
КонецФункции

// Поиск нужного узла в дереве данных
//
// Параметры
//	ДеревоФормы       - дерево, в котором ведется поиск
//	Реквизит          - имя поля в котором ведется поиск
//	ЗначениеРеквизита - значение в поле
//	Рекурсивно        - признак рекурсивного поиска
// Возвращаемое значение - найденный узел
&НаКлиентеНаСервереБезКонтекста
Функция СцТ_НайтиУзелДереваФормы(
	ДеревоФормы,
	Реквизит,
	ЗначениеРеквизита,
	Рекурсивно = Ложь)
	
	Если ДеревоФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Узел Из ДеревоФормы.ПолучитьЭлементы() Цикл
		Если Узел[Реквизит] = ЗначениеРеквизита Тогда
			Возврат Узел;
		КонецЕсли;
		Если Рекурсивно Тогда
			НайденыйУзел = СцТ_НайтиУзелДереваФормы(Узел, Реквизит, ЗначениеРеквизита, Истина);
			Если НайденыйУзел <> Неопределено Тогда
				Возврат НайденыйУзел;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Заполнение дерева значения данными из структуры
//
// параметры
//	ДеревоФормы - заполняемое дерево
//	ДеревоСтруктур - структура с данными
&НаСервере
Процедура СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоФормы, ДеревоСтруктур)
	
	СтрокиДереваФормы = ДеревоФормы.ПолучитьЭлементы();
	Для каждого СтрокаДереваСтруктур Из ДеревоСтруктур.ИСТЗ_Строки Цикл
		СтрокаДереваФормы = СтрокиДереваФормы.Добавить();
		Для каждого КлючЗначение Из СтрокаДереваСтруктур Цикл
			Если КлючЗначение.Ключ <> "ИСТЗ_Строки" Тогда
				СтрокаДереваФормы[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(СтрокаДереваФормы, СтрокаДереваСтруктур);
	КонецЦикла;
	
КонецПроцедуры



#КонецОбласти

#Область ДополнительныеПроцедурыДляСохраненияДанныхШага

// Добавление нового узла (или обновление существующего)
// в дереве данных
//
// Параметры
//	РодительскийУзел - родительский узел в дереве
//	Имя              - имя узла
//	Синоним          - пользовательское имя узла
//	ТипУзла          - тип узла
//	Значение         - значение узла
//	Активность       - активность узла
//	Действие         - строка выполняемого действия
//	Скрипт           - скрипт для интерактивных шагов
//	Кл               - признак ключевого поля
//	Принудительно    - признак принудительного обновления всех данных узла
&НаКлиенте
Функция СцТ_ДобавитьУзелВДеревоЗначения_НаКлиенте(
	РодительскийУзел,
	Имя,
	Синоним,
	ТипУзла,
	Значение      = Неопределено,
	Активность    = 1,
	Действие      = "",
	Скрипт        = "",
	Кл            = 0,
	Принудительно = Истина)
	
	НужныйУзел = Неопределено;
	Для каждого ПодчиненныйУзел ИЗ РодительскийУзел.ПолучитьЭлементы() Цикл
		Если ПодчиненныйУзел.Имя = Имя Тогда
			НужныйУзел = ПодчиненныйУзел;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужныйУзел = Неопределено Тогда
		НужныйУзел = РодительскийУзел.ПолучитьЭлементы().Добавить();
		НужныйУзел.Имя = Имя;
	КонецЕсли;
	
	// Обязательно обновляемые реквизиты
	НужныйУзел.Значение = Значение;
	
	Если Значение = Неопределено Тогда
		НужныйУзел.Представление = "";
	Иначе
		НужныйУзел.Представление = Строка(Значение);
	КонецЕсли;
	
	НужныйУзел.Синоним      = Синоним;
	НужныйУзел.Активность   = Активность;
	НужныйУзел.Действие     = Действие;
	НужныйУзел.Скрипт       = Скрипт;
	НужныйУзел.ТипУзла      = ТипУзла;
	НужныйУзел.Кл           = Кл;
	
	Возврат НужныйУзел;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСИнтерактивнымиШагами

// Получение контейнера тестируемого приложения
// Привязка
//
&НаКлиенте
Процедура СцТ_ПолучитьИнтерактивныйКонтейнер(ПараметрУзелСценария = Неопределено)
	
	ОписаниеОшибкиПолученияКонтейнера = "";
	ИнтерактивныйКонтейнер = СцТ_ГлавнаяФорма.СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(
		?(ПараметрУзелСценария = Неопределено, ДанныеШага, ПараметрУзелСценария),
		ОписаниеОшибкиПолученияКонтейнера,
		Истина);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибкиПолученияКонтейнера) Тогда
		ИнтерактивныйКонтейнер = Неопределено;
		ПоказатьПредупреждение(, СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(ОписаниеОшибкиПолученияКонтейнера));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИнтерактивныйКонтейнер) = Тип("ТестируемаяФорма") Тогда
		// Проверить, открыта ли форма
		Попытка
			ФормаЗакрыта = ИнтерактивныйКонтейнер.ОжидатьЗакрытие(0);
		Исключение
			ФормаЗакрыта = Истина;
		КонецПопытки;
		
		Если ФормаЗакрыта Тогда
			ИнтерактивныйКонтейнер = Неопределено;
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось обратиться к форме тестируемого приложения:
				|форма была закрыта, либо тестируемое приложение не запущено.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Получить представление родительского элемента формы
//
&НаКлиенте
Процедура СцТ_СформироватьПредставлениеРодителя() Экспорт
	
	СцТ_РодительУзла = ДанныеШага.ПолучитьРодителя();
	
	ВидимостьПредставленияРодительскогоУзла = (СцТ_РодительУзла <> Неопределено
		И СцТ_ГлавнаяФорма.СцТ_СписокСвободноПеремещаемыхШагов().НайтиПоЗначению(ТипШага) = Неопределено);
		
	// Изменение видимости без необходимости изменять не нужно
	Если Элементы.ПредставлениеГруппы.Видимость <> ВидимостьПредставленияРодительскогоУзла Тогда
		Элементы.ПредставлениеГруппы.Видимость = ВидимостьПредставленияРодительскогоУзла;
	КонецЕсли;
	
	Если ВидимостьПредставленияРодительскогоУзла Тогда
		ПредставлениеГруппы = НСтр("ru = 'Шаг №%1: %2'");
		ПредставлениеГруппы = СтрЗаменить(
			ПредставлениеГруппы,
			"%1",
			СтрЗаменить(Строка(СцТ_РодительУзла.НомерШага), Символ(160), ""));
			
		ПредставлениеГруппы = СтрЗаменить(
			ПредставлениеГруппы,
			"%2",
			СцТ_РодительУзла.Наименование);
	КонецЕсли;
	
КонецПроцедуры

// Определение координат тестируемой области в табличном документе
//
// Параметры
// АдресОбласти - адрес области табличного документа
// Возвращаемое значение - координаты области
&НаКлиентеНаСервереБезКонтекста
Функция СцТ_КоординатыОбласти(Знач АдресОбласти)
	
	АдресОбласти = СокрЛП(ВРег(АдресОбласти));
	
	Результат = Новый Структура("НачальнаяСтрока,НачальнаяКолонка,КонечнаяСтрока,КонечнаяКолонка", 0, 0, 0, 0);
	
	ПозицияДвоеточия = Найти(АдресОбласти, ":");
	Если ПозицияДвоеточия = 0 Тогда
		АдресНачала = АдресОбласти;
		АдресКонца  = АдресОбласти;
	Иначе
		АдресНачала = Лев(АдресОбласти, ПозицияДвоеточия - 1);
		АдресКонца  = Сред(АдресОбласти, ПозицияДвоеточия + 1);
	КонецЕсли;
	
	ПозицияС = Найти(АдресНачала, "C");
	Результат.НачальнаяСтрока  = Число(Сред(АдресНачала, 2, ПозицияС - 2));
	Результат.НачальнаяКолонка = Число(Сред(АдресНачала, ПозицияС + 1));
	
	ПозицияС = Найти(АдресКонца, "C");
	Результат.КонечнаяСтрока  = Число(Сред(АдресКонца, 2, ПозицияС - 2));
	Результат.КонечнаяКолонка = Число(Сред(АдресКонца, ПозицияС + 1));
	
	Возврат Результат;
	
КонецФункции

// Обработка изменений в правилах поиска объектов
//
// Правило поиска - измененное правило
// ДопПараметры - дополнительные данные
&НаКлиенте
Процедура СцТ_ОбработатьИзменениеПравилаПоискаОбъекта(ПравилоПоиска, ДопПараметры) Экспорт
	
	Если ТипЗнч(ПравилоПоиска) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипШага <> "ЗаполнитьРеквизитыФормы" И ТипШага <> "ЗаполнитьСтрокуТаблицы" Тогда
		ВариантПоискаОбъекта = ПравилоПоиска.ВариантПоискаОбъекта;
	КонецЕсли;
	
	ИмяИскомогоОбъекта       = ПравилоПоиска.ИмяОбъекта;
	ЗаголовокИскомогоОбъекта = ПравилоПоиска.ЗаголовокОбъекта;
	
	Если ПустаяСтрока(ИмяИскомогоОбъекта) Тогда
		ИмяИскомогоОбъекта = "$" + ЗаголовокИскомогоОбъекта;
	ИначеЕсли ПустаяСтрока(ЗаголовокИскомогоОбъекта) Тогда
		ЗаголовокИскомогоОбъекта = ИмяИскомогоОбъекта;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Вывод сообщения пользователю
//
// Параметры
// ТекстСообщения - отображаемый текст
// ПолеДанных - поле, которое должно получить фокус
&НаКлиенте
Процедура СцТ_СообщитьПользователю(ТекстСообщения, Отказ = Неопределено, ПолеДанных = "")
	
	Отказ = Истина;
	Если ПустаяСтрока(ПолеДанных) Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле  = ПолеДанных;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТД(АдрДД)
	
	ПрочитанныйТаблДок = Новый ТабличныйДокумент;
	ИмяВрФайла = ПолучитьИмяВременногоФайла("mxl");
	
	ДД = ПолучитьИзВременногоХранилища(АдрДД);
	ДД.Записать(ИмяВрФайла);
	
	Попытка
		ПрочитанныйТаблДок.Прочитать(ИмяВрФайла);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	УдалитьФайлы(ИмяВрФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ПрочитанныйТаблДок);
	
КонецФункции

&НаКлиенте
Процедура ИтерационноЗаполнитьСписокКнопок(ГруппаКнопок, СписокКнопок)
	
	Для каждого КнопкаМеню Из ГруппаКнопок.ПолучитьПодчиненныеОбъекты() Цикл
		Если ТипЗнч(КнопкаМеню) = тип("ТестируемаяГруппаФормы") Тогда
			ИтерационноЗаполнитьСписокКнопок(КнопкаМеню, СписокКнопок);
		Иначе
			СписокКнопок.Добавить(КнопкаМеню.Имя, КнопкаМеню.ТекстЗаголовка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСвойстваЭлементаФормыДляШагаНайтиЭлементФормы()
	
	Если НЕ СцТ_ГлавнаяФорма.СцТ_ТестируемоеПриложениеАктивно() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Тестируемый клиент не запущен. Нельзя обновить сведения о текущем элементе'"));
		Возврат;
	КонецЕсли;
	
	СцТ_ПолучитьИнтерактивныйКонтейнер();
	
	Попытка
		ТекущийЭлементФормы = ИнтерактивныйКонтейнер.ПолучитьТекущийЭлемент();
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось получить текущий элемент формы'"));
		Возврат;
	КонецПопытки;
	
	
	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьТабличныйДокументВТаблицуЗначений(ИсходныйТаблДок)
	
	// Шаблон таблицы
	Результат_ТаблЗнач = Новый ТаблицаЗначений;
	
	Результат_ТаблЗнач.Колонки.Добавить("Строка", Новый ОписаниеТипов("Строка"));
	КоличествоКолонок = ИсходныйТаблДок.ШиринаТаблицы;
	Для Итератор = 1 ПО КоличествоКолонок Цикл
		ИмяКолонки = "C" + Формат(Итератор, "ЧГ=0");
		Результат_ТаблЗнач.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"), ИмяКолонки);
	КонецЦикла;
	
	// Заполнение данными
	КоличествоСтрок = ИсходныйТаблДок.ВысотаТаблицы;
	Если КоличествоСтрок > 0 Тогда
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			НоваяСтрока = Результат_ТаблЗнач.Добавить();
			НоваяСтрока.Строка = "R" + Формат(НомерСтроки, "ЧГ=0");
			
			Для Итератор = 1 ПО КоличествоКолонок Цикл
				ИмяКолонки = "C" + Формат(Итератор, "ЧГ=0");
				ИмяОбласти = НоваяСтрока.Строка + ИмяКолонки;
				НоваяСтрока[ИмяКолонки] = ИсходныйТаблДок.Область(ИмяОбласти).Текст;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат_ТаблЗнач;
	
КонецФункции

&НаКлиенте
Процедура ТД_ВзятьИзФайлаПриИзменении(Элемент)
	
	Элементы.ТД_ИмяФайла.Доступность = ТД_ВзятьИзФайла;
	
	Если НЕ ТД_ВзятьИзФайла Тогда
		ТД_ИмяФайла = "";
	Иначе
		ТекущийЭлемент = Элементы.ТД_ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ВспомогательныеПроцедуры_Страницы_ПроверитьТабличныйДокумент

// Получение табличного документа на форме по данным шага
//
// Возвращаемое значение - указатель на табличный документ
&НаКлиенте
Функция СцТ_ПолучитьТаблДокНаФорме()
	
	//ТаблДокИмя = СцТ_ЗначениеВДереве(ДеревоЗначения, "ТабличныйДокумент", "");
	
	Если ПустаяСтрока(ЭлементФормы_Имя) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран табличныйдокумент.'");
		Сообщение.Поле  = "ТД_ЭлементФормы";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	СцТ_ПолучитьИнтерактивныйКонтейнер(ДанныеШага.ПолучитьРодителя());
	Если ИнтерактивныйКонтейнер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблДокОбъект = СцТ_ГлавнаяФорма.СцТ_НайтиИнтерактивныйОбъектТестируемогоПриложения(
		ИнтерактивныйКонтейнер,
		ВариантПоискаОбъекта,
		Тип("ТестируемоеПолеФормы"),
		ЭлементФормы_Имя,
		ЭлементФормы_Заголовок,
		ПутьКЭлементуФормы,
		Истина);
		
	
	//ТаблДокОбъект = ИнтерактивныйКонтейнер.НайтиОбъект(Тип("ТестируемоеПолеФормы"), , ЭлементФормы_Имя);
	Если ТипЗнч(ТаблДокОбъект) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, ТаблДокОбъект);
		Возврат Неопределено;
	КонецЕсли;
	
	//Если ТаблДокОбъект.Вид <> ВидПоляФормы.ПолеТабличногоДокумента Тогда
	//	ПоказатьПредупреждение(,
	//		НСтр("ru = 'Найденый объект тестируемого приложения не является табличным документом.'"));
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Возврат ТаблДокОбъект;
	
КонецФункции

// Обновление табличного документа по данным тестируемой формы
//
&НаСервере
Процедура СцТ_ОбновитьТаблДокПоДаннымФормы_НаСервере(ИмяОбластиТаблДок, ИмяРеквизита = "ТД_Данные", ИмяУзлаТабличногоДокумента = "ДанныеТабличногоДокумента")
	
	ЭтотОбъект[ИмяРеквизита].Очистить();
	
	ЭтотОбъект[ИмяРеквизита].Область().РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	УзелДанныхТаблДок = СцТ_НайтиУзелДереваФормы(
		ДеревоЗначения,
		"Имя",
		ИмяУзлаТабличногоДокумента);
	
	Если УзелДанныхТаблДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтр = 0;
	Для каждого УзелСтр Из УзелДанныхТаблДок.ПолучитьЭлементы() Цикл
		Если Лев(УзелСтр.Имя, 1) <> "R" Тогда
			Продолжить;
		КонецЕсли;
		ИндексСтр  = ИндексСтр + 1;
		ИндексСтлб = 0;
		Для каждого УзелСтлб Из УзелСтр.ПолучитьЭлементы() Цикл
			ИндексСтлб = ИндексСтлб + 1;
			Если НЕ ПустаяСтрока(УзелСтлб.Значение) Тогда
				Обл = ЭтотОбъект[ИмяРеквизита].Область(ИндексСтр, ИндексСтлб, ИндексСтр, ИндексСтлб);
				Обл.Текст = УзелСтлб.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УзелОбъединений = СцТ_НайтиУзелДереваФормы(
		ДеревоЗначения,
		"Имя",
		"ОбъединенныеОбласти");
	
	Если УзелОбъединений <> Неопределено Тогда
		
		Попытка
			КоординатыОбласти = СцТ_КоординатыОбласти(ИмяОбластиТаблДок);
			ОбластьОК = Истина;
		Исключение
			ОбластьОК = Ложь;
		КонецПопытки;
		
		Если ОбластьОК Тогда
			Для каждого УзелОбъединения Из УзелОбъединений.ПолучитьЭлементы() Цикл
				
				КоординатыОбъединения = СцТ_КоординатыОбласти(УзелОбъединения.Имя);
				КоординатыОбъединения.НачальнаяСтрока  =
					КоординатыОбъединения.НачальнаяСтрока - КоординатыОбласти.НачальнаяСтрока + 1;
				КоординатыОбъединения.НачальнаяКолонка =
					КоординатыОбъединения.НачальнаяКолонка - КоординатыОбласти.НачальнаяКолонка + 1;
				КоординатыОбъединения.КонечнаяСтрока   =
					КоординатыОбъединения.КонечнаяСтрока - КоординатыОбласти.НачальнаяСтрока + 1;
				КоординатыОбъединения.КонечнаяКолонка  =
					КоординатыОбъединения.КонечнаяКолонка - КоординатыОбласти.НачальнаяКолонка + 1;
				
				ОблОбъединения = ЭтотОбъект[ИмяРеквизита].Область(
					КоординатыОбъединения.НачальнаяСтрока,
					КоординатыОбъединения.НачальнаяКолонка,
					КоординатыОбъединения.КонечнаяСтрока,
					КоординатыОбъединения.КонечнаяКолонка);
				
				ОблОбъединения.Объединить();
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготовка данных для визуального сравнения двух любых таблиц
//
// Параметры
// ИмяТаблицы - имя сравниваемой таблицы
&НаСервере
Функция СцТ_ПодготовитьДанныеДляВизуальногоСравненияТабличныхДокументовНаСервере(ТестируемыйТабличныйДокумент)
	
	// Эталонная таблица - данные считываются из формы
	ЭталоннаяТаблица = ПреобразоватьТабличныйДокументВТаблицуЗначений(ТД_Данные);
	АдресЭталоннойТЗ = ПоместитьВоВременноеХранилище(ЭталоннаяТаблица, УникальныйИдентификатор);
	
	// Тестируемая таблица
	ТестируемаяТаблица = ПреобразоватьТабличныйДокументВТаблицуЗначений(ТестируемыйТабличныйДокумент);
	АдресТестовойТЗ    = ПоместитьВоВременноеХранилище(ТестируемаяТаблица , УникальныйИдентификатор);
	
	МассивИсключений    = Новый Массив;
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Строка");
	
	СтруктураПодготовленныхДанных = Новый Структура;
	СтруктураПодготовленныхДанных.Вставить("АдресЭталоннойТЗ"   , АдресЭталоннойТЗ);
	СтруктураПодготовленныхДанных.Вставить("АдресТестовойТЗ"    , АдресТестовойТЗ);
	СтруктураПодготовленныхДанных.Вставить("МассивИсключений"   , МассивИсключений);
	СтруктураПодготовленныхДанных.Вставить("МассивКлючевыхПолей", МассивКлючевыхПолей);
	СтруктураПодготовленныхДанных.Вставить("ТипОбъекта"         , "ТабличныйДокумент");
	СтруктураПодготовленныхДанных.Вставить("ИмяТаблицы"         , "");
	
	СтруктураПодготовленныхДанных.Вставить("НеОтображатьТочностьДат", Истина);
	СтруктураПодготовленныхДанных.Вставить("БезСохраненияИзменений" , Истина);
	
	
	
	Возврат СтруктураПодготовленныхДанных;
	
КонецФункции

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаТД(РезультатПроверки, ПолныйПутьКФайлу) Экспорт
	
	Если НЕ РезультатПроверки Тогда
		ТекстПредупреждения = Нстр("ru = 'Файл ""%1"" не существует. Проверьте наличие файла'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ПолныйПутьКФайлу);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ДД = Новый ДвоичныеДанные(ПолныйПутьКФайлу);
	АдрДД = ПоместитьВоВременноеХранилище(ДД, Новый УникальныйИдентификатор);
	
	ПрочитанныйТаблДок = ПолучитьИзВременногоХранилища(ПолучитьТД(АдрДД));
	
	// Попытка преобразовать строку в координаты областей табличного документа
	ИмяОбластиТаблДок = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(ТД_Область);
	Попытка
		КоординатыОбласти = СцТ_ГлавнаяФорма.СцТ_КоординатыОбластиИзАдреса(ТД_Область);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Неверно задана область табличного документа. Пример области: ""R2C3:R4C6"" или ""R2C3"".'");
		Сообщение.Поле  = "ТД_Область";
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
	// Подготовка узлов дерева
	УзелДанных = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(ДеревоЗначения, "ДанныеТабличногоДокумента");
	
	// Заполнение дерева данными
	СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеИзРеальногоТабличногоДокумента(
		УзелДанных,
		ПрочитанныйТаблДок,
		КоординатыОбласти);
		
	Модифицированность = Истина;
	
	ИмяОбластиТабДок = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(ТД_Область);
	
	
КонецПроцедуры




#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораВидовЭлементовФормы(ЗаполняемыйСписокВыбора)
	
	ЗаполняемыйСписокВыбора.Очистить();
	
	// Поле формы
	ЗаполняемыйСписокВыбора.Добавить("ПолеВвода"          , НСтр("ru = 'Поле ввода'"));
	ЗаполняемыйСписокВыбора.Добавить("Флажок"             , НСтр("ru = 'Флажок'"));
	ЗаполняемыйСписокВыбора.Добавить("Переключатель"      , НСтр("ru = 'Переключатель'"));
	ЗаполняемыйСписокВыбора.Добавить("Календарь"          , НСтр("ru = 'Календарь'"));
	ЗаполняемыйСписокВыбора.Добавить("Надпись"            , НСтр("ru = 'Картинка'"));
	ЗаполняемыйСписокВыбора.Добавить("ПолосаРегулирования", НСтр("ru = 'Полоса регулирования'"));
	ЗаполняемыйСписокВыбора.Добавить("ТабличныйДокумент"  , НСтр("ru = 'Табличный документ'"));
	
	ЗаполняемыйСписокВыбора.Добавить("ТаблицаФормы"       , НСтр("ru = 'Таблица формы'"));
	
	// Группа формы
	ЗаполняемыйСписокВыбора.Добавить("ГруппаКнопок"       , НСтр("ru = 'Группа кнопок'"));
	ЗаполняемыйСписокВыбора.Добавить("ГруппаКолонок"      , НСтр("ru = 'Группа колонок'"));
	ЗаполняемыйСписокВыбора.Добавить("КоманднаяПанель"    , НСтр("ru = 'Командная панель'"));
	ЗаполняемыйСписокВыбора.Добавить("КонекстноеМеню"     , НСтр("ru = 'Контекстное меню'"));
	ЗаполняемыйСписокВыбора.Добавить("ОбычнаяГруппа"      , НСтр("ru = 'Обычная группа'"));
	ЗаполняемыйСписокВыбора.Добавить("Подменю"            , НСтр("ru = 'Подменю'"));
	ЗаполняемыйСписокВыбора.Добавить("Страница"           , НСтр("ru = 'Страница'"));
	ЗаполняемыйСписокВыбора.Добавить("Страницы"           , НСтр("ru = 'Страницы'"));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормы_Выбрать(Команда)
	
	СцТ_ПолучитьИнтерактивныйКонтейнер(ДанныеШага.ПолучитьРодителя());
	
	Если ИнтерактивныйКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТекущегоЭлементаФормы = Новый Структура;
	
	ОписаниеТекущегоЭлементаФормы.Вставить("Тип"      , ЭлементФормы_Тип);
	ОписаниеТекущегоЭлементаФормы.Вставить("Заголовок", ЭлементФормы_Заголовок);
	ОписаниеТекущегоЭлементаФормы.Вставить("Имя"      , ЭлементФормы_Имя);
	
	// Тип выбираемых объектов определяется типом шага
	ТипыВыбираемыхОбъектов = Новый СписокЗначений;
	
	ТипыОтображаемых       = Новый СписокЗначений;
	
	Если ТипШага = "НажатьКнопкуКИ" Тогда
		
		
	ИначеЕсли ТипШага = "НайтиЭлементФормы" Тогда
		
		Если ПустаяСтрока(ЭлементФормы_Тип) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не выбран тип элемента'");
			Сообщение.Поле = "ЭлементФормы_Тип";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ТипыОтображаемых = Новый СписокЗначений;
		ТипыОтображаемых.Добавить("ГруппаКнопок");
		ТипыОтображаемых.Добавить("ГруппаКолонок");
		ТипыОтображаемых.Добавить("КоманднаяПанель");
		ТипыОтображаемых.Добавить("КонекстноеМеню");
		ТипыОтображаемых.Добавить("ОбычнаяГруппа");
		ТипыОтображаемых.Добавить("Подменю");
		ТипыОтображаемых.Добавить("Страница");
		ТипыОтображаемых.Добавить("Страницы");
		
		ТипыВыбираемыхОбъектов = Новый СписокЗначений;
		ТипыВыбираемыхОбъектов.Добавить(СцТ_ГлавнаяФорма.СцТ_ТипТестируемогоОбъектаИзЧисла(ЭлементФормы_Тип));
		
		/////////////////////////////////////////////////////
		
		// Виды элементов формы
		//
		//// Поля формы
		//ТипыВыбираемыхОбъектов.Добавить("ПолеHTMLДокумента");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеГеографическойСхемы");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеГрафическойСхемы");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеДендрограммы");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеДиаграммыГанта");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеИндикатора");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеКалендаря");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеКартинки");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеНадписи");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеПереключателя");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеПериода");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеПланировщика");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеПолосыРегулирования");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеТабличногоДокумента");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеТекстовогоДокумента");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеФлажка");
		//ТипыВыбираемыхОбъектов.Добавить("ПолеФорматированногоДокумента");
		//
		//// группы формы
		//ТипыВыбираемыхОбъектов.Добавить("ГруппаКнопок");
		//ТипыВыбираемыхОбъектов.Добавить("ГруппаКолонок");
		//ТипыВыбираемыхОбъектов.Добавить("КоманднаяПанель");
		//ТипыВыбираемыхОбъектов.Добавить("КонекстноеМеню");
		//ТипыВыбираемыхОбъектов.Добавить("ОбычнаяГруппа");
		//ТипыВыбираемыхОбъектов.Добавить("Подменю");
		//ТипыВыбираемыхОбъектов.Добавить("Страница");
		//ТипыВыбираемыхОбъектов.Добавить("Страницы");
		//
		//// Кнопки
		//ТипыВыбираемыхОбъектов.Добавить("Гиперссылка");
		//ТипыВыбираемыхОбъектов.Добавить("КнопкаКоманднойПанели");
		//ТипыВыбираемыхОбъектов.Добавить("ОбычнаяКнопка");
		//
		//// декорации
		//ТипыВыбираемыхОбъектов.Добавить("Картинка");
		//ТипыВыбираемыхОбъектов.Добавить("Надпись");
		//
		//ТипыОтображаемых.Добавить("ГруппаКнопок");
		//ТипыОтображаемых.Добавить("ГруппаКолонок");
		//ТипыОтображаемых.Добавить("КоманднаяПанель");
		//ТипыОтображаемых.Добавить("КонекстноеМеню");
		//ТипыОтображаемых.Добавить("ОбычнаяГруппа");
		//ТипыОтображаемых.Добавить("Подменю");
		//ТипыОтображаемых.Добавить("Страница");
		//ТипыОтображаемых.Добавить("Страницы");
		
	ИначеЕСли ТипШага = "НажатьКнопку" Тогда
		
		
	ИначеЕсли ТипШага = "ЗаполнитьОдинРеквизитФормы"
		ИЛИ ТипШага = "ЗаполнитьКолонкуТаблицы" Тогда
		
		
	ИначеЕсли ТипШага = "ЗаполнитьРеквизитыФормы"
		ИЛИ ТипШага = "ЗаполнитьСтрокуТаблицы" Тогда
		
		
	ИначеЕсли ТипШага = "ПроверитьТабличныйДокумент" Тогда
		
		ТипыВыбираемыхОбъектов.Добавить("ПолеТабличногоДокумента");
		
		ТипыОтображаемых.Добавить("Страница");
		ТипыОтображаемых.Добавить("ОбычнаяГруппа");
		
	ИначеЕсли ТипШага = "АвтоГруппаТабличныйДокумент" Тогда
		
		ТипыВыбираемыхОбъектов.Добавить("ПолеТабличногоДокумента");
		
		ТипыОтображаемых.Добавить("Страница");
		ТипыОтображаемых.Добавить("ОбычнаяГруппа");
		
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СцТ_ПослеВыбораТекстируемогоЭлементаФормы", ЭтотОбъект);
	
	СцТ_ГлавнаяФорма.СцТ_ВыбратьОбъектыТестируемогоПриложения(
		ИнтерактивныйКонтейнер,
		ТипыВыбираемыхОбъектов,
		ТипыОтображаемых,
		ОписаниеТекущегоЭлементаФормы,,
		ЭтотОбъект,,,,,,,
		ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеВыбораТекстируемогоЭлементаФормы(РезультатФормы, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормы_Заголовок = РезультатФормы.Заголовок;
	ЭлементФормы_Имя       = РезультатФормы.Имя;
	
	Если РезультатФормы.Вид = "ПолеТабличногоДокумента" Тогда
		ЭлементФормы_Вид = "ТабличныйДокумент";
	Иначе
		ЭлементФормы_Вид    = РезультатФормы.Вид;
	КонецЕсли;
	
	ПутьКЭлементуФормы = Новый Структура;
	НомерСтроки = 1;
	Для каждого СтруктураМассива Из РезультатФормы.ПутьКОбъекту Цикл
		ИмяСтруктурыСтроки = "Str_" + Формат(НомерСтроки, "ЧГ=0");
		
		// Тип объекта не сериализуется на сервере
		Если СтруктураМассива.ТипОбъекта = Тип("ТестируемаяГруппаКомандногоИнтерфейса") Тогда
			НовыйТип = "ТестируемаяГруппаКомандногоИнтерфейса";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяГруппаФормы") Тогда
			НовыйТип = "ТестируемаяГруппаФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяДекорацияФормы") Тогда
			НовыйТип = "ТестируемаяДекорацияФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяКнопкаКомандногоИнтерфейса") Тогда
			НовыйТип = "ТестируемаяКнопкаКомандногоИнтерфейса";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяКнопкаФормы") Тогда
			НовыйТип = "ТестируемаяКнопкаФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяТаблицаФормы") Тогда
			НовыйТип = "ТестируемаяТаблицаФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемоеПолеФормы") Тогда
			НовыйТип = "ТестируемоеПолеФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяФорма") Тогда
			НовыйТип = "ТестируемаяФорма";
		Иначе
			Продолжить;
		КонецЕсли;
		СтруктураМассива.ТипОбъекта = НовыйТип;
		
		ПутьКЭлементуФормы.Вставить(ИмяСтруктурыСтроки, СтруктураМассива);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	
	СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте(Истина);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормы_СпособПоиска(Команда)
	
	Если ПустаяСтрока(ЭлементФормы_Имя) И ПустаяСтрока(ЭлементФормы_Заголовок) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран элемент формы'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ЗапретДоступаКПути = (ПутьКЭлементуФормы <> Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантПоискаЭлемента"          , ВариантПоискаОбъекта);
	ПараметрыФормы.Вставить("ТипЭлемента"                    , ЭлементФормы_Тип);
	ПараметрыФормы.Вставить("ВидЭлемента"                    , ЭлементФормы_Вид);
	ПараметрыФормы.Вставить("ИмяЭлемента"                    , ЭлементФормы_Имя);
	ПараметрыФормы.Вставить("ЗаголовокЭлемента"              , ЭлементФормы_Заголовок);
	ПараметрыФормы.Вставить("ЗапретДоступаКПути"             , ЗапретДоступаКПути);
	ПараметрыФормы.Вставить("ЗапретДоступаКПути"             , ЗапретДоступаКПути);
	ПараметрыФормы.Вставить("ПутьКЭлементуФормы"             , ПутьКЭлементуФормы);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СцТ_ПослеЗакрытияФормыСпособаПоискаЭлементовФормы", ЭтотОбъект, Ложь);
	
	ФормаПравилаПоиска = ОткрытьФорму(ПутьКФормам + "СпособПоискаЭлементаФормы",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОповещениеОЗакрытии);
		
	ФормаПравилаПоиска.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеЗакрытияФормыСпособаПоискаЭлементовФормы(РезультатОкна, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатОкна) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВариантПоискаОбъекта   = РезультатОкна.ВариантПоискаЭлемента;
	ЭлементФормы_Имя       = РезультатОкна.ИмяЭлемента;
	ЭлементФормы_Заголовок = РезультатОкна.ЗаголовокЭлемента;
	ПутьКЭлементуФормы     = РезультатОкна.ПутьКЭлементуФормы;
	ЭлементФормы_Вид       = РезультатОкна.ВидЭлемента;
	
	Если ПутьПоискаОбъекта <> Неопределено И ПутьПоискаОбъекта.Количество() > 0 Тогда
		ПоследнийЭлементПоискаПути = ПутьПоискаОбъекта[ПутьПоискаОбъекта.ВГраница()];
		ПоследнийЭлементПоискаПути.ИмяОбъекта = ЭлементФормы_Имя;
		ПоследнийЭлементПоискаПути.ЗаголовокОбъекта = ЭлементФормы_Заголовок;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормы_ТипПриИзменении(Элемент)
	
	ЭлементФормы_Вид       = "";
	ЭлементФормы_Заголовок = "";
	ЭлементФормы_Имя       = "";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДействияПриОшибке()
	
	ДействиеПриОшибкеВШаге   = СцТ_ЗначениеВДереве(ДеревоЗначения, "ДействиеПриОшибке"  , "Остановить");
	ИмяПеременнойОшибкиВШаге = СцТ_ЗначениеВДереве(ДеревоЗначения, "ПеременнаяПриОшибке", "");
	
	Если ДействиеПриОшибкеВШаге = "Остановить" Тогда
		Элементы.СтраницыПеременнойОшибкиВШаге.ТекущаяСтраница = Элементы.СтраницаПеременнойОшибкивШагеПустая;
	Иначе
		Элементы.СтраницыПеременнойОшибкиВШаге.ТекущаяСтраница = Элементы.СтраницаПеременнойЗаполненная;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаЗагружаемогоТД(МассивВыбранныхФайлов, ДопПараметры) Экспорт
	
	Если МассивВыбранныхФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайлаТД = МассивВыбранныхФайлов[0];
	
	ДД = Новый ДвоичныеДанные(ПолноеИмяФайлаТД);
	ДД64 = Base64Строка(ДД);
	
	УзелТД = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ТабличныйДокумент");
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелТД,
		"ДвоичныеДанныеТД",
		ДД64);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Чтение табличного документа тестируемого приложения
// и добавление данных в дерево, хранящееся в шаге.
// Сведения об области возвращаются в параметрах УзелДанных и УзелОбъединений
// Параметры
//	УзелДанных - Данные шага об ячейках табличного документа
//	УзелОбъединений - данные шага об объединенных ячейках
//	ТаблДокОбъект - указатель на табличный документ
//	ОбластьТаблДок - указатель на область табличного документа
//	Обновление - признак обновления
&НаКлиенте
Процедура СцТ_ПолучитьДанныеТабличногоДокумента(
	УзелДанных,
	УзелОбъединений,
	ТаблДокОбъект,
	ОбластьТаблДок,
	Обновление = Ложь)
	
	УзлыДанных      = УзелДанных.ПолучитьЭлементы();
	УзлыОбъединений = УзелОбъединений.ПолучитьЭлементы();
	
	ТекущееКолвоСтрокТД = УзлыДанных.Количество();
	
	Попытка
		
		ОбъединенныеОбласти = Новый Соответствие;
		СцТ_ЗаполнитьЗначенияЯчеекТД(
			УзелДанных,
			ТаблДокОбъект,
			ОбластьТаблДок,
			ОбъединенныеОбласти,
			Обновление);
		
	Исключение
		
		// Удалить новые строки данных, если они были добавлены
		КолвоСтрокТД = УзлыДанных.Количество();
		Пока КолвоСтрокТД > ТекущееКолвоСтрокТД Цикл
			УзлыДанных.Удалить(КолвоСтрокТД - 1);
			КолвоСтрокТД = КолвоСтрокТД - 1;
		КонецЦикла;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Удалить прежние строки данных
	Для Итератор = 1 По ТекущееКолвоСтрокТД Цикл
		УзлыДанных.Удалить(0);
	КонецЦикла;
	
	// Добавить новые области объединений
	УзлыОбъединений.Очистить();
	Если ОбъединенныеОбласти.Количество() > 0 Тогда
		Для каждого ОписаниеОбъединеннойОбласти Из ОбъединенныеОбласти Цикл
			АдресОбласти = ОписаниеОбъединеннойОбласти.Ключ;
			СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(УзелОбъединений, АдресОбласти);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение ячеек табличного документа значениями
//
// Параметры
//	УзелЗначенийЯчеек- узел дерева данных с описание значений ячеек
//	ТаблДок - указатель на табличный документ
//	АдресОбласти - строка адреса области табличного документа
//	ОбъединенияЯчеек - объединения ячеек
//	Обновление - является ли это обновлением
&НаКлиенте
Процедура СцТ_ЗаполнитьЗначенияЯчеекТД(
	УзелЗначенийЯчеек,
	ТаблДок,
	АдресОбласти,
	ОбъединенияЯчеек,
	Обновление = Ложь)
	
	КоординатыОбласти = СцТ_ГлавнаяФорма.СцТ_КоординатыОбластиИзАдреса(АдресОбласти);
	
	БуферОбъединенийЯчеек = Новый Соответствие;
	
	Для НомерСтроки = КоординатыОбласти.НачальнаяСтрока По КоординатыОбласти.КонечнаяСтрока Цикл
		
		УзелСтроки = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(УзелЗначенийЯчеек,
			"R" + СтрЗаменить(Строка(НомерСтроки), Символ(160), ""),
			, , , , , , , , Ложь);
		
		Для НомерКолонки = КоординатыОбласти.НачальнаяКолонка По КоординатыОбласти.КонечнаяКолонка Цикл
			
			АдресЯчейки = СцТ_ГлавнаяФОрма.СцТ_АдресЯчейки(НомерСтроки, НомерКолонки);
			ТаблДок.УстановитьТекущуюОбласть(АдресЯчейки);
			
			//СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			//	УзелСтроки,
			//	"C" + СтрЗаменить(Строка(НомерКолонки), Символ(160), ""),
			//	ТаблДок.ПолучитьТекстТекущейОбласти());
			
			СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
				УзелСтроки,
				"C" + СтрЗаменить(Строка(НомерКолонки), Символ(160), ""),
				ТаблДок.ПолучитьТекстОбласти(АдресЯчейки));
			
			ФА = ТаблДок.ПолучитьАдресТекущейОбласти();
			
			Если ФА <> АдресЯчейки Тогда
				
				// ВАЖНО: ФА - адрес тек. области или ее имя
				ТекущееОбъединение = БуферОбъединенийЯчеек[ФА];
				Если ТекущееОбъединение = Неопределено Тогда
					
					// Изначально объединение - текущая ячейка
					АдресОбъединения = Новый Структура("НачСтрока,НачСтолбец,КонСтрока,КонСтолбец",
						НомерСтроки,
						НомерКолонки,
						НомерСтроки,
						НомерКолонки);
					БуферОбъединенийЯчеек[ФА] = АдресОбъединения;
					
				Иначе
					
					// Далее граница объединения расширяется вправо и вниз
					ТекущееОбъединение.КонСтолбец = НомерКолонки;
					ТекущееОбъединение.КонСтрока  = НомерСтроки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Преобразование объединений в адреса
	Для каждого КлючЗначение Из БуферОбъединенийЯчеек Цикл
		
		Координаты = КлючЗначение.Значение;
		Если Координаты.КонСтрока - Координаты.НачСтрока > 0
			ИЛИ Координаты.КонСтолбец - Координаты.НачСтолбец > 0 Тогда
			
			АдресОбъекдиненнойОбласти = СцТ_АдресОбластиИзКоординат(Координаты.НачСтрока,
				Координаты.НачСтолбец,
				Координаты.КонСтрока,
				Координаты.КонСтолбец);
			ОбъединенияЯчеек[АдресОбъекдиненнойОбласти] = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	АдресВсейОбласти = СцТ_АдресОбластиИзКоординат(
		КоординатыОбласти.НачальнаяСтрока,
		КоординатыОбласти.НачальнаяКолонка,
		КоординатыОбласти.КонечнаяСтрока,
		КоординатыОбласти.КонечнаяКолонка);
	
	Попытка
		ТаблДок.УстановитьТекущуюОбласть(АдресВсейОбласти);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_АдресОбластиИзКоординат(НачСтр, НачСтлб, КонСтр, КонСтлб)
	
	С160 = Символ(160);
	Возврат "R" + СтрЗаменить(Строка(НачСтр), С160, "")
				+ "C" + СтрЗаменить(Строка(НачСтлб), С160, "")
				+ ":R" + СтрЗаменить(Строка(КонСтр), С160, "")
				+ "C" + СтрЗаменить(Строка(КонСтлб), С160, "");
	
КонецФункции




#КонецОбласти

