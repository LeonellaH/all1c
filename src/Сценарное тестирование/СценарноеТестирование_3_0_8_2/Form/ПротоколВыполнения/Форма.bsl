
&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;


#Область Обработчики_Событий_Формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдрДД       = Параметры.АдрДД;
	ПутьКФормам = Параметры.ПутьКФормам;
	
	Если НЕ ПустаяСтрока(АдрДД) И Параметры.СформироватьПриОткрытии Тогда
		СкопоноватьОтчетНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область Обработчики_Событий_Элементов_Формы

&НаКлиенте
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда
	Если Расшифровка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		
		ИмяФайла = ПолучитьИмяВременногоФайла("json");
		ДД = ПолучитьИзВременногоХранилища(АдрДД);
		ДД.Записать(ИмяФайла);
		
		// В файле нет закрывающей скобки - добавление
		ЗаписьВФайлПротокола = Новый ЗаписьТекста(ИмяФайла, , , Истина);
		ЗаписьВФайлПротокола.ЗаписатьСтроку("]");
		ЗаписьВФайлПротокола.Закрыть();
		
		// Теперь чтение json
		СцТ_ЧтениеJSON = Новый ЧтениеJSON;
		СцТ_ЧтениеJSON.ОткрытьФайл(ИмяФайла);
		РезудьтатВыполнения = ПрочитатьJSON(СцТ_ЧтениеJSON);
		СцТ_ЧтениеJSON.Закрыть();
		
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;
		
		МассивИнфоСообщений = Новый Массив;
		
		СтруктураДанныхШага = Новый Структура;
		СтруктураДанныхШага.Вставить("Идентификатор", "");
		СтруктураДанныхШага.Вставить("Наименование" , "");
		СтруктураДанныхШага.Вставить("НомерШага"    , 0);
		
		Для каждого ТекСтруктура Из РезудьтатВыполнения Цикл
			Если ТекСтруктура.Идентификатор = Расшифровка Тогда
				Если ПустаяСтрока(СтруктураДанныхШага.Идентификатор) Тогда
					СтруктураДанныхШага.Идентификатор = ТекСтруктура.Идентификатор;
					СтруктураДанныхШага.Наименование  = ТекСтруктура.Наименование;
					СтруктураДанныхШага.НомерШага     = ТекСтруктура.НомерШага;
				КонецЕсли;
				
				Для каждого ИнфоСообщение Из ТекСтруктура.МассивИнфоСообщений Цикл
					МассивИнфоСообщений.Добавить(ИнфоСообщение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивИнфоСообщений.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("МассивИнфоСообщений"      , МассивИнфоСообщений);
			ПараметрыФормы.Вставить("ШагСценария_Идентификатор", 0);
			ПараметрыФормы.Вставить("ШагСценария_Номер"        , СтруктураДанныхШага.НомерШага);
			ПараметрыФормы.Вставить("ШагСценария_Наименование" , СтруктураДанныхШага.Наименование);
			
			ОткрытьФорму(СцТ_ГлавнаяФорма.ПутьКФормам + "СообщенияПротоколаВыполнения", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
			
			//Т_ГлавнаяФорма.СцТ_ПоказатьИнформационноеСообщение(МассивИнфоСообщений, СтруктураДанныхШага,,,,,, Истина);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Для выбранного шага в протоколе нет информационных сообщений'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_Команд

&НаКлиенте
Процедура Сформировать(Команда)
	
	СкопоноватьОтчетНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Основные_процедуры_и_функции

&НаСервере
Процедура СкопоноватьОтчетНаСервере()
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	ДокументРезультат.Очистить();
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	Макет = ОбъектНаСервере.ПолучитьМакет("МакетПротокола");
	
	МакетОбласти = Макет.ПолучитьОбласть("СтрокаПротокола");
	
	// Подготовка данных
	ИмяФайла = ПолучитьИмяВременногоФайла("json");
	ДД = ПолучитьИзВременногоХранилища(АдрДД);
	ДД.Записать(ИмяФайла);
	
	// В файле нет закрывающей скобки - добавление
	ЗаписьВФайлПротокола = Новый ЗаписьТекста(ИмяФайла, , , Истина);
	ЗаписьВФайлПротокола.ЗаписатьСтроку("]");
	ЗаписьВФайлПротокола.Закрыть();
	
	// Теперь чтение json
	СцТ_ЧтениеJSON = Новый ЧтениеJSON;
	СцТ_ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	РезудьтатВыполнения = ПрочитатьJSON(СцТ_ЧтениеJSON);
	СцТ_ЧтениеJSON.Закрыть();
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
	// Заполнение таблицы результата
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Идентификатор"        , Новый ОписаниеТипов("Строка"));
	ТаблицаРезультата.Колонки.Добавить("ИдентификаторРодителя", Новый ОписаниеТипов("Строка"));
	ТаблицаРезультата.Колонки.Добавить("НомерШага"            , Новый ОписаниеТипов("Число"));
	ТаблицаРезультата.Колонки.Добавить("НомерШагаСтрокой"     , Новый ОписаниеТипов("Строка"));
	ТаблицаРезультата.Колонки.Добавить("Наименование"         , Новый ОписаниеТипов("Строка"));
	ТаблицаРезультата.Колонки.Добавить("Ошибки"               , Новый ОписаниеТипов("Число"));
	ТаблицаРезультата.Колонки.Добавить("Время");
	ТаблицаРезультата.Колонки.Добавить("ТипШага");
	ТаблицаРезультата.Колонки.Добавить("Пропущено");
	ТаблицаРезультата.Колонки.Добавить("Дата");
	ТаблицаРезультата.Колонки.Добавить("Вызовы"               , Новый ОписаниеТипов("Число"));
	ТаблицаРезультата.Колонки.Добавить("Продолжительность"    , Новый ОписаниеТипов("Число"));
	ТаблицаРезультата.Колонки.Добавить("Отправлено"           , Новый ОписаниеТипов("Число"));
	ТаблицаРезультата.Колонки.Добавить("Принято"              , Новый ОписаниеТипов("Число"));
	
	ПредыдущийИдентификатор = "";
	ПредыдущаяСтрока = Неопределено;
	Для каждого СтруктураСтрокиРезультата Из РезудьтатВыполнения Цикл
		Если ПредыдущийИдентификатор <> СтруктураСтрокиРезультата.Идентификатор Тогда
			// Это новая строка
			СтрокаТаблицы = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураСтрокиРезультата);
			Если СтрокаТаблицы.ИдентификаторРодителя = "00000" Тогда
				СтрокаТаблицы.ИдентификаторРодителя = "00000000-0000-0000-0000-000000000000"
			КонецЕсли;
			ПредыдущийИдентификатор = СтруктураСтрокиРезультата.Идентификатор;
			ПредыдущаяСтрока = СтрокаТаблицы;
		Иначе
			// Строка уже существует - обновление некоторых параметров
			ПредыдущаяСтрока.Ошибки = СтрокаТаблицы.Ошибки + СтруктураСтрокиРезультата.Ошибки;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаИерархии = Новый ТаблицаЗначений;
	ТаблицаИерархии.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаИерархии.Колонки.Добавить("ИдентификаторРодителя", Новый ОписаниеТипов("Строка"));
	ТаблицаИерархии.Колонки.Добавить("НомерШага"            , Новый ОписаниеТипов("Число"));

	ТаблицаИерархии.Колонки.Добавить("Ошибки"               , Новый ОписаниеТипов("Число"));
	ТаблицаИерархии.Колонки.Добавить("Вызовы"               , Новый ОписаниеТипов("Число"));
	ТаблицаИерархии.Колонки.Добавить("Продолжительность"    , Новый ОписаниеТипов("Число"));
	ТаблицаИерархии.Колонки.Добавить("Отправлено"           , Новый ОписаниеТипов("Число"));
	ТаблицаИерархии.Колонки.Добавить("Принято"              , Новый ОписаниеТипов("Число"));
	
	ТаблицаИерархии.Колонки.Добавить("СтрокаТД");
	
	
	СтрокаТаблицы = ТаблицаИерархии.Добавить();
	СтрокаТаблицы.Идентификатор         = "00000000-0000-0000-0000-000000000000";
	СтрокаТаблицы.ИдентификаторРодителя         = "";
	
	// Шапка таблицы
	МакетОбласти = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьГруппы = ДокументРезультат.Вывести(МакетОбласти, 0, "", Истина);
	
	// Строка группировки отчета
	ПустойИдентификатор = "00000000-0000-0000-0000-000000000000";
	УзлыГрупп = Новый Соответствие;
	УзлыГрупп[ПустойИдентификатор] = 1;
	
	МакетОбласти = Макет.ПолучитьОбласть("СтрокаГруппировки0");
	МакетОбласти.Параметры.НазваниеШага = НСтр("ru = 'Протокол выполнения'");
	МакетОбласти.Параметры.НомерШага    = 0;
	МакетОбласти.Параметры.ИдентификаторШага = "00000000-0000-0000-0000-000000000000";
	
	ОбластьГруппы = ДокументРезультат.Вывести(МакетОбласти, 0, "", Истина);
	ОбластьГруппы.Имя = "00000000-0000-0000-0000-000000000000";
	
	//
	СтрокаТаблицы.СтрокаТД = ОбластьГруппы;
	
	Для каждого СтрокаРезультата ИЗ ТаблицаРезультата Цикл
		
		УровеньГруппы = УзлыГрупп[СтрокаРезультата.ИдентификаторРодителя];
		
		Если УровеньГруппы = Неопределено Тогда
			УровеньГруппы = 1;
		КонецЕсли;
		
		Если УровеньГруппы = 1 Тогда
			МакетОбласти = Макет.ПолучитьОбласть("СтрокаГруппировки1");
			
		ИначеЕсли УровеньГруппы = 2 Тогда
			МакетОбласти = Макет.ПолучитьОбласть("СтрокаГруппировки2");
			
		Иначе
			МакетОбласти = Макет.ПолучитьОбласть("СтрокаПротокола");
			
		КонецЕсли;
		
		МакетОбласти.Параметры.НазваниеШага      = СтрокаРезультата.Наименование;
		МакетОбласти.Параметры.НомерШага         = СтрокаРезультата.НомерШага;
		МакетОбласти.Параметры.ИдентификаторШага = СтрокаРезультата.Идентификатор;
		
		МакетОбласти.Параметры.Дата              = СтрокаРезультата.Дата;
		МакетОбласти.Параметры.Время             = СтрокаРезультата.Время;
		МакетОбласти.Параметры.Ошибки            = СтрокаРезультата.Ошибки;
		МакетОбласти.Параметры.Вызовы            = СтрокаРезультата.Вызовы;
		МакетОбласти.Параметры.Продолжительность = СтрокаРезультата.Продолжительность;
		МакетОбласти.Параметры.Отправлено        = СтрокаРезультата.Отправлено;
		МакетОбласти.Параметры.Принято           = СтрокаРезультата.Принято;
		
		// Подсчет статистики группы
		ИдентификаторРодителя = СтрокаРезультата.ИдентификаторРодителя;
		Пока Истина Цикл
			
			СтрокаИерархии = ТаблицаИерархии.Найти(ИдентификаторРодителя, "Идентификатор");
			Если СтрокаИерархии = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаИерархии.Ошибки            = СтрокаИерархии.Ошибки + СтрокаРезультата.Ошибки;
			СтрокаИерархии.Вызовы            = СтрокаИерархии.Ошибки + СтрокаРезультата.Вызовы;
			СтрокаИерархии.Продолжительность = СтрокаИерархии.Ошибки + СтрокаРезультата.Продолжительность;
			СтрокаИерархии.Отправлено        = СтрокаИерархии.Ошибки + СтрокаРезультата.Отправлено;
			СтрокаИерархии.Принято           = СтрокаИерархии.Ошибки + СтрокаРезультата.Принято;
			
			ИдентификаторРодителя = СтрокаИерархии.ИдентификаторРодителя;
			
		КонецЦикла;
		
		ЭтоГрупповойШаг = (ТаблицаРезультата.Найти(СтрокаРезультата.Идентификатор, "ИдентификаторРодителя") <> Неопределено);
		
		// Оформление
		ОбластьНазвания = МакетОбласти.Область("C2");
		ОбластьНазвания.Отступ =  УровеньГруппы * 4;
		Если ЭтоГрупповойШаг Тогда
			ОбластьНазвания.Шрифт = Новый Шрифт(ОбластьНазвания.Шрифт,,, Истина);
		КонецЕсли;
		
		ИмяГруппы = УзлыГрупп[СтрокаРезультата.ИдентификаторРодителя];
		Открыта = Истина;
		
		ОбластьГруппы = ДокументРезультат.Вывести(МакетОбласти, УровеньГруппы, ИмяГруппы, Открыта);
		ОбластьГруппы.Имя = СтрокаРезультата.Идентификатор;
		
		Если ЭтоГрупповойШаг Тогда
			// Нужно добавлять строки вначало, чтобы поиск находил последние элементы, а не первые при построении иерархии 
			// для повторяющихся шагов, например макрошагов, циклов и т.п.
			СтрокаТаблицы = ТаблицаИерархии.Вставить(0);
			СтрокаТаблицы.Идентификатор         = СтрокаРезультата.Идентификатор;
			СтрокаТаблицы.ИдентификаторРодителя = СтрокаРезультата.ИдентификаторРодителя;
			СтрокаТаблицы.СтрокаТД              = ОбластьГруппы;
		КонецЕсли;
		
		УзлыГрупп[СтрокаРезультата.Идентификатор] = УровеньГруппы + 1;
		
	КонецЦикла;
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	
	Для каждого СтрокаИерархии Из ТаблицаИерархии Цикл
		СтрокаТД = СтрокаИерархии.СтрокаТД;
		НомерСтроки = СтрокаТД.Верх;
		АдресСтроки = "R" + Формат(НомерСтроки, "ЧГ=0");
		
		ДокументРезультат.Область(АдресСтроки + "C6").СодержитЗначение = Истина;
		ДокументРезультат.Область(АдресСтроки + "C7").СодержитЗначение = Истина;
		ДокументРезультат.Область(АдресСтроки + "C8").СодержитЗначение = Истина;
		ДокументРезультат.Область(АдресСтроки + "C9").СодержитЗначение = Истина;
		ДокументРезультат.Область(АдресСтроки + "C10").СодержитЗначение = Истина;
		
		ДокументРезультат.Область(АдресСтроки + "C6").Значение = СтрокаИерархии.Ошибки;
		ДокументРезультат.Область(АдресСтроки + "C7").Значение = СтрокаИерархии.Вызовы;
		ДокументРезультат.Область(АдресСтроки + "C8").Значение = СтрокаИерархии.Продолжительность;
		ДокументРезультат.Область(АдресСтроки + "C9").Значение = СтрокаИерархии.Отправлено;
		ДокументРезультат.Область(АдресСтроки + "C10").Значение = СтрокаИерархии.Принято;
		
	КонецЦикла;
	

КонецПроцедуры




#КонецОбласти









