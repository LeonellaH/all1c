
// РежимОткрытияФормыЖурнала может принимать следующие значения
// ПоследовательностьШагов - добавление последовательности шагов в сценарий
// ЖурналДействий - создание шага с текстом журнала действий
// ТекстПроцедуры - создание шага с текстом процедуры


#Область Переменные

&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

// Переменная для хранения указателя на тестируемое приложение
&НаКлиенте
Перем СцТ_Контроллер Экспорт;

&НаКлиенте
Перем ВызвавшаяФорма Экспорт;

// Переменная для преобразования журнала в процедуру
&НаСервере
Перем СозданныеВОкнеИФормеПеременные;

// Переменная для преобразования журнала в процедуру
&НаСервере
Перем Отступ;

#КонецОбласти


#Область ЭкспортныеПроцедурыИФункции

&НаКлиенте
Процедура ОтработатьДоступностьКонтроллера() Экспорт
	
	Если СцТ_Контроллер = Неопределено Тогда
		Элементы.ЖурналНачатьЗапись.Доступность = Ложь;
		ТекстПредупреждения = НСтр("ru = 'Нет сведений о тестируемом приложении. Запись интерактивных действий невозможна'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		Элементы.ЖурналНачатьЗапись.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимСовместимости838 Тогда
		УстановитьДействие("ПередЗакрытием", "ПередЗакрытиеБезРежимаСовместимости");
	КонецЕсли;
	
	ЭтаОбработка        = РеквизитФормыВЗначение("Объект");
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	СостояниеЗаписи     = "Ожидание";
	
	РежимОткрытияФормыЖурнала = Параметры.РежимОткрытияФормыЖурнала;
	
	Если РежимОткрытияФормыЖурнала = "ПоследовательностьШагов" Тогда
		Элементы.СтраницаПоследовательностьШагов.Доступность = Истина;
		Элементы.СтраницаТекстПроцедуры.Доступность          = Ложь;
		Заголовок = НСтр("ru = 'Добавление шагов из журнала'");
		
	ИначеЕсли РежимОткрытияФормыЖурнала = "ЖурналДействий" Тогда
		Элементы.СтраницаПоследовательностьШагов.Доступность = Ложь;
		Элементы.СтраницаТекстПроцедуры.Доступность          = Ложь;
		Заголовок = НСтр("ru = 'Добавление журнала действий'");
		
		ПереданныйТекст = "";
		Если Параметры.Свойство("ТекстЖурнала", ПереданныйТекст) Тогда
			ТекстЖурнала.УстановитьТекст(ПереданныйТекст);
		КонецЕсли;
		
	ИначеЕсли РежимОткрытияФормыЖурнала = "ТекстПроцедуры" Тогда
		Элементы.СтраницаПоследовательностьШагов.Доступность = Ложь;
		Элементы.СтраницаТекстПроцедуры.Доступность          = Истина;
		Заголовок = НСтр("ru = 'Добавление текста процедуры на основе журнала действий'");
		
	КонецЕсли;
	
	СцТ_НастроитьОтображениеЭлементов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если СостояниеЗаписи <> "Ожидание" Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ОтменитьЗаписьЖурналаИЗакрытьФорму", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Отменить запись журнала?'"),
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		// Проверка, что есть несохраненные данные
		Если РежимОткрытияФормыЖурнала = "ПоследовательностьШагов"
			И  ШагиДерево.ПолучитьЭлементы().Количество() > 0 Тогда
			
			ТекстВопроса = НСтр("ru = 'Добавить шаги в дерево?'");
			
		ИначеЕсли РежимОткрытияФормыЖурнала = "ЖурналДействий"
			И НЕ ПустаяСтрока(ТекстЖурнала.ПолучитьТекст()) Тогда
			
			ТекстВопроса = НСтр("ru = 'Добавить текст журнала действий?'");
			
			
		ИначеЕсли РежимОткрытияФормыЖурнала = "ТекстПроцедуры"
			И НЕ ПустаяСтрока(ТекстПрограммы) Тогда
			
			ТекстВопроса = НСтр("ru = 'Добавить текст процедуры?'");
			
		Иначе
			ТекстВопроса = "";
			
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстВопроса) Тогда
			// Сохранять нечего - закрытие
			Модифицированность = Ложь;
			
		Иначе
			ОбработчикОповещения = Новый ОписаниеОповещения("СцТ_ОбработчикОтветаНаВопросОЗакрытииОкна", ЭтотОбъект);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 0);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если СостояниеЗаписи = "Запись"
			ИЛИ СостояниеЗаписи = "Пауза" Тогда
			СцТ_Контроллер.ПрерватьЗаписьЖурналаДействийПользователя();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиеБезРежимаСовместимости(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда
		
		Если СостояниеЗаписи <> "Ожидание" Тогда
			Отказ = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ОтменитьЗаписьЖурналаИЗакрытьФорму", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,
				НСтр("ru = 'Отменить запись журнала?'"),
				РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
		Если Модифицированность Тогда
			
			// Проверка, что есть несохраненные данные
			Если РежимОткрытияФормыЖурнала = "ПоследовательностьШагов"
				И  ШагиДерево.ПолучитьЭлементы().Количество() > 0 Тогда
				
				ТекстВопроса = НСтр("ru = 'Добавить шаги в дерево?'");
				
			ИначеЕсли РежимОткрытияФормыЖурнала = "ЖурналДействий"
				И НЕ ПустаяСтрока(ТекстЖурнала.ПолучитьТекст()) Тогда
				
				ТекстВопроса = НСтр("ru = 'Добавить текст журнала действий?'");
				
				
			ИначеЕсли РежимОткрытияФормыЖурнала = "ТекстПроцедуры"
				И НЕ ПустаяСтрока(ТекстПрограммы) Тогда
				
				ТекстВопроса = НСтр("ru = 'Добавить текст процедуры?'");
				
			Иначе
				ТекстВопроса = "";
				
			КонецЕсли;
			
			Если ПустаяСтрока(ТекстВопроса) Тогда
				// Сохранять нечего - закрытие
				Модифицированность = Ложь;
				
			Иначе
				ОбработчикОповещения = Новый ОписаниеОповещения("СцТ_ОбработчикОтветаНаВопросОЗакрытииОкна", ЭтотОбъект);
				ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 0);
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Если СостояниеЗаписи <> "Ожидание" ИЛИ Модифицированность Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru = 'Не завершена запись журнала действий пользователя. Все изменения будут утеряны'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если СостояниеЗаписи = "Запись"
			ИЛИ СостояниеЗаписи = "Пауза" Тогда
			СцТ_Контроллер.ПрерватьЗаписьЖурналаДействийПользователя();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры





#КонецОбласти


#Область ОбработчикиОповещений

&НаКлиенте
Процедура СцТ_ОбработчикОтветаНаВопросОЗакрытииОкна(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Закрытие с сохранением результата
		ВернутьРезультатИЗакрытьФорму();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		// Закрытие окна без сохранения
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОтменитьЗаписьЖурналаИЗакрытьФорму(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СцТ_Контроллер.ПрерватьЗаписьЖурналаДействийПользователя();
		СостояниеЗаписи    = "Ожидание";
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОтветаНаВопросОбОбновленииЖурнала(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры = "НачатьЗапись" Тогда
		НачатьЗаписьЖурнала();
	ИначеЕсли ДопПараметры = "ПрочитатьИзФайла" Тогда
		ЧтениеЖурналаИзФайла();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКоманд

&НаКлиенте
Процедура ШагиОбновить(Команда)
	
	ТекстЖурналаДействийПП = ТекстЖурнала.ПолучитьТекст();
	
	Если ПустаяСтрока(ТекстЖурналаДействийПП) Тогда
		ТекстПредупреждения = НСтр("ru = 'Журнал действий пользователя не заполнен.
										 |Запишите действия пользователя или прочитайте журнал из файла и повторите операцию'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СцТ_ПреобразоватьЖурналВИнтерактивныеШаги(ТекстЖурналаДействийПП);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПроцедурыОбновить(Команда)
	
	ТекстДляПреобразования = ТекстЖурнала.ПолучитьТекст();

	ТекстПрограммы = ПреобразоватьНаСервере(ТекстДляПреобразования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ВернутьРезультатИЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналНачатьЗапись(Команда)
	
	Если НЕ ПустаяСтрока(ТекстЖурнала.ПолучитьТекст()) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"РезультатОтветаНаВопросОбОбновленииЖурнала",
			ЭтотОбъект,
			"НачатьЗапись");
			
		ЗадатьПользователюВопрос(ОписаниеОповещения);
	Иначе
		НачатьЗаписьЖурнала();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналОстановка(Команда)
	
	// Проверка заполненности журнала не нужна
	// так как она была сделана перед началом записи
	
	Если СостояниеЗаписи = "Запись"
		ИЛИ СостояниеЗаписи = "Пауза" Тогда
		
		Попытка
			ЗаписанныйЖурнал = СцТ_Контроллер.ЗавершитьЗаписьЖурналаДействийПользователя();
			СостояниеЗаписи = "Ожидание";
			СцТ_НастроитьОтображениеЭлементов(ЭтаФорма);
			
			//Если ТекстЖурнала.КоличествоСтрок() = 0 Тогда
				ТекстЖурнала.УстановитьТекст(ЗаписанныйЖурнал);
			//Иначе
			//	СуществующийТекст = ТекстЖурнала.ПолучитьТекст();
			//	ТекстЖурнала.УстановитьТекст(СуществующийТекст + Символы.ПС + ЗаписанныйЖурнал);
			//КонецЕсли;
		Исключение
			ПоказатьПредупреждение(,
				НСтр("ru = 'Не удалось остановить запись журнала. Возможно, тестируемое приложение закрыто.'"));
			СостояниеЗаписи = "Ожидание";
			СцТ_НастроитьОтображениеЭлементов(ЭтаФорма);
			Возврат;
		КонецПопытки;
		
		// В зависимости от назначения формы,
		// нужно выполнить преобразование и открыть нужную страницу
		
		Если РежимОткрытияФормыЖурнала = "ПоследовательностьШагов" Тогда
			СцТ_ПреобразоватьЖурналВИнтерактивныеШаги(ТекстЖурнала.ПолучитьТекст());
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПоследовательностьШагов;
			
		ИначеЕсли РежимОткрытияФормыЖурнала = "ЖурналДействий" Тогда
			// Ничего делать не нужно. Все уже сделано
			
			
		ИначеЕсли РежимОткрытияФормыЖурнала = "ТекстПроцедуры" Тогда
			
			ТекстДляПреобразования = ТекстЖурнала.ПолучитьТекст();
			ТекстПрограммы = ПреобразоватьНаСервере(ТекстДляПреобразования);
			
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаТекстПроцедуры;
			
			
			// Других вариантов нет
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналПауза(Команда)
	
	// Проверка заполненности журнала не нужна
	// так как она была сделана перед началом записи
	
	Если СостояниеЗаписи = "Запись" Тогда
		Попытка
			СцТ_Контроллер.ПриостановитьЗаписьЖурналаДействийПользователя();
			СостояниеЗаписи = "Пауза";
			СцТ_НастроитьОтображениеЭлементов(ЭтаФорма);
		Исключение
			ПоказатьПредупреждение(,
				НСтр("ru = 'Не удалось приостановить запись журнала. Возможно, тестируемое приложение закрыто.'"));
			СостояниеЗаписи = "Ожидание";
			СцТ_НастроитьОтображениеЭлементов(ЭтаФорма);
		КонецПопытки;
	ИначеЕсли СостояниеЗаписи = "Пауза" Тогда
		Попытка
			СцТ_Контроллер.ПродолжитьЗаписьЖурналаДействийПользователя();
			СостояниеЗаписи = "Запись";
			СцТ_НастроитьОтображениеЭлементов(ЭтаФорма);
		Исключение
			ПоказатьПредупреждение(,
				НСтр("ru = 'Не удалось продолжить запись журнала. Возможно, тестируемое приложение закрыто.'"));
			СостояниеЗаписи = "Ожидание";
			СцТ_НастроитьОтображениеЭлементов(ЭтаФорма);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналПрочитатьИзФайла(Команда)
	
	Если НЕ ПустаяСтрока(ТекстЖурнала.ПолучитьТекст()) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"РезультатОтветаНаВопросОбОбновленииЖурнала",
			ЭтотОбъект,
			"ПрочитатьИзФайла");
			
		ЗадатьПользователюВопрос(ОписаниеОповещения);
	Иначе
		ЧтениеЖурналаИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСохранитьВФайл(Команда)
	
	Если ПустаяСтрока(ТекстЖурнала.ПолучитьТекст()) Тогда
		ТекстПредупреждения = НСтр("ru = 'Журнал пустой. Заполните журнал и повторите попытку'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ВыборФайла.Заголовок  = НСтр("ru='Запись файла журнала действий пользователя'");
	ВыборФайла.Фильтр     = НСтр("ru='Текстовые файлы (*.txt)|*.txt|Файлы XML (*.xml)|*.xml|Все файлы (*.*)|*.*'");
	ВыборФайла.Расширение = "txt";
	
	Если ВыборФайла.Выбрать() Тогда
		ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
		Попытка
			ТекстЖурнала.Записать(ПолноеИмяФайла);
		Исключение
			ТекстПредупреждения = НСтр("ru = 'Не удалось записать файл %1'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ПолноеИмяФайла);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СобытийЭлементовФормы

&НаКлиенте
Процедура ШагиДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры


#КонецОбласти


#Область ДополнительныеПроцедурыИФункции

#Область ОбработчикиКомандИЭлементовФормы

&НаКлиенте
Процедура НачатьЗаписьЖурнала()
	
	Если СостояниеЗаписи = "Ожидание" Тогда
		Попытка
			СцТ_Контроллер.НачатьЗаписьЖурналаДействийПользователя();
			СостояниеЗаписи = "Запись";
			СцТ_НастроитьОтображениеЭлементов(ЭтаФорма);
		Исключение
			ПоказатьПредупреждение(,
				НСтр("ru = 'Не удалось начать запись журнала. Возможно, тестируемое приложение закрыто.'"));
			СостояниеЗаписи = "Ожидание";
			СцТ_НастроитьОтображениеЭлементов(ЭтаФорма);
		КонецПопытки;
	ИначеЕсли СостояниеЗаписи = "Пауза" Тогда
		Попытка
			СцТ_Контроллер.ПродолжитьЗаписьЖурналаДействийПользователя();
			СостояниеЗаписи = "Запись";
			СцТ_НастроитьОтображениеЭлементов(ЭтаФорма);
		Исключение
			ПоказатьПредупреждение(,
				НСтр("ru = 'Не удалось продолжить запись журнала. Возможно, тестируемое приложение закрыто.'"));
			СостояниеЗаписи = "Ожидание";
			СцТ_НастроитьОтображениеЭлементов(ЭтаФорма);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьПользователюВопрос(ОписаниеОповещения)
	
	ТекстВопроса = НСтр("ru = 'Журнал не пустой. Существующий журнал будет заменен новым. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеЖурналаИзФайла()
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ВыборФайла.Заголовок  = НСтр("ru='Выбор файла журнала действий пользователя'");
	ВыборФайла.Фильтр     = НСтр("ru='Файлы журнала (*.txt, *.xml)|*.txt;*.xml|Все файлы (*.*)|*.*'");
	ВыборФайла.Расширение = "txt";
	
	Если ВыборФайла.Выбрать() Тогда
		ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
		Попытка
			ТекстЖурнала.Прочитать(ПолноеИмяФайла); 
		Исключение
			ТекстПредупреждения = НСтр("ru = 'Не удалось прочитать файл %1'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ПолноеИмяФайла);
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецПопытки;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если РежимОткрытияФормыЖурнала = "ПоследовательностьШагов" Тогда
		СцТ_ПреобразоватьЖурналВИнтерактивныеШаги(ТекстЖурнала.ПолучитьТекст());
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПоследовательностьШагов;
		
	ИначеЕсли РежимОткрытияФормыЖурнала = "ЖурналДействий" Тогда
		// Ничего делать не нужно. Все уже сделано
		
		
	ИначеЕсли РежимОткрытияФормыЖурнала = "ТекстПроцедуры" Тогда
		
		ТекстДляПреобразования = ТекстЖурнала.ПолучитьТекст();
		ТекстПрограммы = ПреобразоватьНаСервере(ТекстДляПреобразования);
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаТекстПроцедуры;
		
		
		// Других вариантов нет
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьРезультатИЗакрытьФорму()
	
	Если РежимОткрытияФормыЖурнала = "ПоследовательностьШагов" Тогда
		
		Если ШагиДерево.ПолучитьЭлементы().Количество() > 0 Тогда
			
			ПараметрыИмпорта = Новый Структура;
			ПараметрыИмпорта.Вставить("Дерево"                , ШагиДерево);
			ПараметрыИмпорта.Вставить("ЭлементФормы"          , Элементы.ШагиДерево);
			ПараметрыИмпорта.Вставить("КомментарийНачала"     , НСтр("ru = 'Начало записанных интерактивных шагов'"));
			ПараметрыИмпорта.Вставить("КомментарийОкончания"  , НСтр("ru = 'Конец записанных интерактивных шагов'"));
			ПараметрыИмпорта.Вставить("ИмяРеквизитаАктивности", "Активность");
			
			Оповестить("СцТ_ИмпортШаговСценария", ПараметрыИмпорта, ВызвавшаяФорма);
			
		КонецЕсли;
		Модифицированность = Ложь;
		
		Закрыть();
	ИначеЕсли РежимОткрытияФормыЖурнала = "ЖурналДействий" Тогда
		Модифицированность = Ложь;
		
		Закрыть(ТекстЖурнала.ПолучитьТекст());
		
		
	ИначеЕсли РежимОткрытияФормыЖурнала = "ТекстПроцедуры" Тогда
		
		Модифицированность = Ложь;
		
		Закрыть(ТекстПрограммы);
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СцТ_НастроитьОтображениеЭлементов(УправляемаяФорма)
	
	Если УправляемаяФорма.СостояниеЗаписи = "Ожидание" Тогда
		УправляемаяФорма.Элементы.ЖурналНачатьЗапись.Доступность     = Истина;
		УправляемаяФорма.Элементы.ЖурналПауза.Доступность            = Ложь;
		УправляемаяФорма.Элементы.ЖурналОстановка.Доступность        = Ложь;
		УправляемаяФорма.Элементы.ЖурналПрочитатьИзФайла.Доступность = Истина;
		УправляемаяФорма.Элементы.ЖурналСохранитьВФайл.Доступность   = Истина;
		
	ИначеЕсли УправляемаяФорма.СостояниеЗаписи = "Запись" Тогда
		УправляемаяФорма.Элементы.ЖурналНачатьЗапись.Доступность     = Ложь;
		УправляемаяФорма.Элементы.ЖурналПауза.Доступность            = Истина;
		УправляемаяФорма.Элементы.ЖурналОстановка.Доступность        = Истина;
		УправляемаяФорма.Элементы.ЖурналПрочитатьИзФайла.Доступность = Ложь;
		УправляемаяФорма.Элементы.ЖурналСохранитьВФайл.Доступность   = Ложь;
		
		УправляемаяФорма.Элементы.ЖурналНачатьЗапись.Пометка = Истина;
		УправляемаяФорма.Элементы.ЖурналПауза.Пометка        = Ложь;
		
	ИначеЕсли УправляемаяФорма.СостояниеЗаписи = "Пауза" Тогда
		УправляемаяФорма.Элементы.ЖурналНачатьЗапись.Доступность     = Истина;
		УправляемаяФорма.Элементы.ЖурналПауза.Доступность            = Истина;
		УправляемаяФорма.Элементы.ЖурналОстановка.Доступность        = Истина;
		УправляемаяФорма.Элементы.ЖурналПрочитатьИзФайла.Доступность = Ложь;
		УправляемаяФорма.Элементы.ЖурналСохранитьВФайл.Доступность   = Ложь;
		
		УправляемаяФорма.Элементы.ЖурналНачатьЗапись.Пометка = Ложь;
		УправляемаяФорма.Элементы.ЖурналПауза.Пометка        = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ПреобразованиеЖурналаДействийВШагиСценария

// ЗАМЕТКИ ПО ПРЕОБРАЗОВАНИЮ:

// После построения дерева шагов:
// 1) удаляются пустые автогруппы;
// 2) преобразуются шаги заполнения реквизитов
//    - если несколько реквизитов заполняются подряд элементарными действиями,
//      то это записывается одним шагом.



// Преобразует текст XML в последовательность имен тегов и их атрибутов,
//	т.к. может потребовать прохождение назад (не только вперед)
//
&НаКлиенте
Функция СцТ_ПреобразоватьЖурналВПоследовательность(ЖурналТекст)
	
	#Если НЕ ВебКлиент Тогда
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ЖурналТекст);
	ЧтениеXML.Прочитать(); // Прочитать узел <uilog>
	ТекущийНомерТега = 1;
	
	Результат = Новый Массив;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		ИмяУзла = ВРег(СокрЛП(ЧтениеXML.Имя));
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТекущийНомерТега = ТекущийНомерТега + 1;
			
			АтрибутыУзла = СцТ_ГлавнаяФорма.СцТ_АтрибутыУзла(ЧтениеXML);
			
			ОписательУзла = Новый Структура("ТипУзла,Имя,Атрибуты,НомерУзла",
											0, // Начало элемента
											ИмяУзла,
											АтрибутыУзла,
											ТекущийНомерТега);
			
			Результат.Добавить(ОписательУзла);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ИмяУзла <> "UILOG" Тогда
			
			ОписательУзла = Новый Структура("ТипУзла,Имя,Атрибуты,НомерУзла",
											1, // Конец элемента
											ИмяУзла,
											Неопределено,
											0);
			
			Результат.Добавить(ОписательУзла);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Для каждого Узел Из ШагиДерево.ПолучитьЭлементы() Цикл
		Элементы.ШагиДерево.Развернуть(Узел.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	Возврат Результат;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура СцТ_ПреобразоватьЖурналВИнтерактивныеШаги(Знач ЖурналДействийПользователя)
	
	ШагиДерево.ПолучитьЭлементы().Очистить();
	ТекущийУзелГруппы = ШагиДерево;
	
	// Необходимо преобразовать последовательность тегов xml в массив тегов, чтобы
	// было возможным двигаться назад и вперед по xml-документу, т.к. это необходимо
	// при анализе некоторых дейтсвий
	
	ПоследовательнотьДействий = СцТ_ПреобразоватьЖурналВПоследовательность(ЖурналДействийПользователя);
	ИндексТекущегоДействия    = 0;
	КоличествоДействий        = ПоследовательнотьДействий.Количество();
	
	СтекОписателейОбъектов = Новый Массив;
	
	Пока ИндексТекущегоДействия < КоличествоДействий Цикл
		
		ТекущийУзелЖурнала = ПоследовательнотьДействий[ИндексТекущегоДействия];
		
		Если ТекущийУзелЖурнала.ТипУзла = 0 Тогда
			
			Если СцТ_ГлавнаяФорма.СцТ_УзелОписываетОбъектТестируемогоПриложения(ТекущийУзелЖурнала.Имя) Тогда
				
				СцТ_ДобавитьОписательОбъектаВСтек(
					ТекущийУзелЖурнала.Имя,
					ТекущийУзелЖурнала.Атрибуты,
					СтекОписателейОбъектов);
				
				ТекущийУзелГруппы = СцТ_ДобавитьУзелИнтерактивнойАвтоГруппы(
					ТекущийУзелЖурнала.Имя,
					ТекущийУзелЖурнала.Атрибуты,
					ТекущийУзелГруппы,
					СтекОписателейОбъектов);
				
			Иначе
				
				СцТ_ДобавитьИнтерактивныйШаг(
					ТекущийУзелЖурнала.Имя,
					ТекущийУзелЖурнала.Атрибуты,
					СтекОписателейОбъектов,
					ТекущийУзелГруппы,
					ПоследовательнотьДействий,
					ИндексТекущегоДействия,
					КоличествоДействий);
				
			КонецЕсли;
			
		ИначеЕсли ТекущийУзелЖурнала.ТипУзла = 1 Тогда
			
			Если СцТ_ГлавнаяФорма.СцТ_УзелОписываетОбъектТестируемогоПриложения(ТекущийУзелЖурнала.Имя) Тогда
				СцТ_УдалитьОписательОбъектаИзСтека(СтекОписателейОбъектов);
			КонецЕсли;
			
			Если ТекущийУзелЖурнала.Имя = "FORM" ИЛИ ТекущийУзелЖурнала.Имя = "FORMTABLE" Тогда
				Попытка
					ТекущийУзелГруппы = ТекущийУзелГруппы.ПолучитьРодителя();
					Если ТекущийУзелГруппы = Неопределено Тогда
						ТекущийУзелГруппы = ШагиДерево;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
		ИндексТекущегоДействия = ИндексТекущегоДействия + 1;
		
	КонецЦикла;
	
	ПустыеАвтоГруппы = Новый Массив;
	СцТ_ДоработатьШагиЗаполненияРеквизитов(ШагиДерево);
	
	СцТ_УдалитьПустыеАвтоГруппы(ШагиДерево);
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ДобавитьОписательОбъектаВСтек(ИмяУзла, АтрибутыУзла, СтекОписателейОбъектов)
	
	Если ИмяУзла = "CLIENTAPPLICATIONWINDOW" Тогда
		ЗаголовокОбъекта = Строка(АтрибутыУзла["CAPTION"]);
	Иначе
		ЗаголовокОбъекта = Строка(АтрибутыУзла["TITLE"]);
	КонецЕсли;
	
	ОписательОбъекта = Новый Структура("ТипОбъекта,Заголовок,Имя,ДополнительноеСвойство",
									   ИмяУзла, ЗаголовокОбъекта, Строка(АтрибутыУзла["NAME"]));
	
	Если ИмяУзла = "CLIENTAPPLICATIONWINDOW" Тогда
		// Определить, является ли окно основным
		ОписательОбъекта.ДополнительноеСвойство = (ВРег(СокрЛП(Строка(АтрибутыУзла["ISMAIN"]))) = "TRUE");
		ОписательОбъекта.Вставить("ПДАФ", Неопределено); // Последняя добавленная автогруппа формы
	КонецЕсли;
	
	СтекОписателейОбъектов.Добавить(ОписательОбъекта);
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_УдалитьОписательОбъектаИзСтека(СтекОписателейОбъектов)
	
	Если СтекОписателейОбъектов.Количество() > 0 Тогда
		СтекОписателейОбъектов.Удалить(СтекОписателейОбъектов.ВГраница());
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьПутьОбъектаИзСтека(СтекОписателейОбъектов)
	
	// Примечание:
	// - для дочерних элементов формы путь записывается относительно формы (без самой формы);
	// - для дочерних элементов таблицы (колонки, кнопки) путь записывается
	//   относительно таблицы формы (без таблицы).
	// - для дочерних объектов командного интерфейса путь записывается относительно
	//   самого командного интерфейса
	
	Результат = Новый Массив;
	
	// Сначала в стеке отыскивается самый верхний объект автогруппы -
	// форма или таблица формы
	КоличествоЭлементовВСтеке = СтекОписателейОбъектов.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементовВСтеке Цикл
		
		ИндекстТекущегоОбъекта = КоличествоЭлементовВСтеке - ОбратныйИндекс;
		ОписательОбъекта = СтекОписателейОбъектов[ИндекстТекущегоОбъекта];
		Если (ОписательОбъекта.ТипОбъекта = "FORM"
			ИЛИ ОписательОбъекта.ТипОбъекта = "FORMTABLE"
			ИЛИ ОписательОбъекта.ТипОбъекта = "COMMANDINTERFACE")
				И ОбратныйИндекс <> 1 Тогда
			
			ИндексОбъектаАвтоГруппы = ИндекстТекущегоОбъекта;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Итератор = ИндексОбъектаАвтоГруппы + 1 По КоличествоЭлементовВСтеке - 1 Цикл
		
		ОписательОбъекта = СтекОписателейОбъектов[Итератор];
		ОписательЭлементаПути = Новый Структура;
		
		Если ОписательОбъекта.ТипОбъекта = "FORMFIELD" Тогда
			ОписательЭлементаПути.Вставить("Тип", 3);
		ИначеЕсли ОписательОбъекта.ТипОбъекта = "FORMGROUP" Тогда
			ОписательЭлементаПути.Вставить("Тип", 4);
		ИначеЕсли ОписательОбъекта.ТипОбъекта = "FORMTABLE" Тогда
			ОписательЭлементаПути.Вставить("Тип", 7);
		ИначеЕсли ОписательОбъекта.ТипОбъекта = "FORMBUTTON" Тогда
			ОписательЭлементаПути.Вставить("Тип", 5);
		ИначеЕсли ОписательОбъекта.ТипОбъекта = "FORMDECORATION" Тогда
			ОписательЭлементаПути.Вставить("Тип", 6);
		ИначеЕсли ОписательОбъекта.ТипОбъекта = "COMMANDINTERFACEGROUP" Тогда
			ОписательЭлементаПути.Вставить("Тип", 9);
		ИначеЕсли ОписательОбъекта.ТипОбъекта = "COMMANDINTERFACEBUTTON" Тогда
			ОписательЭлементаПути.Вставить("Тип", 10);
		Иначе
			ОписательЭлементаПути.Вставить("Тип", -1);
		КонецЕсли;
		
		ОписательЭлементаПути.Вставить("Имя",
			?(ПустаяСтрока(ОписательОбъекта.Имя),
			"$" + ОписательОбъекта.Заголовок,
			ОписательОбъекта.Имя));
		Если ОписательЭлементаПути.Имя = "$" И НЕ ПустаяСтрока(ОписательОбъекта.Имя) Тогда
			// Если заголовка нет (например, для командной панели формы)
			ОписательЭлементаПути.Имя = ОписательОбъекта.Имя;
		КонецЕсли;
		
		ОписательЭлементаПути.Вставить("Заголовок", ОписательОбъекта.Заголовок);
		
		Результат.Добавить(ОписательЭлементаПути);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ДоработатьШагиЗаполненияРеквизитов(УзелДереваШагов)
	
	Для каждого УзелШага Из УзелДереваШагов.ПолучитьЭлементы() Цикл
		
		СцТ_ДоработатьШагиЗаполненияРеквизитов(УзелШага);
		
		Если УзелШага.ТипШага <> "TmpЗаполнениеРеквизитов" Тогда
			Продолжить;
		КонецЕсли;
		
		УзелРеквизитов = УзелШага.Значение.ПолучитьЭлементы().Получить(0);
		УзелРодителя = УзелШага.ПолучитьРодителя();
		Если УзелРодителя.ТипШага = "ИнтерактивнаяАвтоГруппа" Тогда
			Если УзелРеквизитов.ПолучитьЭлементы().Количество() = 1 Тогда
				УзелШага.ТипШага = "ЗаполнитьОдинРеквизитФормы";
				УзелРеквизитов.Имя = "РеквизитФормы";
			Иначе
				УзелШага.ТипШага = "ЗаполнитьРеквизитыФормы";
				УзелРеквизитов.Имя = "Реквизиты";
			КонецЕсли;
		Иначе //Если УзелРодителя.ТипШага = "АвтоГруппаТаблицаФормы" Тогда
			Если УзелРеквизитов.ПолучитьЭлементы().Количество() = 1 Тогда
				УзелШага.ТипШага = "ЗаполнитьКолонкуТаблицы";
				УзелРеквизитов.Имя = "РеквизитФормы";
			Иначе
				УзелШага.ТипШага = "ЗаполнитьСтрокуТаблицы";
				УзелРеквизитов.Имя = "Реквизиты";
			КонецЕсли;
		КонецЕсли;
		
		// Формирование наименования шага
		Если УзелШага.ТипШага = "ЗаполнитьРеквизитыФормы" Тогда
			УзелШага.Наименование = НСтр("ru = 'Все поля формы'");
			УзелШага.Автоописание = НСтр("ru = 'Действия с полями формы:'");
		ИначеЕсли УзелШага.ТипШага = "ЗаполнитьСтрокуТаблицы" Тогда
			УзелШага.Наименование = НСтр("ru = 'Все ячейки текущей строки'");
			УзелШага.Автоописание = НСтр("ru = 'Действия с ячейками текущей строки:'");
		Иначе
			
			УзелРеквизита = УзелРеквизитов.ПолучитьЭлементы().Получить(0);
			УзелШага.Наименование = УзелРеквизита.Представление
				+ ": "
				+ СцТ_ГлавнаяФорма.СцТ_НачатьСоСтрочногоСимвола(
					СцТ_ГлавнаяФорма.СцТ_ПолучитьПредставлениеДействияСПолемФормы(УзелРеквизита.Действие))
				+ ?(УзелРеквизита.Действие = "ПерейтиКДате" ИЛИ УзелРеквизита.Действие = "УстановитьОтметку",
					" """ + УзелРеквизита.Значение + """",
					"");
			
			УзелШага.АвтоОписание = УзелРеквизита.Представление
				+ ": "
				+ СцТ_ГлавнаяФорма.СцТ_НачатьСоСтрочногоСимвола(
					СцТ_ГлавнаяФорма.СцТ_ПолучитьПредставлениеДействияСПолемФормы(УзелРеквизита.Действие))
				+ ?(УзелРеквизита.Действие <> "Открыть"
						И УзелРеквизита.Действие <> "Очистить"
						И УзелРеквизита.Действие <> "ПерейтиНаГодВперед"
						И УзелРеквизита.Действие <> "ПерейтиНаГодНазад"
						И УзелРеквизита.Действие <> "ПерейтиНаМесяцВперед"
						И УзелРеквизита.Действие <> "ПерейтиНаМесяцНазад"
						И УзелРеквизита.Действие <> "УвеличитьЗначение"
						И УзелРеквизита.Действие <> "УменьшитьЗначение",
					" """ + УзелРеквизита.Значение + """",
					"");
			
		КонецЕсли;
		
		Если УзелШага.ТипШага = "ЗаполнитьРеквизитыФормы" ИЛИ УзелШага.ТипШага = "ЗаполнитьСтрокуТаблицы" Тогда
			
			Для каждого УзелРеквизита Из УзелРеквизитов.ПолучитьЭлементы() Цикл
				
				ОписаниеРеквизита = УзелРеквизита.Представление
					+
					": "
					+ СцТ_ГлавнаяФорма.СцТ_НачатьСоСтрочногоСимвола(
						СцТ_ГлавнаяФорма.СцТ_ПолучитьПредставлениеДействияСПолемФормы(УзелРеквизита.Действие))
					+ ?(УзелРеквизита.Действие <> "Открыть"
						И УзелРеквизита.Действие <> "Очистить"
						И УзелРеквизита.Действие <> "ПерейтиНаГодВперед"
						И УзелРеквизита.Действие <> "ПерейтиНаГодНазад"
						И УзелРеквизита.Действие <> "ПерейтиНаМесяцВперед"
						И УзелРеквизита.Действие <> "ПерейтиНаМесяцНазад"
						И УзелРеквизита.Действие <> "УвеличитьЗначение"
						И УзелРеквизита.Действие <> "УменьшитьЗначение",
						" """ + УзелРеквизита.Значение + """",
						"");
				
				УзелШага.АвтоОписание = УзелШага.АвтоОписание + Символы.ПС + ОписаниеРеквизита;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ДобавитьИнтерактивныйШаг(
	ИмяКоманды,
	Атрибуты,
	СтекОписателейОбъектов,
	ТекущийУзелГруппы,
	ПоследовательнотьДействий,
	ИндексТекущегоДействия,
	КоличествоДействий)
	
	Если СтекОписателейОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Объект, для которого выполнятся действие
	ОписательОбъекта = СтекОписателейОбъектов[СтекОписателейОбъектов.ВГраница()];
	
	Если ИмяКоманды = "ACTIVATE" Тогда // Нужные элементы активизируются автоматически
		Возврат;
	
	ИначеЕсли ИмяКоманды = "CLOSE" И ОписательОбъекта.ТипОбъекта = "CLIENTAPPLICATIONWINDOW" Тогда
		
		Если ОписательОбъекта.ДополнительноеСвойство = Истина Тогда
			
			Новыйшаг = ТекущийУзелГруппы.ПолучитьЭлементы().Добавить();
			Новыйшаг.ТипШага      = "ЗавершитьРаботуТестируемогоКлиента";
			Новыйшаг.Активность   = Истина;
			Новыйшаг.Наименование = НСтр("ru = 'Закрыть тестируемое приложение'");
			Новыйшаг.Автоописание = НСтр("ru = 'Закрыть главное окно тестируемого приложения.'");
			
		Иначе
			
			// Закрытие текущего окна формы
			
			Если ОписательОбъекта.ПДАФ <> Неопределено Тогда
				
				УзелИнтерактивнойГруппы = ОписательОбъекта.ПДАФ;
				
			Иначе
				
				// Если нет автогруппы формы, тогда создать автогруппу формы
				
				АтрибутыИнтерактивнойФормы = Новый Соответствие;
				АтрибутыИнтерактивнойФормы["TITLE"] = ОписательОбъекта.Заголовок;
				УзелИнтерактивнойГруппы = СцТ_ДобавитьУзелИнтерактивнойАвтоГруппы(
					"FORM",
					АтрибутыИнтерактивнойФормы,
					ТекущийУзелГруппы,
					СтекОписателейОбъектов,
					Истина);
				
			КонецЕсли;
			
			Новыйшаг = УзелИнтерактивнойГруппы.ПолучитьЭлементы().Добавить();
			НовыйШаг.ТипШага      = "ЗакрытьКлиентскоеОкноФормы";
			НовыйШаг.Наименование = НСтр("ru = 'Закрыть окно текущей формы'");
			НовыйШаг.Автоописание = НСтр("ru = 'Закрыть окно, в котором располагается текущая форма'");
			
			НовыйШаг.Описание         = "";
			НовыйШаг.Активность       = Истина;
			НовыйШаг.ВыполнитьВручную = 0;
			
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "EXECUTECOMMAND" Тогда
		СцТ_ДобавитьШаг_ВыполнитьИнтерактивнуюКоманду(Строка(Атрибуты["URL"]), ТекущийУзелГруппы);
		
	ИначеЕсли (ИмяКоманды = "CLEAR"
		ИЛИ ИмяКоманды = "INCREASEVALUE"
		ИЛИ ИмяКоманды = "DECREASEVALUE"
		ИЛИ ИмяКоманды = "STARTCHOOSING"
		ИЛИ ИмяКоманды = "STARTCHOOSINGFROMCHOICELIST"
		ИЛИ ИмяКоманды = "EXECUTECHOICEFROMCHOICELIST"
		ИЛИ ИмяКоманды = "OPEN"
		ИЛИ ИмяКоманды = "GOTONEXTMONTH"
		ИЛИ ИмяКоманды = "GOTOPREVIOUSMONTH"
		ИЛИ ИмяКоманды = "GOTONEXTYEAR"
		ИЛИ ИмяКоманды = "GOTOPREVIOUSYEAR"
		ИЛИ ИмяКоманды = "INPUTTEXT"
		ИЛИ ИмяКоманды = "SELECTOPTION"
		ИЛИ ИмяКоманды = "GOTODATE")
		И ОписательОбъекта.ТипОбъекта = "FORMFIELD" Тогда
		
		СцТ_ДобавитьШагДействияНадРеквизитом(
			ИмяКоманды,
			Атрибуты,
			ОписательОбъекта,
			ТекущийУзелГруппы,
			ПоследовательнотьДействий,
			ИндексТекущегоДействия,
			КоличествоДействий,
			СтекОписателейОбъектов);
		
	ИначеЕсли ИмяКоманды = "CLICK" ИЛИ ИмяКоманды = "SETCHECK"Тогда
		
		СцТ_ДобавитьШаг_Нажать(ТекущийУзелГруппы, ОписательОбъекта, ИмяКоманды, СтекОписателейОбъектов);
		
	ИначеЕсли (ИмяКоманды = "GOONELEVELUP"
		ИЛИ ИмяКоманды = "GOONELEVELDOWN"
		ИЛИ ИмяКоманды = "GOTONEXTROW"
		ИЛИ ИмяКоманды = "GOTOPREVIOUSROW"
		ИЛИ ИмяКоманды = "GOTOFIRSTROW"
		ИЛИ ИмяКоманды = "GOTOLASTROW"
		ИЛИ ИмяКоманды = "CHANGEROW"
		ИЛИ ИмяКоманды = "ENDEDITROW"
		ИЛИ ИмяКоманды = "ADDROW"
		ИЛИ ИмяКоманды = "DELETEROW"
		ИЛИ ИмяКоманды = "EXPAND"
		ИЛИ ИмяКоманды = "COLLAPSE"
		ИЛИ ИмяКоманды = "CHOOSE"
		ИЛИ ИмяКоманды = "GOTONEXTITEM"
		ИЛИ ИмяКоманды = "GOTOPREVIOUSITEM")
		И ОписательОбъекта.ТипОбъекта = "FORMTABLE" Тогда
		// Это действие с таблицей формы
		
		СцТ_ДобавитьШаг_ДействиеСТаблицей(ИмяКоманды, ТекущийУзелГруппы);
		
	ИначеЕсли ИмяКоманды = "GOTOROW"
		И ОписательОбъекта.ТипОбъекта = "FORMTABLE" Тогда
		
		Направление = ВРег(СокрЛП(Строка(Атрибуты["DIRECTION"])));
		Если Направление <> "UP" И Направление <> "DOWN" Тогда
			Возврат; // Направление перехода задано неверно
		КонецЕсли;
		
		НовыйШаг = ТекущийУзелГруппы.ПолучитьЭлементы().Добавить();
		Новыйшаг.ТипШага    = "НайтиСтрокуТаблицы";
		НовыйШаг.Активность = 1;
		
		НовыйШаг.Наименование = НСтр("ru = 'Найти строку таблицы'");
		НовыйШаг.Автоописание = НСтр("ru = 'Найти строку таблицы и сделать ее текущей.
									 |Область поиска: %1.'");
		
		НовыйШаг.Автоописание = СтрЗаменить(НовыйШаг.Автоописание,
			"%1",
			?(Направление = "UP",
			  НСтр("ru = 'от текущей строки вверх'"),
			  НСтр("ru = 'от текущей строки вниз'")));
		
		УзелКолонок = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НовыйШаг.Значение, "КолонкиВСтроке");
		ИндексЧтенияКолонок = ИндексТекущегоДействия + 1;
		ОписаниеТаблицы     = "";
		
		Если ИндексЧтенияКолонок < КоличествоДействий Тогда
			ТекущееДействие = ПоследовательнотьДействий[ИндексЧтенияКолонок];
			Пока ТекущееДействие.Имя = "FIELD"
				И ИндексЧтенияКолонок < КоличествоДействий Цикл
				
				Если ТекущееДействие.ТипУзла = 0 Тогда
					
					ЗаголовокКолонки = Строка(ТекущееДействие.Атрибуты["TITLE"]);
					Если НЕ ПустаяСтрока(ЗаголовокКолонки) Тогда
						
						ТекстВЯчейке = Строка(ТекущееДействие.Атрибуты["CELLTEXT"]);
						
						УзелКолонки = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
							УзелКолонок,
							"$" + ЗаголовокКолонки,
							ТекстВЯчейке,
							ЗаголовокКолонки,
							,
							ЗаголовокКолонки,
							,
							,
							"");
						
						ОписаниеТаблицы = ОписаниеТаблицы
							+ ЗаголовокКолонки
							+ ": """
							+ ТекстВЯчейке
							+ """"
							+ ";"
							+ Символы.ПС;
							
					КонецЕсли;
					
				КонецЕсли;
				ИндексЧтенияКолонок = ИндексЧтенияКолонок + 1;
				ТекущееДействие     = ПоследовательнотьДействий[ИндексЧтенияКолонок];
			КонецЦикла;
		КонецЕсли;
		
		ИндексТекущегоДействия = ИндексЧтенияКолонок - 1;
		
		Если НЕ ПустаяСтрока(ОписаниеТаблицы) Тогда
			НовыйШаг.Автоописание = НовыйШаг.Автоописание
				+ Символы.ПС
				+ Символы.ПС
				+ НСтр("ru = 'Значения в строке:'")
				+ Символы.ПС
				+ ОписаниеТаблицы;
		КонецЕсли;
		
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			НовыйШаг.Значение,
			"НазначениеШага",
			"СделатьТекущейСтрокой");
		
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			НовыйШаг.Значение,
			"ОбластьПоиска",
			?(Направление = "UP", "ОтТекущейСтрокиВверх", "ОтТекущейСтроки"));
		
	Иначе
		
		// Чтобы всегда можно было отследить добавление записи новых команд в журнале
		ТекстСообщения = НСтр("ru = 'Неизвестное имя команды ""%1"" для объекта ""%2""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяКоманды);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОписательОбъекта.ТипОбъекта);
		
		СцТ_СообщитьОбОшибке(ТекстСообщения);
		
	// ПОКА НЕ РЕАЛИЗОВАНО, Т.К. НЕТ ПОДХОДЯЩИХ ТИПОВ ШАГОВ В СЦЕНАРИИ
	//ИначеЕсли ИмяКоманды = "gotoNextItem" Тогда
	//	ТестируемыйОбъект.ПерейтиКСледующемуЭлементу();
	//	
	//ИначеЕсли ИмяКоманды = "gotoPreviousItem" Тогда
	//	ТестируемыйОбъект.ПерейтиКПредыдущемуЭлементу();
	//	
	//ИначеЕсли ИмяКоманды = "finishEditingCurrentArea" Тогда
	//	ТестируемыйОбъект.ЗавершитьРедактированиеТекущейОбласти();
	//	
	//ИначеЕсли ИмяКоманды = "beginEditingCurrentArea" Тогда
	//	ТестируемыйОбъект.НачатьРедактированиеТекущейОбласти();
	//	
	//ИначеЕсли ИмяКоманды = "setCurrentArea" Тогда
	//	ТестируемыйОбъект.УстановитьТекущуюОбласть(Строка(АтрибутыКоманды["area"]));
	//	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ДобавитьУзелИнтерактивнойАвтоГруппы(
	Знач ИмяУзла,
	АтрибутыУзла,
	ТекущийУзелГруппы,
	СтекОписателейОбъектов,
	ОкноФормыНаВершинеСтека = Ложь)
	
	Если ИмяУзла <> "FORM" И ИмяУзла <> "FORMTABLE" Тогда
		Возврат ТекущийУзелГруппы;
	КонецЕсли;
	
	ЗаголовокОбъекта = Строка(АтрибутыУзла["TITLE"]);
	ИмяОбъекта       = Строка(АтрибутыУзла["NAME"]);
	Если ПустаяСтрока(ИмяОбъекта) Тогда
		ИмяОбъекта = "$" + ЗаголовокОбъекта;
	КонецЕсли;
	
	Если ИмяУзла = "FORMTABLE"
		И ТекущийУзелГруппы <> ШагиДерево
		И ТекущийУзелГруппы.ТипШага = "ИнтерактивнаяАвтоГруппа" Тогда
		// Найти последний добавленный шаг. Если это та же таблица,
		// тогда использовать ее
		
		ДочерниеУзлы = ТекущийУзелГруппы.ПолучитьЭлементы();
		КоличествоДочернихУзлов = ДочерниеУзлы.Количество();
		Если КоличествоДочернихУзлов > 0 Тогда
			ПоследнийУзел = ДочерниеУзлы[КоличествоДочернихУзлов - 1];
			Если ПоследнийУзел.ТипШага = "АвтоГруппаТаблицаФормы" Тогда
				УзелОписанияТаблицы = ПоследнийУзел.Значение.ПолучитьЭлементы().Получить(0);
				Если УзелОписанияТаблицы.Синоним = ЗаголовокОбъекта Тогда
					Возврат ПоследнийУзел;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяГруппа = ТекущийУзелГруппы.ПолучитьЭлементы().Добавить();
	НоваяГруппа.Активность = 1;
	НоваяГруппа.УИШ        = Строка(Новый УникальныйИдентификатор);
	
	Если ИмяУзла = "FORM" Тогда
		
		// Сохранение для окна указателя на последнюю добавленную автогруппу формы
		ОписательОкна = СтекОписателейОбъектов[0];
		ОписательОкна.ПДАФ = НоваяГруппа;
		
		ЗаголовокОкна = ОписательОкна.Заголовок;
		
		НоваяГруппа.ТипШага              = "ИнтерактивнаяАвтоГруппа";
		НоваяГруппа.ЗаголовокФормы       = ЗаголовокОбъекта;
		НоваяГруппа.ПредставлениеОбъекта = ?(ПустаяСтрока(ЗаголовокОбъекта), НСтр("ru = '<без заголовка>'"), ЗаголовокОбъекта);
		НоваяГруппа.Наименование = НСтр("ru = 'Форма ""'")
			+ НоваяГруппа.ПредставлениеОбъекта
			+ """";
		НоваяГруппа.Автоописание = НСтр("ru = 'Интерактивная работа с формой ""'")
			+ НоваяГруппа.ПредставлениеОбъекта
			+ """";
		
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			НоваяГруппа.Значение,
			"ЗаголовокОкнаФормы",
			ЗаголовокОкна);
		
		// Далее создание шага "НайтиФорму"
		ОписательРодительскогоОбъекта = Неопределено;
		Если ОкноФормыНаВершинеСтека И СтекОписателейОбъектов.Количество() > 0 Тогда
			ОписательРодительскогоОбъекта = СтекОписателейОбъектов[СтекОписателейОбъектов.ВГраница()];
		ИначеЕсли СтекОписателейОбъектов.Количество() > 1 Тогда
			ОписательРодительскогоОбъекта = СтекОписателейОбъектов[СтекОписателейОбъектов.ВГраница() - 1];
		КонецЕсли;
		
		Если ОписательРодительскогоОбъекта <> Неопределено
			И ОписательРодительскогоОбъекта.ТипОбъекта <> "CLIENTAPPLICATIONWINDOW" Тогда
			ОписательРодительскогоОбъекта = Неопределено;
		КонецЕсли;
		
		ШагНайтиФорму = НоваяГруппа.ПолучитьЭлементы().Добавить();
		ШагНайтиФорму.ТипШага        = "НайтиФорму";
		ШагНайтиФорму.Активность     = 1;
		ШагНайтиФорму.Наименование   = НСтр("ru = 'Найти форму'");
		ШагНайтиФорму.ЗаголовокФормы = ЗаголовокОбъекта;
		
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(ШагНайтиФорму.Значение, "ИскатьПоИмени", Ложь);
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(ШагНайтиФорму.Значение, "ИскатьПоЗаголовку", НЕ ОкноФормыНаВершинеСтека);
		
		ИскатьПоЗаголовкуОкна = НЕ ПустаяСтрока(ЗаголовокОкна);
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(ШагНайтиФорму.Значение,
			"ИскатьПоЗаголовкуОкна",
			ИскатьПоЗаголовкуОкна);
		
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(ШагНайтиФорму.Значение, "ЗаголовокОкнаФормы", ЗаголовокОкна);
		
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ШагНайтиФорму.Значение,
			"ЭлементыФормы",
			,
			НСтр("ru = 'Элементы искомой формы'"),
			Ложь);
		
		Если ОкноФормыНаВершинеСтека Тогда
			ШагНайтиФорму.АвтоОписание = НСтр("ru = 'Найти форму, привязать форму к интерактивной автогруппе.'");
		Иначе
			ШагНайтиФорму.АвтоОписание = НСтр("ru = 'Найти форму с заголовком, удовлетворяющим шаблону ""%1"". Привязать форму к интерактивной автогруппе.'");
			ШагНайтиФорму.АвтоОписание = СтрЗаменить(ШагНайтиФорму.АвтоОписание, "%1", ШагНайтиФорму.ЗаголовокФормы);
		КонецЕсли;
		
		Если ИскатьПоЗаголовкуОкна Тогда
			ШагНайтиФорму.АвтоОписание = ШагНайтиФорму.АвтоОписание
				+ Символы.ПС
				+ НСтр("ru = 'Форма располагается в окне с заголовком, удовлетворяющим шаблону ""'")
				+ ЗаголовокОкна
				+ """.";
		КонецЕсли;
		
		ШагНайтиФорму.ДанныеКартинки = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеКартинки_НаКлиенте(ШагНайтиФорму);
		
	ИначеЕсли ИмяУзла = "FORMTABLE" Тогда
		
		НоваяГруппа.ТипШага = "АвтоГруппаТаблицаФормы";
		
		НоваяГруппа.Наименование = НСтр("ru = 'Таблица формы ""'")
			+ ЗаголовокОбъекта
			+ """";
		НоваяГруппа.Автоописание = НСтр("ru = 'Работа с таблицей формы ""'")
			+ ЗаголовокОбъекта
			+ """";
		
		УзелОписанияТаблицы = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НоваяГруппа.Значение, "ОписаниеТаблицы");
		УзелОписанияТаблицы.Значение      = ИмяОбъекта;
		УзелОписанияТаблицы.Синоним       = ЗаголовокОбъекта;
		УзелОписанияТаблицы.Представление = ЗаголовокОбъекта;
		
		СцТ_ДобавитьУзелПутиОбъекта(НоваяГруппа.Значение, СтекОписателейОбъектов);
		
	КонецЕсли;
	
	НоваяГруппа.ДанныеКартинки = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеКартинки_НаКлиенте(НоваяГруппа);
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ДобавитьШаг_ВыполнитьИнтерактивнуюКоманду(Ссылка, УзелГруппы)
	
	НовыйШаг = УзелГруппы.ПолучитьЭлементы().Добавить();
	Новыйшаг.ТипШага    = "ВыполнитьИнтерактивнуюКоманду";
	НовыйШаг.Активность = 1;
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НовыйШаг.Значение, "НавигационнаяСсылка", Ссылка);
	
	НовыйШаг.Наименование   = НСтр("ru = 'Перейти по навигационной ссылке ""'") + Ссылка + """";
	НовыйШаг.Автоописание   = НовыйШаг.Наименование;
	НовыйШаг.ДанныеКартинки = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеКартинки_НаКлиенте(НовыйШаг);
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ДобавитьШагДействияНадРеквизитом(
	ИмяКоманды,
	Атрибуты,
	ОписательОбъекта,
	УзелГруппы,
	ПоследовательнотьДействий,
	ИндексТекущегоДействия,
	КоличествоДействий,
	СтекОписателейОбъектов)
	
	ВыполняемоеДействие = "";
	ВидПоля             = "";
	ДанныеДействия      = Неопределено;
	
	Если ИмяКоманды = "CLEAR" Тогда
		ВыполняемоеДействие = "Очистить";
		ВидПоля             = "ПолеВвода";
	ИначеЕсли ИмяКоманды = "INCREASEVALUE" Тогда
		ВыполняемоеДействие = "УвеличитьЗначение";
		ВидПоля             = "ПолеВвода";
	ИначеЕсли ИмяКоманды = "DECREASEVALUE" Тогда
		ВыполняемоеДействие = "УменьшитьЗначение";
		ВидПоля             = "ПолеВвода";
	ИначеЕсли ИмяКоманды = "GOTONEXTMONTH" Тогда
		ВыполняемоеДействие = "ПерейтиНаМесяцВперед";
		ВидПоля             = "ПолеКалендаря";
	ИначеЕсли ИмяКоманды = "GOTOPREVIOUSMONTH" Тогда
		ВыполняемоеДействие = "ПерейтиНаМесяцНазад";
		ВидПоля             = "ПолеКалендаря";
	ИначеЕсли ИмяКоманды = "GOTONEXTYEAR" Тогда
		ВыполняемоеДействие = "ПерейтиНаГодВперед";
		ВидПоля             = "ПолеКалендаря";
	ИначеЕсли ИмяКоманды = "GOTOPREVIOUSYEAR" Тогда
		ВыполняемоеДействие = "ПерейтиНаГодНазад";
		ВидПоля             = "ПолеКалендаря";
	ИначеЕсли ИмяКоманды = "GOTODATE" Тогда
		ВыполняемоеДействие = "ПерейтиКДате";
		ВидПоля             = "ПолеКалендаря";
		
		ДатаСтр = Атрибуты["DATE"];
		Если ДатаСтр = Неопределено Тогда
			ДанныеДействия = '00010101';
		Иначе
			Попытка
				#Если НЕ ВебКлиент Тогда
				ДанныеДействия = XMLЗначение(Тип("Дата"), ДатаСтр);
				#КонецЕсли
			Исключение
				ДанныеДействия = '00010101';
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "SELECTOPTION" Тогда
		ВыполняемоеДействие = "ВыбратьВариант";
		ВидПоля             = "ПолеПереключателя";
		ДанныеДействия      = Строка(Атрибуты["PRESENTATION"]);
		
	ИначеЕсли ИмяКоманды = "OPEN" Тогда
		ВыполняемоеДействие = "Открыть";
		ВидПоля             = "ПолеВвода";
		
	ИначеЕсли ИмяКоманды = "INPUTTEXT" Тогда
		
		ОписательСледующегоДействия = ПоследовательнотьДействий[ИндексТекущегоДействия + 2];
		
		ВидПоля = "ПолеВвода";
		ДанныеДействия = Строка(Атрибуты["TEXT"]);
		
		Если ОписательСледующегоДействия.Имя = "EXECUTECHOICEFROMCHOICELIST"
			И ОписательСледующегоДействия.ТипУзла = 0 Тогда
			
			ВыбираемыеДанные = Строка(ОписательСледующегоДействия.Атрибуты["PRESENTATION"]);
			
			Если ВРег(Лев(ВыбираемыеДанные, СтрДлина(ДанныеДействия))) = ВРег(ДанныеДействия) Тогда
				ВыполняемоеДействие    = "ВводПоСтроке";
				ИндексТекущегоДействия = ИндексТекущегоДействия + 3; // Переход к концу следующего действия
			КонецЕсли;
			
		Иначе
			
			ВыполняемоеДействие = "ВвестиТекст";
			
		КонецЕсли;
		
	Иначе
		
		// Анализ действия - выбор из списка или
		// же нажатие кнопки выбора и дальнейшая работа с дочерними формами
		
		ВидПоля = "ПолеВвода";
		Если ИмяКоманды = "EXECUTECHOICEFROMCHOICELIST" Тогда
			// Не был открыт список выбора, без этого выбор из списка выбора невозможен.
			// Теоретически это ошибка записи журнала, но для устойчисвости механизма
			// запишем действие выбора из списка выбора
			ВыполняемоеДействие = "ВыбратьИзСпискаВыбора";
			ДанныеДействия      = Строка(Атрибуты["PRESENTATION"]);
		Иначе
			
			// Остались только два действия: "STARTCHOOSING" и "STARTCHOOSINGFROMCHOICELIST"
			ОписательСледующегоДействия = ПоследовательнотьДействий[ИндексТекущегоДействия + 2];
			Если ОписательСледующегоДействия.Имя = "EXECUTECHOICEFROMCHOICELIST"
				И ОписательСледующегоДействия.ТипУзла = 0 Тогда
				
				ВыполняемоеДействие = ?(
					ИмяКоманды = "STARTCHOOSING",
					"ВыбратьИзСпискаВыбора",
					"ВыбратьИзВыпадающегоСписка");
				
				ДанныеДействия         = Строка(ОписательСледующегоДействия.Атрибуты["PRESENTATION"]);
				ИндексТекущегоДействия = ИндексТекущегоДействия + 3; // Переход к концу следующего действия
				
			ИначеЕсли ИмяКоманды = "STARTCHOOSING" Тогда
				ВыполняемоеДействие = "НажатьКнопкуВыбора"
			Иначе
				// Был начат выбор из списка выбора, но за этим ничего не последовало - пользователь
				// не стал выбирать значение из списка выбора
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоследнийШагАвтоГруппы = Неопределено;
	Если ВыполняемоеДействие <> "НажатьКнопкуВыбора" И ВыполняемоеДействие <> "Открыть" Тогда
		ЭлементыГруппы      = УзелГруппы.ПолучитьЭлементы();
		КоличествоЭлементов = ЭлементыГруппы.Количество();
		Если КоличествоЭлементов > 0 Тогда
			ПоследнийШагАвтоГруппы = ЭлементыГруппы.Получить(КоличествоЭлементов - 1);
			Если ПоследнийШагАвтоГруппы.ТипШага <> "TmpЗаполнениеРеквизитов" Тогда
				ПоследнийШагАвтоГруппы = Неопределено;
			Иначе
				// Убедиться, что заполняемое поле содержит простое действие
				УзелРеквизитов = ПоследнийШагАвтоГруппы.Значение.ПолучитьЭлементы().Получить(0);
				УзелРеквизита  = УзелРеквизитов.ПолучитьЭлементы().Получить(0);
				Если УзелРеквизита.Действие = "НажатьКнопкуВыбора"
					ИЛИ УзелРеквизита.Действие = "Открыть" Тогда
					ПоследнийШагАвтоГруппы = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоследнийШагАвтоГруппы = Неопределено Тогда
		
		ПоследнийШагАвтоГруппы = УзелГруппы.ПолучитьЭлементы().Добавить();
		ПоследнийШагАвтоГруппы.Активность = Истина;
		ПоследнийШагАвтоГруппы.Наименование = НСтр("ru = 'Tmp: Заполнение реквизитов'");
		ПоследнийШагАвтоГруппы.ТипШага = "TmpЗаполнениеРеквизитов";
		УзелРеквизитов = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(ПоследнийШагАвтоГруппы.Значение,
			"TmpУзелРеквизитов");
		
	КонецЕсли;
	
	Если УзелГруппы.ТипШага = "АвтоГруппаТаблицаФормы" Тогда
		СинонимВидаПоляФормы = НСтр("ru = 'Ячейка'");
	Иначе
		Если ВидПоля = "ПолеВвода" Тогда
			СинонимВидаПоляФормы = НСтр("ru = 'Поле ввода'");
		ИначеЕсли ВидПоля = "ПолеКалендаря" Тогда
			СинонимВидаПоляФормы = НСтр("ru = 'Поле календаря'");
		ИначеЕсли ВидПоля = "ПолеПереключателя" Тогда
			СинонимВидаПоляФормы = НСтр("ru = 'Поле переключателя'");
		КонецЕсли;
	КонецЕсли;
	
	УзелРеквизита = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелРеквизитов,
		?(ПустаяСтрока(ОписательОбъекта.Имя),
			"$" + ОписательОбъекта.Заголовок,
			ОписательОбъекта.Имя),
		ДанныеДействия,
		ОписательОбъекта.Заголовок,
		,
		СинонимВидаПоляФормы + " """ + ОписательОбъекта.Заголовок + """",
		ВыполняемоеДействие,
		,
		ВидПоля,
		,
		Ложь);
	
	СцТ_ДобавитьУзелПутиОбъекта(УзелРеквизита, СтекОписателейОбъектов);
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ДобавитьШаг_ДействиеСТаблицей(ИмяКоманды, УзелГруппы)
	
	НовыйШаг = УзелГруппы.ПолучитьЭлементы().Добавить();
	Новыйшаг.ТипШага    = "ДействиеСТаблицей";
	НовыйШаг.Активность = 1;
	
	Если ИмяКоманды = "GOONELEVELUP" Тогда
		ДействиеСТаблицей = "ПерейтиНаУровеньВверх";
		ОписаниеДействия  = НСтр("ru = 'Перейти на уровень вверх'");
	ИначеЕсли ИмяКоманды = "GOONELEVELDOWN" Тогда
		ДействиеСТаблицей = "ПерейтиНаУровеньВниз";
		ОписаниеДействия  = НСтр("ru = 'Перейти на уровень вниз'");
	ИначеЕсли ИмяКоманды = "GOTONEXTROW" Тогда
		ДействиеСТаблицей = "ПерейтиКСледующейСтроке";
		ОписаниеДействия  = НСтр("ru = 'Перейти к следующей строке'");
	ИначеЕсли ИмяКоманды = "GOTOPREVIOUSROW" Тогда
		ДействиеСТаблицей = "ПерейтиКПредыдущейСтроке";
		ОписаниеДействия  = НСтр("ru = 'Перейти к предыдущей строке'");
	ИначеЕсли ИмяКоманды = "GOTOFIRSTROW" Тогда
		ДействиеСТаблицей = "ПерейтиВНачалоТаблицы";
		ОписаниеДействия  = НСтр("ru = 'Перейти в начало'");
	ИначеЕсли ИмяКоманды = "GOTOLASTROW" Тогда
		ДействиеСТаблицей = "ПерейтиВКонецТаблицы";
		ОписаниеДействия  = НСтр("ru = 'Перейти в конец'");
	ИначеЕсли ИмяКоманды = "CHANGEROW" Тогда
		ДействиеСТаблицей = "НачатьРедактированиеСтроки";
		ОписаниеДействия  = НСтр("ru = 'Редактировать строку'");
	ИначеЕсли ИмяКоманды = "ENDEDITROW" Тогда
		ДействиеСТаблицей = "ЗавершитьРедактированиеСтроки";
		ОписаниеДействия  = НСтр("ru = 'Завершить редактирование строки'");
	ИначеЕсли ИмяКоманды = "ADDROW" Тогда
		ДействиеСТаблицей = "ДобавитьСтроку";
		ОписаниеДействия  = НСтр("ru = 'Добавить строку'");
	ИначеЕсли ИмяКоманды = "DELETEROW" Тогда
		ДействиеСТаблицей = "УдалитьСтроку";
		ОписаниеДействия  = НСтр("ru = 'Удалить строку'");
	ИначеЕсли ИмяКоманды = "EXPAND" Тогда
		ДействиеСТаблицей = "РазвернутьСтроку";
		ОписаниеДействия  = НСтр("ru = 'Развернуть строку'");
	ИначеЕсли ИмяКоманды = "COLLAPSE" Тогда
		ДействиеСТаблицей = "СвернутьСтроку";
		ОписаниеДействия  = НСтр("ru = 'Свернуь строку'");
	ИначеЕсли ИмяКоманды = "CHOOSE" Тогда
		ДействиеСТаблицей = "ВыбратьСтроку";
		ОписаниеДействия  = НСтр("ru = 'Выбрать строку'");
		
	ИначеЕсли ИмяКоманды = "GOTONEXTITEM" Тогда
		ДействиеСТаблицей = "ПерейтиКСледующейЯчейке";
		ОписаниеДействия  = НСтр("ru = 'Перейти к следующей ячейке'");
		
	ИначеЕсли ИмяКоманды = "GOTOPREVIOUSITEM" Тогда
		ДействиеСТаблицей = "ПерейтиКПредыдующейЯчейке";
		ОписаниеДействия  = НСтр("ru = 'Перейти к предыдущей ячейке'");
		
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НовыйШаг.Значение, "ДействиеСТаблицей"   , ДействиеСТаблицей);
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НовыйШаг.Значение, "КоличествоПовторений", 1);
	
	НовыйШаг.Наименование   = ОписаниеДействия;
	НовыйШаг.Автоописание   = НовыйШаг.Наименование;
	НовыйШаг.ДанныеКартинки = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеКартинки_НаКлиенте(НовыйШаг);
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ДобавитьШаг_Нажать(УзелГруппы, ОписательОбъекта, ИмяКоманды, СтекОписателейОбъектов)
	
	Если ОписательОбъекта.ТипОбъекта <> "FORMBUTTON"
		И ОписательОбъекта.ТипОбъекта <> "FORMFIELD"
		И ОписательОбъекта.ТипОбъекта <> "FORMDECORATION"
		И ОписательОбъекта.ТипОбъекта <> "COMMANDINTERFACEBUTTON" Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписательОбъекта.ТипОбъекта <> "COMMANDINTERFACEBUTTON" Тогда
		
		НовыйШаг = УзелГруппы.ПолучитьЭлементы().Добавить();
		НовыйШаг.ТипШага    = "НажатьКнопку";
		НовыйШаг.Активность = 1;
		
		Если ОписательОбъекта.ТипОбъекта = "FORMBUTTON" Тогда
			
			СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НовыйШаг.Значение, "ВидОбъекта", "Кнопка");
			
		ИначеЕсли ОписательОбъекта.ТипОбъекта = "FORMDECORATION" Тогда
			
			СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НовыйШаг.Значение, "ВидОбъекта", "Декорация");
			
		ИначеЕсли ОписательОбъекта.ТипОбъекта = "FORMFIELD" Тогда
			
			Если ИмяКоманды = "SETCHECK" Тогда
				СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НовыйШаг.Значение, "ВидОбъекта", "ПолеФлажка");
			Иначе
				СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НовыйШаг.Значение, "ВидОбъекта", "Поле");
			КонецЕсли;
			
		КонецЕсли;
		
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НовыйШаг.Значение,
			"ИмяКнопки",
			?(ПустаяСтрока(ОписательОбъекта.Имя),
				"$" + ОписательОбъекта.Заголовок,
				ОписательОбъекта.Имя),
			ОписательОбъекта.Заголовок);
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НовыйШаг.Значение, "ДействиеСКнопкой", "Нажать");
		
		Если ОписательОбъекта.ТипОбъекта = "FORMBUTTON" Тогда
			ПредставлениеКнопки      = НСтр("ru = 'Кнопка ""'");
			ПредставлениеДляОписания = НСтр("ru = 'кнопку'");
			
		ИначеЕсли ОписательОбъекта.ТипОбъекта = "FORMDECORATION" Тогда
			ПредставлениеКнопки      = НСтр("ru = 'Декорация ""'");
			ПредставлениеДляОписания = НСтр("ru = 'декорацию'");
			
		ИначеЕсли ОписательОбъекта.ТипОбъекта = "FORMFIELD" Тогда
			Если ИмяКоманды = "SETCHECK" Тогда
				ПредставлениеКнопки      = НСтр("ru = 'Поле флажка ""'");
				ПредставлениеДляОписания = НСтр("ru = 'поле флажка'");
			Иначе
				ПредставлениеКнопки      = НСтр("ru = 'Поле реквизита формы ""'");
				ПредставлениеДляОписания = НСтр("ru = 'поле реквизита формы'");
			КонецЕсли;
			
		КонецЕсли;
		
		ПредставлениеКнопки = ПредставлениеКнопки + ОписательОбъекта.Заголовок + """";
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НовыйШаг.Значение, "ПредставлениеКнопки", ПредставлениеКнопки);
		
		НовыйШаг.Наименование = НСтр("ru = 'Нажать '")
			+ ПредставлениеДляОписания
			+ " """ + ОписательОбъекта.Заголовок + """";
		
		НовыйШаг.Автоописание = НовыйШаг.Наименование;
		
	Иначе
		
		ОписательОкна = СтекОписателейОбъектов[0];
		
		Если ОписательОкна.ДополнительноеСвойство = Истина Тогда
			УзелИнтерактивнойГруппы = УзелГруппы;
			
		ИначеЕсли ОписательОкна.ПДАФ <> Неопределено Тогда
			УзелИнтерактивнойГруппы = ОписательОкна.ПДАФ;
			
		Иначе
			
			// Если нет автогруппы формы, тогда создать автогруппу формы
			
			АтрибутыИнтерактивнойФормы = Новый Соответствие;
			АтрибутыИнтерактивнойФормы["TITLE"] = ОписательОкна.Заголовок;
			УзелИнтерактивнойГруппы = СцТ_ДобавитьУзелИнтерактивнойАвтоГруппы(
				"FORM",
				АтрибутыИнтерактивнойФормы,
				УзелГруппы,
				СтекОписателейОбъектов,
				Истина);
			
		КонецЕсли;
		
		НовыйШаг = УзелИнтерактивнойГруппы.ПолучитьЭлементы().Добавить();
		НовыйШаг.ТипШага    = "НажатьКнопкуКИ";
		НовыйШаг.Активность = 1;
		
		УзелОписаниеКнопкиКИ = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			НовыйШаг.Значение,
			"ОписаниеКнопкиКИ",
			,
			,
			,
			,
			,
			,
			"");
			
			СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(НовыйШаг.Значение,
			"ВариантПоискаОбъекта",
			"011",
			,
			,
			,
			,
			,
			"");
		
		// Анализ родительских объектов, с целью определить, где была нажата кнопка КИ
		// В стеке окно всегда имеет индекс 0, т.к. оно является корневым объектом,
		Если СтекОписателейОбъектов.Количество() = 0 Тогда
			// Это ошибка в записанном журнале, требуется возврат
			Возврат;
		КонецЕсли;
		
		КорневойОбъект = СтекОписателейОбъектов[0];
		Если КорневойОбъект.ТипОбъекта <> "CLIENTAPPLICATIONWINDOW" Тогда
			// Это ошибка. КИ может иметь только окно
			Возврат;
		КонецЕсли;
		
		УзелОписаниеКнопкиКИ.ТипУзла = ?(КорневойОбъект.ДополнительноеСвойство = Истина, "1", "2");
		
		// Формирование представления кнопки
		УзелОписаниеКнопкиКИ.Синоним = ОписательОбъекта.Заголовок;
		УзелОписаниеКнопкиКИ.Представление = "";
		
		// Формирование представления панели для автоописания
		ПредставлениеПанели  = "";
		Для Итератор = 2 По СтекОписателейОбъектов.ВГраница() Цикл
			ТекущийОбъектВСтеке = СтекОписателейОбъектов[Итератор];
			
			Если ТекущийОбъектВСтеке.ТипОбъекта = "COMMANDINTERFACEGROUP" Тогда
				ПредставлениеПанели = ПредставлениеПанели
					+ ?(ПустаяСтрока(ПредставлениеПанели), "", " -> ")
					+ ТекущийОбъектВСтеке.Заголовок;
			КонецЕсли;
			
		КонецЦикла;
		
		УзелОписаниеКнопкиКИ.Представление = """" + УзелОписаниеКнопкиКИ.Синоним + """"
			+ ?(ПустаяСтрока(ПредставлениеПанели),
				"",
				НСтр("ru = ' на панели '") + """" + ПредставлениеПанели + """");
		
		НовыйШаг.Наименование = НСтр("ru = 'Нажать кнопку КИ'");
		НовыйШаг.Автоописание = НСтр("ru = 'Нажать кнопку командного интерфейса'");
		
		Если НЕ ПустаяСтрока(УзелОписаниеКнопкиКИ.Представление) Тогда
			
			Окончание = ?(УзелОписаниеКнопкиКИ.ТипУзла = "1",
							НСтр("ru = ' главного окна: '"),
							НСтр("ru = ' текущего окна: '"))
				+ УзелОписаниеКнопкиКИ.Представление;
			
			НовыйШаг.Наименование = НовыйШаг.Наименование + Окончание;
			НовыйШаг.Автоописание = НовыйШаг.Автоописание + Окончание;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	НовыйШаг.ДанныеКартинки = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеКартинки_НаКлиенте(НовыйШаг);
	СцТ_ДобавитьУзелПутиОбъекта(НовыйШаг.Значение, СтекОписателейОбъектов);
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_УдалитьПустыеАвтоГруппы(РодительскийУзелДерева)
	
	ДочерниеУзлы    = РодительскийУзелДерева.ПолучитьЭлементы();
	КоличествоУзлов = ДочерниеУзлы.Количество();
	Для ОбратныйИндекс = 1 По КоличествоУзлов Цикл
		
		УзелДерева = ДочерниеУзлы.Получить(КоличествоУзлов - ОбратныйИндекс);
		Если УзелДерева.ТипШага = "ИнтерактивнаяАвтоГруппа"
			ИЛИ УзелДерева.ТипШага = "АвтоГруппаТаблицаФормы" Тогда
			СцТ_УдалитьПустыеАвтоГруппы(УзелДерева);
			
			Если УзелДерева.ПолучитьЭлементы().Количество() = 0 Тогда
				ДочерниеУзлы.Удалить(УзелДерева);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Функция СцТ_ДобавитьУзелПутиОбъекта(УзелЗначения, СтекОписателейОбъектов)
	
	ПутьОбъекта = СцТ_ПолучитьПутьОбъектаИзСтека(СтекОписателейОбъектов);
	УзелПути = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелЗначения,
		"ИСТЗ_ПутьКОбъекту");
	
	Для каждого ОписательЭлементаПути Из ПутьОбъекта Цикл
		
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			УзелПути,
			ОписательЭлементаПути.Имя,
			ОписательЭлементаПути.Тип,
			ОписательЭлементаПути.Заголовок,
			,
			,
			,
			,
			,
			,
			Ложь);
		
	КонецЦикла;
	
КонецФункции


&НаКлиенте
Процедура СцТ_СообщитьОбОшибке(Сообщение)
	
	СообщенияОбОшибкахПреобразования.Добавить(Сообщение);
	
КонецПроцедуры

#КонецОбласти


#Область ПреобразованиеЖурналаВПрограмму

&НаСервере
Функция ПреобразоватьНаСервере(ТекстДляПреобразования)

	Читатель = Новый ЧтениеXML();
	Читатель.УстановитьСтроку(ТекстДляПреобразования);
	
	СозданныеПроцедуры = Новый Массив();
	СозданныеВОкнеИФормеПеременные = Новый Соответствие();

	ТекстовыйДокументРезультата = Новый ТекстовыйДокумент();

	Читатель.ПерейтиКСодержимому();
	Отступ = 0;

	// Преобразовываем файл
	Если Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента И
		Читатель.Имя = "uilog" Тогда

		ПреобразоватьВСценарий(Читатель, ТекстовыйДокументРезультата);

	КонецЕсли;
	
	Возврат ТекстовыйДокументРезультата.ПолучитьТекст();

КонецФункции

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьСтроку(Писатель, СтрокаДляВывода, ДобавлятьПереход = Ложь)

	// Добавляем в начало строки необходимое количество пробелов
	Результат = "";
	Для Индекс = 1 To Отступ Цикл
		Результат = Результат + "	";
	КонецЦикла;
	Результат = Результат + СтрокаДляВывода;
	
	// Добавляем строку в конец
	Писатель.ДобавитьСтроку(Результат);
	Если ДобавлятьПереход Тогда
		Писатель.ДобавитьСтроку("");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВставитьСтроку(Писатель, НомерСтроки, СтрокаДляВывода)

	// Добавляем в начало строки необходимое количество пробелов
	Результат = "";
	Для Индекс = 1 To Отступ Цикл
		Результат = Результат + "	";
	КонецЦикла;
	Результат = Результат + СтрокаДляВывода;

	// Вставляем строку в начало
	Писатель.ВставитьСтроку(НомерСтроки, Результат);

КонецПроцедуры

&НаСервере
Функция УдвоитьКавычки(СтрокаДляВывода)

	// Для правильного вывода в файл удваиваем кавычки
	Возврат СтрЗаменить(СтрокаДляВывода, """", """""");

КонецФункции

&НаСервере
Функция ЗначенияПоискаДляЗаголовка(Заголовок, Имя)
	
	// Поиск "по заголовку" или "по имени и заголовку"
	Если ПоискОбъектов = 0 Или ПоискОбъектов = 2 Тогда
		Если Не Заголовок = Неопределено Тогда
			Возврат """" + УдвоитьКавычки(Заголовок) + """";
		КонецЕсли;
		Если ПоискОбъектов = 2 и Имя = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'У объекта должны быть заполнены заголовок или имя'");
		КонецЕсли;
		Возврат "";
	// Поиск "по имени"
	ИначеЕсли ПоискОбъектов = 1 Тогда
		Если Имя = Неопределено Тогда
			Возврат """" + УдвоитьКавычки(Заголовок) + """";
		КонецЕсли;
		Возврат "";
	// Поиск по имени и заголовку
	Иначе
		ВызватьИсключение НСтр("ru = 'Неожиданный тип поиска объектов: '") + ПоискОбъектов;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗначенияПоискаДляИмени(Заголовок, Имя)
	
	// Поиск "по заголовку"
	Если ПоискОбъектов = 0 Тогда
		Возврат "";
	// Поиск "по имени" или "по имени и заголовку"
	ИначеЕсли ПоискОбъектов = 1 Или ПоискОбъектов = 2 Тогда
		Если Не Имя = Неопределено Тогда
			Возврат """" + Имя + """";
		КонецЕсли;
		Если ПоискОбъектов = 2 И Заголовок = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'У объекта должны быть заполнены заголовок или имя'");
		КонецЕсли;
		Возврат "";
	Иначе
		ВызватьИсключение НСтр("ru = 'Неожиданный тип поиска объектов: '") + ПоискОбъектов;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ЗаголовокОбъекта)

	// Имя переменной начинается с имени типа
	Если ТипОбъекта = "ClientApplicationWindow" Тогда
		ИмяПеременной = "ОкноПриложения";
	ИначеЕсли ТипОбъекта = "Form" Тогда
		ИмяПеременной = "Форма";
	ИначеЕсли ТипОбъекта = "FormField" Тогда
		ИмяПеременной = "Поле";
	ИначеЕсли ТипОбъекта = "FormButton" Тогда
		ИмяПеременной = "Кнопка";
	ИначеЕсли ТипОбъекта = "FormGroup" Тогда
		ИмяПеременной = "Группа";
	ИначеЕсли ТипОбъекта = "FormTable" Тогда
		ИмяПеременной = "Таблица";
	ИначеЕсли ТипОбъекта = "FormDecoration" Тогда
		ИмяПеременной = "Декорация";
	ИначеЕсли ТипОбъекта = "CommandInterface" Тогда
		ИмяПеременной = "КомандныйИнтерфейс";
	ИначеЕсли ТипОбъекта = "CommandInterfaceGroup" Тогда
		ИмяПеременной = "ГруппаКомандногоИнтерфейса";
	ИначеЕсли ТипОбъекта = "CommandInterfaceButton" Тогда
		ИмяПеременной = "КнопкаКомандногоИнтерфейса";
	Иначе
		ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + ТипОбъекта;
	КонецЕсли;

	// Отсекаем всё, что не является буквами и цифрами
	ПредыдущийСимволЭтоПробел = Истина;
	ДлинаСтроки = СтрДлина(ЗаголовокОбъекта);
	Для Индекс = 1 To ДлинаСтроки Цикл

		СледующийСимвол = Сред(ЗаголовокОбъекта,Индекс, 1);
		Если ЭтоБуква(СледующийСимвол) Или ЭтоЦифра(СледующийСимвол) Тогда
			ИмяПеременной = ИмяПеременной + ? (ПредыдущийСимволЭтоПробел, ВРег(СледующийСимвол), СледующийСимвол);
			ПредыдущийСимволЭтоПробел = Ложь;
		Иначе
			ПредыдущийСимволЭтоПробел = Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат ИмяПеременной;

КонецФункции

&НаСервере
Функция ЭтоЦифра(Символ)

	Код = КодСимвола (Символ);
	Возврат Код >= 48 И Код <= 57;

КонецФункции

&НаСервере
Функция ЭтоБуква(Символ)

	// Считаем, что для небуквенных символов коды не отличаются
	Возврат КодСимвола(НРег(Символ)) <> КодСимвола(ВРег(Символ));

КонецФункции

#КонецОбласти

#Область ПРоцедурыПреобразования

&НаСервере
Процедура ПреобразоватьВСценарий(Читатель, Писатель)
	
	Читатель.Прочитать();
	
	ЛокальныйПисатель = Писатель;
	
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		Если Читатель.Имя = "ClientApplicationWindow" Тогда
		
			ЛокальноеИмяПроцедуры = "";
			ПреобразоватьОкно(Читатель, ЛокальныйПисатель, ЛокальноеИмяПроцедуры);

		ИначеЕсли Читатель.Имя = "Form" Тогда
			
			ДобавитьСтроку(Писатель, "");
			Отступ = Отступ + 1;
			
			ОбрабатываемоеОкно = "";
			СозданныеВОкнеИФормеПеременные.Вставить(ОбрабатываемоеОкно, Новый Соответствие());
			ПреобразоватьФорму(Читатель, Писатель, "ПеремТестируемоеПриложение");
			
			Отступ = Отступ - 1;
			
		ИначеЕсли  Читатель.Имя = "gotoPreviousWindow"
			ИЛИ Читатель.Имя = "gotoNextWindow" Тогда
			
			// Тогда ничего не происходит, так как выполнено переключение между окнами
			// читаем дальше
			Читатель.Прочитать();
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьОкно(Читатель, Писатель, ЛокальноеИмяПроцедуры)
	
	ТипОбъекта = Читатель.Имя;
	ЗаголовокОбъекта = "";
	ЭтоГлавноеОкно = Ложь;
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "caption" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		ИначеЕсли Читатель.Имя = "isMain" Тогда
			ЭтоГлавноеОкно = Булево(Читатель.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ИмяПеременной = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ? (ЭтоГлавноеОкно, "Основное", ЗаголовокОбъекта));
	
	ОбрабатываемоеОкно = ИмяПеременной;
	
	Отступ = Отступ + 1;
	
	Если СозданныеВОкнеИФормеПеременные.Получить(ОбрабатываемоеОкно) = Неопределено Тогда
	
		СозданныеВОкнеИФормеПеременные.Вставить(ОбрабатываемоеОкно, Новый Соответствие());
		
		Если ЭтоГлавноеОкно Тогда
			ДобавитьСтроку(Писатель, "");
			ДобавитьСтроку(Писатель, ИмяПеременной + " = Неопределено;");
			ДобавитьСтроку(Писатель, "КлиентсткиеОкнаТестируемогоПриложения = ПеремТестируемоеПриложение.ПолучитьПодчиненныеОбъекты();");
			ДобавитьСтроку(Писатель, "Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл");
			ДобавитьСтроку(Писатель, "	Если ТестируемоеОкно.Основное Тогда");
			ДобавитьСтроку(Писатель, "		" + ИмяПеременной + " = ТестируемоеОкно;");
			ДобавитьСтроку(Писатель, "		Прервать;");
			ДобавитьСтроку(Писатель, "	КонецЕсли;");
			ДобавитьСтроку(Писатель, "КонецЦикла;");
		Иначе
			
			ДобавитьСтроку(Писатель, 
						   ИмяПеременной + " = ПеремТестируемоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""), """ + УдвоитьКавычки(ЗаголовокОбъекта) + """, , 30);");
		КонецЕсли;
		
	КонецЕсли;
	ОкноБылоЗакрыто = Ложь;
	
	Читатель.Прочитать();
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		Если Читатель.Имя = "Form" Тогда
			ПреобразоватьФорму(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Читатель.Имя = "CommandInterface" Тогда
			ПреобразоватьКомандныйИнтерфейсОкна(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Не ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Отступ = Отступ - 1;
	Читатель.Прочитать();
	
	Если ОкноБылоЗакрыто Тогда
		СозданныеВОкнеИФормеПеременные.Удалить(ОбрабатываемоеОкно);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьКомандныйИнтерфейсОкна(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ЗаголовокОбъекта = "";
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ЗаголовокОбъекта);
	ИмяПеременной = РодительскаяПеременная + "КомандныйИнтерфейс";

	ФормыОкна = СозданныеВОкнеИФормеПеременные.Получить(ОбрабатываемоеОкно);
	Если ФормыОкна.Получить(ОбрабатываемаяФорма) = Неопределено Тогда

		ФормыОкна.Вставить(ОбрабатываемаяФорма, Новый Массив());
	
		ДобавитьСтроку(Писатель, ИмяПеременной + " = " + РодительскаяПеременная + ".ПолучитьКомандныйИнтерфейс();");

	КонецЕсли;

	Читатель.Прочитать();

	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		Если Читатель.Имя = "CommandInterfaceButton" Тогда
			ПреобразоватьКнопкуКомандногоИнтерфейса(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Читатель.Имя = "CommandInterfaceGroup" Тогда
			ПреобразоватьГруппуКомандногоИнтерфейса(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Не ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Читатель.Прочитать();

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьКнопкуКомандногоИнтерфейса(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ЗаголовокОбъекта = "";
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ЗаголовокОбъекта);
	ИмяПеременной = РодительскаяПеременная + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	КомандаБылаПреобразована = Ложь;
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			КомандаБылаПреобразована = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если КомандаБылаПреобразована Или СтроитьПолнуюИерархию Тогда
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной + " = " + РодительскаяПеременная + ".НайтиОбъект(Тип(""ТестируемаяКнопкаКомандногоИнтерфейса""), """ + УдвоитьКавычки(ЗаголовокОбъекта) + """);");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьГруппуКомандногоИнтерфейса(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ЗаголовокОбъекта = "";
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ЗаголовокОбъекта);
	ИмяПеременной = РодительскаяПеременная + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если Читатель.Имя = "CommandInterfaceButton" Тогда
			ПреобразоватьКнопкуКомандногоИнтерфейса(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли Читатель.Имя = "CommandInterfaceGroup" Тогда
			ПреобразоватьГруппуКомандногоИнтерфейса(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если СтроитьПолнуюИерархию Тогда
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной + " = " + РодительскаяПеременная + ".НайтиОбъект(Тип(""ТестируемаяГруппаКомандногоИнтерфейса""), """ + УдвоитьКавычки(ЗаголовокОбъекта) + """);");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьФорму(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ЗаголовокОбъекта = "";
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ЗаголовокОбъекта);
	ИмяПеременной = РодительскаяПеременная + ПоследнийОбработанныйЭлементУправления;
	ОбрабатываемаяФорма = ИмяПеременной;

	ФормыОкна = СозданныеВОкнеИФормеПеременные.Получить(ОбрабатываемоеОкно);
	Если ФормыОкна.Получить(ОбрабатываемаяФорма) = Неопределено Тогда

		ФормыОкна.Вставить(ОбрабатываемаяФорма, Новый Массив());
	
		ДобавитьСтроку(Писатель, 
					   ИмяПеременной + " = " + РодительскаяПеременная + ".НайтиОбъект(Тип(""ТестируемаяФорма""), """ + УдвоитьКавычки(ЗаголовокОбъекта) + """);");

	КонецЕсли;

	Читатель.Прочитать();

	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		Если Читатель.Имя = "FormField" Тогда
			ПреобразоватьПоле(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Читатель.Имя = "FormTable" Тогда
			ПреобразоватьТаблицу(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Читатель.Имя = "FormDecoration" Тогда
			ПреобразоватьДекорацию(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Читатель.Имя = "FormButton" Тогда
			ПреобразоватьКнопку(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Читатель.Имя = "FormGroup" Тогда
			ПреобразоватьГруппу(Читатель, Писатель, ИмяПеременной);
		ИначеЕсли Не ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Читатель.Прочитать();

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьТаблицу(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ИмяОбъекта = Неопределено;
	ЗаголовокОбъекта = Неопределено;
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "name" Тогда
			ИмяОбъекта = Читатель.Значение;
		ИначеЕсли Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ? (ЗаголовокОбъекта = Неопределено, ИмяОбъекта, ЗаголовокОбъекта));
	ИмяПеременной = РодительскаяПеременная + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	КомандаБылаПреобразована = Ложь;
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если Читатель.Имя = "FormField" Тогда
			ПреобразоватьПоле(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли Читатель.Имя = "FormGroup" Тогда
			ПреобразоватьГруппу(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			КомандаБылаПреобразована = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если КомандаБылаПреобразована Или СтроитьПолнуюИерархию Тогда
		ЗначениеЗаголовка = ЗначенияПоискаДляЗаголовка(ЗаголовокОбъекта, ИмяОбъекта);
		ЗначениеИмени = ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта);
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной + " = " + РодительскаяПеременная + 
					   ".НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""), " +
					   ? (ЗначениеЗаголовка <> "" Или ЗначениеИмени <> "", ЗначениеЗаголовка, "") +
					   ? (ЗначениеИмени <> "", ", " + ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта), "") +
					   ");");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьПоле(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ИмяОбъекта = Неопределено;
	ЗаголовокОбъекта = Неопределено;
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "name" Тогда
			ИмяОбъекта = Читатель.Значение;
		ИначеЕсли Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ? (ЗаголовокОбъекта = Неопределено, ИмяОбъекта, ЗаголовокОбъекта));
	ИмяПеременной = РодительскаяПеременная + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	КомандаБылаПреобразована = Ложь;
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если Читатель.Имя = "FormField" Тогда
			ПреобразоватьПоле(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			КомандаБылаПреобразована = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если КомандаБылаПреобразована Или СтроитьПолнуюИерархию Тогда
		ЗначениеЗаголовка = ЗначенияПоискаДляЗаголовка(ЗаголовокОбъекта, ИмяОбъекта);
		ЗначениеИмени = ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта);
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной + 
					   " = " + 
					   РодительскаяПеременная + 
					   ".НайтиОбъект(Тип(""ТестируемоеПолеФормы""), " + 
					   ? (ЗначениеЗаголовка <> "" Или ЗначениеИмени <> "", ЗначениеЗаголовка, "") +
					   ? (ЗначениеИмени <> "", ", " + ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта), "") +
					   ");");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьКнопку(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ИмяОбъекта = Неопределено;
	ЗаголовокОбъекта = Неопределено;
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "name" Тогда
			ИмяОбъекта = Читатель.Значение;
		ИначеЕсли Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ? (ЗаголовокОбъекта = Неопределено, ИмяОбъекта, ЗаголовокОбъекта));
	ИмяПеременной = РодительскаяПеременная + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	КомандаБылаПреобразована = Ложь;
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			КомандаБылаПреобразована = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если КомандаБылаПреобразована Или СтроитьПолнуюИерархию Тогда
		ЗначениеЗаголовка = ЗначенияПоискаДляЗаголовка(ЗаголовокОбъекта, ИмяОбъекта);
		ЗначениеИмени = ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта);
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной +
					   " = " +
					   РодительскаяПеременная +
					   ".НайтиОбъект(Тип(""ТестируемаяКнопкаФормы""), " +
					   ? (ЗначениеЗаголовка <> "" Или ЗначениеИмени <> "", ЗначениеЗаголовка, "") +
					   ? (ЗначениеИмени <> "", ", " + ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта), "") +
					   ");");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьДекорацию(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ИмяОбъекта = Неопределено;
	ЗаголовокОбъекта = Неопределено;
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "name" Тогда
			ИмяОбъекта = Читатель.Значение;
		ИначеЕсли Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ? (ЗаголовокОбъекта = Неопределено, ИмяОбъекта, ЗаголовокОбъекта));
	ИмяПеременной = РодительскаяПеременная + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	КомандаБылаПреобразована = Ложь;
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			КомандаБылаПреобразована = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если КомандаБылаПреобразована Или СтроитьПолнуюИерархию Тогда
		ЗначениеЗаголовка = ЗначенияПоискаДляЗаголовка(ЗаголовокОбъекта, ИмяОбъекта);
		ЗначениеИмени = ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта);
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной +
					   " = " +
					   РодительскаяПеременная +
					   ".НайтиОбъект(Тип(""ТестируемаяДекорацияФормы""), " +
					   ? (ЗначениеЗаголовка <> "" Или ЗначениеИмени <> "", ЗначениеЗаголовка, "") +
					   ? (ЗначениеИмени <> "", ", " + ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта), "") +
					   ");");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьГруппу(Читатель, Писатель, РодительскаяПеременная)

	ТипОбъекта = Читатель.Имя;
	ИмяОбъекта = Неопределено;
	ЗаголовокОбъекта = Неопределено;
	Пока Читатель.ПрочитатьАтрибут() Цикл
		Если Читатель.Имя = "name" Тогда
			ИмяОбъекта = Читатель.Значение;
		ИначеЕсли Читатель.Имя = "title" Тогда
			ЗаголовокОбъекта = Читатель.Значение;
		КонецЕсли;
	КонецЦикла;

	ПоследнийОбработанныйЭлементУправления = ПреобразоватьЗаголовокВИмяПеременной(ТипОбъекта, ? (ЗаголовокОбъекта = Неопределено, ИмяОбъекта, ЗаголовокОбъекта));
	ИмяПеременной = РодительскаяПеременная + ПоследнийОбработанныйЭлементУправления;

	КоличествоСтрокПередОбработкой = Писатель.КоличествоСтрок();

	Читатель.Прочитать();

	КомандаБылаПреобразована = Ложь;
	Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл

		Если Читатель.Имя = "FormField" Тогда
			ПреобразоватьПоле(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли Читатель.Имя = "FormTable" Тогда
			ПреобразоватьТаблицу(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли Читатель.Имя = "FormDecoration" Тогда
			ПреобразоватьДекорацию(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли Читатель.Имя = "FormButton" Тогда
			ПреобразоватьКнопку(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли Читатель.Имя = "FormGroup" Тогда
			ПреобразоватьГруппу(Читатель, Писатель, ? (СтроитьПолнуюИерархию, ИмяПеременной, РодительскаяПеременная));
		ИначеЕсли ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной) Тогда
			КомандаБылаПреобразована = Истина;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;
		КонецЕсли;

	КонецЦикла;

	Если КомандаБылаПреобразована Или СтроитьПолнуюИерархию Тогда
		ЗначениеЗаголовка = ЗначенияПоискаДляЗаголовка(ЗаголовокОбъекта, ИмяОбъекта);
		ЗначениеИмени = ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта);
		ВставитьСтроку(Писатель, КоличествоСтрокПередОбработкой + 1, 
					   ИмяПеременной +
					   " = " +
					   РодительскаяПеременная +
					   ".НайтиОбъект(Тип(""ТестируемаяГруппаФормы""), " +
					   ? (ЗначениеЗаголовка <> "" Или ЗначениеИмени <> "", ЗначениеЗаголовка, "") +
					   ? (ЗначениеИмени <> "", ", " + ЗначенияПоискаДляИмени(ЗаголовокОбъекта, ИмяОбъекта), "") +
					   ");");
	КонецЕсли;

	Читатель.Прочитать();

КонецПроцедуры

&НаСервере
Функция ПреобразоватьКоманду(Читатель, Писатель, ИмяПеременной)

	Если Читатель.Имя = "activate" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".Активизировать();", Истина);
		ПоследняяОбработаннаяКоманда = "Активизировать";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "inputText" Тогда
		ТекстДляВывода = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "text" Тогда
				ТекстДляВывода = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ВвестиТекст(""" + УдвоитьКавычки(ТекстДляВывода) + """);", Истина);
		ПоследняяОбработаннаяКоманда = "ВвестиТекст";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "click" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".Нажать();", Истина);
		ПоследняяОбработаннаяКоманда = "Нажать";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "clear" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".Очистить();", Истина);
		ПоследняяОбработаннаяКоманда = "Очистить";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "open" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".Открыть();", Истина);
		ПоследняяОбработаннаяКоманда = "Открыть";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "startChoosing" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".Выбрать();", Истина);
		ПоследняяОбработаннаяКоманда = "Выбрать";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "startChoosingFromChoiceList" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ВыбратьИзСпискаВыбора();", Истина);
		ПоследняяОбработаннаяКоманда = "ВыбратьИзСпискаВыбора";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "executeChoiceFromChoiceList" Тогда
		Представление = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "presentation" Тогда
				Представление = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ОжидатьФормированияВыпадающегоСписка();", Истина);
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ВыполнитьВыборИзСпискаВыбора(""" + УдвоитьКавычки(Представление) + """);", Истина);
		ПоследняяОбработаннаяКоманда = "ВыполнитьВыборИзСпискаВыбора";
		Читатель.Прочитать();
		
	ИначеЕсли Читатель.Имя = "executeChoiseFromDropList" Тогда
		Читатель.Прочитать();
		
	ИначеЕсли Читатель.Имя = "increaseValue" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".УвеличитьЗначение();", Истина);
		ПоследняяОбработаннаяКоманда = "УвеличитьЗначение";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "decreaseValue" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".УменьшитьЗначение();", Истина);
		ПоследняяОбработаннаяКоманда = "УменьшитьЗначение";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "setCheck" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".УстановитьОтметку();", Истина);
		ПоследняяОбработаннаяКоманда = "УстановитьОтметку";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "selectOption" Тогда
		Представление = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "presentation" Тогда
				Представление = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ВыбратьВариант(""" + УдвоитьКавычки(Представление) + """);", Истина);
		ПоследняяОбработаннаяКоманда = "ВыбратьВариант";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoNextMonth" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиНаМесяцВперед();", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиНаМесяцВперед";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoPreviousMonth" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиНаМесяцНазад();", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиНаМесяцНазад";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoNextYear" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиНаГодВперед();", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиНаГодВперед";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoPreviousYear" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиНаГодНазад();", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиНаГодНазад";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoDate" Тогда
		Представление = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "date" Тогда
				Представление = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиКДате(XMLЗначение(Тип(""Дата""), """ + Представление + """));", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиКДате";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "setCurrentArea" Тогда
		Область = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "area" Тогда
				Область = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ".УстановитьТекущуюОбласть(""" + Область + """);", Истина);
		ПоследняяОбработаннаяКоманда = "УстановитьТекущуюОбласть";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "beginEditingCurrentArea" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".НачатьРедактированиеТекущейОбласти();", Истина);
		ПоследняяОбработаннаяКоманда = "НачатьРедактированиеТекущейОбласти";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "finishEditingCurrentArea" Тогда
		ФлагОтмены = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "cancel" Тогда
				ФлагОтмены = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ЗавершитьРедактированиеТекущейОбласти(" + ФлагОтмены + ");", Истина);
		ПоследняяОбработаннаяКоманда = "ЗавершитьРедактированиеТекущейОбласти";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoNextItem" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиКСледующемуЭлементу();", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиКСледующемуЭлементу";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoPreviousItem" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиКПредыдущемуЭлементу();", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиКПредыдущемуЭлементу";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "goOneLevelUp" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиНаУровеньВверх();", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиНаУровеньВверх";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "goOneLevelDown" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиНаУровеньВниз();", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиНаУровеньВниз";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoNextRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиКСледующейСтроке();", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиКСледующейСтроке";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoPreviousRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиКПредыдущейСтроке();", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиКПредыдущейСтроке";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoFirstRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиКПервойСтроке();", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиКПервойСтроке";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoLastRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ПерейтиКПоследнейСтроке();", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиКПоследнейСтроке";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "gotoRow" Тогда
		
		Направление = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "direction" Тогда
				Направление = ? (Читатель.Значение = "up", "НаправлениеПереходаКСтроке.Вверх", "НаправлениеПереходаКСтроке.Вниз");
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;

		Читатель.Прочитать();

		ДобавитьСтроку(Писатель, "ОписаниеСтроки = Новый Соответствие();");

		Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
			
			Если Читатель.Имя = "Field" Тогда

				ЗаголовокСтолбца = "";
				ТекстЯчейки = "";
				Пока Читатель.ПрочитатьАтрибут() Цикл
					Если Читатель.Имя = "title" Тогда
						ЗаголовокСтолбца = Читатель.Значение;
					ИначеЕсли Читатель.Имя = "cellText" Тогда
						ТекстЯчейки = Читатель.Значение;
					Иначе
						ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
					КонецЕсли;
				КонецЦикла;
				ДобавитьСтроку(Писатель, "ОписаниеСтроки.Вставить(""" + 
											ЗаголовокСтолбца + """, """ + УдвоитьКавычки(ТекстЯчейки) + """);");
				Читатель.Прочитать();

			Иначе

				ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;

			КонецЕсли;

			Читатель.Прочитать();

		КонецЦикла;

		ДобавитьСтроку(Писатель, 
						ИмяПеременной + ".ПерейтиКСтроке(ОписаниеСтроки" + ? (Направление = "", "", ", " + Направление)+ ");", Истина);
		ПоследняяОбработаннаяКоманда = "ПерейтиКСтроке";

	ИначеЕсли Читатель.Имя = "choose" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".Выбрать();", Истина);
		ПоследняяОбработаннаяКоманда = "Выбрать";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "changeRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ИзменитьСтроку();", Истина);
		ПоследняяОбработаннаяКоманда = "ИзменитьСтроку";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "endEditRow" Тогда
		ФлагОтмены = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "cancel" Тогда
				ФлагОтмены = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ЗакончитьРедактированиеСтроки(" + ФлагОтмены + ");", Истина);
		ПоследняяОбработаннаяКоманда = "ЗакончитьРедактированиеСтроки";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "addRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ДобавитьСтроку();", Истина);
		ПоследняяОбработаннаяКоманда = "ДобавитьСтроку";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "deleteRow" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".УдалитьСтроку();", Истина);
		ПоследняяОбработаннаяКоманда = "УдалитьСтроку";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "expand" Тогда

		Читатель.Прочитать();

		Если Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента И Читатель.Имя = "Field" Тогда

			ДобавитьСтроку(Писатель, "ОписаниеСтроки = Новый Соответствие();");

			Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
				
				Если Читатель.Имя = "Field" Тогда

					ЗаголовокСтолбца = "";
					ТекстЯчейки = "";
					Пока Читатель.ПрочитатьАтрибут() Цикл
						Если Читатель.Имя = "title" Тогда
							ЗаголовокСтолбца = Читатель.Значение;
						ИначеЕсли Читатель.Имя = "cellText" Тогда
							ТекстЯчейки = Читатель.Значение;
						Иначе
							ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
						КонецЕсли;
					КонецЦикла;
					ДобавитьСтроку(Писатель, "ОписаниеСтроки.Вставить(""" + 
												ЗаголовокСтолбца + """, """ + УдвоитьКавычки(ТекстЯчейки) + """);");
					Читатель.Прочитать();

				Иначе

					ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;

				КонецЕсли;

				Читатель.Прочитать();

			КонецЦикла;

			ДобавитьСтроку(Писатель, ИмяПеременной + ".Развернуть(ОписаниеСтроки);", Истина);

		Иначе

			ДобавитьСтроку(Писатель, ИмяПеременной + ".Развернуть();", Истина);

		КонецЕсли;

		ПоследняяОбработаннаяКоманда = "Развернуть";

	ИначеЕсли Читатель.Имя = "collapse" Тогда

		Читатель.Прочитать();

		Если Читатель.ТипУзла = ТипУзлаXML.НачалоЭлемента И Читатель.Имя = "Field" Тогда

			ДобавитьСтроку(Писатель, "ОписаниеСтроки = Новый Соответствие();");

			Пока Читатель.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
				
				Если Читатель.Имя = "Field" Тогда

					ЗаголовокСтолбца = "";
					ТекстЯчейки = "";
					Пока Читатель.ПрочитатьАтрибут() Цикл
						Если Читатель.Имя = "title" Тогда
							ЗаголовокСтолбца = Читатель.Значение;
						ИначеЕсли Читатель.Имя = "cellText" Тогда
							ТекстЯчейки = Читатель.Значение;
						Иначе
							ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
						КонецЕсли;
					КонецЦикла;
					ДобавитьСтроку(Писатель, "ОписаниеСтроки.Вставить(""" + 
												ЗаголовокСтолбца + """, """ + УдвоитьКавычки(ТекстЯчейки) + """);");
					Читатель.Прочитать();

				Иначе

					ВызватьИсключение НСтр("ru = 'Неопознанный узел '") + Читатель.Имя + ": " + Читатель.Значение;

				КонецЕсли;

				Читатель.Прочитать();

			КонецЦикла;

			ДобавитьСтроку(Писатель, ИмяПеременной + ".Свернуть(ОписаниеСтроки);", Истина);

		Иначе

			ДобавитьСтроку(Писатель, ИмяПеременной + ".Свернуть();", Истина);

		КонецЕсли;
		
		ПоследняяОбработаннаяКоманда = "Свернуть";

	ИначеЕсли Читатель.Имя = "close" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".Закрыть();", Истина);
		ПоследняяОбработаннаяКоманда = "Закрыть";
		ОкноБылоЗакрыто = Истина;
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "chooseUserMessage" Тогда
		ТекстСообщения = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "messageText" Тогда
				ТекстСообщения = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ВыбратьСообщениеПользователю(""" + ТекстСообщения + """);", Истина);
		ПоследняяОбработаннаяКоманда = "ВыбратьСообщениеПользователю";
		Читатель.Прочитать();

	ИначеЕсли Читатель.Имя = "executeCommand" Тогда
		СсылкаНаКоманду = "";
		Пока Читатель.ПрочитатьАтрибут() Цикл
			Если Читатель.Имя = "url" Тогда
				СсылкаНаКоманду = Читатель.Значение;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неопознанный атрибут '") + Читатель.Имя + ": " + Читатель.Значение;
			КонецЕсли;
		КонецЦикла;
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ВыполнитьКоманду(""" + СсылкаНаКоманду + """);", Истина);
		ПоследняяОбработаннаяКоманда = "ВыполнитьКоманду";
		Читатель.Прочитать();
		
	ИначеЕсли Читатель.Имя = "openDropList" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ОткрытьВыпадающийСписок();", Истина);
		ПоследняяОбработаннаяКоманда = "ОткрытьВыпадающийСписок";
		Читатель.Прочитать();
		
	ИначеЕсли Читатель.Имя = "closeDropList" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".ЗакрытьВыпадающийСписок();", Истина);
		ПоследняяОбработаннаяКоманда = "ЗакрытьВыпадающийСписок";
		Читатель.Прочитать();
		
	ИначеЕсли Читатель.Имя = "Create" Тогда
		ДобавитьСтроку(Писатель, ИмяПеременной + ".Создать();", Истина);
		ПоследняяОбработаннаяКоманда = "Создать";
		Читатель.Прочитать();
		
	ИначеЕсли Читатель.Имя = "gotoPreviousWindow"
		ИЛИ Читатель.Имя = "gotoNextWindow" Тогда
		// Ничего не нужно делать - это команда перехода между окнами
		// Нужно окно можно активизировать и обычными средствами

	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Читатель.Прочитать();

	Возврат Истина;

КонецФункции



#КонецОбласти


#КонецОбласти


#КонецОбласти




















