#Область Переменные

&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Если форма открыта под внешним управлением, то не вся функциональность
	// должна работать
	Если Параметры.ОткрытаПодВнешнимУправлением Тогда
		
		Элементы.ФормаОбновитьПоДаннымФормы.Доступность       = Ложь;
		Элементы.ФормаПроверитьНайтиНаФорме.Доступность       = Ложь;
		Элементы.ФормаСравнитьСВыбраннымЭлементом.Доступность = Ложь;
		
		Элементы.КМОбновитьПоДаннымФормы.Доступность          = Ложь;
		
	КонецЕсли;
	///
	
	ВариантПоискаЭлемента = Параметры.ВариантПоискаЭлемента;
	
	ЗапретДоступаКИмени   = Параметры.ЗапретДоступаКИмени;
	
	ИскатьПоИмени         = (Лев(ВариантПоискаЭлемента, 1) = "1");
	ИскатьПоЗаголовку     = (Сред(ВариантПоискаЭлемента, 2, 1) = "1");
	УчитыватьРасположение = (Прав(ВариантПоискаЭлемента, 1) = "1");
	
	ИмяЭлемента = Параметры.ИмяЭлемента;
	Если Лев(ИмяЭлемента, 1) = "$" Тогда
		ИмяЭлемента = "";
	КонецЕсли;
	
	ЗаголовокЭлемента = Параметры.ЗаголовокЭлемента;
	ТипЭлемента       = Параметры.ТипЭлемента;
	ВидЭлемента       = Параметры.ВидЭлемента;
	
	Элементы.ПутьПоискаЭлементаТип.СписокВыбора.Добавить("ТестируемаяФорма"                     , НСтр("ru = 'Управляемая форма'"));
	Элементы.ПутьПоискаЭлементаТип.СписокВыбора.Добавить("ТестируемаяГруппаКомандногоИнтерфейса", НСтр("ru = 'Группа командного интерфейса'"));
	Элементы.ПутьПоискаЭлементаТип.СписокВыбора.Добавить("ТестируемаяГруппаФормы"               , НСтр("ru = 'Группа формы'"));
	Элементы.ПутьПоискаЭлементаТип.СписокВыбора.Добавить("ТестируемаяДекорацияФормы"            , НСтр("ru = 'Декорация'"));
	Элементы.ПутьПоискаЭлементаТип.СписокВыбора.Добавить("ТестируемаяКнопкаКомандногоИнтерфейса", НСтр("ru = 'Кнопка командного интерфейса'"));
	Элементы.ПутьПоискаЭлементаТип.СписокВыбора.Добавить("ТестируемаяКнопкаФормы"               , НСтр("ru = 'Кнопка'"));
	Элементы.ПутьПоискаЭлементаТип.СписокВыбора.Добавить("ТестируемаяТаблицаФормы"              , НСтр("ru = 'Таблица формы'"));
	Элементы.ПутьПоискаЭлементаТип.СписокВыбора.Добавить("ТестируемоеПолеФормы"                 , НСтр("ru = 'Поле формы'"));
	
	Если Параметры.Свойство("ПутьКЭлементуФормы")
		И ТипЗнч(Параметры.ПутьКЭлементуФормы) = Тип("Структура") Тогда
		
		СтруктураПутиПоиска = Параметры.ПутьКЭлементуФормы;
		
		// Узел формы
		УзелДерева = ПутьПоискаЭлемента.ПолучитьЭлементы().Добавить();
		УзелДерева.Имя       = НСтр("ru = 'Форма'");
		УзелДерева.Заголовок = НСтр("ru = 'Форма'");
		УзелДерева.Тип       = НСтр("ru = 'ТестируемаяФорма'");
		
		// Хранимые узлы - последний узел - текущий
		Для каждого КлЗн Из СтруктураПутиПоиска Цикл
			СтруктураСтроки = КлЗн.Значение;
			УзелДерева = УзелДерева.ПолучитьЭлементы().Добавить();
			УзелДерева.Имя       = СтруктураСтроки.ИмяОбъекта;
			УзелДерева.Заголовок = СтруктураСтроки.ЗаголовокОбъекта;
			УзелДерева.Тип       = СтруктураСтроки.ТипОбъекта;
		КонецЦикла;
		
	Иначе
		// Пути нет, поэтому сброс флага
		Если УчитыватьРасположение Тогда
			УчитыватьРасположение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные изменены. Сохранить изменения?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросОСохраненииДанных", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИскатьПоИмениПриИзменении(Элемент)
	
	Если ИскатьПоИмени
		И УчитыватьРасположение Тогда
		
		// Если установлен флаг по имени, то нужно сбросить флаг поиска по пути
		
		ТекстВопроса = НСтр("ru = 'При поиске по имени взаимное расположение элементов формы не учитывается.
								  |Сбросить флаг ""Учитывать расположение элементов""?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОСбросеФлагаРасположения", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьПоЗаголовкуПриИзменении(Элемент)
	
	Если НЕ ИскатьПоЗаголовку И УчитыватьРасположение Тогда
		УчитыватьРасположение = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьРасположениеПриИзменении(Элемент)
	
	Если УчитыватьРасположение
		И ИскатьПоИмени Тогда
		
		// Если установлен флаг УчитыватьРасположение, то нужно сбросить флаг поиска по имени
		
		ТекстВопроса = НСтр("ru = 'При поиске по заголовкам с учетом взаимного расположения элементов формы поиск по имени не используется.
								  |Сбросить флаг ""Искать по имени""?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОСбросеФлагаПоискаПоИмени", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	
	УстановитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокЭлементаПриИзменении(Элемент)
	
	// Нужно изменить заголовок в последнем элементе дерева
	ПоследнийУзелПути = ПолучитьПоследнийУзелПути();
	
	Если ПоследнийУзелПути <> Неопределено Тогда
		ПоследнийУзелПути.Заголовок = ЗаголовокЭлемента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяЭлементаПриИзменении(Элемент)
	
	ПоследнийУзелПути = ПолучитьПоследнийУзелПути();
	
	Если ПоследнийУзелПути <> Неопределено Тогда
		ПоследнийУзелПути.Имя = ИмяЭлемента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьПоискаЭлементаПередНачаломИзменения(Элемент, Отказ)
	
	ТекущийУзел = Элементы.ПутьПоискаЭлемента.ТекущиеДанные;
	
	// Корневой узел дерева редактировать нельзя
	Если ТекущийУзел.ПолучитьРодителя() = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Редактирование корневого узла запрещено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Для текущего элемента нельзя изменить тип элемента, т.к. он определяется типом шага
	Если ТекущийУзел.ПолучитьЭлементы().Количество() = 0 Тогда
		Если Элементы.ПутьПоискаЭлемента.ТекущийЭлемент = Элементы.ПутьПоискаЭлементаТип Тогда
			ТекстПредупреждения = НСтр("ru = 'Тип текущего элемента не может быть изменен'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		Элемент.ПодчиненныеЭлементы.ПутьПоискаЭлементаТип.Доступность = Ложь;
	Иначе
		Элемент.ПодчиненныеЭлементы.ПутьПоискаЭлементаТип.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПутьПоискаЭлементаТипНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокДоступных = Новый СписокЗначений;
	
	СписокДоступных.Добавить("ТестируемаяГруппаКомандногоИнтерфейса", НСтр("ru = 'Группа командного интерфейса'"));
	СписокДоступных.Добавить("ТестируемаяГруппаФормы"               , НСтр("ru = 'Группа формы'"));
	СписокДоступных.Добавить("ТестируемаяТаблицаФормы"              , НСтр("ru = 'Таблица формы'"));
	
	Элементы.ПутьПоискаЭлементаТип.СписокВыбора.ДоступныеЗначения = СписокДоступных;
	
КонецПроцедуры



&НаКлиенте
Процедура ПутьПоискаЭлементаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПутьПоискаЭлемента.ТекущиеДанные;
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
		// Это изменение в последней строке, т.е. для текущего элемента
		
		ЗаголовокЭлемента = ТекущиеДанные.Заголовок;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьПоискаЭлементаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущийУзел = Элементы.ПутьПоискаЭлемента.ТекущиеДанные;
	
	Если ТекущийУзел = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось создать дерево расположения элемента на форме. Попробуйте перевыбрать элемент еще раз'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	// Добавлять к последнему узлу подчиненные элементы нельзя
	Если ТекущийУзел.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Смена текущего элемента запрещена (последний элемент в списке - текущий)'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ТекущийУзел.ПолучитьРодителя() = Неопределено И Копирование Тогда
		ТекстПредупреждения = НСтр("ru = 'Копировать сведения о форме запрещено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	НовыйУзел = ТекущийУзел.ПолучитьЭлементы().Добавить();
	
	Если Копирование Тогда
		ЗаполнитьЗначенияСвойств(НовыйУзел, ТекущийУзел);
	КонецЕсли;
	
	// Переносм узла
	
	ПодчиненныйУзел = ТекущийУзел.ПолучитьЭлементы().Получить(0);
	СменитьРодителяУзла(ПодчиненныйУзел, НовыйУзел);
	
	ИдентификаторНовогоУзла = НовыйУзел.ПолучитьИдентификатор();
	
	Если НЕ Элементы.ПутьПоискаЭлемента.Развернут(ИдентификаторНовогоУзла) Тогда
		Элементы.ПутьПоискаЭлемента.Развернуть(ИдентификаторНовогоУзла, Истина)
	КонецЕсли;
	
	Элементы.ПутьПоискаЭлемента.ТекущаяСтрока = ИдентификаторНовогоУзла;
	Элементы.ПутьПоискаЭлемента.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьПоискаЭлементаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущийУзел = Элементы.ПутьПоискаЭлемента.ТекущиеДанные;
	
	// Корень удалять нельзя
	Если ТекущийУзел.ПолучитьРодителя() = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Удаление сведений о форме запрещено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Последний узел удалять нельзя так как он является текущим
	Если ТекущийУзел.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Удаление сведений о текущем элементе запрещено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Перенос узла
	
	РодительскийУзел = ТекущийУзел.ПолучитьРодителя();
	// Змечание - родитель есть всегда - проверка выше
	
	ПодчиненныйУзел = ТекущийУзел.ПолучитьЭлементы().Получить(0);
	СменитьРодителяУзла(ПодчиненныйУзел, РодительскийУзел);
	
	РодительскийУзел.ПолучитьЭлементы().Удалить(ТекущийУзел);
	
	ИдентификаторРодительскогоУзла = РодительскийУзел.ПолучитьИдентификатор();
	
	Если НЕ Элементы.ПутьПоискаЭлемента.Развернут(ИдентификаторРодительскогоУзла) Тогда
		Элементы.ПутьПоискаЭлемента.Развернуть(ИдентификаторРодительскогоУзла, Истина)
	КонецЕсли;
	
	Элементы.ПутьПоискаЭлемента.ТекущаяСтрока = ИдентификаторРодительскогоУзла;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ВозвращаемаяСтруктура = ПодготовитьСтруктуруПоискаЭлемента();
	
	Если ВозвращаемаяСтруктура <> Неопределено Тогда
		Модифицированность = Ложь;
		Закрыть(ВозвращаемаяСтруктура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущийУзел = Элементы.ПутьПоискаЭлемента.ТекущиеДанные;
	
	Если ТекущийУзел = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось получить текущую строку'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Родитель = ТекущийУзел.ПолучитьРодителя();
	// Корень перемещать нельзя
	Если Родитель = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Перемещать сведения о форме запрещено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПодчиненныеУзлы = ТекущийУзел.ПолучитьЭлементы();
	// Последний узел перемещать нельзя
	Если ПодчиненныеУзлы.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Перемещать сведения о текущем элементе запрещено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	РодительРодителя = ТекущийУзел.ПолучитьРодителя().ПолучитьРодителя();
	// Подменять корень нельзя
	Если РодительРодителя = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Подменять сведения о форме запрещено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Перемещение - создание копий заменяемых узлов
	
	НовыйПеремещенныйУзел = РодительРодителя.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НовыйПеремещенныйУзел, ТекущийУзел);
	
	НовыйЗамещенныйУзел = НовыйПеремещенныйУзел.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НовыйЗамещенныйУзел, Родитель);
	
	// Перемещение подчиненных узлов
	СменитьРодителяУзла(ПодчиненныеУзлы.Получить(0), НовыйЗамещенныйУзел);
	
	// Удаление ненужной ветки
	РодительРодителя.ПолучитьЭлементы().Удалить(Родитель);
	
	ИдентификаторНовогоУзла = НовыйПеремещенныйУзел.ПолучитьИдентификатор();
	Если НЕ Элементы.ПутьПоискаЭлемента.Развернут(ИдентификаторНовогоУзла) Тогда
		Элементы.ПутьПоискаЭлемента.Развернуть(ИдентификаторНовогоУзла, Истина)
	КонецЕсли;
	
	Элементы.ПутьПоискаЭлемента.ТекущаяСтрока = ИдентификаторНовогоУзла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущийУзел = Элементы.ПутьПоискаЭлемента.ТекущиеДанные;
	
	Если ТекущийУзел = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось получить текущую строку'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Родитель = ТекущийУзел.ПолучитьРодителя();
	// Корень перемещать нельзя
	Если Родитель = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Перемещать сведения о форме запрещено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПодчиненныеУзлы = ТекущийУзел.ПолучитьЭлементы();
	// Последний узел перемещать нельзя
	Если ПодчиненныеУзлы.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Перемещать сведения о текущем элементе запрещено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПодчиненныйУзлыВторогоУровня = ТекущийУзел.ПолучитьЭлементы().Получить(0).ПолучитьЭлементы();
	// Подменять текущий элемент нельзя
	Если ПодчиненныйУзлыВторогоУровня.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Подменять сведения о текущем элементе запрещено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Перемещение - создание копий заменяемых узлов
	НовыйЗамещенныйУзел = Родитель.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НовыйЗамещенныйУзел, ПодчиненныеУзлы.Получить(0));
	
	НовыйПеремещенныйУзел = НовыйЗамещенныйУзел.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НовыйПеремещенныйУзел, ТекущийУзел);
	
	// Перемещение подчиненных узлов
	СменитьРодителяУзла(ПодчиненныйУзлыВторогоУровня.Получить(0), НовыйПеремещенныйУзел);
	
	// Удаление ненужной ветки
	Родитель.ПолучитьЭлементы().Удалить(ТекущийУзел);
	
	ИдентификаторНовогоУзла = НовыйЗамещенныйУзел.ПолучитьИдентификатор();
	Если НЕ Элементы.ПутьПоискаЭлемента.Развернут(ИдентификаторНовогоУзла) Тогда
		Элементы.ПутьПоискаЭлемента.Развернуть(ИдентификаторНовогоУзла, Истина)
	КонецЕсли;
	
	Элементы.ПутьПоискаЭлемента.ТекущаяСтрока = НовыйПеремещенныйУзел.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНайтиНаФорме(Команда)
	
	// Проверки выполняются внутри заполнения структуры
	СтруктураПоискаЭлемента = ПодготовитьСтруктуруПоискаЭлемента();
	
	Если СтруктураПоискаЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НужныйЭлемент = СцТ_ГлавнаяФорма.НайтиЭлементФормы(
		СтруктураПоискаЭлемента,
		ВладелецФормы.ДанныеШага,
		ВладелецФормы.ВызвавшаяФорма);
	
	Если НужныйЭлемент <> Неопределено Тогда
		Попытка
			НужныйЭлемент.Активизировать();
		Исключение
			ТекстПредупреждения = НСтр("ru = 'Нужный элемент найден, но активизировать его не удалось'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
	Иначе
		//ТекстПредупреждения = НСтр("ru = 'Не удалось найти нужный элемент'");
		//ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоДаннымФормы(Команда)
	
	ИмяДействияПослеВыбораЭлемента = "СцТ_ПослеВыбораТекстируемогоЭлементаФормы";
	ВыбратьТестируемыйЭлементИВыполнитьСНимДействие(ИмяДействияПослеВыбораЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСВыбраннымЭлементом(Команда)
	
	ИмяДействияПослеВыбораЭлемента = "СцТ_СравнитьПослеВыбораТекстируемогоЭлементаФормы";
	ВыбратьТестируемыйЭлементИВыполнитьСНимДействие(ИмяДействияПослеВыбораЭлемента);
	
КонецПроцедуры




#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Управление доступностью элементов формы в зависимости от состояния флагов
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементов(УпрФорма)
	
	УпрФорма.Элементы.ИскатьПоИмени.Доступность    = (НЕ УпрФорма.ЗапретДоступаКИмени);
	УпрФорма.Элементы.ИмяЭлемента.Доступность      = УпрФорма.ИскатьПоИмени;
	
	УпрФорма.Элементы.ЗаголовокЭлемента.Доступность = УпрФорма.ИскатьПоЗаголовку;
	
	УпрФорма.Элементы.УчитыватьРасположение.Доступность = УпрФорма.Элементы.ЗаголовокЭлемента.Доступность;
	УпрФорма.Элементы.ПутьПоискаЭлемента.Доступность    = УпрФорма.УчитыватьРасположение;
	
КонецПроцедуры

// Завершение выполнения изменения флага "Искать по имени"
//
&НаКлиенте
Процедура ПослеОтветаНаВопросОСбросеФлагаРасположения(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Сброс флага расположения
		
		УчитыватьРасположение = Ложь;
		УстановитьДоступностьЭлементов(ЭтотОбъект);
		
	Иначе // нет
		// Сброс флага искать по имени, т.е. откат
		
		ИскатьПоИмени = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Завершение выполнения изменения флага "Учитывать расположение"
//
&НаКлиенте
Процедура ПослеОтветаНаВопросОСбросеФлагаПоискаПоИмени(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Сброс флага расположения
		
		ИскатьПоИмени = Ложь;
		УстановитьДоступностьЭлементов(ЭтотОбъект);
		
	Иначе // нет
		// Сброс флага искать по имени, т.е. откат
		
		УчитыватьРасположение = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка закрытия модифицированной формы
//
&НаКлиенте
Процедура ПриОтветеНаВопросОСохраненииДанных(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВозвращаемаяСтруктура = ПодготовитьСтруктуруПоискаЭлемента();
		Если ВозвращаемаяСтруктура <> Неопределено Тогда
			Модифицированность = Ложь;
			Закрыть(ВозвращаемаяСтруктура);
		КонецЕсли;
	Иначе
		// Отказ от сохранения данных
		Модифицированность = Ложь;
		Закрыть(ВозвращаемаяСтруктура);
	КонецЕсли;
	
КонецПроцедуры

// Получение последнего узла в пути - 
// определение текущего элемента
&НаКлиенте
Функция ПолучитьПоследнийУзелПути()
	
	// Нужно изменить заголовок в последнем элементе дерева
	УзлыДерева = ПутьПоискаЭлемента.ПолучитьЭлементы();
	ТекущийУзел = Неопределено;
	Пока УзлыДерева.Количество() > 0 Цикл
		ТекущийУзел = УзлыДерева[0];
		УзлыДерева = ТекущийУзел.ПолучитьЭлементы();
	КонецЦикла;
	
	Возврат ТекущийУзел;
	
КонецФункции

// Перенос узла в ветку нового родителя
// Параметры
// ПереносимыйУзел - данные переносимого узла
// НовыйРодитель - данные нового родительского узла
&НаКлиенте
Процедура СменитьРодителяУзла(Знач ПереносимыйУзел, Знач НовыйРодитель)
	
	ТекущийУзел = ПереносимыйУзел;
	
	// Особенность ветки в том, что она не имеет ветвлений, т.е. в подчинении всегда
	// не более одного элемента, поэтому можно обойтись обычным циклом
	Пока Истина Цикл
		НовыйРодитель = НовыйРодитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйРодитель, ТекущийУзел);
		
		ПодчиненныеУзлы = ТекущийУзел.ПолучитьЭлементы();
		Если ПодчиненныеУзлы.Количество() = 0 Тогда
			// Достигнут последний узел ветки
			СтарыйРодитель = ПереносимыйУзел.ПолучитьРодителя();
			Если СтарыйРодитель = Неопределено Тогда
				СтарыйРодитель = ПутьПоискаЭлемента;
			КонецЕсли;
			СтарыйРодитель.ПолучитьЭлементы().Удалить(ПереносимыйУзел);
			
			Возврат;
		Иначе
			ТекущийУзел = ПодчиненныеУзлы.Получить(0);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготовка структуры поиска элемента по данным формы
//
&НаКлиенте
Функция ПодготовитьСтруктуруПоискаЭлемента()
	
	ЕстьОшибкиЗаполнения = Ложь;
	Если НЕ ИскатьПоИмени И НЕ ИскатьПоЗаголовку Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран способ поиска элемента. Должен быть установлен хотя бы один флаг ""По имени"" или/и ""По заголовку""'");
		Сообщение.Поле  = "ИскатьПоИмени";
		Сообщение.Сообщить();
		
		ЕстьОшибкиЗаполнения = Истина;
		
	КонецЕсли;
		
	Если ИскатьПоИмени И ПустаяСтрока(ИмяЭлемента) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Установлен способ поиска ""По имени"", но не заполнено поле ""Имя элемента""'");
		Сообщение.Поле  = "ИмяЭлемента";
		Сообщение.Сообщить();
		
		ЕстьОшибкиЗаполнения = Истина;
		
	КонецЕсли;
		
	Если НЕ ИскатьПоИмени И ИскатьПоЗаголовку И ПустаяСтрока(ЗаголовокЭлемента) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Установлен способ поиска ""По заголовку"", но не заполнена маска заголовка'");
		Сообщение.Поле  = "ЗаголовокЭлемента";
		Сообщение.Сообщить();
		
		ЕстьОшибкиЗаполнения = Истина;
		
	КонецЕсли;
	
	Если УчитыватьРасположение И ПутьПоискаЭлемента.ПолучитьЭлементы().Количество() = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Установлен способ поиска ""По заголовку"" с учетом расположения элементов, но не задано расположение элемента на форме'");
		Сообщение.Поле  = "УчитыватьРасположение";
		Сообщение.Сообщить();
		
		ЕстьОшибкиЗаполнения = Истина;
		
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// ****************************
	// Проверки закончены. Непосредственная подготовка структуры
	
	// Построение пути к элементу формы.
	ПутьКЭлементуФормы = Неопределено;
	
	Если ПутьПоискаЭлемента.ПолучитьЭлементы().Количество() > 0 Тогда
		
		УзелФормы = ПутьПоискаЭлемента.ПолучитьЭлементы().Получить(0);
		
		// Первый узел (узел Формы) в пути не учитывается
		Если УзелФормы.ПолучитьЭлементы().Количество() > 0 Тогда
			
			ПутьКЭлементуФормы = Новый Структура;
			УзелПути = УзелФормы;
			Счетчик = 1;
			
			Пока УзелПути.ПолучитьЭлементы().Количество() > 0 Цикл
				ИмяСтруктурыСтроки = "Str_" + Формат(Счетчик, "ЧГ=0");
				УзелПути = УзелПути.ПолучитьЭлементы().Получить(0);
				СтруктураСтроки = Новый Структура;
				СтруктураСтроки.Вставить("ИмяОбъекта"      , УзелПути.Имя);
				СтруктураСтроки.Вставить("ЗаголовокОбъекта", УзелПути.Заголовок);
				СтруктураСтроки.Вставить("ТипОбъекта"      , УзелПути.Тип);
				
				ПутьКЭлементуФормы.Вставить(ИмяСтруктурыСтроки, СтруктураСтроки);
				
				Счетчик = Счетчик + 1;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ВариантПоискаЭлемента = ?(ИскатьПоИмени        , "1", "0")
						  + ?(ИскатьПоЗаголовку    , "1", "0")
						  + ?(УчитыватьРасположение, "1", "0");
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("ВариантПоискаЭлемента", ВариантПоискаЭлемента);
	ВозвращаемаяСтруктура.Вставить("ТипЭлемента"          , ТипЭлемента);
	ВозвращаемаяСтруктура.Вставить("ВидЭлемента"          , ВидЭлемента);
	ВозвращаемаяСтруктура.Вставить("ИмяЭлемента"          , ИмяЭлемента);
	ВозвращаемаяСтруктура.Вставить("ЗаголовокЭлемента"    , ЗаголовокЭлемента);
	ВозвращаемаяСтруктура.Вставить("ПутьКЭлементуФормы"   , ПутьКЭлементуФормы);
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Завершение выбора нового элемента. Заполнение сведений для поиска
// по данным выбранного элемента
&НаКлиенте
Процедура СцТ_ПослеВыбораТекстируемогоЭлементаФормы(РезультатФормы, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		// Форма была закрыта "без сохранения"
		Возврат;
	КонецЕсли;
	
	ЗаголовокЭлемента = РезультатФормы.Заголовок;
	ИмяЭлемента       = РезультатФормы.Имя;
	ТипЭлемента       = РезультатФормы.Тип;
	ИмяЭлемента       = РезультатФормы.Имя;
	
	// Тип и вид элемента формы изменяться не должны,
	// т.к. они определяеются типом шага и при их смене
	// очевидно лучше переделать шаг полностью
	
	ПутьПоискаЭлемента.ПолучитьЭлементы().Очистить();
	
	Если РезультатФормы.ПутьКОбъекту.Количество() > 0 Тогда
		// Добавление декоративного узла формы
		УзелДерева = ПутьПоискаЭлемента.ПолучитьЭлементы().Добавить();
		УзелДерева.Имя       = НСтр("ru = 'Форма'");
		УзелДерева.Заголовок = НСтр("ru = 'Форма'");
		УзелДерева.Тип       = НСтр("ru = 'ТестируемаяФорма'");
		
		Для каждого СтруктураСтроки Из РезультатФормы.ПутьКОбъекту Цикл
			
			УзелДерева = УзелДерева.ПолучитьЭлементы().Добавить();
			УзелДерева.Имя       = СтруктураСтроки.ИмяОбъекта;
			УзелДерева.Заголовок = СтруктураСтроки.ЗаголовокОбъекта;
			
			// Тип элемента нужно преобразовать в строку
			НовыйТип = ПреобразоватьТипТестируемогоЭлементаВСтроку(СтруктураСтроки.ТипОбъекта);
			Если ПустаяСтрока(НовыйТип) Тогда
				Продолжить;
			КонецЕсли;
			УзелДерева.Тип       = НовыйТип;
			
		КонецЦикла;
		
		// Дерево нужно развернуть
		ПервыйИдентификатор = ПутьПоискаЭлемента.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		Элементы.ПутьПоискаЭлемента.Развернуть(ПервыйИдентификатор, Истина);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры


// Завершение сравнения после выбора нового элемента
//
&НаКлиенте
Процедура СцТ_СравнитьПослеВыбораТекстируемогоЭлементаФормы(РезультатФормы, ДопПараметры) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		// Форма была закрыта "без сохранения"
		Возврат;
	КонецЕсли;
	
	// Подготовка текстового документа сравнения
	ТД = Новый ТекстовыйДокумент;
	
	ТД.ДобавитьСтроку("<!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.01//EN"" ""http://www.w3.org/TR/html4/strict.dtd"">");
	ТД.ДобавитьСтроку("<html>");
	ТД.ДобавитьСтроку("<head><meta content=""text/html; charset=ISO-8859-1"" http-equiv=""content-type""><title></title></head>");
	ТД.ДобавитьСтроку("<body>");
	
	
	ДобавляемаяСтрока = "<h2>%1</h2>";
	ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Результаты сравнения'"));
	ТД.ДобавитьСтроку(ДобавляемаяСтрока);
	
	ТД.ДобавитьСтроку("<table style=""text-align: left; width: 640px; height: 52px;"" border=""1"" cellpadding=""3"" cellspacing=""0"">");
	ТД.ДобавитьСтроку("<tbody><tr>");
	
	ДобавляемаяСтрока = "<th style=""width: 182px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
	ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Параметр'"));
	ТД.ДобавитьСтроку(ДобавляемаяСтрока);
	
	ДобавляемаяСтрока = "<th style=""width: 204px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
	ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Значение в шаге'"));
	ТД.ДобавитьСтроку(ДобавляемаяСтрока);
	
	ДобавляемаяСтрока = "<th style=""width: 204px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
	ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Значение на форме'"));
	ТД.ДобавитьСтроку(ДобавляемаяСтрока);
	
	ТД.ДобавитьСтроку("</tr></tbody>");
	
	// Вывод результата сравнения элементов шапки
	СравнитьИВывести(НСтр("ru = 'Имя'"), ИмяЭлемента, РезультатФормы.Имя, ТД);
	СравнитьИВывести(НСтр("ru = 'Заголовок'"), ЗаголовокЭлемента, РезультатФормы.Заголовок, ТД);
	
	
	// Вывод результата сравнения пути
	КоличествоСтрокПутиНаФорме = РезультатФормы.ПутьКОбъекту.Количество();
	
	ЭлементыПутиВШаге = ПутьПоискаЭлемента.ПолучитьЭлементы();
	
	Если ЭлементыПутиВШаге.Количество() > 0
		ИЛИ КоличествоСтрокПутиНаФорме > 0 Тогда
		
		ВывестиЗаголовок(НСтр("ru = 'Расположение на форме'"), ТД);
		
		// Узел формы нужно пропустить
		ЭлементыПутиВШаге = ЭлементыПутиВШаге[0].ПолучитьЭлементы();
		
		НомерСтрокиПутиНаФорме = 1;
		Пока ЭлементыПутиВШаге.Количество() > 0 Цикл
			
			ТекстЗаголовкаВПути = НСтр("ru = 'Строка № %1'");
			ТекстЗаголовкаВПути = СтрЗаменить(ТекстЗаголовкаВПути, "%1", Строка(НомерСтрокиПутиНаФорме));
			ВывестиЗаголовок(ТекстЗаголовкаВПути, ТД);
			
			ЭлементПутиВШаге = ЭлементыПутиВШаге[0];
			
			Если НомерСтрокиПутиНаФорме <= КоличествоСтрокПутиНаФорме Тогда
				ЭлементПутиНаФорме = РезультатФормы.ПутьКОбъекту[НомерСтрокиПутиНаФорме - 1];
				ЗаголовокНаФорме = ЭлементПутиНаФорме.ЗаголовокОбъекта;
				ТипНаФорме       = ПреобразоватьТипТестируемогоЭлементаВСтроку(ЭлементПутиНаФорме.ТипОбъекта);
			Иначе
				ЗаголовокНаФорме = "";
				ТипНаФорме       = "";
			КонецЕсли;
			
			СравнитьИВывести(НСтр("ru = 'Заголовок'"), ЭлементПутиВШаге.Заголовок, ЗаголовокНаФорме, ТД);
			СравнитьИВывести(НСтр("ru = 'Тип'"), ЭлементПутиВШаге.Тип, ТипНаФорме, ТД);
			
			ЭлементыПутиВШаге = ЭлементПутиВШаге.ПолучитьЭлементы();
			
			НомерСтрокиПутиНаФорме = НомерСтрокиПутиНаФорме + 1;
			
		КонецЦикла;
		
		Если НомерСтрокиПутиНаФорме <= КоличествоСтрокПутиНаФорме Тогда
			Для Парам = НомерСтрокиПутиНаФорме По КоличествоСтрокПутиНаФорме Цикл
				
				ЗаголовокСравнения = СтрокаЗаголовкаВСравнении();
				ЗаголовокСравнения = СтрЗаменить(ЗаголовокСравнения, "&amp;Title", Строка(НомерСтрокиПутиНаФорме));
				ТД.ДобавитьСтроку(ЗаголовокСравнения);
				
				ЭлементПутиНаФорме = РезультатФормы.ПутьКОбъекту[НомерСтрокиПутиНаФорме - 1];
				ЗаголовокНаФорме = ЭлементПутиНаФорме.ЗаголовокОбъекта;
				ТипНаФорме       = ПреобразоватьТипТестируемогоЭлементаВСтроку(ЭлементПутиНаФорме.ТипОбъекта);
				
				СравнитьИВывести(НСтр("ru = 'Заголовок'"), "", ЗаголовокНаФорме, ТД);
				СравнитьИВывести(НСтр("ru = 'Тип'"), "", ТипНаФорме, ТД);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТД.ДобавитьСтроку("</table></body></html>");
	
	ИмяВрФайла = ПолучитьИмяВременногоФайла("html");
	
	ТД.Записать(ИмяВрФайла);
	
	ЗапуститьПриложение(ИмяВрФайла);
	#КонецЕсли
	
КонецПроцедуры

// Выбор тестируемого элемента и вызов обработчика описания,
// имя которого передано в параметре
&НаКлиенте
Процедура ВыбратьТестируемыйЭлементИВыполнитьСНимДействие(ИмяДействияПослеВыбораЭлемента)
	
	// Подготовка данных для выбора элемента
	ОписаниеОшибкиПолученияКонтейнера = "";
	ИнтерактивныйКонтейнер = СцТ_ГлавнаяФорма.СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(
		ВладелецФормы.ДанныеШага,
		ОписаниеОшибкиПолученияКонтейнера,
		Истина);
	
	Если ИнтерактивныйКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТекущегоЭлементаФормы = Новый Структура;
	ОписаниеТекущегоЭлементаФормы.Вставить("Тип"      , ТипЭлемента);
	ОписаниеТекущегоЭлементаФормы.Вставить("Заголовок", ЗаголовокЭлемента);
	ОписаниеТекущегоЭлементаФормы.Вставить("Имя"      , ИмяЭлемента);
	
	// Тип выбираемых объектов определяется типом шага
	ТипыВыбираемыхОбъектов = Новый СписокЗначений;
	
	ТипыОтображаемых = Новый СписокЗначений;
		
	
	Если ВидЭлемента = "ТабличныйДокумент" Тогда
		ТипыВыбираемыхОбъектов.Добавить("ПолеТабличногоДокумента");
		
	ИначеЕсли ПустаяСтрока(ВидЭлемента) Тогда
		ТипыВыбираемыхОбъектов.Добавить(СцТ_ГлавнаяФорма.СцТ_ТипТестируемогоОбъектаИзЧисла(ТипЭлемента));
		
		//ТипыВыбираемыхОбъектов.Добавить(ТипЭлемента);
		
	КонецЕсли;
	
	ТипыОтображаемых.Добавить("ГруппаКнопок");
	ТипыОтображаемых.Добавить("ГруппаКолонок");
	ТипыОтображаемых.Добавить("КоманднаяПанель");
	ТипыОтображаемых.Добавить("КонекстноеМеню");
	ТипыОтображаемых.Добавить("ОбычнаяГруппа");
	ТипыОтображаемых.Добавить("Подменю");
	ТипыОтображаемых.Добавить("Страница");
	ТипыОтображаемых.Добавить("Страницы");
	
	ОбработчикОповещения = Новый ОписаниеОповещения(ИмяДействияПослеВыбораЭлемента, ЭтотОбъект);
	
	СцТ_ГлавнаяФорма.СцТ_ВыбратьОбъектыТестируемогоПриложения(
		ИнтерактивныйКонтейнер,
		ТипыВыбираемыхОбъектов,
		ТипыОтображаемых,
		ОписаниеТекущегоЭлементаФормы,,
		ЭтотОбъект,,,,,,,
		ОбработчикОповещения);
	
КонецПроцедуры

// Проверка значений и вывод их в строку с соответствующим оформлением
// в табличном документе
// Параметры
// ИмяПараметра - Имя сравниваемого параметра
// ЗначениеВШаге - Значение в шаге
// ЭталонноеЗначение - значение полученное из формы
// ТекстД - текстовый документ, в который выводится строка
&НаКлиенте
Процедура СравнитьИВывести(ИмяПараметра, ЗначениеВШаге, ЭталонноеЗначение, ТекстД)
	
	Если ЗначениеВШаге = ЭталонноеЗначение Тогда
		ДобавляемаяСтрока = ПравильнаяСтрокаСравнения();
	Иначе
		ДобавляемаяСтрока = СтрокаСравненияСОшибкой();
	КонецЕсли;
	
	ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "&amp;Name", ИмяПараметра);
	ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "&amp;Value1", ЗначениеВШаге);
	ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "&amp;Value2", ЭталонноеЗначение);
	
	ТекстД.ДобавитьСтроку(ДобавляемаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЗаголовок(ТекстЗаголовка, ТекстД)
	
	ЗаголовокСравнения = СтрокаЗаголовкаВСравнении();
	ЗаголовокСравнения = СтрЗаменить(ЗаголовокСравнения, "&amp;Title", ТекстЗаголовка);
	ТекстД.ДобавитьСтроку(ЗаголовокСравнения);
	
КонецПроцедуры



// Строка с форматом совпадения при сравнении
//
&НаКлиенте
Функция ПравильнаяСтрокаСравнения()
	
	ВозвращаемаяСтрока = "<tbody><tr><td style=""width: 182px;"">&amp;Name</td>";
	ВозвращаемаяСтрока = ВозвращаемаяСтрока
		+ "<td style=""width: 204px;"">&amp;Value1<br></td>";
	ВозвращаемаяСтрока = ВозвращаемаяСтрока
		+ "<td style=""width: 204px;"">&amp;Value2<br></td>";
	ВозвращаемаяСтрока = ВозвращаемаяСтрока
		+ "</tr></tbody>";
	
	Возврат ВозвращаемаяСтрока;
	
КонецФункции


// Строка с форматом ошибки при сравнении
//
&НаКлиенте
Функция СтрокаСравненияСОшибкой()
	
	ВозвращаемаяСтрока = "<tbody><tr><td style=""width: 182px; color: rgb(204, 0, 0);"">&amp;Name</td>";
	ВозвращаемаяСтрока = ВозвращаемаяСтрока
		+ "<td style=""width: 204px; color: rgb(204, 0, 0);"">&amp;Value1</td>";
	ВозвращаемаяСтрока = ВозвращаемаяСтрока
		+ "<td style=""width: 204px; color: rgb(204, 0, 0);"">&amp;Value2</td>";
	ВозвращаемаяСтрока = ВозвращаемаяСтрока
		+ "</tr></tbody>";
	
	Возврат ВозвращаемаяСтрока;
	
КонецФункции

// Строка для вывода заголовков при сравнении
&НаКлиенте
Функция СтрокаЗаголовкаВСравнении()
	
	ВозвращаемаяСтрока = "<tbody><tr><td colspan=""3"" rowspan=""1""><div style=""text-align: center;"">";
	ВозвращаемаяСтрока = ВозвращаемаяСтрока
		+ "<span style=""font-weight: bold;"">&amp;Title</span></div></td></tr></tbody>";
	
	Возврат ВозвращаемаяСтрока;
	
КонецФункции

&НаКлиенте
Функция ПреобразоватьТипТестируемогоЭлементаВСтроку(НастоящийТип)
	
	
	Если НастоящийТип = Тип("ТестируемаяГруппаКомандногоИнтерфейса") Тогда
		НовыйТип = "ТестируемаяГруппаКомандногоИнтерфейса";
	ИначеЕсли НастоящийТип = Тип("ТестируемаяГруппаФормы") Тогда
		НовыйТип = "ТестируемаяГруппаФормы";
	ИначеЕсли НастоящийТип = Тип("ТестируемаяДекорацияФормы") Тогда
		НовыйТип = "ТестируемаяДекорацияФормы";
	ИначеЕсли НастоящийТип = Тип("ТестируемаяКнопкаКомандногоИнтерфейса") Тогда
		НовыйТип = "ТестируемаяКнопкаКомандногоИнтерфейса";
	ИначеЕсли НастоящийТип = Тип("ТестируемаяКнопкаФормы") Тогда
		НовыйТип = "ТестируемаяКнопкаФормы";
	ИначеЕсли НастоящийТип = Тип("ТестируемаяТаблицаФормы") Тогда
		НовыйТип = "ТестируемаяТаблицаФормы";
	ИначеЕсли НастоящийТип = Тип("ТестируемоеПолеФормы") Тогда
		НовыйТип = "ТестируемоеПолеФормы";
	ИначеЕсли НастоящийТип = Тип("ТестируемаяФорма") Тогда
		НовыйТип = "ТестируемаяФорма";
	Иначе
		НовыйТип = "";
	КонецЕсли;
	
	Возврат НовыйТип;
	
КонецФункции

&НаКлиенте
Процедура ПутьПоискаЭлементаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ПустаяСтрока(ТекущиеДанные.Тип) Тогда
		ТекстПредупреждения = НСтр("ru = 'Тип элемента должен быть указан'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры









#КонецОбласти