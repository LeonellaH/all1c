
&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимСовместимости838 Тогда
		УстановитьДействие("ПередЗакрытием", "ПередЗакрытиеБезРежимаСовместимости");
	КонецЕсли;
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	ДеревоНачальныхУстановокШаговНаСервере = ПолучитьИзВременногоХранилища(
		Параметры.АдресХранилищаДереваНастроек);
	
	ДеревоНачальныхУстановокШагов.ПолучитьЭлементы().Очистить();
	СцТ_ЗаполнитьВеткуДерева_НаСервере(
		ДеревоНачальныхУстановокШагов,
		ДеревоНачальныхУстановокШаговНаСервере);
	
	СписокТиповШагов = Параметры.СписокТиповШагов.Скопировать();
	
	СцТ_ЗаполнитьВеткуДереваНачальныхУстановокШаговФормы(
		ДеревоНачальныхУстановокШаговОтображения,
		ДеревоНачальныхУстановокШагов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("СцТ_ОбработчикОтветаНаВопросОСохраненииИзменений", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Сохранить изменения?'");
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 0);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиеБезРежимаСовместимости(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		Если НЕ ЗавершениеРаботы Тогда
			
			ОбработчикОповещения = Новый ОписаниеОповещения("СцТ_ОбработчикОтветаНаВопросОСохраненииИзменений", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Сохранить изменения?'");
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 0);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Изменена настройка шагов по умолчанию. При закрытии изменения будут утеряны'");
		КонецЕсли;
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура СцТ_ОбработчикОтветаНаВопросОСохраненииИзменений(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		АдресДерева = СцТ_ПолучитьАдресИзмененногоДереваНачальныхУстановок();
		Оповестить("ИзменениеДереваНачальныхУстановокШагов", АдресДерева);
		Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		// Закрытие окна без сохранения
		Модифицированность = Ложь;
		Закрыть();
		
		// Иначе - не нужно закрывать окно
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОповещениеОбОтметкеВСпискеЗначений(ОтмеченныйСписок, ДопПапарметры) Экспорт
	
	Если ОтмеченныйСписок <> Неопределено Тогда
		// Т.е. нажата кнопка ОК
		
		РодительИсключения = ДопПапарметры.РодительИсключения;
		ТипНовогоУзла      = ДопПапарметры.ТипНовогоУзла;
		
		Для каждого ЭлементСписка ИЗ ОтмеченныйСписок Цикл
			Если ЭлементСписка.Пометка Тогда
				НовоеИсключение = РодительИсключения.ПолучитьЭлементы().Добавить();
				НовоеИсключение.Имя      = ЭлементСписка.Значение;
				НовоеИсключение.Синоним  = ЭлементСписка.Представление;
				НовоеИсключение.ТипУзла  = ТипНовогоУзла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы_ГруппаСтраницНастройки

&НаКлиенте
Процедура ОсновнойВариантПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаписиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсключенийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставШаговПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачальныхУстановокШаговОтображенияПользовательскоеОписаниеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачальныхУстановокШаговОтображенияКомментарииПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаписиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанныеДерева = Элементы.ДеревоНачальныхУстановокШаговОтображения.ТекущиеДанные;
	РодительскийУзел = ТекущиеДанныеДерева.ПолучитьРодителя();
	ТипМетаданных = РодительскийУзел.Имя;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить("Записать", "Записать");
	
	Если ТипМетаданных = "Документы" Тогда
		ДанныеВыбора.Добавить("Провести"                     , "Провести");
		ДанныеВыбора.Добавить("КакУВоспроизводимогоДокумента", "По текущему состоянию документа");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы_ДеревоНачальныхУстановокШагов

&НаКлиенте
Процедура ДеревоНачальныхУстановокШаговОтображенияПриАктивизацииСтроки(Элемент)
	
	СцТ_УстановитьВидимостьНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачальныхУстановокШаговНеВыводитьАвтоописаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНачальныхУстановокШаговОтображения.ТекущиеДанные;
	Если ТекущиеДанные.НеВыводитьАвтоописание = 2 Тогда
		ТекущиеДанные.НеВыводитьАвтоописание = 0;
	КонецЕсли;
	
	СцТ_УстановитьФлагиПодчиненныхУзлов(ТекущиеДанные, "НеВыводитьАвтоописание");
	СцТ_УстановитьФлагиРодительскихУзлов(ТекущиеДанные, "НеВыводитьАвтоописание");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачальныхУстановокШаговАктивностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНачальныхУстановокШаговОтображения.ТекущиеДанные;
	Если ТекущиеДанные.Активность = 2 Тогда
		ТекущиеДанные.Активность = 0;
	КонецЕсли;
	
	СцТ_УстановитьФлагиПодчиненныхУзлов(ТекущиеДанные, "Активность");
	СцТ_УстановитьФлагиРодительскихУзлов(ТекущиеДанные, "Активность");
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы_СоставШагов

&НаКлиенте
Процедура СоставШаговПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	// Определение типа метаданных
	ТекущиеДанные = Элементы.ДеревоНачальныхУстановокШаговОтображения.ТекущиеДанные;
	Если ТекущиеДанные.ТипУзла = "ТипМетаданных" Тогда
		ТипМетаданных = ТекущиеДанные.Имя;
	Иначе
		РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
		ТипМетаданных = РодительскаяСтрока.Имя;
	КонецЕсли;
	
	// Определение типа формы
	ТекущиеДанныеШагов = Элементы.СоставШагов.ТекущиеДанные;
	
	Если ТекущиеДанныеШагов = Неопределено Тогда
		// Это ошибка, так как типы форм должны быть
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеШагов.ТипУзла = "УзелФормы" Тогда
		РодительскийУзел  = ТекущиеДанныеШагов;
		ИндексНовойСтроки = РодительскийУзел.ПолучитьЭлементы().Количество();
		
		ИмяФормыВУзле = ТекущиеДанныеШагов.Имя;
		
	Иначе
		РодительскийУзел  = ТекущиеДанныеШагов.ПолучитьРодителя();
		ИндексНовойСтроки = РодительскийУзел.ПолучитьЭлементы().Индекс(ТекущиеДанныеШагов) + 1;
		ИмяФормыВУзле = РодительскийУзел.Имя;
	КонецЕсли;
	
	// Заполнение списка доступными шагами
	
	СписокВыбора = Новый СписокЗначений;
	
	// Важен порядок элементов в списке.
	// Порядок установлен отделом тестирования компании 1С
	
	Если ИмяФормыВУзле = "БезФормы" Тогда
		Если ТипМетаданных <> "РегистрыСведений" Тогда
			СцТ_ГлавнаяФорма.СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, "ЗаменаСсылки");
		КонецЕсли;
		СцТ_ГлавнаяФорма.СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, "Воспроизвести");
		СцТ_ГлавнаяФорма.СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, "СравнитьСЭталоном");
		Если ТипМетаданных <> "Документы" Тогда
			СцТ_ГлавнаяФорма.СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, "СравнитьДвижения");
		КонецЕсли;
		СцТ_ГлавнаяФорма.СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, "ВыполнитьВРучную");
		СцТ_ГлавнаяФорма.СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, "ВыполнитьЗапрос");
		СцТ_ГлавнаяФорма.СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, "ВыполнитьПроцедуру");
		СцТ_ГлавнаяФорма.СцТ_ДобавитьВСписокВыбораТипШага_НаКлиенте(СписокВыбора, "Комментарий");
		
	КонецЕсли;
	
	ВладелецФормы.СцТ_ИсключитьНедоступныеТипыШагов(СписокВыбора, СписокТиповШагов);
	
	СписокВыбора.ПоказатьВыборЭлемента(
		Новый ОписаниеОповещения("СцТ_ОбработатьВыборЭлементаДоступногоШага",
		ЭтотОбъект,
		Новый Структура("РодительскийУзел,ИндексНовойСтроки", РодительскийУзел, ИндексНовойСтроки)));
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОбработатьВыборЭлементаДоступногоШага(ВыбранныйЭлемент, ДопДанные) Экспорт
	
	РодительскийУзел  = ДопДанные.РодительскийУзел;
	ИндексНовойСтроки = ДопДанные.ИндексНовойСтроки;
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		НовыйШаг = РодительскийУзел.ПолучитьЭлементы().Вставить(ИндексНовойСтроки);
		
		НовыйШаг.Имя      = ВыбранныйЭлемент.Значение;
		НовыйШаг.Синоним  = ВыбранныйЭлемент.Представление;
		НовыйШаг.ТипУзла  = "Шаг";
		
		Элементы.СоставШагов.ТекущаяСтрока = НовыйШаг.ПолучитьИдентификатор();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставШаговВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы_ДеревоИсключений

&НаКлиенте
Процедура ДеревоИсключенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	// Определение типа метаданных
	ТекущиеДанные = Элементы.ДеревоНачальныхУстановокШаговОтображения.ТекущиеДанные;
	Если ТекущиеДанные.ТипУзла = "ТипМетаданных" Тогда
		ТипМетаданных = ТекущиеДанные.Имя;
	Иначе
		РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
		ТипМетаданных = РодительскаяСтрока.Имя;
	КонецЕсли;
	
	// Определение типа исключения
	ТекущиеДанныеИсключения = Элементы.ДеревоИсключений.ТекущиеДанные;
	
	Если ТекущиеДанныеИсключения = Неопределено Тогда
		// Это ошибка, так как типы форм должны быть
		Возврат;
	КонецЕсли;
	
	Если    ТекущиеДанныеИсключения.ТипУзла = "УзелИсключенийРеквизиты"
		ИЛИ ТекущиеДанныеИсключения.ТипУзла = "УзелИсключенийРеквизитыТЧ"
		ИЛИ ТекущиеДанныеИсключения.ТипУзла = "УзелИсключенийРеквизитыДвижений" Тогда
		// Добавляем дочернюю строку в тот узел, на котором стоим
		РодительИсключения = ТекущиеДанные.ДеревоИсключений.НайтиПоИдентификатору(
			Элементы.ДеревоИсключений.ТекущаяСтрока);
		
	ИначеЕсли ТекущиеДанныеИсключения.ТипУзла = "Реквизит"
		ИЛИ   ТекущиеДанныеИсключения.ТипУзла = "РеквизитТЧ"
		ИЛИ   ТекущиеДанныеИсключения.ТипУзла = "РеквизитДвижения" Тогда
		// Нужно определить родительский узел
		РодительИсключения =
			ТекущиеДанные.ДеревоИсключений.НайтиПоИдентификатору(Элементы.ДеревоИсключений.ТекущаяСтрока).ПолучитьРодителя();
		
	КонецЕсли;
	
	Если РодительИсключения.ТипУзла = "УзелИсключенийРеквизиты" Тогда
		ТипНовогоУзла = "Реквизит";
	ИначеЕсли РодительИсключения.ТипУзла = "УзелИсключенийРеквизитыТЧ" Тогда
		ТипНовогоУзла = "РеквизитТЧ";
	ИначеЕсли РодительИсключения.ТипУзла = "УзелИсключенийРеквизитыДвижений" Тогда
		ТипНовогоУзла = "РеквизитДвижения";
	КонецЕсли;
	
	// Формирование списка для добавления
	СписокДобавления = СцТ_СформироватьСписокДобавления(ТипМетаданных, РодительИсключения.ТипУзла);
	
	ДопПапарметры = Новый Структура("РодительИсключения, ТипНовогоУзла", РодительИсключения, ТипНовогоУзла);
	
	Обработчикоповещения = Новый ОписаниеОповещения("СцТ_ОповещениеОбОтметкеВСпискеЗначений", ЭтотОбъект, ДопПапарметры);
	
	СписокДобавления.ПоказатьОтметкуЭлементов(Обработчикоповещения, "Отметка добавляемых элементов");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Применить(Команда)
	
	АдресДерева = СцТ_ПолучитьАдресИзмененногоДереваНачальныхУстановок();
	Оповестить("ИзменениеДереваНачальныхУстановокШагов", АдресДерева);
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	АдресДерева = СцТ_ПолучитьАдресИзмененногоДереваНачальныхУстановок();
	
	Оповестить("ИзменениеДереваНачальныхУстановокШагов", АдресДерева);
	
	Модифицированность = Ложь;
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ПреобразованиеДереваДанныхВДеревоОтображения

// Заполнение ветки дерева начальных установок шагов
//
// параметры
// ВеткаПриемник - ветка приемник
// ВеткаИсточник - ветка источник
&НаСервере
Процедура СцТ_ЗаполнитьВеткуДереваНачальныхУстановокШаговФормы(
	ВеткаПриемник,
	ВеткаИсточник)
	
	Для каждого УзелИсточник Из ВеткаИсточник.ПолучитьЭлементы() Цикл
		
		УзелПриемник = ВеткаПриемник.ПолучитьЭлементы().Добавить();
		
		// Заполнение общих для всех узлов реквизитов
		УзелПриемник.Имя                      = УзелИсточник.Имя;
		УзелПриемник.Синоним                  = УзелИсточник.Синоним;
		УзелПриемник.НеВыводитьАвтоописание   = УзелИсточник.НеВыводитьАвтоописание;
		УзелПриемник.Активность               = УзелИсточник.Активность;
		УзелПриемник.ТипУзла                  = УзелИсточник.ТипУзла;
		УзелПриемник.ПользовательскоеОписание = УзелИсточник.ПользовательскоеОписание;
		УзелПриемник.Комментарии              = УзелИсточник.Комментарии;
		
		// Заполнение реквизитов, зависящих от типа узла
		// Эти реквизиты получаются на основании разбора дерева Значение
		ДеревоДанныхНаСервере = ДанныеФормыВЗначение(УзелИсточник.Значение, Тип("ДеревоЗначений"));
		
		Если УзелИсточник.ТипУзла = "ТипМетаданных" Тогда
			// ОсновнойВариант
			УзелОсновногоВарианта = ДеревоДанныхНаСервере.Строки.Найти("ОсновнойВариант", "Имя", Истина);
			Если УзелОсновногоВарианта <> Неопределено Тогда
				УзелПриемник.ОсновнойВариант = 1;
			КонецЕсли;
			
			// ДеревоСпискаШагов
			УзелСпискаШагов = ДеревоДанныхНаСервере.Строки.Найти("СписокШагов", "Имя", Истина);
			Если УзелСпискаШагов <> Неопределено Тогда
				СцТ_ЗаполнитьУзелФормыПоДаннымУзлаДерева(УзелПриемник.ДеревоСпискаШагов, УзелСпискаШагов);
			КонецЕсли;
			
		ИначеЕсли УзелИсточник.Имя = "СравнитьСЭталоном" Тогда
			
			// Дерево исключений
			УзелИсключений = ДеревоДанныхНаСервере.Строки.Найти("Исключения", "Имя", Истина);
			Если УзелИсключений <> Неопределено Тогда
				СцТ_ЗаполнитьУзелФормыПоДаннымУзлаДерева(УзелПриемник.ДеревоИсключений, УзелИсключений);
			КонецЕсли;
			
		ИначеЕсли УзелИсточник.Имя = "Воспроизвести" Тогда
			
			// Дерево исключений
			УзелИсключений = ДеревоДанныхНаСервере.Строки.Найти("Исключения", "Имя");
			Если УзелИсключений <> Неопределено Тогда
				СцТ_ЗаполнитьУзелФормыПоДаннымУзлаДерева(УзелПриемник.ДеревоИсключений, УзелИсключений);
			КонецЕсли;
			
			// Вариант записи
			УзелВариантаЗаписи = ДеревоДанныхНаСервере.Строки.Найти("ВариантЗаписи", "Имя");
			Если УзелВариантаЗаписи <> Неопределено Тогда
				УзелПриемник.ВариантЗаписи = УзелВариантаЗаписи.Значение;
			КонецЕсли;
			
		ИначеЕсли УзелИсточник.Имя = "СравнитьДвижения" Тогда
			
			// Дерево исключений
			УзелИсключений = ДеревоДанныхНаСервере.Строки.Найти("Исключения", "Имя", Истина);
			Если УзелИсключений <> Неопределено Тогда
				СцТ_ЗаполнитьУзелФормыПоДаннымУзлаДерева(УзелПриемник.ДеревоИсключений, УзелИсключений);
			КонецЕсли;
			
			// Другие типы шагов не обрабатываются
			
		КонецЕсли;
		
		СцТ_ЗаполнитьВеткуДереваНачальныхУстановокШаговФормы(УзелПриемник, УзелИсточник);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение дерва Значения в дереве данных
// на основании данных, представленных деревом значений.
// Структура деревьев фиксированная
&НаСервере
Процедура СцТ_ЗаполнитьУзелФормыПоДаннымУзлаДерева(ВеткаДанныхПриемник, ВеткаДереваИсточник)
	
	Для каждого УзелИсточника Из ВеткаДереваИсточник.Строки Цикл
		
		УзелДанныхПриемник = ВеткаДанныхПриемник.ПолучитьЭлементы().Добавить();
		
		УзелДанныхПриемник.Имя      = УзелИсточника.Имя;
		УзелДанныхПриемник.Синоним  = УзелИсточника.Синоним;
		УзелДанныхПриемник.ТипУзла  = УзелИсточника.ТипУзла;
		УзелДанныхПриемник.Значение = УзелИсточника.Значение;
		
		СцТ_ЗаполнитьУзелФормыПоДаннымУзлаДерева(УзелДанныхПриемник, УзелИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

// Подготовка ветки дерева начальных установок к сохранению
//
&НаСервере
Процедура СцТ_ПодготовитьВеткуДереваНачальныхУстановокКСохранению(ВеткаПриемник, ВеткаИсточник)
	
	// Замечание. Приемник сначала был очищен, а сейчас просто перезаполняется
	
	Для каждого УзелИсточник Из ВеткаИсточник.ПолучитьЭлементы() Цикл
		
		УзелПриемник = ВеткаПриемник.ПолучитьЭлементы().Добавить();
		
		// Заполнение общих для всех узлов реквизитов
		УзелПриемник.Имя                      = УзелИсточник.Имя;
		УзелПриемник.Синоним                  = УзелИсточник.Синоним;
		УзелПриемник.НеВыводитьАвтоописание   = УзелИсточник.НеВыводитьАвтоописание;
		УзелПриемник.Активность               = УзелИсточник.Активность;
		УзелПриемник.ТипУзла                  = УзелИсточник.ТипУзла;
		УзелПриемник.ПользовательскоеОписание = УзелИсточник.ПользовательскоеОписание;
		УзелПриемник.Комментарии              = УзелИсточник.Комментарии;
		
		// Заполнение реквизитов, зависящих от типа узла
		
		ДанныеДерева = УзелПриемник.Значение;
		
		Если УзелИсточник.ТипУзла = "ТипМетаданных" Тогда
			
			Если УзелИсточник.ОсновнойВариант = 1 Тогда
				ЗначениеВарианта = "БезФормы";
			ИначеЕсли УзелИсточник.ОсновнойВариант = 0 Тогда
				ЗначениеВарианта = "ОсновнаяФорма";
			КонецЕсли;
			
			УзелОсновногоВарианта = ДанныеДерева.ПолучитьЭлементы().Добавить();
			УзелОсновногоВарианта.Имя      = "ОсновнойВариант";
			УзелОсновногоВарианта.Синоним  = "Основной вариант";
			УзелОсновногоВарианта.ТипУзла  = "УзелОсновногоВарианта";
			УзелОсновногоВарианта.Значение = ЗначениеВарианта;
			
			// ДеревоСпискаШагов
			УзелСпискаШагов = ДанныеДерева.ПолучитьЭлементы().Добавить();
			УзелСпискаШагов.Имя      = "СписокШагов";
			УзелСпискаШагов.Синоним  = "Список шагов";
			УзелСпискаШагов.ТипУзла  = "СписокШагов";
			УзелСпискаШагов.Значение = УзелИсточник.ОсновнойВариант;
			
			СцТ_ЗаполнитьУзелДаннымиИзДругогоУзла(УзелСпискаШагов, УзелИсточник.ДеревоСпискаШагов);
			
			
		ИначеЕсли УзелИсточник.Имя = "СравнитьСЭталоном" Тогда
			
			УзелИсключений = ДанныеДерева.ПолучитьЭлементы().Добавить();
			
			УзелИсключений.Имя     = "Исключения";
			УзелИсключений.Синоним = "Исключения";
			УзелИсключений.ТипУзла = "УзелИсключений";
			
			СцТ_ЗаполнитьУзелДаннымиИзДругогоУзла(УзелИсключений, УзелИсточник.ДеревоИсключений);
			
		ИначеЕсли УзелИсточник.Имя = "Воспроизвести" Тогда
			
			// Дерево исключений
			УзелИсключений = ДанныеДерева.ПолучитьЭлементы().Добавить();
			
			УзелИсключений.Имя     = "Исключения";
			УзелИсключений.Синоним = "Исключения";
			УзелИсключений.ТипУзла = "УзелИсключений";
			
			СцТ_ЗаполнитьУзелДаннымиИзДругогоУзла(УзелИсключений, УзелИсточник.ДеревоИсключений);
			
			// Вариант записи
			УзелВариантаЗаписи = ДанныеДерева.ПолучитьЭлементы().Добавить();
			
			УзелВариантаЗаписи.Имя     = "ВариантЗаписи";
			УзелВариантаЗаписи.Синоним = "Вариант записи";
			УзелВариантаЗаписи.ТипУзла = "ВариантЗаписи";
			УзелВариантаЗаписи.Значение = УзелИсточник.ВариантЗаписи;
			
		ИначеЕсли УзелИсточник.Имя = "СравнитьДвижения" Тогда
			
			// Дерево исключений
			УзелИсключений = ДанныеДерева.ПолучитьЭлементы().Добавить();
			
			УзелИсключений.Имя     = "Исключения";
			УзелИсключений.Синоним = "Исключения";
			УзелИсключений.ТипУзла = "УзелИсключений";
			
			СцТ_ЗаполнитьУзелДаннымиИзДругогоУзла(УзелИсключений, УзелИсточник.ДеревоИсключений);
			
			// Другие типы шагов не обрабатываются
			
		КонецЕсли;
		
		СцТ_ПодготовитьВеткуДереваНачальныхУстановокКСохранению(УзелПриемник, УзелИсточник);
	КонецЦикла;
	
КонецПроцедуры

// Перенос данных из одной ветки дерева в другую
//
// Параметры
// ВеткаДанныхПриемник - куда копируется
// ВеткаДанныхИсточник - откуда копируется
&НаСервере
Процедура СцТ_ЗаполнитьУзелДаннымиИзДругогоУзла(ВеткаДанныхПриемник, ВеткаДанныхИсточник)
	
	
	Для каждого УзелИсточник Из ВеткаДанныхИсточник.ПолучитьЭлементы() Цикл
		
		УзелПриемник = ВеткаДанныхПриемник.ПолучитьЭлементы().Добавить();
		
		УзелПриемник.Имя      = УзелИсточник.Имя;
		УзелПриемник.Синоним  = УзелИсточник.Синоним;
		УзелПриемник.ТипУзла  = УзелИсточник.ТипУзла;
		УзелПриемник.Значение = УзелИсточник.Значение;
		
		СцТ_ЗаполнитьУзелДаннымиИзДругогоУзла(УзелПриемник, УзелИсточник);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает адрес сохраненного дерева начальных установок
//
&НаСервере
Функция СцТ_ПолучитьАдресИзмененногоДереваНачальныхУстановок()
	
	ДеревоНачальныхУстановокШагов.ПолучитьЭлементы().Очистить();
	
	СцТ_ПодготовитьВеткуДереваНачальныхУстановокКСохранению(
		ДеревоНачальныхУстановокШагов,
		ДеревоНачальныхУстановокШаговОтображения);
	
	ВозвращаемоеДеревоНаСервере = РеквизитФормыВЗначение("ДеревоНачальныхУстановокШагов");
	
	Возврат ПоместитьВоВременноеХранилище(ВозвращаемоеДеревоНаСервере, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Установка флагов в подчиненных узлах дерева
//
// параметры
// ТекущиеДанные - начало отсчета
// ИмяПоля - имя поля в котором ставятся флаги
&НаКлиенте
Процедура СцТ_УстановитьФлагиПодчиненныхУзлов(ТекущиеДанные, ИмяПоля)
	
	Для каждого ПодчиненныеДанные Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		ПодчиненныеДанные[ИмяПоля] = ТекущиеДанные[ИмяПоля];
		
		СцТ_УстановитьФлагиПодчиненныхУзлов(ПодчиненныеДанные, ИмяПоля);
		
	КонецЦикла;
	
КонецПроцедуры

// Установка флагов во всех родительских окнах
//
// Параметры
// ТекущиеДанные - начало отсчета
// ИмяПоля - Имя поля в котором ставятся флаги
&НаКлиенте
Процедура СцТ_УстановитьФлагиРодительскихУзлов(ТекущиеДанные, ИмяПоля)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Родитель <> Неопределено Тогда
		Родитель[ИмяПоля] =  ТекущиеДанные[ИмяПоля];
		Если ТекущиеДанные[ИмяПоля] <> 2 Тогда
			Для каждого ПодчиненныеДанные Из Родитель.ПолучитьЭлементы() Цикл
				Если ПодчиненныеДанные[ИмяПоля] <> Родитель[ИмяПоля] Тогда
					Родитель[ИмяПоля] = 2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СцТ_УстановитьФлагиРодительскихУзлов(Родитель, ИмяПоля);
		
	КонецЕсли;
	
КонецПроцедуры

// Управление видимостью настроек
//
&НаКлиенте
Процедура СцТ_УстановитьВидимостьНастроек()
	
	ТекущиеДанные = Элементы.ДеревоНачальныхУстановокШаговОтображения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипУзла = "ТипМетаданных" Тогда
		Элементы.СтраницаИсключения.Видимость               = Ложь;
		Элементы.СтраницаКомментарий.Видимость              = Ложь;
		Элементы.СтраницаОсновное.Видимость                 = Истина;
		Элементы.СтраницаПользовательскоеОписание.Видимость = Ложь;
		Элементы.СтраницаСоставШагов.Видимость              = Ложь;
		Элементы.СтраницаСоставШагов.Видимость              = Истина;
		
		Элементы.ВариантЗаписи.Видимость                    = Ложь;
		
	Иначе
		// Это настройки
		
		Элементы.СтраницаКомментарий.Видимость              = Истина;
		Элементы.СтраницаОсновное.Видимость                 = Истина;
		Элементы.СтраницаСоставШагов.Видимость              = Ложь;
		
		Если ТекущиеДанные.Имя = "ВыполнитьВручную" Тогда
			Элементы.СтраницаПользовательскоеОписание.Видимость = Истина;
			Элементы.СтраницаИсключения.Видимость               = Ложь;
			Элементы.ВариантЗаписи.Видимость                    = Ложь;
			
		ИначеЕсли ТекущиеДанные.Имя = "Воспроизвести" Тогда
			Элементы.СтраницаПользовательскоеОписание.Видимость = Истина;
			Элементы.СтраницаИсключения.Видимость               = Истина;
			Элементы.ВариантЗаписи.Видимость                    = Истина;
			
		ИначеЕсли ТекущиеДанные.Имя = "СравнитьСЭталоном" Тогда
			Элементы.СтраницаПользовательскоеОписание.Видимость = Истина;
			Элементы.СтраницаИсключения.Видимость               = Истина;
			Элементы.ВариантЗаписи.Видимость                    = Ложь;
			
		ИначеЕсли ТекущиеДанные.Имя = "СравнитьДвижения" Тогда
			Элементы.СтраницаПользовательскоеОписание.Видимость = Истина;
			Элементы.СтраницаИсключения.Видимость               = Истина;
			Элементы.ВариантЗаписи.Видимость                    = Ложь;
			
		ИначеЕсли ТекущиеДанные.Имя = "ВыполнитьЗапрос" Тогда
			Элементы.СтраницаПользовательскоеОписание.Видимость = Истина;
			Элементы.СтраницаИсключения.Видимость               = Ложь;
			Элементы.ВариантЗаписи.Видимость                    = Ложь;
			
		ИначеЕсли ТекущиеДанные.Имя = "ВыполнитьПроцедуру" Тогда
			Элементы.СтраницаПользовательскоеОписание.Видимость = Истина;
			Элементы.СтраницаИсключения.Видимость               = Ложь;
			Элементы.ВариантЗаписи.Видимость                    = Ложь;
			
		ИначеЕсли ТекущиеДанные.Имя = "Комментарий" Тогда
			Элементы.СтраницаОсновное.Видимость                 = Ложь;
			Элементы.СтраницаПользовательскоеОписание.Видимость = Ложь;
			Элементы.СтраницаИсключения.Видимость               = Ложь;
			Элементы.ВариантЗаписи.Видимость                    = Ложь;
			
		ИначеЕсли ТекущиеДанные.Имя = "ЗаменаСсылки" Тогда
			Элементы.СтраницаПользовательскоеОписание.Видимость = Истина;
			Элементы.СтраницаИсключения.Видимость               = Ложь;
			Элементы.ВариантЗаписи.Видимость                    = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Заполнение ветки данных на основании сиходной ветки
//
Процедура СцТ_ЗаполнитьВеткуДерева_НаСервере(ВеткаДанных, ИсходнаяВетка)
	
	Для каждого ИсходнаяСтрока Из ИсходнаяВетка.Строки Цикл
		СтрокаДанных = ВеткаДанных.ПолучитьЭлементы().Добавить();
		
		СтрокаДанных.Имя                      = ИсходнаяСтрока.Имя;
		СтрокаДанных.Синоним                  = ИсходнаяСтрока.Синоним;
		СтрокаДанных.НеВыводитьАвтоописание   = ИсходнаяСтрока.НеВыводитьАвтоописание;
		СтрокаДанных.Активность               = ИсходнаяСтрока.Активность;
		СтрокаДанных.ТипУзла                  = ИсходнаяСтрока.ТипУзла;
		СтрокаДанных.ПользовательскоеОписание = ИсходнаяСтрока.ПользовательскоеОписание;
		СтрокаДанных.Комментарии              = ИсходнаяСтрока.Комментарии;
		
		СцТ_ЗаполнитьВеткуЗначений(СтрокаДанных.Значение, ИсходнаяСтрока.Значение);
		
		СцТ_ЗаполнитьВеткуДерева_НаСервере(СтрокаДанных, ИсходнаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение ветки дерева значениями из исходной ветки
//
Процедура СцТ_ЗаполнитьВеткуЗначений(ВеткаДанных, ИсходнаяВетка)
	
	Для каждого ИсходнаяСтрока Из ИсходнаяВетка.Строки Цикл
		СтрокаДанных = ВеткаДанных.ПолучитьЭлементы().Добавить();
		
		СтрокаДанных.Имя      = ИсходнаяСтрока.Имя;
		СтрокаДанных.Синоним  = ИсходнаяСтрока.Синоним;
		СтрокаДанных.ТипУзла  = ИсходнаяСтрока.ТипУзла;
		СтрокаДанных.Значение = ИсходнаяСтрока.Значение;
		
		СцТ_ЗаполнитьВеткуЗначений(СтрокаДанных, ИсходнаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирование списка добавления
//
// Параметры
// ТипМетаданных - строка типа метаданных
// ТипУзла - строка типа узла
&НаСервере
Функция СцТ_СформироватьСписокДобавления(ТипМетаданных, ТипУзла)
	
	СписокДобавления = Новый СписокЗначений;
	
	Если ТипУзла = "УзелИсключенийРеквизиты" Тогда
		
		КоллекцияМетаданныхТипа = Метаданные[ТипМетаданных];
			Для каждого ОбъектМетаданных ИЗ КоллекцияМетаданныхТипа Цикл
				СписокРеквизитов = СцТ_ПолучитьСписокВсехРеквизитовИСвойствОбъектаМетаданных(
					ТипМетаданных,
					ОбъектМетаданных.Имя);
					
				Для каждого ЭлементСписка ИЗ СписокРеквизитов Цикл
					Если СписокДобавления.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
						СписокДобавления.Добавить(
							ЭлементСписка.Значение,
							ЭлементСписка.Представление);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		
	ИначеЕсли ТипУзла = "УзелИсключенийРеквизитыТЧ" Тогда
		
		Если ТипМетаданных <> "РегистрыСведений" Тогда
			КоллекцияМетаданныхТипа = Метаданные[ТипМетаданных];
			СписокДобавления.Добавить("НомерСтроки", "Номер строки");
			Для каждого ОбъектМетаданных ИЗ КоллекцияМетаданныхТипа Цикл
				Для каждого ТабличнаяЧасть ИЗ ОбъектМетаданных.ТабличныеЧасти Цикл
					Для каждого Реквизит ИЗ ТабличнаяЧасть.Реквизиты Цикл
						Если СписокДобавления.НайтиПоЗначению(Реквизит.Имя) = Неопределено Тогда
							СписокДобавления.Добавить(Реквизит.Имя, Реквизит.Синоним);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипУзла = "УзелИсключенийРеквизитыДвижений" Тогда
		
		Если ТипМетаданных = "Документы" Тогда
			КоллекцияМетаданныхТипа = Метаданные[ТипМетаданных];
			СписокДобавления.Добавить("НомерСтроки", "Номер строки");
			Для каждого ОбъектМетаданных ИЗ КоллекцияМетаданныхТипа Цикл
				Для каждого Движение ИЗ ОбъектМетаданных.Движения Цикл
					Для каждого Измерение ИЗ Движение.Измерения Цикл
						Если СписокДобавления.НайтиПоЗначению(Измерение.Имя) = Неопределено Тогда
							СписокДобавления.Добавить(Измерение.Имя, Измерение.Синоним);
						КонецЕсли;
					КонецЦикла;
					Для каждого Ресурс ИЗ Движение.Ресурсы Цикл
						Если СписокДобавления.НайтиПоЗначению(Ресурс.Имя) = Неопределено Тогда
							СписокДобавления.Добавить(Ресурс.Имя, Ресурс.Синоним);
						КонецЕсли;
					КонецЦикла;
					Для каждого Реквизит ИЗ Движение.Реквизиты Цикл
						Если СписокДобавления.НайтиПоЗначению(Реквизит.Имя) = Неопределено Тогда
							СписокДобавления.Добавить(Реквизит.Имя, Реквизит.Синоним);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	СписокДобавления.СортироватьПоПредставлению();
	
	Возврат СписокДобавления;
	
КонецФункции

// Получение списка всех используемых реквизитов
// (ресурсов и измерений) объекта метаданных
//
// Параметры
// ТипМетаданных - строка типа метаданных
// Имя метаданных - строка имени метаданных
&НаСервере
Функция СцТ_ПолучитьСписокВсехРеквизитовИСвойствОбъектаМетаданных(
	ТипМетаданных,
	ИмяМетаданных)
	
	СписокРеквизитов = Новый СписокЗначений;
	
	Если ПустаяСтрока(ТипМетаданных)
		ИЛИ ПустаяСтрока(ИмяМетаданных)
		ИЛИ ТипМетаданных = "ОбщаяФорма" Тогда
		Возврат СписокРеквизитов;
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные[ТипМетаданных][ИмяМетаданных];
	
	Если ТипМетаданных = "Справочники" Тогда
		
		// Свойства
		СписокРеквизитов.Добавить("ЭтоГруппа", НСтр("ru='Это группа'"));
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.Иерархический Тогда
			СписокРеквизитов.Добавить("Родитель", НСтр("ru='Родитель'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МетаданныеОбъекта.Владельцы) Тогда
			СписокРеквизитов.Добавить("Владелец", НСтр("ru='Владелец'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "Документы" Тогда
		
		// Свойства
		Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			СписокРеквизитов.Добавить("Номер", НСтр("ru='Номер'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		СписокРеквизитов.Добавить("Проведен"       , НСтр("ru='Проведен'"));
		СписокРеквизитов.Добавить("Дата"           , НСтр("ru='Дата'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "ПланыВидовХарактеристик" Тогда
		
		// Свойства
		СписокРеквизитов.Добавить("ЭтоГруппа", НСтр("ru='Это группа'"));
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.Иерархический Тогда
			СписокРеквизитов.Добавить("Родитель", НСтр("ru='Родитель'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "ПланыВидовРасчета" Тогда
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "ПланыСчетов" Тогда
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СписокРеквизитов.Добавить("Код", НСтр("ru='Код'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
		Для каждого ПризнакУчета Из МетаданныеОбъекта.ПризнакиУчета Цикл
			СписокРеквизитов.Добавить(ПризнакУчета.Имя, ПризнакУчета.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "РегистрыСведений" Тогда
		
		Если МетаданныеОбъекта.ПериодичностьРегистраСведений <>
				Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
			И МетаданныеОбъекта.ПериодичностьРегистраСведений <>
				Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
			СписокРеквизитов.Добавить("Период", НСтр("ru='Период'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.РежимЗаписи <>
				Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			СписокРеквизитов.Добавить("Регистратор", НСтр("ru='Регистратор'"));
			СписокРеквизитов.Добавить("Активность" , НСтр("ru='Активность'"));
			СписокРеквизитов.Добавить("НомерСтроки", НСтр("ru='НомерСтроки'"));
		КонецЕсли;
		
		Для каждого Ресурс Из МетаданныеОбъекта.Ресурсы Цикл
			СписокРеквизитов.Добавить(Ресурс.Имя, Ресурс.Синоним);
		КонецЦикла;
		
		Для каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
			СписокРеквизитов.Добавить(Измерение.Имя, Измерение.Синоним);
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "РегистрыНакопления"
		ИЛИ   ТипМетаданных = "РегистрыБухгалтерии"
		ИЛИ   ТипМетаданных = "РегистрыРасчета" Тогда
		
		СписокРеквизитов.Добавить("ВидДвижения", НСтр("ru='Вид движения'"));
		СписокРеквизитов.Добавить("Период"     , НСтр("ru='Период'"));
		СписокРеквизитов.Добавить("Регистратор", НСтр("ru='Регистратор'"));
		СписокРеквизитов.Добавить("Активность" , НСтр("ru='Активность'"));
		СписокРеквизитов.Добавить("НомерСтроки", НСтр("ru='Номер cтроки'"));
		
		Для каждого Ресурс Из МетаданныеОбъекта.Ресурсы Цикл
			СписокРеквизитов.Добавить(Ресурс.Имя, Ресурс.Синоним);
		КонецЦикла;
		
		Для каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
			СписокРеквизитов.Добавить(Измерение.Имя, Измерение.Синоним);
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "ЖурналыДокументов" Тогда
		
		Для каждого Графа Из МетаданныеОбъекта.Графы Цикл
			СписокРеквизитов.Добавить(Графа.Имя, Графа.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "Задачи" Тогда
		
		// Свойства
		Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			СписокРеквизитов.Добавить("Номер", НСтр("ru='Номер'"));
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СписокРеквизитов.Добавить("Наименование", НСтр("ru='Наименование'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("Дата"           , НСтр("ru='Дата'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		СписокРеквизитов.Добавить("БизнесПроцесс"  , НСтр("ru='Бизнес-процесс'"));
		СписокРеквизитов.Добавить("ТочкаМаршрута"  , НСтр("ru='Точка маршрута'"));
		СписокРеквизитов.Добавить("Выполнена"      , НСтр("ru='Выполнена'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеОбъекта.РеквизитыАдресации Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "БизнесПроцессы" Тогда
		
		// Свойства
		Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			СписокРеквизитов.Добавить("Номер", НСтр("ru='Номер'"));
		КонецЕсли;
		
		СписокРеквизитов.Добавить("Дата"           , НСтр("ru='Дата'"));
		СписокРеквизитов.Добавить("ПометкаУдаления", НСтр("ru='Пометка удаления'"));
		СписокРеквизитов.Добавить("Стартован"      , НСтр("ru='Стартован'"));
		СписокРеквизитов.Добавить("Завершен"       , НСтр("ru='Завершен'"));
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	ИначеЕсли ТипМетаданных = "Отчеты"
		ИЛИ ТипМетаданных = "Обработки" Тогда
		
		// Свойств нет
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокРеквизитов;
	
КонецФункции


#КонецОбласти
