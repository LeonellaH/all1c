

#Область Переменные

// Форма - владелец текущей формы (для краткости и наглядности вместо "ЭтаФорма.ВладелецФормы")
&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

// Указатель на форму (главная или макрошага), из которой была открыта эта форма
&НаКлиенте
Перем ВызвавшаяФорма Экспорт;

// Указатель на ветку в дереве. Заполненяется, если шаг не новый
&НаКлиенте
Перем ДанныеШага Экспорт;

// Идентификатор узла в дереве. Заполнено если шаг не новый
&НаКлиенте
Перем ИдентификаторУзла Экспорт;

// Содержит интерактивный контейнер, соответствующий интерактивному шагу:
//	форма или таблица формы
&НаКлиенте
Перем ИнтерактивныйКонтейнер Экспорт;

// Окно-объект, которому подчинена текущая форма
&НаКлиенте
Перем ОкноВыбраннойФормы Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимСовместимости838 Тогда
		УстановитьДействие("ПередЗакрытием", "ПередЗакрытиеБезРежимаСовместимости");
	КонецЕсли;
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ПутьКФормам  = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	// Управление доступностью
	ЭтотОбъект.ТолькоПросмотр = Параметры.ТолькоПросмотр;
	Элементы.ПрименитьИЗакрыть.Доступность  = НЕ Параметры.ТолькоПросмотр;
	Элементы.ПрименитьИзменения.Доступность = НЕ Параметры.ТолькоПросмотр;
	
	// основные атрибуты шага (ОА)
	// атрибуты, для редактирования, которых не требуется открытие формы настройки
	// или свернутые для хранения атрибуты
	ОА_ТипШага                          = Параметры.ТипШага;
	ОА_НомерШага                        = Параметры.НомерШага;
	ОА_Активность                       = Параметры.Активность;
	ОА_ОписательПоложенияШагаВДереве    = Параметры.ОписательПоложенияШагаВДереве;
	ОА_ЭтоНовый                         = Параметры.ЭтоНовый;
	ОА_СтруктураДанныхШага              = Параметры.СтруктураДанныхШага;
	
	// 1. Раскрытие структуры шага и определение типа шага
	Если ОА_СтруктураДанныхШага = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ДШ_Наименование                 = ОА_СтруктураДанныхШага.Наименование;
	ДШ_ТипМетаданных                = ОА_СтруктураДанныхШага.ТипМетаданных;
	ДШ_ИмяМетаданных                = ОА_СтруктураДанныхШага.ИмяМетаданных;
	ДШ_Автоописание                 = ОА_СтруктураДанныхШага.Автоописание;
	ДШ_Описание                     = ОА_СтруктураДанныхШага.Описание;
	ДШ_СкрытьАвтоописание           = ОА_СтруктураДанныхШага.СкрытьАвтоописание;
	ДШ_ОбСсылка                     = ОА_СтруктураДанныхШага.ОбСсылка;
	ДШ_ПредставлениеОбъекта         = ОА_СтруктураДанныхШага.ПредставлениеОбъекта;
	ДШ_ПредставлениеИмениМетаданных = ОА_СтруктураДанныхШага.ПредставлениеИмениМетаданных;
	ДШ_ИмяФормы                     = ОА_СтруктураДанныхШага.ИмяФормы;
	ДШ_ВыполнитьВручную             = ОА_СтруктураДанныхШага.ВыполнитьВручную;
	ДШ_Комментарий                  = ОА_СтруктураДанныхШага.Комментарий;
	ДШ_ЗаголовокФормы               = ОА_СтруктураДанныхШага.ЗаголовокФормы;
	ДШ_ДанныеКартинки               = ОА_СтруктураДанныхШага.ДанныеКартинки;
	
	Если ТипЗнч(ОА_СтруктураДанныхШага.ДеревоЗначения) = Тип("Структура") Тогда
		// Данные дерева переданы в виде структуры из главной формы обработки
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоЗначения,
			ОА_СтруктураДанныхШага.ДеревоЗначения);
	ИначеЕсли ТипЗнч(ОА_СтруктураДанныхШага.ДеревоЗначения) = Тип("ХранилищеЗначения") Тогда
		// Данные из конфигурации могут поступить в виде данных ХЗ
		Попытка
			ДЗ_НаСервере = ОА_СтруктураДанныхШага.ДеревоЗначения.Получить();
			ПреобразоватьЗначенияВДереве(ДЗ_НаСервере, Истина);
			ЗначениеВРеквизитФормы(ДЗ_НаСервере, "ДеревоЗначения");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	
	// Признак, что наименование установлено вручную
	НаименованиеШагаИзмененоВручную = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ИСТЗ_НаименованиеРучное",
		Ложь);
		
	// Картинки для закладок описания и комментария
	АдресКартинкиКомментария = ПоместитьВоВременноеХранилище(ЭтаОбработка.ПолучитьМакет("КартинкаКомментария"));
	КартинкаКомментария = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинкиКомментария));
	
	Элементы.Страница_РедактируемоеОписание.Картинка = ?(
		ПустаяСтрока(ДШ_Описание),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Элементы.Страница_Комментарий.Картинка = ?(
		ПустаяСтрока(ДШ_Комментарий),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	СцТ_НастроитьФормуДляШага();
	
	// Заполнение поведения при ошибке для группового шага
	СцТ_ЗаполнитьДействиеГрупповогоШагаПриОшибке(ЭтотОбъект);
	
	// Модифицированность
	Модифицированность = ОА_ЭтоНовый;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущийЭлемент = Элементы.ДействиеПриПроверкеОшибки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_УдалениеШаговСценария" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметр.НайтиПоЗначению(ДанныеШага.ПолучитьИдентификатор()) <> Неопределено Тогда
			Модифицированность = Ложь;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли  ИмяСобытия = "СцТ_ПеремещениеУзловСценария" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		НовыйУзел = Параметр[ДанныеШага];
		Если НовыйУзел <> Неопределено Тогда
			ДанныеШага = НовыйУзел;
			ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
			ДШ_НомерШага      = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ОбновленыДанныеГрупповогоШага" Тогда
		
		Если Параметр = ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя Тогда
			СцТ_СформироватьПредставлениеРодителя();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ИзмениласьНумерацияШагов" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ДанныеШага = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,ИдентификаторУзла);
			ОА_НомерШага = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		Исключение
		КонецПопытки;
		
	ИначеЕсли ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("СцТ_ОбработатьЗапросОСохраненииДанныхШага", ЭтотОбъект),
			НСтр("ru = 'Данные шага были изменены. Применить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиеБезРежимаСовместимости(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Если НЕ ЗавершениеРаботы Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СцТ_ОбработатьЗапросОСохраненииДанныхШага", ЭтотОбъект),
				НСтр("ru = 'Данные шага были изменены. Применить изменения?'"),
				РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Данные шага ""Проверить текст ошибки"" были изменены. При закрытии все изменения будут утеряны'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()
	
	Попытка
		СцТ_ГлавнаяФорма.СцТ_ОткрытыеФормыНастройкиШагов.Удалить(ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура СохранитьИЗакрытьФорму(Команда)
	
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Сохранение шага'"), , НСтр("ru = 'Данные шага сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтоназвание(Команда)
	
	СцТ_ОбновитьНаименование_НаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ХранимыеДанныеШага(Команда)
	
	// Всегда отображаются имеено хранимые данные, которые сохранены в дереве шагов
	Если ОА_ЭтоНовый Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага еще не записаны. Отобразить структуру хранения данных невозможно. Сохранить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеОтветаНаВопросОСохраненииНового", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
		Возврат;
	ИначеЕсли НЕ ОА_ЭтоНовый И Модифицированность Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага были изменены. Сохранить изменения перед отображением структуры?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеОтветаНаВопросОСохраненииСуществующего", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОбОшибке1(Команда)
	
	ОбновитьИнформациюОбОшибке();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АктивностьПриИзменении(Элемент)
	
	Если ОА_Активность = 2 Тогда
		ОА_Активность = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПроверочноеНаименование = СцТ_СформироватьОписаниеШага_НаКлиенте(Истина);
	
	НаименованиеШагаИзмененоВручную = (ДШ_Наименование <> ПроверочноеНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("СцТ_ОбновитьЗаголовкиЗакладок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("СцТ_ОбновитьЗаголовкиЗакладок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГруппыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ОА_ЭтоНовый Тогда
		РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Иначе
		РодительУзла = ДанныеШага.ПолучитьРодителя();
	КонецЕсли;
	
	Если РодительУзла <> Неопределено Тогда
		СцТ_ГлавнаяФорма.СцТ_ОткрытьФормуНастройкиШага(РодительУзла, ВызвавшаяФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриОшибкеВПодчиненныхШагахПриИзменении(Элемент)
	
	УправлениеДоступностьюПеременнойОшибкиГрупповогоШага(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиИмяМодуляАктивностьПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовСтраницыПроверкиОшибки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиНомерСтрокиАктивностьПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовСтраницыПроверкиОшибки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиИсходнаяСтрокаАктивностьПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовСтраницыПроверкиОшибки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиОписаниеАктивностьПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовСтраницыПроверкиОшибки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриПроверкеОшибкиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовСтраницыПроверкиОшибки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиОповещений

// Обрабатывает нажатие пользователем кнопки в диалоге вопроса о сохранении
// данных шага перед закрытием формы
// Параметры
//	КодВозврата - код нажатой кнопки (Да, Нет, Отмена);
//	ДопДанные - дополнительные данные;
//
&НаКлиенте
Процедура СцТ_ОбработатьЗапросОСохраненииДанныхШага(КодВозврата, ДопДанные) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли КодВозврата = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
		
		// При Отмене ничего не выполняется
		
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос диалога о Сохранении нового шага перед
// отображением хранимых данных
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииНового(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка нажатия "ДА"
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить шаг'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос диалога о Сохранении уже существующего модифицированного шага перед
// отображением хранимых данных
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииСуществующего(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		// Показываем, что хранится
		СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
		
	Иначе
		
		Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
			СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить изменения в шаге'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеПроцедурыИФункции

#Область НастрокаПриЗагрузкеДанныхШага

// Индивидуальная настройка формы для шага
//
&НаСервере
Процедура СцТ_НастроитьФормуДляШага()
	
		// УИОО - УзелИнформацииОбОшибке
	УИОО = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ИнформацияОбОшибке");
	Если УИОО = Неопределено Тогда
		// Заполнение по умолчанию
			ТекстОшибкиВариант                  = "ОшибкаПодробно";
			ТекстОшибкиИмяМодуля                = "";
			ТекстОшибкиИмяМодуляАктивность      = Ложь;
			ТекстОшибкиИсходнаяСтрока           = "";
			ТекстОшибкиИсходнаяСтрокаАктивность = Ложь;
			ТекстОшибкиНомерСтроки              = "";
			ТекстОшибкиНомерСтрокиАктивность    = Ложь;
			ТекстОшибкиОписание                 = "";
			ТекстОшибкиОписаниеАктивность       = Ложь;
		
	Иначе
		// Заполнение из ИБ
		УзелДанных = СцТ_НайтиУзелДереваФормы(УИОО, "Имя", "ВариантПроверки");
		Если УзелДанных = Неопределено Тогда
			ТекстОшибкиВариант = "ЕстьОшибка";
		Иначе
			ТекстОшибкиВариант = УзелДанных.Значение;
		КонецЕсли;
		
		УзелДанных = СцТ_НайтиУзелДереваФормы(УИОО, "Имя", "ИмяМодуля");
		Если УзелДанных = Неопределено Тогда
			ТекстОшибкиИмяМодуля           = "";
			ТекстОшибкиИмяМодуляАктивность = Ложь;
		Иначе
			ТекстОшибкиИмяМодуля           = УзелДанных.Значение;
			ТекстОшибкиИмяМодуляАктивность = УзелДанных.Активность;
		КонецЕсли;
		
		УзелДанных = СцТ_НайтиУзелДереваФормы(УИОО, "Имя", "ИсходнаяСтрока");
		Если УзелДанных = Неопределено Тогда
			ТекстОшибкиИсходнаяСтрока           = "";
			ТекстОшибкиИсходнаяСтрокаАктивность = Ложь;
		Иначе
			ТекстОшибкиИсходнаяСтрока           = УзелДанных.Значение;
			ТекстОшибкиИсходнаяСтрокаАктивность = УзелДанных.Активность;
		КонецЕсли;
		
		УзелДанных = СцТ_НайтиУзелДереваФормы(УИОО, "Имя", "НомерСтроки");
		Если УзелДанных = Неопределено Тогда
			ТекстОшибкиНомерСтроки           = "";
			ТекстОшибкиНомерСтрокиАктивность = Ложь;
		Иначе
			ТекстОшибкиНомерСтроки           = УзелДанных.Значение;
			ТекстОшибкиНомерСтрокиАктивность = УзелДанных.Активность;
		КонецЕсли;
		
		УзелДанных = СцТ_НайтиУзелДереваФормы(УИОО, "Имя", "Описание");
		Если УзелДанных = Неопределено Тогда
			ТекстОшибкиОписание           = "";
			ТекстОшибкиОписаниеАктивность = Ложь;
		Иначе
			ТекстОшибкиОписание           = УзелДанных.Значение;
			ТекстОшибкиОписаниеАктивность = УзелДанных.Активность;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение списка действий
	Элементы.ДействиеПриПроверкеОшибки.СписокВыбора.Очистить();
	Элементы.ДействиеПриПроверкеОшибки.СписокВыбора.Добавить("Сведения" , НСтр("ru = 'Получить сведения'"));
	Элементы.ДействиеПриПроверкеОшибки.СписокВыбора.Добавить("Проверить", НСтр("ru = 'Проверить'"));
	
	УзелДействия = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "Действие");
	Если УзелДействия <> Неопределено Тогда
		ДействиеПриПроверкеОшибки = УзелДействия.Значение;
	Иначе
		ДействиеПриПроверкеОшибки = "Сведения";
	КонецЕсли;
	
	УзелЗакрытия = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ЗакрытьОкно");
	Если УзелЗакрытия <> Неопределено Тогда
		ТекстОшибкиЗакрыватьФорму = УзелЗакрытия.Значение;
	Иначе
		ТекстОшибкиЗакрыватьФорму = Истина;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовСтраницыПроверкиОшибки(ЭтаФорма);

	
КонецПроцедуры


&НаСервере
Процедура СцТ_ЗаполнитьДействиеГрупповогоШагаПриОшибке(ЭтотОбъект)
	
	СписокВыбора = Элементы.ДействиеПриОшибке.СписокВыбора;
	СписокВыбора.Добавить("Остановить", НСтр("ru = 'Остановить выполнение'"));
	СписокВыбора.Добавить("Продолжить", НСтр("ru = 'Продолжить выполнение'"));
	
	// Параметры действий при ошибке находятся в корне
	ДействиеПриОшибке = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ДействиеПриОшибке",
		"Остановить");
		
	ПеременнаяПриОшибке = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ПеременнаяПриОшибке",
		"");
	
	УправлениеДоступностьюПеременнойОшибкиГрупповогоШага(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область СохранениеШагаВСценарии

// Сохранение реализовано в виде функции, т.к. потребуется
// ее выполнение в обработчике ПередЗакрытием
//
&НаКлиенте
Функция СцТ_ПрименитьИзменения_НаКлиенте() Экспорт
	
	// Проверка, что владелец формы еще не закрыт
	Если НЕ ВладелецФормы.Открыта() Тогда
		ТекстСообщения = НСтр("ru = 'Форма с деревом шагов уже закрыта. Применить изменения невозможно'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка правильности данных
	Отказ = Ложь;
	
	Если ПустаяСтрока(ДШ_Наименование) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнено наименование.'");
		
		СП = Новый СообщениеПользователю;
		СП.Текст = ТекстСообщения;
		СП.ПутьКДанным = "ДШ_Наименование";
		СП.Сообщить();
		
		Отказ = Истина;
			
	КонецЕсли;
	
	
	// Проверка индивидуальных настроек шага и заполнение ДереваЗначения
	СцТ_ПодготовитьДанныеШагаДляСохранения_НаКлиенте(Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	ОбновитьПользовательскоеОписание();
	
	ВозвращаемаяСтруктура = СцТ_СформироватьСтруктуруданныхШага_НаКлиенте();
	
	Если ОА_ЭтоНовый Тогда
		
		ДанныеШага = СцТ_ГлавнаяФорма.СцТ_СохранитьНовыйШаг(ВызвавшаяФорма, ВозвращаемаяСтруктура);
		
		ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
		ОА_НомерШага      = ДанныеШага.НомерШага;
		ОА_ЭтоНовый       = Ложь;
		
	Иначе
		СцТ_ГлавнаяФорма.СцТ_ПрименитьИзмененияВШаге(ВызвавшаяФорма, ДанныеШага, ВозвращаемаяСтруктура);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Заполнение дерева значения данными формы.
// Проверка корректности специфических для этого шага данных
&НаКлиенте
Процедура СцТ_ПодготовитьДанныеШагаДляСохранения_НаКлиенте(Отказ)
	
	// Проверки
	
	// формирование дерева
	
	Если НаименованиеШагаИзмененоВручную Тогда
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ИСТЗ_НаименованиеРучное",
			Истина);
	Иначе
		НайденныйУзел = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(
			ДеревоЗначения,
			"Имя",
			"ИСТЗ_НаименованиеРучное");
			
		Если НайденныйУзел <> Неопределено Тогда
			ДеревоЗначения.ПолучитьЭлементы().Удалить(НайденныйУзел);
		КонецЕсли;
	КонецЕсли;
	
	///////////////////////////////////
	
	
Если ПустаяСтрока(ТекстОшибкиВариант) Тогда
		СцТ_СообщитьПользователю(
			НСтр("ru = 'Не выбран вариант проверки. Сохранение невозможно'"),
			Отказ,
			"ТекстОшибкиВариант");
		Возврат;
	КонецЕсли;
	
	Если ТекстОшибкиВариант = "ОшибкаПодробно"
		И (ПустаяСтрока(ТекстОшибкиИмяМодуля) ИЛИ НЕ ТекстОшибкиИмяМодуляАктивность)
		И (ПустаяСтрока(ТекстОшибкиИсходнаяСтрока) ИЛИ НЕ ТекстОшибкиИсходнаяСтрокаАктивность)
		И (ПустаяСтрока(ТекстОшибкиНомерСтроки) ИЛИ НЕ ТекстОшибкиНомерСтрокиАктивность)
		И (ПустаяСтрока(ТекстОшибкиОписание) ИЛИ НЕ ТекстОшибкиОписаниеАктивность) Тогда
		СцТ_СообщитьПользователю(
			НСтр("ru = 'Для подробной проверке информации об ошибках должен быть выбран хотя бы один пункт детализации информации'"),
			Отказ,
			"ТекстОшибкиВариант");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ДействиеПриПроверкеОшибки) Тогда
		ДействиеПриПроверкеОшибки = "Сведения";
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"Действие",
		ДействиеПриПроверкеОшибки,
		НСтр("ru = 'Действие'"));
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ЗакрытьОкно",
		ТекстОшибкиЗакрыватьФорму,
		НСтр("ru = 'Закрыть окно'"));
		
	УзелИнформацииОбОшибке = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ИнформацияОбОшибке",,
		НСтр("ru = 'Информация об ошибке'"),
		Истина);
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелИнформацииОбОшибке,
		"ВариантПроверки",
		ТекстОшибкиВариант,
		НСтр("ru = 'Вариант проверки'"));
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелИнформацииОбОшибке,
		"ИмяМодуля",
		ТекстОшибкиИмяМодуля,
		НСтр("ru = 'Имя модуля'"),
		ТекстОшибкиИмяМодуляАктивность);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелИнформацииОбОшибке,
		"ИсходнаяСтрока",
		ТекстОшибкиИсходнаяСтрока,
		НСтр("ru = 'Исходная строка'"),
		ТекстОшибкиИсходнаяСтрокаАктивность);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелИнформацииОбОшибке,
		"НомерСтроки",
		ТекстОшибкиНомерСтроки,
		НСтр("ru = 'Номер строки'"),
		ТекстОшибкиНомерСтрокиАктивность);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		УзелИнформацииОбОшибке,
		"Описание",
		ТекстОшибкиОписание,
		НСтр("ru = 'Описание'"),
		ТекстОшибкиОписаниеАктивность);
		
	// Леонэлла	
	//////////////////////////////////
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДействиеПриОшибке",
		ДействиеПриОшибке);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ПеременнаяПриОшибке",
		ПеременнаяПриОшибке);
	// Леонэлла \\
КонецПроцедуры

// Свертка данных шага в структуру
// и подготовка возвращаемой структуры отредактированного шага
&НаКлиенте
Функция СцТ_СформироватьСтруктуруданныхШага_НаКлиенте()
	
	// СДШ - структура данных шага
	СДШ = Новый Структура;
	
	СДШ.Вставить("ИдентификаторШага"           , ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
	СДШ.Вставить("НаименованиеШага"            , ДШ_Наименование);
	СДШ.Вставить("ТипМетаданных"               , ДШ_ТипМетаданных);
	СДШ.Вставить("ИмяМетаданных"               , ДШ_ИмяМетаданных);
	СДШ.Вставить("Автоописание"                , ДШ_Автоописание);
	СДШ.Вставить("Описание"                    , ДШ_Описание);
	СДШ.Вставить("СкрытьАвтоописание"          , ДШ_СкрытьАвтоописание);
	СДШ.Вставить("ОбСсылка"                    , ДШ_ОбСсылка);
	СДШ.Вставить("ПредставлениеОбъекта"        , ДШ_ПредставлениеОбъекта);
	СДШ.Вставить("ВыполнитьВручную"            , ДШ_ВыполнитьВручную);
	СДШ.Вставить("Комментарий"                 , ДШ_Комментарий);
	СДШ.Вставить("ИмяФормы"                    , ДШ_ИмяФормы);
	СДШ.Вставить("ПредставлениеИмениМетаданных", ДШ_ПредставлениеИмениМетаданных);
	СДШ.Вставить("ЗаголовокФормы"              , ДШ_ЗаголовокФормы);
	СДШ.Вставить("ДанныеКартинки"              , ДШ_ДанныеКартинки);
	СДШ.Вставить("ДеревоЗначения"              , СцТ_ГлавнаяФорма.СцТ_ДеревоформыВДеревоСтруктур(ДеревоЗначения));
	
	
	// ВСД - возвращаемая структура данных
	ВСД = Новый Структура;
	ВСД.Вставить("ОписательПоложенияШагаВДереве", ОА_ОписательПоложенияШагаВДереве);
	ВСД.Вставить("Наименование"                 , ДШ_Наименование);
	ВСД.Вставить("Активность"                   , ОА_Активность);
	ВСД.Вставить("СтруктураДанныхШага"          , СДШ);
	ВСД.Вставить("ЭтоНовый"                     , ОА_ЭтоНовый);
	ВСД.Вставить("ТипШага"                      , ОА_ТипШага);
	
	Возврат ВСД;
	
КонецФункции

#КонецОбласти

#Область ФормированеОписанийИНаименований

// Формирование описания шага на клиенте
&НаКлиенте
Функция СцТ_СформироватьОписаниеШага_НаКлиенте(Краткое = Ложь)
	
	Если ДействиеПриПроверкеОшибки = "Сведения" Тогда
		Если ТекстОшибкиВариант  = "ОшибкаПодробно" Тогда
			ВозвращаемоеОписание = НСтр("ru = 'Получить подробные сведения об ошибке'");
			
		ИначеЕсли ТекстОшибкиВариант  = "ОшибокНет" Тогда
			ВозвращаемоеОписание = НСтр("ru = 'Получить сведения об отсутствии ошибки'");
			
		Иначе // Т.е. ЕстьОшибка
			ВозвращаемоеОписание = НСтр("ru = 'Получить сведения о наличии ошибки'");
			
		КонецЕсли;
		
	Иначе
		// Проверка
		Если ТекстОшибкиВариант  = "ОшибкаПодробно" Тогда
			ВозвращаемоеОписание = НСтр("ru = 'Проверить подробную информацию об ошибке'");
			
		ИначеЕсли ТекстОшибкиВариант  = "ОшибокНет" Тогда
			ВозвращаемоеОписание = НСтр("ru = 'Проверить отсутствие ошибки'");
			
		Иначе // Т.е. ЕстьОшибка
			ВозвращаемоеОписание = НСтр("ru = 'Проверить наличие ошибки'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Краткое ИЛИ ТекстОшибкиВариант  <> "ОшибкаПодробно" Тогда
		Возврат ВозвращаемоеОписание;
	КонецЕсли;
	
	Если ТекстОшибкиЗакрыватьФорму И ТекстОшибкиВариант = "ОшибокНет" Тогда
		ВозвращаемоеОписание = ВозвращаемоеОписание + " " + НСтр("ru = 'и при необходимости закрыть окно ошибки.'");
	ИначеЕсли ТекстОшибкиЗакрыватьФорму И ТекстОшибкиВариант <> "ОшибокНет" Тогда
		ВозвращаемоеОписание = ВозвращаемоеОписание + " " + НСтр("ru = 'и закрыть окно ошибки.'");
	Иначе
		ВозвращаемоеОписание = ВозвращаемоеОписание + ".";
	КонецЕсли;
	
	// Формируем полное наименование
	Если ТекстОшибкиОписаниеАктивность Тогда
		ВозвращаемоеОписание = ВозвращаемоеОписание + Символы.ПС;
		ВозвращаемоеОписание = ВозвращаемоеОписание + ТекстОшибкиОписание;
	КонецЕсли;
	
	Если ТекстОшибкиИмяМодуляАктивность Тогда
		ВозвращаемоеОписание = ВозвращаемоеОписание + Символы.ПС;
		ВозвращаемоеОписание = ВозвращаемоеОписание + НСтр("ru = 'Модуль:'") + " " + ТекстОшибкиИмяМодуля;
	КонецЕсли;
	
	Если ТекстОшибкиНомерСтрокиАктивность Тогда
		ВозвращаемоеОписание = ВозвращаемоеОписание + Символы.ПС;
		ВозвращаемоеОписание = ВозвращаемоеОписание + НСтр("ru = 'Строка:'") + " " + Строка(ТекстОшибкиНомерСтроки);
	КонецЕсли;
	
	Если ТекстОшибкиИсходнаяСтрокаАктивность Тогда
		ВозвращаемоеОписание = ВозвращаемоеОписание + Символы.ПС;
		ВозвращаемоеОписание = ВозвращаемоеОписание + "(" + ТекстОшибкиИсходнаяСтрока + ")";
	КонецЕсли;
	
	Возврат ВозвращаемоеОписание;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ОбновитьНаименование_НаКлиенте(Принудительно = Ложь)
	
	Если НЕ НаименованиеШагаИзмененоВручную ИЛИ Принудительно Тогда
		//ДШ_Наименование = СцТ_ГлавнаяФорма.СцТ_ПолучитьОписаниеШага_НайтиФорму("", Истина);
	КонецЕсли;
	
	Если Принудительно Тогда
		НаименованиеШагаИзмененоВручную = Ложь;
		Модифицированность = Истина;
		// В остальных случаях менять модифицированность не нужно,
		// так как ее должно изменить изменение другого элемента формы
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСДеревомЗначения

// Возвращает значение заданного поля в дереве данных
//
// Параметры
//	ДерЗнач              - дерево с данными в котором ведется поиск
//	ИмяПараметра         - имя искомого параметра
//	ЕслиНеНайдено        - что вернуть, если значение не найдено
//	ВозвращаемыйРеквизит - имя колонки, которую нужно вернуть
//	Рекурсивно           - признак рекурсии
// Возвращаемое значение - значение нужного поля найденного узла
&НаСервереБезКонтекста
Функция СцТ_ЗначениеВДереве(
	ДерЗнач,
	ИмяПараметра,
	ЕслиНеНайдено = Неопределено,
	ВозвращаемыйРеквизит = "Значение",
	Рекурсивно = Истина)
	
	УзелЗначения = СцТ_НайтиУзелДереваФормы(ДерЗнач, "Имя", ИмяПараметра, Рекурсивно);
	Если УзелЗначения = Неопределено Тогда
		Возврат ЕслиНеНайдено;
	Иначе
		Возврат УзелЗначения[ВозвращаемыйРеквизит];
	КонецЕсли;
	
КонецФункции

// Поиск нужного узла в дереве данных
//
// Параметры
//	ДеревоФормы       - дерево, в котором ведется поиск
//	Реквизит          - имя поля в котором ведется поиск
//	ЗначениеРеквизита - значение в поле
//	Рекурсивно        - признак рекурсивного поиска
// Возвращаемое значение - найденный узел
&НаСервереБезКонтекста
Функция СцТ_НайтиУзелДереваФормы(
	ДеревоФормы,
	Реквизит,
	ЗначениеРеквизита,
	Рекурсивно = Ложь)
	
	Если ДеревоФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Узел Из ДеревоФормы.ПолучитьЭлементы() Цикл
		Если Узел[Реквизит] = ЗначениеРеквизита Тогда
			Возврат Узел;
		КонецЕсли;
		Если Рекурсивно Тогда
			НайденыйУзел = СцТ_НайтиУзелДереваФормы(Узел, Реквизит, ЗначениеРеквизита, Истина);
			Если НайденыйУзел <> Неопределено Тогда
				Возврат НайденыйУзел;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Заполнение дерева значения данными из структуры
//
// параметры
//	ДеревоФормы - заполняемое дерево
//	ДеревоСтруктур - структура с данными
&НаСервереБезКонтекста
Процедура СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоФормы, ДеревоСтруктур)
	
	СтрокиДереваФормы = ДеревоФормы.ПолучитьЭлементы();
	Для каждого СтрокаДереваСтруктур Из ДеревоСтруктур.ИСТЗ_Строки Цикл
		СтрокаДереваФормы = СтрокиДереваФормы.Добавить();
		Для каждого КлючЗначение Из СтрокаДереваСтруктур Цикл
			Если КлючЗначение.Ключ <> "ИСТЗ_Строки" Тогда
				СтрокаДереваФормы[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(СтрокаДереваФормы, СтрокаДереваСтруктур);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПреобразоватьЗначенияВДереве(ВеткаДерева, ДляОтображения = Истина)
	
	Для каждого СтрокаДерева Из ВеткаДерева.Строки Цикл
		
		Если ДляОтображения Тогда
			СтрокаДерева.Значение = ЗначениеИзСтрокиВнутр(СтрокаДерева.Значение);
		Иначе
			СтрокаДерева.Значение = ЗначениеВСтрокуВнутр(СтрокаДерева.Значение);
		КонецЕсли;
		
		ПреобразоватьЗначенияВДереве(СтрокаДерева, ДляОтображения);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Обновление картинок на закладках
// Вызывается посредством обработки ожидания, чтобы форма нормально закрывалась после редактирования
&НаКлиенте
Процедура СцТ_ОбновитьЗаголовкиЗакладок()
	
	Элементы.Страница_РедактируемоеОписание.Картинка = ?(
		ПустаяСтрока(ДШ_Описание),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Элементы.Страница_Комментарий.Картинка = ?(
		ПустаяСтрока(ДШ_Комментарий),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
КонецПроцедуры

// Отображение родительского шага
// Параметры:
// ПриОткрытии - устанавливает признак, что настройка выполняется при открытии
// или (в противном случае) по обработке оповещения
&НаКлиенте
Процедура СцТ_СформироватьПредставлениеРодителя(ПриОткрытии = Истина) Экспорт
	
	Если ОА_ЭтоНовый И ПриОткрытии Тогда
		Если ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя = Неопределено Тогда
			ПредставлениеГруппы = "";
		Иначе
			// Поиск данных родительского узла в дереве по идентификатору шага
			СцТ_РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,
				ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
			
			Если СцТ_РодительУзла = Неопределено Тогда
				ПредставлениеГруппы = "";
			Иначе
				ОтобразитьПредставлениеСуществующегоРодительскогоШага(СцТ_РодительУзла);
			КонецЕсли;
		КонецЕсли;
		
		// Если родительский узел будет изменен у нового шага, то редактируемый шаг уже не имеет смысла,
		// так как неизвестно куда его вставить
		
	ИначеЕсли НЕ ОА_ЭтоНовый Тогда
		Если ДанныеШага = Неопределено Тогда
			ПредставлениеГруппы = "";
		Иначе
			СцТ_РодительУзла = ДанныеШага.ПолучитьРодителя();
			Если СцТ_РодительУзла = Неопределено Тогда
				ПредставлениеГруппы = "";
			Иначе
				ОтобразитьПредставлениеСуществующегоРодительскогоШага(СцТ_РодительУзла);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПредставлениеГруппы = "" Тогда
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы.СтраницаПустойГруппы;
	Иначе
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы.СтраницаЗаполненнойГруппы;
	КонецЕсли;
	
КонецПроцедуры

// Формирование представление существующего шага
// параметры
// РодительскийШаг - указатель на данные родительского шага.
// НЕ может быть Неопределено
&НаКлиенте
Процедура ОтобразитьПредставлениеСуществующегоРодительскогоШага(РодительскийШаг)
	
	ПредставлениеГруппы = НСтр("ru = 'Шаг №%1 ""%2""'");
	ПредставлениеГруппы = СтрЗаменить(
		ПредставлениеГруппы,
		"%1",
		Формат(РодительскийШаг.НомерШага, "ЧГ=0"));
	
	ПредставлениеГруппы = СтрЗаменить(
		ПредставлениеГруппы,
		"%2",
		РодительскийШаг.Наименование);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюПеременнойОшибкиГрупповогоШага(УпрФорма)
	
	Если УпрФорма.ДействиеПриОшибке = "Остановить" Тогда
		УпрФорма.Элементы.СтраницыПеременнойОшибки.ТекущаяСтраница = УпрФорма.Элементы.СтраницыПеременнойОшибки_Пустая;
	Иначе
		УпрФорма.Элементы.СтраницыПеременнойОшибки.ТекущаяСтраница = УпрФорма.Элементы.СтраницыПеременнойОшибки_Заполненная;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОбъектаМетаданных(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДШ_ИмяМетаданных = Результат.Значение;
	ДШ_ПредставлениеИмениМетаданных = Результат.Представление;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПользовательскоеОписание()
	
	ТекстОписания = ДШ_Описание;
	
	Если НЕ ДШ_СкрытьАвтоописание Тогда
		ДШ_Автоописание = СцТ_СформироватьОписаниеШага_НаКлиенте();
		ТекстОписания = СцТ_ГлавнаяФорма.СцТ_ДобавитьПодстроку(ТекстОписания, ДШ_Автоописание, Символы.ПС);
	КонецЕсли;
	
	ПользовательскоеОписание = ТекстОписания;
	
КонецПроцедуры

&НаКлиенте
Процедура ДШ_СкрытьАвтоописаниеПриИзменении(Элемент)
	
	ОбновитьПользовательскоеОписание();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница = Элементы.Страница_ОписаниеШага Тогда
		ОбновитьПользовательскоеОписание();
	КонецЕсли;
	
КонецПроцедуры


// Выполняет обработку выбора типа добавляемых элементов, по которым требуется
// искать форму в шаге "Найти форму"
//
// Параметры
//	ЭлементОписанияДобавляемых - выбранный элемент списка элементов;
//	ДопДанные - дополнительные данные
//
&НаКлиенте
Процедура СцТ_ОбработатьВыборТипаДобавляемыхЭлементовШагаНайтиФорму(ДобавляемыйЭлемент, ДопДанные) Экспорт
	
	Если ДобавляемыйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидимостьКолонок = Новый Соответствие;
	ВидимостьКолонок["ДеревоОбъектовЗначение"] = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗапретитьВыборПодсвеченных", Истина);
	
	
	//ВладелецОбъектов,
	//Знач ТипыВыбираемыхОбъектов        = Неопределено,
	//Знач ТипыОтображаемыхОбъектов      = Неопределено,
	//ТекущиеЭлементы                    = Неопределено,
	//МножественныйВыбор                 = Ложь,
	//ВладелецФормыВыбора                = Неопределено,
	//ЗаголовокФормыВыбораЭлементов      = "",
	//Автоматически                      = Ложь,
	//НеВыбиратьПодчиненныеИзТаблиц      = Ложь,
	//ПодсвечиваемыеПриВыборе            = Неопределено,
	//ВидимостьКолонок                   = Неопределено,
	//ДополнительныеПараметры            = Неопределено,
	//ОписаниеОповещенияОЗакрытииФормы = Неопределено) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеЗакрытияФормыСпособаПоискаЭлементовФормы(РезультатОкна, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатОкна) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВариантПоискаОбъекта   = РезультатОкна.ВариантПоискаЭлемента;
	ЭлементФормы_Имя       = РезультатОкна.ИмяЭлемента;
	ЭлементФормы_Заголовок = РезультатОкна.ЗаголовокЭлемента;
	ПутьКЭлементуФормы     = РезультатОкна.ПутьКЭлементуФормы;
	ЭлементФормы_Вид       = РезультатОкна.ВидЭлемента;
	
	//Если ПустаяСтрока(ИмяИскомогоОбъекта) Тогда
	//	ИмяИскомогоОбъекта = "$" + ЗаголовокИскомогоОбъекта;
	//ИначеЕсли ПустаяСтрока(ЗаголовокИскомогоОбъекта) Тогда
	//	ЗаголовокИскомогоОбъекта = ИмяИскомогоОбъекта;
	//КонецЕсли;
	
	//// Изменить имя и заголовок объекта
	//Если ТипШага = "ЗаполнитьОдинРеквизитФормы" ИЛИ ТипШага = "ЗаполнитьКолонкуТаблицы" Тогда
	//	
	//	УзелПоля = ДеревоЗначения.ПолучитьЭлементы()[0].ПолучитьЭлементы()[0];
	//	УзелПоля.Имя     = ИмяИскомогоОбъекта;
	//	УзелПоля.Синоним = ЗаголовокИскомогоОбъекта;
	//	
	//ИначеЕсли ТипШага = "ЗаполнитьРеквизитыФормы" ИЛИ ТипШага = "ЗаполнитьСтрокуТаблицы" Тогда
	//	
	//	ТекДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
	//	Если ТекДанные = Неопределено Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ТекДанные.ДополнительныеДанные.ВариантПоискаОбъекта = ПравилоПоиска.ВариантПоискаОбъекта;
	//	ТекДанные.Имя     = ИмяИскомогоОбъекта;
	//	ТекДанные.Синоним = ЗаголовокИскомогоОбъекта;
	//	
	//	ПутьКОбъекту = Неопределено;
	//	Если ТекДанные.ДополнительныеДанные.Свойство("ПутьКОбъекту", ПутьКОбъекту) Тогда
	//		Если ПутьКОбъекту <> Неопределено И ПутьКОбъекту.Количество() > 0 Тогда
	//			ПоследнийЭлементПоискаПути = ПутьКОбъекту[ПутьКОбъекту.ВГраница()];
	//			ПоследнийЭлементПоискаПути.ИмяОбъекта       = ИмяИскомогоОбъекта;
	//			ПоследнийЭлементПоискаПути.ЗаголовокОбъекта = ЗаголовокИскомогоОбъекта;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Возврат;
	//	
	//ИначеЕсли ТипШага = "НажатьКнопку" Тогда
	//	
	//	УзелИмениКнопки = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ИмяКнопки");
	//	УзелИмениКнопки.Значение = ИмяИскомогоОбъекта;
	//	УзелИмениКнопки.Синоним  = ЗаголовокИскомогоОбъекта;
	//	
	//ИначеЕсли ТипШага = "НайтиЭлементФормы" Тогда
	//	
	//	УзелЭлемента = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ИмяОбъекта");
	//	Если УзелЭлемента <> Неопределено Тогда
	//		УзелЭлемента.Значение = ИмяИскомогоОбъекта;
	//		УзелЭлемента.Синоним  = ЗаголовокИскомогоОбъекта;
	//	КонецЕсли;
	//	
	//	СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте(Истина);
	//	
	//ИначеЕсли ТипШага = "НажатьКнопкуКИ" Тогда
	//	
	//	УзелОписанияКнопки = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ОписаниеКнопкиКИ");
	//	УзелОписанияКнопки.Синоним = ЗаголовокИскомогоОбъекта;
	//	
	//ИначеЕсли ТипШага = "АвтоГруппаТаблицаФормы" Тогда
	//	
	//	Если ПустаяСтрока(ПредставлениеТаблицы) Тогда
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = НСтр("ru = 'Не выбрана таблица формы.'");
	//		Сообщение.Поле = "ПредставлениеТаблицы";
	//		Сообщение.Сообщить();
	//		Возврат;
	//	КонецЕсли;
	//	
	//	УзелОписанияТаблицы = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ОписаниеТаблицы");
	//	УзелОписанияТаблицы.Значение = ИмяИскомогоОбъекта;
	//	УзелОписанияТаблицы.Синоним  = ЗаголовокИскомогоОбъекта;
	//	
	//Иначе
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	
	/////////////////////
	
	//Если ПутьПоискаОбъекта <> Неопределено И ПутьПоискаОбъекта.Количество() > 0 Тогда
	//	ПоследнийЭлементПоискаПути = ПутьПоискаОбъекта[ПутьПоискаОбъекта.ВГраница()];
	//	ПоследнийЭлементПоискаПути.ИмяОбъекта = ЭлементФормы_Имя;
	//	ПоследнийЭлементПоискаПути.ЗаголовокОбъекта = ЭлементФормы_Заголовок;
	//КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура СцТ_ПослеВыбораТекстируемогоЭлементаФормы(РезультатФормы, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормы_Заголовок = РезультатФормы.Заголовок;
	ЭлементФормы_Имя       = РезультатФормы.Имя;
	
	ЭлементФормы_Вид    = РезультатФормы.Вид;
	
	ПутьКЭлементуФормы = Новый Структура;
	НомерСтроки = 1;
	Для каждого СтруктураМассива Из РезультатФормы.ПутьКОбъекту Цикл
		ИмяСтруктурыСтроки = "Str_" + Формат(НомерСтроки, "ЧГ=0");
		
		// Тип объекта не сериализуется на сервере
		Если СтруктураМассива.ТипОбъекта = Тип("ТестируемаяГруппаКомандногоИнтерфейса") Тогда
			НовыйТип = "ТестируемаяГруппаКомандногоИнтерфейса";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяГруппаФормы") Тогда
			НовыйТип = "ТестируемаяГруппаФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяДекорацияФормы") Тогда
			НовыйТип = "ТестируемаяДекорацияФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяКнопкаКомандногоИнтерфейса") Тогда
			НовыйТип = "ТестируемаяКнопкаКомандногоИнтерфейса";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяКнопкаФормы") Тогда
			НовыйТип = "ТестируемаяКнопкаФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяТаблицаФормы") Тогда
			НовыйТип = "ТестируемаяТаблицаФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемоеПолеФормы") Тогда
			НовыйТип = "ТестируемоеПолеФормы";
		ИначеЕсли СтруктураМассива.ТипОбъекта = Тип("ТестируемаяФорма") Тогда
			НовыйТип = "ТестируемаяФорма";
		Иначе
			Продолжить;
		КонецЕсли;
		СтруктураМассива.ТипОбъекта = НовыйТип;
		
		ПутьКЭлементуФормы.Вставить(ИмяСтруктурыСтроки, СтруктураМассива);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	//СцТ_ОбновитьАвтоОписаниеШага_НаКлиенте(Истина);
	Модифицированность = Истина;
	
КонецПроцедуры


// Вывод сообщения пользователю
//
// Параметры
// ТекстСообщения - отображаемый текст
// ПолеДанных - поле, которое должно получить фокус
&НаКлиенте
Процедура СцТ_СообщитьПользователю(ТекстСообщения, Отказ = Неопределено, ПолеДанных = "")
	
	Отказ = Истина;
	Если ПустаяСтрока(ПолеДанных) Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле  = ПолеДанных;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовСтраницыПроверкиОшибки(УпрФ)
	
	Если УпрФ.ТекстОшибкиВариант <> "ОшибкаПодробно" Тогда
		УпрФ.Элементы.ТекстОшибкиИмяМодуля.Доступность                = Ложь;
		УпрФ.Элементы.ТекстОшибкиИмяМодуляАктивность.Доступность      = Ложь;
		УпрФ.Элементы.ТекстОшибкиИсходнаяСтрока.Доступность           = Ложь;
		УпрФ.Элементы.ТекстОшибкиИсходнаяСтрокаАктивность.Доступность = Ложь;
		УпрФ.Элементы.ТекстОшибкиНомерСтроки.Доступность              = Ложь;
		УпрФ.Элементы.ТекстОшибкиНомерСтрокиАктивность.Доступность    = Ложь;
		УпрФ.Элементы.ТекстОшибкиОписание.Доступность                 = Ложь;
		УпрФ.Элементы.ТекстОшибкиОписаниеАктивность.Доступность       = Ложь;
		
		Если УпрФ.ТекстОшибкиВариант = "ОшибокНет"
			И УпрФ.ДействиеПриПроверкеОшибки = "Сведения" Тогда
			УпрФ.ТекстОшибкиЗакрыватьФорму = Истина;
			УпрФ.Элементы.ТекстОшибкиЗакрыватьФорму.Доступность = Ложь;
		Иначе
			УпрФ.Элементы.ТекстОшибкиЗакрыватьФорму.Доступность = Истина;
		КонецЕсли;
		
	Иначе
		
		УпрФ.Элементы.ТекстОшибкиИмяМодуляАктивность.Доступность      = Истина;
		УпрФ.Элементы.ТекстОшибкиИсходнаяСтрокаАктивность.Доступность = Истина;
		УпрФ.Элементы.ТекстОшибкиНомерСтрокиАктивность.Доступность    = Истина;
		УпрФ.Элементы.ТекстОшибкиОписаниеАктивность.Доступность       = Истина;
		
		УпрФ.Элементы.ТекстОшибкиИмяМодуля.Доступность      = УпрФ.ТекстОшибкиИмяМодуляАктивность;
		УпрФ.Элементы.ТекстОшибкиИсходнаяСтрока.Доступность = УпрФ.ТекстОшибкиИсходнаяСтрокаАктивность;
		УпрФ.Элементы.ТекстОшибкиНомерСтроки.Доступность    = УпрФ.ТекстОшибкиНомерСтрокиАктивность;
		УпрФ.Элементы.ТекстОшибкиОписание.Доступность       = УпрФ.ТекстОшибкиОписаниеАктивность;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОбОшибке()
	
	Попытка
		Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru = 'Нет подключения к тестируемому приложению. Выполните подключение и повторите операцию'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
			
		Иначе
			ИнформацияОбОшибке = СцТ_ГлавнаяФорма.СцТ_Контроллер.ПолучитьТекущуюИнформациюОбОшибке();
			Если ИнформацияОбОшибке = Неопределено Тогда
				ТекстОшибкиВариант = "ОшибокНет";
				
				ИмяМодуля       = "";
				ИсходнаяСтрока  = "";
				НомерСтроки     = 0;
				ОписаниеОшибки  = "";
				
			Иначе
				ТекстОшибкиВариант = "ОшибкаПодробно";
				
				ТекстОшибкиИмяМодуля       = ИнформацияОбОшибке.ИмяМодуля;
				ТекстОшибкиИсходнаяСтрока  = ИнформацияОбОшибке.ИсходнаяСтрока;
				ТекстОшибкиНомерСтроки     = ИнформацияОбОшибке.НомерСтроки;
				ТекстОшибкиОписание        = ИнформацияОбОшибке.Описание;
				
				ТекстОшибкиИмяМодуляАктивность      = (НЕ ПустаяСтрока(ТекстОшибкиИмяМодуля));
				ТекстОшибкиИсходнаяСтрокаАктивность = (НЕ ПустаяСтрока(ТекстОшибкиИсходнаяСтрока));
				ТекстОшибкиОписаниеАктивность       = (НЕ ПустаяСтрока(ТекстОшибкиОписание));
				ТекстОшибкиНомерСтрокиАктивность    = (ТекстОшибкиНомерСтроки > 0);
				
				
			КонецЕсли;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	УстановитьДоступностьЭлементовСтраницыПроверкиОшибки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

