
#Область Переменные

// Форма - владелец текущей формы (для краткости и наглядности вместо "ЭтаФорма.ВладелецФормы")
&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

// Указатель на форму (главная или макрошага), из которой была открыта эта форма
&НаКлиенте
Перем ВызвавшаяФорма Экспорт;

// Указатель на ветку в дереве. Заполненяется, если шаг не новый
&НаКлиенте
Перем ДанныеШага Экспорт;

// Идентификатор узла в дереве. Заполнено если шаг не новый
&НаКлиенте
Перем ИдентификаторУзла Экспорт;

// Содержит интерактивный контейнер, соответствующий интерактивному шагу:
//	форма или таблица формы
&НаКлиенте
Перем ИнтерактивныйКонтейнер Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимСовместимости838 Тогда
		УстановитьДействие("ПередЗакрытием", "ПередЗакрытиеБезРежимаСовместимости");
	КонецЕсли;
	
	// Если форма открыта под внешним управлением, то не вся функциональность
	// должна работать
	Если Параметры.ОткрытаПодВнешнимУправлением Тогда
		
		Элементы.ОбновитьТаблицуПоДаннымФормы.Доступность = Ложь;
		Элементы.НастройкаКолонок.Доступность             = Ложь;
		Элементы.СравнитьВизуально.Доступность            = Ложь;
		
	КонецЕсли;
	///

	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ПутьКФормам  = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	// Управление доступностью
	ЭтотОбъект.ТолькоПросмотр = Параметры.ТолькоПросмотр;
	Элементы.ПрименитьИЗакрыть.Доступность  = НЕ Параметры.ТолькоПросмотр;
	Элементы.ПрименитьИзменения.Доступность = НЕ Параметры.ТолькоПросмотр;
	
	// основные атрибуты шага (ОА)
	// атрибуты, для редактирования, которых не требуется открытие формы настройки
	// или свернутые для хранения атрибуты
	ОА_ТипШага                          = Параметры.ТипШага;
	ОА_НомерШага                        = Параметры.НомерШага;
	ОА_Активность                       = Параметры.Активность;
	ОА_ОписательПоложенияШагаВДереве    = Параметры.ОписательПоложенияШагаВДереве;
	ОА_ЭтоНовый                         = Параметры.ЭтоНовый;
	ОА_СтруктураДанныхШага              = Параметры.СтруктураДанныхШага;
	
	// 1. Раскрытие структуры шага и определение типа шага
	Если ОА_СтруктураДанныхШага = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ДШ_Наименование                 = ОА_СтруктураДанныхШага.Наименование;
	ДШ_ТипМетаданных                = ОА_СтруктураДанныхШага.ТипМетаданных;
	ДШ_ИмяМетаданных                = ОА_СтруктураДанныхШага.ИмяМетаданных;
	ДШ_Автоописание                 = ОА_СтруктураДанныхШага.Автоописание;
	ДШ_Описание                     = ОА_СтруктураДанныхШага.Описание;
	ДШ_СкрытьАвтоописание           = ОА_СтруктураДанныхШага.СкрытьАвтоописание;
	ДШ_ОбСсылка                     = ОА_СтруктураДанныхШага.ОбСсылка;
	ДШ_ПредставлениеОбъекта         = ОА_СтруктураДанныхШага.ПредставлениеОбъекта;
	ДШ_ПредставлениеИмениМетаданных = ОА_СтруктураДанныхШага.ПредставлениеИмениМетаданных;
	ДШ_ИмяФормы                     = ОА_СтруктураДанныхШага.ИмяФормы;
	ДШ_ВыполнитьВручную             = ОА_СтруктураДанныхШага.ВыполнитьВручную;
	ДШ_Комментарий                  = ОА_СтруктураДанныхШага.Комментарий;
	ДШ_ЗаголовокФормы               = ОА_СтруктураДанныхШага.ЗаголовокФормы;
	ДШ_ДанныеКартинки               = ОА_СтруктураДанныхШага.ДанныеКартинки;
	
	Если ТипЗнч(ОА_СтруктураДанныхШага.ДеревоЗначения) = Тип("Структура") Тогда
		// Данные дерева переданы в виде структуры из главной формы обработки
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоЗначения,
			ОА_СтруктураДанныхШага.ДеревоЗначения);
	ИначеЕсли ТипЗнч(ОА_СтруктураДанныхШага.ДеревоЗначения) = Тип("ХранилищеЗначения") Тогда
		// Данные из конфигурации могут поступить в виде данных ХЗ
		Попытка
			ДЗ_НаСервере = ОА_СтруктураДанныхШага.ДеревоЗначения.Получить();
			ПреобразоватьЗначенияВДереве(ДЗ_НаСервере, Истина);
			ЗначениеВРеквизитФормы(ДЗ_НаСервере, "ДеревоЗначения");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	
	// Признак, что наименование установлено вручную
	НаименованиеШагаИзмененоВручную = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ИСТЗ_НаименованиеРучное",
		Ложь);
		
	// Картинки для закладок описания и комментария
	АдресКартинкиКомментария = ПоместитьВоВременноеХранилище(ЭтаОбработка.ПолучитьМакет("КартинкаКомментария"));
	КартинкаКомментария = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинкиКомментария));
	
	Элементы.Страница_РедактируемоеОписание.Картинка = ?(
		ПустаяСтрока(ДШ_Описание),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Элементы.Страница_Комментарий.Картинка = ?(
		ПустаяСтрока(ДШ_Комментарий),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	СцТ_НастроитьФормуДляШага();
	
	// Заполнение поведения при ошибке для группового шага
	СцТ_ЗаполнитьДействиеГрупповогоШагаПриОшибке(ЭтотОбъект);
	
	// Модифицированность
	Модифицированность = ОА_ЭтоНовый;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущийЭлемент = Элементы.ДействиеСТаблицей;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_УдалениеШаговСценария" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметр.НайтиПоЗначению(ДанныеШага.ПолучитьИдентификатор()) <> Неопределено Тогда
			Модифицированность = Ложь;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли  ИмяСобытия = "СцТ_ПеремещениеУзловСценария" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		НовыйУзел = Параметр[ДанныеШага];
		Если НовыйУзел <> Неопределено Тогда
			ДанныеШага = НовыйУзел;
			ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
			ДШ_НомерШага      = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ОбновленыДанныеГрупповогоШага" Тогда
		
		Если Параметр = ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя Тогда
			СцТ_СформироватьПредставлениеРодителя();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ИзмениласьНумерацияШагов" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ДанныеШага = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,ИдентификаторУзла);
			ОА_НомерШага = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		Исключение
		КонецПопытки;
		
	ИначеЕсли ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("СцТ_ОбработатьЗапросОСохраненииДанныхШага", ЭтотОбъект),
			НСтр("ru = 'Данные шага были изменены. Применить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиеБезРежимаСовместимости(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Если НЕ ЗавершениеРаботы Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СцТ_ОбработатьЗапросОСохраненииДанныхШага", ЭтотОбъект),
				НСтр("ru = 'Данные шага были изменены. Применить изменения?'"),
				РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Данные шага действий с таблицей были изменены. При закрытии все изменения будут утеряны'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()
	
	Попытка
		СцТ_ГлавнаяФорма.СцТ_ОткрытыеФормыНастройкиШагов.Удалить(ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура СохранитьИЗакрытьФорму(Команда)
	
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Сохранение шага'"), , НСтр("ru = 'Данные шага сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтоназвание(Команда)
	
	СцТ_ОбновитьНаименование_НаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ХранимыеДанныеШага(Команда)
	
	// Всегда отображаются имеено хранимые данные, которые сохранены в дереве шагов
	Если ОА_ЭтоНовый Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага еще не записаны. Отобразить структуру хранения данных невозможно. Сохранить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеОтветаНаВопросОСохраненииНового", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
		Возврат;
	ИначеЕсли НЕ ОА_ЭтоНовый И Модифицированность Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага были изменены. Сохранить изменения перед отображением структуры?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеОтветаНаВопросОСохраненииСуществующего", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьВизуально(Команда)
	
	Если СписокКолонок.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Состав колонок еще неизвестен. Необходимо обновить таблицу по данным тестируемой формы'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Тестируемая таблица
	УзелТестируемойТаблицы = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДанныеТаблицыДляВизуальногоСравнения");
		
	ЗаполнитьВеткуДереваЗначенийДаннымиИзТаблицы(УзелТестируемойТаблицы, Ложь);
	
	// Узел эталонной таблицы
	УзелТаблицы = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДанныеТаблицы");
	
	
	ДанныеДляСравнения = СцТ_ПодготовитьДанныеДляВизуальногоСравненияНесколькихСтрокТаблиц_НаСервере();
	
	Если ДанныеДляСравнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляСравнения.Вставить("РежимСовместимости838", СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ОткрытьФорму(ПутьКФормам + "ВизуальноеСравнениеТаблиц", ДанныеДляСравнения, ЭтотОбъект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуПоДаннымФормы(Команда)
	
	УзелТаблицы = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДанныеТаблицы");
		
	ЗаполнитьВеткуДереваЗначенийДаннымиИзТаблицы(УзелТаблицы);
	
	ЗаполнитьТДпоДаннымДерева(ДанныеТаблицы, УзелТаблицы, СписокКолонок);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКолонок(Команда)
	
	Если СписокКолонок.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Состав колонок еще неизвестен. Необходимо обновить таблицу по данным тестируемой формы'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтметкиКолонок", ЭтотОбъект);
	СписокКолонок.ПоказатьОтметкуЭлементов(ОписаниеОповещения, НСтр("ru = 'Управление активностью колонок'"));
	
КонецПроцедуры



#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АктивностьПриИзменении(Элемент)
	
	Если ОА_Активность = 2 Тогда
		ОА_Активность = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПроверочноеНаименование = СцТ_СформироватьОписаниеШага_НаКлиенте(Истина);
	
	НаименованиеШагаИзмененоВручную = (ДШ_Наименование <> ПроверочноеНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("СцТ_ОбновитьЗаголовкиЗакладок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("СцТ_ОбновитьЗаголовкиЗакладок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГруппыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ОА_ЭтоНовый Тогда
		РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Иначе
		РодительУзла = ДанныеШага.ПолучитьРодителя();
	КонецЕсли;
	
	Если РодительУзла <> Неопределено Тогда
		СцТ_ГлавнаяФорма.СцТ_ОткрытьФормуНастройкиШага(РодительУзла, ВызвавшаяФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриОшибкеВПодчиненныхШагахПриИзменении(Элемент)
	
	УправлениеДоступностьюПеременнойОшибкиГрупповогоШага(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДШ_СкрытьАвтоописаниеПриИзменении(Элемент)
	
	ОбновитьПользовательскоеОписание();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница = Элементы.Страница_ОписаниеШага Тогда
		ОбновитьПользовательскоеОписание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСТаблицейПриИзменении(Элемент)
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДействиеСТаблицей",
		ВыполняемоеДействие);
		
	УправлениеВидимостьюНаСтранице_ДействиеСТаблицей(ЭтотОбъект);
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	СцТ_ОбновитьОписаниеШага_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПовторенийПриИзменении(Элемент)
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	СцТ_ОбновитьОписаниеШага_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСравненияПриИзменении(Элемент)
	
	УстановитьДоступностьНастройкиСтрок(ЭтотОбъект);
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	СцТ_ОбновитьОписаниеШага_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерваяСтрокаПриИзменении(Элемент)
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	СцТ_ОбновитьОписаниеШага_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследняяСтрокаПриИзменении(Элемент)
	
	УстановитьДоступностьНастройкиСтрок(ЭтотОбъект);
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	СцТ_ОбновитьОписаниеШага_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоСтрокПриИзменении(Элемент)
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	СцТ_ОбновитьОписаниеШага_НаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкаСортировкиПриИзменении(Элемент)
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	СцТ_ОбновитьОписаниеШага_НаКлиенте();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиОповещений

// Обрабатывает нажатие пользователем кнопки в диалоге вопроса о сохранении
// данных шага перед закрытием формы
// Параметры
//	КодВозврата - код нажатой кнопки (Да, Нет, Отмена);
//	ДопДанные - дополнительные данные;
//
&НаКлиенте
Процедура СцТ_ОбработатьЗапросОСохраненииДанныхШага(КодВозврата, ДопДанные) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли КодВозврата = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
		
		// При Отмене ничего не выполняется
		
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос диалога о Сохранении нового шага перед
// отображением хранимых данных
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииНового(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка нажатия "ДА"
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить шаг'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос диалога о Сохранении уже существующего модифицированного шага перед
// отображением хранимых данных
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииСуществующего(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		// Показываем, что хранится
		СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
		
	Иначе
		
		Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
			СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить изменения в шаге'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отображение родительского шага
// Параметры:
// ПриОткрытии - устанавливает признак, что настройка выполняется при открытии
// или (в противном случае) по обработке оповещения
&НаКлиенте
Процедура СцТ_СформироватьПредставлениеРодителя(ПриОткрытии = Истина) Экспорт
	
	Если ОА_ЭтоНовый И ПриОткрытии Тогда
		Если ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя = Неопределено Тогда
			ПредставлениеГруппы = "";
		Иначе
			// Поиск данных родительского узла в дереве по идентификатору шага
			СцТ_РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,
				ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
			
			Если СцТ_РодительУзла = Неопределено Тогда
				ПредставлениеГруппы = "";
			Иначе
				ОтобразитьПредставлениеСуществующегоРодительскогоШага(СцТ_РодительУзла);
			КонецЕсли;
		КонецЕсли;
		
		// Если родительский узел будет изменен у нового шага, то редактируемый шаг уже не имеет смысла,
		// так как неизвестно куда его вставить
		
	ИначеЕсли НЕ ОА_ЭтоНовый Тогда
		Если ДанныеШага = Неопределено Тогда
			ПредставлениеГруппы = "";
		Иначе
			СцТ_РодительУзла = ДанныеШага.ПолучитьРодителя();
			Если СцТ_РодительУзла = Неопределено Тогда
				ПредставлениеГруппы = "";
			Иначе
				ОтобразитьПредставлениеСуществующегоРодительскогоШага(СцТ_РодительУзла);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПредставлениеГруппы = "" Тогда
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы.СтраницаПустойГруппы;
	Иначе
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы.СтраницаЗаполненнойГруппы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтметкиКолонок(СписокЗначений, ДопПараметры) Экспорт
	
	Если СписокЗначений = Неопределено ИЛИ СписокЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УзелТаблицы = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДанныеТаблицы");
		
	ЗаполнитьТДпоДаннымДерева(ДанныеТаблицы, УзелТаблицы, СписокКолонок);
	
КонецПроцедуры


#КонецОбласти


#Область ВспомогательныеПроцедурыИФункции

#Область НастрокаПриЗагрузкеДанныхШага

// Индивидуальная настройка формы для шага
//
&НаСервере
Процедура СцТ_НастроитьФормуДляШага()
	
	ВыполняемоеДействие = СцТ_ЗначениеВДереве(ДеревоЗначения, "ДействиеСТаблицей", "ПерейтиВНачалоТаблицы");
	
	Попытка
		КоличествоПовторений = Число(СцТ_ЗначениеВДереве(ДеревоЗначения, "КоличествоПовторений", 1));
	Исключение
		КоличествоПовторений = 1;
	КонецПопытки;
	
	ВыполнитьСНажатойКнопкойШифт = СцТ_ЗначениеВДереве(ДеревоЗначения, "РежимВыделения", Ложь);
	КолонкаСортировки           = СцТ_ЗначениеВДереве(ДеревоЗначения, "КолонкаСортировки", "");
	
	
	ВариантСравнения = СцТ_ЗначениеВДереве(ДеревоЗначения, "ВариантСравнения", "ВсюТаблицу");
	ПерваяСтрока     = СцТ_ЗначениеВДереве(ДеревоЗначения, "ПерваяСтрока"    , "Первая");
	ПоследняяСтрока  = СцТ_ЗначениеВДереве(ДеревоЗначения, "ПоследняяСтрока" , "КонецТаблицы");
	КоличествоСтрок  = СцТ_ЗначениеВДереве(ДеревоЗначения, "КоличествоСтрок" , 1);
	
	Если ВыполняемоеДействие = "СравнитьНесколькоСтрок" Тогда
		// Заполнение списка колонок
		УзелКолонок = СцТ_НайтиУзелДереваФормы(
			ДеревоЗначения,
			"Имя",
			"КолонкиТаблицы");
			
		Если УзелКолонок <> Неопределено Тогда
			Для каждого УзелКолонки Из УзелКолонок.ПолучитьЭлементы() Цикл
				СписокКолонок.Добавить(УзелКолонки.Имя, УзелКолонки.Синоним, УзелКолонки.Активность);
			КонецЦикла;
		КонецЕсли;
		
		// Нужно заполнить таблицу
		УзелТаблицы = СцТ_НайтиУзелДереваФормы(
			ДеревоЗначения,
			"Имя",
			"ДанныеТаблицы");
			
		Если УзелТаблицы <> Неопределено Тогда
			ЗаполнитьТДпоДаннымДерева(ДанныеТаблицы, УзелТаблицы, СписокКолонок);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеВидимостьюНаСтранице_ДействиеСТаблицей(ЭтотОбъект);
	
	//// Управление действием при ошибке
	//УстановитьДействияПриОшибке();
	
	//Элементы.Страницы.ТекущаяСтраница = Элементы.Страница_ДействиеСТаблицей;
	
	//ЗаполнитьПутьКЭлементуФормы(ДеревоЗначения);
	//
	//ВариантПоискаОбъекта = СцТ_ЗначениеВДереве(ДеревоЗначения, "ВариантПоискаОбъекта", "100");
	//
	//// Список выбора для Действия
	//СцТ_НастроитьСписокДействийШагаНайтиЭлемент(ЭтотОбъект, ЭлементФормы_Тип);
	//
	//// Заполнение. Продолжение
	//ДействиеСЭлементом = СцТ_ЗначениеВДереве(ДеревоЗначения, "ДействиеСОбъектом"   , "");
	//
	//// Заполнение таблицы свойств
	//УзелСвойств = СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "СвойстваОбъекта");
	//Если УзелСвойств <> Неопределено Тогда
	//	УзелСвойстваВидимость      = СцТ_НайтиУзелДереваФормы(УзелСвойств, "Имя", "Видимость");
	//	УзелСвойстваДоступность    = СцТ_НайтиУзелДереваФормы(УзелСвойств, "Имя", "Доступность");
	//	УзелСвойстваЗаголовок      = СцТ_НайтиУзелДереваФормы(УзелСвойств, "Имя", "Заголовок");
	//	УзелСвойстваПодсказка      = СцТ_НайтиУзелДереваФормы(УзелСвойств, "Имя", "ТекстПодсказки");
	//	УзелСвойстваТолькоПросмотр = СцТ_НайтиУзелДереваФормы(УзелСвойств, "Имя", "ТолькоПросмотр");
	//КонецЕсли;
	//
	//
	//ВариантПоискаКнопки = СцТ_ЗначениеВДереве(УзелКнопкиЭлемента, "ВариантПоискаОбъекта", "100");
	//
	//ЗаполнитьПутьКЭлементуФормы(ДеревоЗначения, ПутьККнопке);
	//
	////
	//
	//СцТ_НастроитьОтображениеШагаНайтиЭлемент(ЭтотОбъект);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страница_ДанныеШага;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ЗаполнитьДействиеГрупповогоШагаПриОшибке(ЭтотОбъект)
	
	СписокВыбора = Элементы.ДействиеПриОшибке.СписокВыбора;
	СписокВыбора.Добавить("Остановить", НСтр("ru = 'Остановить выполнение'"));
	СписокВыбора.Добавить("Продолжить", НСтр("ru = 'Продолжить выполнение'"));
	
	// Параметры действий при ошибке находятся в корне
	ДействиеПриОшибке = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ДействиеПриОшибке",
		"Остановить");
		
	ПеременнаяПриОшибке = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ПеременнаяПриОшибке",
		"");
	
	УправлениеДоступностьюПеременнойОшибкиГрупповогоШага(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТДпоДаннымДерева(ДанныеТаблицы, УзелТаблицы, СписокКолонок)
	
	#Если ТонкийКлиент ИЛИ ВебКлиент Тогда
		ОчиститьТДНаСервере(ДанныеТаблицы);
	#Иначе
		ДанныеТаблицы.Очистить();
	#КонецЕсли
	
	// Представление шапки таблицы
	НомерКолонки = 1;
	Для каждого ЭлементСписка Из СписокКолонок Цикл
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		АдресЯчейки = "R1C%2";
		АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(НомерКолонки, "ЧГ=0"));
		
		Ячейка = ДанныеТаблицы.Область(АдресЯчейки);
		
		Ячейка.Текст = ЭлементСписка.Представление;
		
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Если НомерКолонки > 1 Тогда
		
		ШиринаКолонки = Окр(160/НомерКолонки, 0);
		
		Если ШиринаКолонки < 14 Тогда
			ШиринаКолонки = 14;
		КонецЕсли;
		
		Для П=1 По НомерКолонки - 1 Цикл
			АдресЯчейки = "C%2";
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(П, "ЧГ=0"));
			
			Ячейка = ДанныеТаблицы.Область(АдресЯчейки);
			
			Ячейка.ШиринаКолонки = ШиринаКолонки;
			
			Ячейка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
			Ячейка.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			
			АдресЯчейки = "R1C%2";
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(П, "ЧГ=0"));
			Ячейка = ДанныеТаблицы.Область(АдресЯчейки);
			
			Ячейка.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3); 
			Ячейка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3);
			
			Ячейка.ЦветФона = Новый Цвет(215,215,215);
			
		КонецЦикла;
	КонецЕсли;
	
	
	// Заполнение значениями
	НомерСтроки = 2;
	Для каждого УзелСтроки Из УзелТаблицы.ПолучитьЭлементы() Цикл
		НомерКолонки = 1;
		Для каждого ЭлементСписка Из СписокКолонок Цикл
			Если НЕ ЭлементСписка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЯчейки = "";
			Для каждого УзелКолонки Из УзелСтроки.ПолучитьЭлементы() Цикл 
				Если УзелКолонки.Имя = ЭлементСписка.Значение Тогда
					ТекстЯчейки = УзелКолонки.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			АдресЯчейки = "R%1C%2";
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%1", Формат(НомерСтроки , "ЧГ=0"));
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(НомерКолонки, "ЧГ=0"));
			
			Ячейка = ДанныеТаблицы.Область(АдресЯчейки);
			
			Ячейка.Текст = ТекстЯчейки;
			
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьТДНаСервере(ДанныеТаблицы)
	ДанныеТаблицы.Очистить();
КОнецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНастройкиСтрок(УпрФорма)
	
	Если УпрФорма.ВариантСравнения = "ВсюТаблицу" Тогда
		УпрФорма.Элементы.ПерваяСтрока.Доступность    = Ложь;
		УпрФорма.Элементы.ПоследняяСтрока.Доступность = Ложь;
		УпрФорма.Элементы.КоличествоСтрок.Доступность = Ложь;
		
	Иначе
		УпрФорма.Элементы.ПерваяСтрока.Доступность    = Истина;
		УпрФорма.Элементы.ПоследняяСтрока.Доступность = Истина;
		УпрФорма.Элементы.КоличествоСтрок.Доступность = Истина;
		
	КонецЕсли;
	
	Если УпрФорма.ПоследняяСтрока = "КонецТаблицы" Тогда
		УпрФорма.Элементы.СтраницыКоличестваСтрок.ТекущаяСтраница = УпрФорма.Элементы.СтраницыКоличестваСтрок_Пустая;
	Иначе
		УпрФорма.Элементы.СтраницыКоличестваСтрок.ТекущаяСтраница = УпрФорма.Элементы.СтраницыКоличестваСтрок_Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТЗпоДаннымУзлаДерева(УзелТаблицы, ТЗ)
	
	Для каждого УзелСтрок Из УзелТаблицы.ПолучитьЭлементы() Цикл
		НоваяСтрока = ТЗ.Добавить();
		Для каждого УзелКолонки Из УзелСтрок.ПолучитьЭлементы() Цикл
			Попытка
				НоваяСтрока[УзелКолонки.Имя] = УзелКолонки.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти


#Область СохранениеШагаВСценарии

// Сохранение реализовано в виде функции, т.к. потребуется
// ее выполнение в обработчике ПередЗакрытием
//
&НаКлиенте
Функция СцТ_ПрименитьИзменения_НаКлиенте() Экспорт
	
	// Проверка, что владелец формы еще не закрыт
	Если НЕ ВладелецФормы.Открыта() Тогда
		ТекстСообщения = НСтр("ru = 'Форма с деревом шагов уже закрыта. Применить изменения невозможно'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка правильности данных
	Отказ = Ложь;
	
	Если ПустаяСтрока(ДШ_Наименование) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнено наименование.'");
		
		СП = Новый СообщениеПользователю;
		СП.Текст = ТекстСообщения;
		СП.ПутьКДанным = "ДШ_Наименование";
		СП.Сообщить();
		
		Отказ = Истина;
			
	КонецЕсли;
	
	// Проверка индивидуальных настроек шага и заполнение ДереваЗначения
	СцТ_ПодготовитьДанныеШагаДляСохранения_НаКлиенте(Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	
	ВозвращаемаяСтруктура = СцТ_СформироватьСтруктуруданныхШага_НаКлиенте();
	
	Если ОА_ЭтоНовый Тогда
		
		ДанныеШага = СцТ_ГлавнаяФорма.СцТ_СохранитьНовыйШаг(ВызвавшаяФорма, ВозвращаемаяСтруктура);
		
		ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
		ОА_НомерШага      = ДанныеШага.НомерШага;
		ОА_ЭтоНовый       = Ложь;
		
	Иначе
		СцТ_ГлавнаяФорма.СцТ_ПрименитьИзмененияВШаге(ВызвавшаяФорма, ДанныеШага, ВозвращаемаяСтруктура);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Заполнение дерева значения данными формы.
// Проверка корректности специфических для этого шага данных
&НаКлиенте
Процедура СцТ_ПодготовитьДанныеШагаДляСохранения_НаКлиенте(Отказ)
	
	// Проверки
	
	// формирование дерева
	
	Если НаименованиеШагаИзмененоВручную Тогда
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ИСТЗ_НаименованиеРучное",
			Истина);
	Иначе
		НайденныйУзел = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(
			ДеревоЗначения,
			"Имя",
			"ИСТЗ_НаименованиеРучное");
			
		Если НайденныйУзел <> Неопределено Тогда
			ДеревоЗначения.ПолучитьЭлементы().Удалить(НайденныйУзел);
		КонецЕсли;
	КонецЕсли;
	
	///////////////////////////////////
	
		// Проверки правильности заполнения
	Если ПустаяСтрока(ВыполняемоеДействие) Тогда
		СцТ_СообщитьПользователю(НСтр("ru = 'Не выбрано действие с таблицей формы.'"),
			Отказ,
			"ДействиеНадРеквизитомФормы");
	КонецЕсли;
	
	Если КоличествоПовторений = 0 Тогда
		СцТ_СообщитьПользователю(НСтр("ru = 'Не указано количество повторений.'"),
			Отказ,
			"КоличествоПовторений");
	КонецЕсли;
	
	Если ВыполняемоеДействие = "СортироватьПоКолонке" И ПустаяСтрока(КолонкаСортировки) Тогда
		СцТ_СообщитьПользователю(НСтр("ru = 'Не указана колонка сортировки.'"),
			Отказ,
			"ДействиеСТаблицейКолонкаСортировки");
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// формирование дерева
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"КоличествоПовторений",
		?(КоличествоПовторений = 0, 1, КоличествоПовторений));
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"РежимВыделения",
		ВыполнитьСНажатойКнопкойШифт);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"КолонкаСортировки",
		КолонкаСортировки);
		
	Если ВыполняемоеДействие = "СравнитьНесколькоСтрок" Тогда
		
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ВариантСравнения",
			ВариантСравнения);
			
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ПерваяСтрока",
			ПерваяСтрока);
			
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ПоследняяСтрока",
			ПоследняяСтрока);
			
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"КоличествоСтрок",
			КоличествоСтрок);
		
		
		// Сохранение списка колонок
		УзелКолонок = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"КолонкиТаблицы");
			
		Для каждого ЭлементСпискаКолонок Из СписокКолонок Цикл
			СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
				УзелКолонок,
				ЭлементСпискаКолонок.Значение,,
				ЭлементСпискаКолонок.Представление,
				ЭлементСпискаКолонок.Пометка);
		КонецЦикла;
		
		// Сохранение колонок таблицы
		УзелТаблицы = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ДанныеТаблицы");
			
		// Узел таблицы уже заполнен по данным формы
		// нужно сохранить только изменения, сделанные пользователем вручную
		НомерСтроки = 2;
		Для каждого УзелСтроки Из УзелТаблицы.ПолучитьЭлементы() Цикл
			НомерКолонки = 1;
			Для каждого ЭлементСписка Из СписокКолонок Цикл
				Если НЕ ЭлементСписка.Пометка Тогда
					Продолжить;
				КонецЕсли;
				
				АдресЯчейки = "R%1C%2";
				АдресЯчейки = СтрЗаменить(АдресЯчейки, "%1", Формат(НомерСтроки , "ЧГ=0"));
				АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(НомерКолонки, "ЧГ=0"));
				
				Ячейка = ДанныеТаблицы.Область(АдресЯчейки);
				
				Для каждого УзелКолонки Из УзелСтроки.ПолучитьЭлементы() Цикл 
					Если УзелКолонки.Имя = ЭлементСписка.Значение Тогда
						Если Ячейка.Текст <> УзелКолонки.Значение Тогда
							УзелКолонки.Значение = Ячейка.Текст;
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				НомерКолонки = НомерКолонки + 1;
			КонецЦикла;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
		
	
	//////////////////////////////////
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДействиеПриОшибке",
		ДействиеПриОшибке);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ПеременнаяПриОшибке",
		ПеременнаяПриОшибке);
	
КонецПроцедуры

// Свертка данных шага в структуру
// и подготовка возвращаемой структуры отредактированного шага
&НаКлиенте
Функция СцТ_СформироватьСтруктуруданныхШага_НаКлиенте()
	
	// СДШ - структура данных шага
	СДШ = Новый Структура;
	
	СДШ.Вставить("ИдентификаторШага"           , ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
	СДШ.Вставить("НаименованиеШага"            , ДШ_Наименование);
	СДШ.Вставить("ТипМетаданных"               , ДШ_ТипМетаданных);
	СДШ.Вставить("ИмяМетаданных"               , ДШ_ИмяМетаданных);
	СДШ.Вставить("Автоописание"                , ДШ_Автоописание);
	СДШ.Вставить("Описание"                    , ДШ_Описание);
	СДШ.Вставить("СкрытьАвтоописание"          , ДШ_СкрытьАвтоописание);
	СДШ.Вставить("ОбСсылка"                    , ДШ_ОбСсылка);
	СДШ.Вставить("ПредставлениеОбъекта"        , ДШ_ПредставлениеОбъекта);
	СДШ.Вставить("ВыполнитьВручную"            , ДШ_ВыполнитьВручную);
	СДШ.Вставить("Комментарий"                 , ДШ_Комментарий);
	СДШ.Вставить("ИмяФормы"                    , ДШ_ИмяФормы);
	СДШ.Вставить("ПредставлениеИмениМетаданных", ДШ_ПредставлениеИмениМетаданных);
	СДШ.Вставить("ЗаголовокФормы"              , ДШ_ЗаголовокФормы);
	СДШ.Вставить("ДанныеКартинки"              , ДШ_ДанныеКартинки);
	СДШ.Вставить("ДеревоЗначения"              , СцТ_ГлавнаяФорма.СцТ_ДеревоформыВДеревоСтруктур(ДеревоЗначения));
	
	
	// ВСД - возвращаемая структура данных
	ВСД = Новый Структура;
	ВСД.Вставить("ОписательПоложенияШагаВДереве", ОА_ОписательПоложенияШагаВДереве);
	ВСД.Вставить("Наименование"                 , ДШ_Наименование);
	ВСД.Вставить("Активность"                   , ОА_Активность);
	ВСД.Вставить("СтруктураДанныхШага"          , СДШ);
	ВСД.Вставить("ЭтоНовый"                     , ОА_ЭтоНовый);
	ВСД.Вставить("ТипШага"                      , ОА_ТипШага);
	
	Возврат ВСД;
	
КонецФункции

#КонецОбласти

#Область ФормированеОписанийИНаименований

// Формирование описания шага на клиенте
&НаКлиенте
Функция СцТ_СформироватьОписаниеШага_НаКлиенте(Краткое = Ложь)
	
	ВозвращаемоеОписание = "";
	ЭлементСписка = Элементы.ДействиеСТаблицей.СписокВыбора.НайтиПоЗначению(ВыполняемоеДействие);
	Если ЭлементСписка <> Неопределено Тогда
		ВозвращаемоеОписание = ЭлементСписка.Представление;
	КонецЕсли;
	
	Если    ВыполняемоеДействие = "ПерейтиКСледующейСтроке"
		ИЛИ ВыполняемоеДействие = "ПерейтиКПредыдущейСтроке"
		ИЛИ ВыполняемоеДействие = "ПерейтиНаУровеньВверх"
		ИЛИ ВыполняемоеДействие = "ПерейтиНаУровеньВниз"
		ИЛИ ВыполняемоеДействие = "ПерейтиКСледующейЯчейке"
		ИЛИ ВыполняемоеДействие = "ПерейтиКПредыдующейЯчейке"
		ИЛИ ВыполняемоеДействие = "ДобавитьСтроку"
		ИЛИ ВыполняемоеДействие = "УдалитьСтроку" Тогда
		
		Если КоличествоПовторений > 1 Тогда
		
			Если КоличествоПовторений = 2
				ИЛИ КоличествоПовторений = 3
				ИЛИ КоличествоПовторений = 4 Тогда
				
				ВозвращаемоеОписание = Формат(КоличествоПовторений, "ЧГ=0") + " " + НСтр("ru = 'раза'") + " " + ВозвращаемоеОписание;
				
			Иначе
				ВозвращаемоеОписание = Формат(КоличествоПовторений, "ЧГ=0") + " " + НСтр("ru = 'раз'") + " " + ВозвращаемоеОписание;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВыполняемоеДействие = "СортироватьПоКолонке" Тогда
		
		ВозвращаемоеОписание = НСтр("ru = 'Упорядочить таблицу по колонке %1'");
		ВозвращаемоеОписание = СтрЗаменить(ВозвращаемоеОписание, "%1", КолонкаСортировки);
		
	ИначеЕсли ВыполняемоеДействие = "СравнитьНесколькоСтрок" Тогда
		Если ВариантСравнения = "ВсюТаблицу" Тогда
			Если Краткое Тогда
				ВозвращаемоеОписание = НСтр("ru = 'Сравнить всю таблицу с эталоном'");
			Иначе
				ВозвращаемоеОписание = НСтр("ru = 'Сравнить всю таблицу (не более первых 100 строк) с эталоном'");
			КонецЕсли;
		Иначе
			Если Краткое Тогда
				ВозвращаемоеОписание = НСтр("ru = 'Сравнить выбранный диапазон строк таблицы с эталоном'");
			Иначе
				ВозвращаемоеОписание = НСтр("ru = 'Сравнить выбранный диапазон строк таблицы с эталоном:'");
				
				Если ПерваяСтрока = "Первая" Тогда
					ВозвращаемоеОписание = ВозвращаемоеОписание + " " + НСтр("ru = 'с первой строки'");
				Иначе
					ВозвращаемоеОписание = ВозвращаемоеОписание + " " + НСтр("ru = 'с текущей строки'");
				КонецЕсли;
				
				Если ПоследняяСтрока = "КонецТаблицы" Тогда
					ВозвращаемоеОписание = ВозвращаемоеОписание + " " + НСтр("ru = 'до конца таблицы, но не более 100 строк'");
				Иначе
					ВозвращаемоеОписание = ВозвращаемоеОписание + " " + Формат(КоличествоСтрок, "ЧГ=0") + " " + НСтр("ru = 'строк'");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Краткое Тогда
			ВозвращаемоеОписание = ВозвращаемоеОписание + Символы.ПС + НСтр("ru = 'Сравнение выполнить по колонкам:'");
			
			ПерваяКолонка = Истина;
			Для каждого ЭлементКолонки Из СписокКолонок Цикл
				Если НЕ ЭлементКолонки.Пометка Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПерваяКолонка Тогда
					ПерваяКолонка = Ложь;
				Иначе
					ВозвращаемоеОписание = ВозвращаемоеОписание + ",";
				КонецЕсли;
				
				ВозвращаемоеОписание = ВозвращаемоеОписание + " " + ЭлементКолонки.Представление;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если    ВыполняемоеДействие = "ПерейтиКСледующейСтроке"
		ИЛИ ВыполняемоеДействие = "ПерейтиКПредыдущейСтроке"
		ИЛИ ВыполняемоеДействие = "ПерейтиВНачалоТаблицы"
		ИЛИ ВыполняемоеДействие = "ПерейтиВКонецТаблицы" Тогда
		
		Если ВыполнитьСНажатойКнопкойШифт Тогда
			
			ВозвращаемоеОписание = ВозвращаемоеОписание + " " + НСтр("ru = 'выполнить в режиме выделения строк'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеОписание;

	
КонецФункции

&НаКлиенте
Процедура СцТ_ОбновитьНаименование_НаКлиенте(Принудительно = Ложь)
	
	Если НЕ НаименованиеШагаИзмененоВручную ИЛИ Принудительно Тогда
		ДШ_Наименование = СцТ_СформироватьОписаниеШага_НаКлиенте(Истина);
	КонецЕсли;
	
	Если Принудительно Тогда
		НаименованиеШагаИзмененоВручную = Ложь;
		Модифицированность = Истина;
		// В остальных случаях менять модифицированность не нужно,
		// так как ее должно изменить изменение другого элемента формы
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСДеревомЗначения

// Возвращает значение заданного поля в дереве данных
//
// Параметры
//	ДерЗнач              - дерево с данными в котором ведется поиск
//	ИмяПараметра         - имя искомого параметра
//	ЕслиНеНайдено        - что вернуть, если значение не найдено
//	ВозвращаемыйРеквизит - имя колонки, которую нужно вернуть
//	Рекурсивно           - признак рекурсии
// Возвращаемое значение - значение нужного поля найденного узла
&НаСервереБезКонтекста
Функция СцТ_ЗначениеВДереве(
	ДерЗнач,
	ИмяПараметра,
	ЕслиНеНайдено = Неопределено,
	ВозвращаемыйРеквизит = "Значение",
	Рекурсивно = Истина)
	
	УзелЗначения = СцТ_НайтиУзелДереваФормы(ДерЗнач, "Имя", ИмяПараметра, Рекурсивно);
	Если УзелЗначения = Неопределено Тогда
		Возврат ЕслиНеНайдено;
	Иначе
		Возврат УзелЗначения[ВозвращаемыйРеквизит];
	КонецЕсли;
	
КонецФункции

// Поиск нужного узла в дереве данных
//
// Параметры
//	ДеревоФормы       - дерево, в котором ведется поиск
//	Реквизит          - имя поля в котором ведется поиск
//	ЗначениеРеквизита - значение в поле
//	Рекурсивно        - признак рекурсивного поиска
// Возвращаемое значение - найденный узел
&НаСервереБезКонтекста
Функция СцТ_НайтиУзелДереваФормы(
	ДеревоФормы,
	Реквизит,
	ЗначениеРеквизита,
	Рекурсивно = Ложь)
	
	Если ДеревоФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Узел Из ДеревоФормы.ПолучитьЭлементы() Цикл
		Если Узел[Реквизит] = ЗначениеРеквизита Тогда
			Возврат Узел;
		КонецЕсли;
		Если Рекурсивно Тогда
			НайденыйУзел = СцТ_НайтиУзелДереваФормы(Узел, Реквизит, ЗначениеРеквизита, Истина);
			Если НайденыйУзел <> Неопределено Тогда
				Возврат НайденыйУзел;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Заполнение дерева значения данными из структуры
//
// параметры
//	ДеревоФормы - заполняемое дерево
//	ДеревоСтруктур - структура с данными
&НаСервереБезКонтекста
Процедура СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоФормы, ДеревоСтруктур)
	
	СтрокиДереваФормы = ДеревоФормы.ПолучитьЭлементы();
	Для каждого СтрокаДереваСтруктур Из ДеревоСтруктур.ИСТЗ_Строки Цикл
		СтрокаДереваФормы = СтрокиДереваФормы.Добавить();
		Для каждого КлючЗначение Из СтрокаДереваСтруктур Цикл
			Если КлючЗначение.Ключ <> "ИСТЗ_Строки" Тогда
				СтрокаДереваФормы[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(СтрокаДереваФормы, СтрокаДереваСтруктур);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПреобразоватьЗначенияВДереве(ВеткаДерева, ДляОтображения = Истина)
	
	Для каждого СтрокаДерева Из ВеткаДерева.Строки Цикл
		
		Если ДляОтображения Тогда
			СтрокаДерева.Значение = ЗначениеИзСтрокиВнутр(СтрокаДерева.Значение);
		Иначе
			СтрокаДерева.Значение = ЗначениеВСтрокуВнутр(СтрокаДерева.Значение);
		КонецЕсли;
		
		ПреобразоватьЗначенияВДереве(СтрокаДерева, ДляОтображения);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Обновление картинок на закладках
// Вызывается посредством обработки ожидания, чтобы форма нормально закрывалась после редактирования
&НаКлиенте
Процедура СцТ_ОбновитьЗаголовкиЗакладок()
	
	Элементы.Страница_РедактируемоеОписание.Картинка = ?(
		ПустаяСтрока(ДШ_Описание),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Элементы.Страница_Комментарий.Картинка = ?(
		ПустаяСтрока(ДШ_Комментарий),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
КонецПроцедуры

// Формирование представление существующего шага
// параметры
// РодительскийШаг - указатель на данные родительского шага.
// НЕ может быть Неопределено
&НаКлиенте
Процедура ОтобразитьПредставлениеСуществующегоРодительскогоШага(РодительскийШаг)
	
	ПредставлениеГруппы = НСтр("ru = 'Шаг №%1 ""%2""'");
	ПредставлениеГруппы = СтрЗаменить(
		ПредставлениеГруппы,
		"%1",
		Формат(РодительскийШаг.НомерШага, "ЧГ=0"));
	
	ПредставлениеГруппы = СтрЗаменить(
		ПредставлениеГруппы,
		"%2",
		РодительскийШаг.Наименование);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюПеременнойОшибкиГрупповогоШага(УпрФорма)
	
	Если УпрФорма.ДействиеПриОшибке = "Остановить" Тогда
		УпрФорма.Элементы.СтраницыПеременнойОшибки.ТекущаяСтраница = УпрФорма.Элементы.СтраницыПеременнойОшибки_Пустая;
	Иначе
		УпрФорма.Элементы.СтраницыПеременнойОшибки.ТекущаяСтраница = УпрФорма.Элементы.СтраницыПеременнойОшибки_Заполненная;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПользовательскоеОписание()
	
	ТекстОписания = ДШ_Описание;
	
	Если НЕ ДШ_СкрытьАвтоописание Тогда
		ДШ_Автоописание = СцТ_СформироватьОписаниеШага_НаКлиенте();
		ТекстОписания = СцТ_ГлавнаяФорма.СцТ_ДобавитьПодстроку(ТекстОписания, ДШ_Автоописание, Символы.ПС);
	КонецЕсли;
	
	ПользовательскоеОписание = ТекстОписания;
	
КонецПроцедуры

// Получение контейнера тестируемого приложения
// Привязка
//
&НаКлиенте
Процедура СцТ_ПолучитьИнтерактивныйКонтейнер()
	
	// Так как шаг может быть еще не записан, то удобно получить форму для родительского шага
	Если ОА_ЭтоНовый Тогда
		РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Иначе
		РодительУзла = ДанныеШага.ПолучитьРодителя();
	КонецЕсли;
	
	// Сообщения об ошибках показывать не нужно, так как редактирование шага может
	// выполняться без использования тестируемой формы
	ОписаниеОшибкиПолученияКонтейнера = "";
	ИнтерактивныйКонтейнер = СцТ_ГлавнаяФорма.СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(
		РодительУзла,
		ОписаниеОшибкиПолученияКонтейнера,
		Истина);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибкиПолученияКонтейнера) Тогда
		ИнтерактивныйКонтейнер = Неопределено;
		//ПоказатьПредупреждение(, СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(ОписаниеОшибкиПолученияКонтейнера));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИнтерактивныйКонтейнер) <> Тип("ТестируемаяТаблицаФормы") Тогда
		ИнтерактивныйКонтейнер = Неопределено;
		//ТП = НСтр("ru = 'Не найдена тестируемая форма'");
		//ПоказатьПредупреждение(, ТП);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюНаСтранице_ДействиеСТаблицей(УпрФорма)
	
	Если    УпрФорма.ВыполняемоеДействие = "ПерейтиКСледующейСтроке"
		ИЛИ УпрФорма.ВыполняемоеДействие = "ПерейтиКПредыдущейСтроке"
		ИЛИ УпрФорма.ВыполняемоеДействие = "ПерейтиНаУровеньВверх"
		ИЛИ УпрФорма.ВыполняемоеДействие = "ПерейтиНаУровеньВниз"
		ИЛИ УпрФорма.ВыполняемоеДействие = "ПерейтиКСледующейЯчейке"
		ИЛИ УпрФорма.ВыполняемоеДействие = "ПерейтиКПредыдующейЯчейке"
		ИЛИ УпрФорма.ВыполняемоеДействие = "ДобавитьСтроку"
		ИЛИ УпрФорма.ВыполняемоеДействие = "УдалитьСтроку" Тогда
		
		УпрФорма.Элементы.СтраницыУточненияДействияДляТаблицы.ТекущаяСтраница = УпрФорма.Элементы.СтраницаКоличестваПовторений;
		
	ИначеЕсли УпрФорма.ВыполняемоеДействие = "СортироватьПоКолонке" Тогда
		
		УпрФорма.Элементы.СтраницыУточненияДействияДляТаблицы.ТекущаяСтраница = УпрФорма.Элементы.СтраницаКолонкиСортировки;
		
	Иначе
		УпрФорма.Элементы.СтраницыУточненияДействияДляТаблицы.ТекущаяСтраница = УпрФорма.Элементы.СтраницаПустаяСтраница;
		
	КонецЕсли;
	
	
	Если    УпрФорма.ВыполняемоеДействие = "ПерейтиКСледующейСтроке"
		ИЛИ УпрФорма.ВыполняемоеДействие = "ПерейтиКПредыдущейСтроке"
		ИЛИ УпрФорма.ВыполняемоеДействие = "ПерейтиВНачалоТаблицы"
		ИЛИ УпрФорма.ВыполняемоеДействие = "ПерейтиВКонецТаблицы" Тогда
		
		УпрФорма.Элементы.СтраницыНастройкиШага.ТекущаяСтраница = УпрФорма.Элементы.СтраницыНастройкиШага_Шифт;
		
	ИначеЕсли УпрФорма.ВыполняемоеДействие = "СравнитьНесколькоСтрок" Тогда
		
		УпрФорма.Элементы.СтраницыНастройкиШага.ТекущаяСтраница = УпрФорма.Элементы.СтраницыНастройкиШага_СравнениеСтрок;
		
		УстановитьДоступностьНастройкиСтрок(УпрФорма);
		
	Иначе
		УпрФорма.Элементы.СтраницыНастройкиШага.ТекущаяСтраница = УпрФорма.Элементы.СтраницыНастройкиШага_ПустаяСтраница;
	КонецЕсли;
	
КонецПроцедуры

// Вывод сообщения пользователю
//
// Параметры
// ТекстСообщения - отображаемый текст
// ПолеДанных - поле, которое должно получить фокус
&НаКлиенте
Процедура СцТ_СообщитьПользователю(ТекстСообщения, Отказ = Неопределено, ПолеДанных = "")
	
	Отказ = Истина;
	Если ПустаяСтрока(ПолеДанных) Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле  = ПолеДанных;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СцТ_ПодготовитьДанныеДляВизуальногоСравненияНесколькихСтрокТаблиц_НаСервере()
	
	УзелТестируемойТаблицы = СцТ_НайтиУзелДереваФормы(
		ДеревоЗначения,
		"Имя",
		"ДанныеТаблицыДляВизуальногоСравнения");
		
	УзелЭталоннойТаблицы = СцТ_НайтиУзелДереваФормы(
		ДеревоЗначения,
		"Имя",
		"ДанныеТаблицы");
	
	ЭталоннаяТаблица = Новый ТаблицаЗначений;
	
	МассивИсключений    = Новый Массив;
	МассивКлючевыхПолей = Новый Массив;
	
	Для каждого ЭлементСписка Из СписокКолонок Цикл
		ЭталоннаяТаблица.Колонки.Добавить(ЭлементСписка.Значение,, ЭлементСписка.Представление);
		Если НЕ ЭлементСписка.Пометка Тогда
			МассивИсключений.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТестируемаяТаблица = ЭталоннаяТаблица.Скопировать();
	
	ЗаполнитьТЗпоДаннымУзлаДерева(УзелЭталоннойТаблицы, ЭталоннаяТаблица);
	ЗаполнитьТЗпоДаннымУзлаДерева(УзелТестируемойТаблицы, ТестируемаяТаблица);
	
	АдресЭталоннойТЗ = ПоместитьВоВременноеХранилище(ЭталоннаяТаблица    , Новый УникальныйИдентификатор);
	АдресТестовойТЗ    = ПоместитьВоВременноеХранилище(ТестируемаяТаблица, Новый УникальныйИдентификатор);
	
	СтруктураПодготовленныхДанных = Новый Структура;
	СтруктураПодготовленныхДанных.Вставить("АдресЭталоннойТЗ"   , АдресЭталоннойТЗ);
	СтруктураПодготовленныхДанных.Вставить("АдресТестовойТЗ"    , АдресТестовойТЗ);
	СтруктураПодготовленныхДанных.Вставить("МассивИсключений"   , МассивИсключений);
	СтруктураПодготовленныхДанных.Вставить("МассивКлючевыхПолей", МассивКлючевыхПолей);
	СтруктураПодготовленныхДанных.Вставить("ТипОбъекта"         , "ТаблицаФормы");
	СтруктураПодготовленныхДанных.Вставить("ИмяТаблицы"         , "");
	
	СтруктураПодготовленныхДанных.Вставить("НеОтображатьТочностьДат", Истина);
	СтруктураПодготовленныхДанных.Вставить("БезСохраненияИзменений" , Истина);
	
	Возврат СтруктураПодготовленныхДанных;
	
КонецФункции

// Обновление описания шага
//
// Параметры
// ОбновитьНаименование - признак, что нужно обновить еще и наименование
&НаКлиенте
Процедура СцТ_ОбновитьОписаниеШага_НаКлиенте()
	
	ДШ_Автоописание = СцТ_СформироватьОписаниеШага_НаКлиенте();
	
	ПользовательскоеОписание = ДШ_Описание;
	
	Если НЕ ДШ_СкрытьАвтоописание И НЕ ПустаяСтрока(ДШ_Автоописание) Тогда
		Если НЕ ПустаяСтрока(ПользовательскоеОписание) Тогда
			ПользовательскоеОписание = ПользовательскоеОписание + Символы.ПС;
		КонецЕсли;
		ПользовательскоеОписание = ПользовательскоеОписание + ДШ_Автоописание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВеткуДереваЗначенийДаннымиИзТаблицы(УзелТаблицы, ОбновлятьКолонки = Истина)
	
	#Если Не ВебКлиент Тогда
		
	ОписаниеОшибкиПолученияКонтейнера = "";
	
	СцТ_ПолучитьИнтерактивныйКонтейнер();
	
	Если ИнтерактивныйКонтейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТестируемаяТаблицаФормы = ИнтерактивныйКонтейнер;
	
	Если НЕ ПустаяСтрока(ОписаниеОшибкиПолученияКонтейнера) Тогда
		ТестируемаяТаблицаФормы = Неопределено;
		ПоказатьПредупреждение(, СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(ОписаниеОшибкиПолученияКонтейнера));
		Возврат;
	КонецЕсли;
	
	Попытка
		ТестируемаяТаблицаФормы.Активизировать();
	Исключение
		ТекстПредупреждения = НСтр("ru = 'Не удалось активизировать таблицу на форме'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецПопытки;
	
	// Определяем количество колонок
	ПодчиненныеОбъекты = ТестируемаяТаблицаФормы.НайтиОбъекты(Тип("ТестируемоеПолеФормы"));
	
	Если ОбновлятьКолонки Тогда
		Ном = 0;
		Для каждого ПодчиненныйОбъект Из ПодчиненныеОбъекты Цикл
			УчтеннаяКолонка = СписокКолонок.НайтиПоЗначению(ПодчиненныйОбъект.Имя);
			Если УчтеннаяКолонка = Неопределено Тогда
				// вставляем
				УчтеннаяКолонка = СписокКолонок.Вставить(Ном, ПодчиненныйОбъект.Имя, ПодчиненныйОбъект.ТекстЗаголовка, Истина);
			Иначе
				УчтеннаяКолонка.Представление = ПодчиненныйОбъект.ТекстЗаголовка;
				Индекс = СписокКолонок.Индекс(УчтеннаяКолонка);
				Если Индекс <> Ном Тогда
					СписокКолонок.Сдвинуть(УчтеннаяКолонка, Ном - Индекс);
				КонецЕсли;
			КонецЕсли;
			
			Ном = Ном + 1;
		КонецЦикла;
		
		КК = СписокКолонок.Количество();
		Для ОбратныйИндекс = 1 По КК Цикл
			Индекс = КК - ОбратныйИндекс;
			Если Индекс >= Ном Тогда
				СписокКолонок.Удалить(Индекс);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	
	// Запоминание текущей строки
	ОписаниеСтроки = Новый Соответствие;
	Для каждого ЭлементСписка Из СписокКолонок Цикл
		ЯчейкаТаблицы = ТестируемаяТаблицаФормы.НайтиОбъект(Тип("ТестируемоеПолеФормы"),, ЭлементСписка.Значение);
		Если ЯчейкаТаблицы = Неопределено Тогда
			Продолжить;
		Иначе
			Попытка
				Если ТестируемаяТаблицаФормы.ТекущийРежимРедактирование() ИЛИ ЯчейкаТаблицы.Вид = ВидПоляФормы.ПолеФлажка Тогда
					Попытка
						ЯчейкаТаблицы.Активизировать();
						ЗначениеЯчейки = ЯчейкаТаблицы.ПолучитьТекстРедактирования();
					Исключение
						Продолжить;
					КонецПопытки;
				Иначе
					ЗначениеЯчейки = ТестируемаяТаблицаФормы.ПолучитьТекстЯчейки(ЯчейкаТаблицы.Имя);
				КонецЕсли;
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		ОписаниеСтроки.Вставить(ЭлементСписка.Представление, ЗначениеЯчейки);
	КонецЦикла;
	
	Если ВариантСравнения = "ВсюТаблицу" ИЛИ ВариантСравнения = "ЗаданныйДиапазон" И ПерваяСтрока = "Первая" Тогда
		Пока Истина Цикл
			Попытка
				ТестируемаяТаблицаФормы.ПерейтиКПервойСтроке();
			Исключение
			КонецПопытки;
			
			Попытка
				ТестируемаяТаблицаФормы.ПерейтиНаУровеньВверх();
			Исключение
				Прервать;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если ПоследняяСтрока = "ЗаданноеКоличество" Тогда
		КС = КоличествоСтрок;
	Иначе
		КС = 100;
	КонецЕсли;
	
	УзелТаблицы.ПолучитьЭлементы().Очистить();
	
	Для Итератор = 1 По КС Цикл
		
		УзелСтроки = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			УзелТаблицы,
			"УзелСтроки" + Формат(Итератор, "ЧГ=0"),
			Итератор);
		
		Для каждого ЭлементСписка Из СписокКолонок Цикл
			ЯчейкаТаблицы = ТестируемаяТаблицаФормы.НайтиОбъект(Тип("ТестируемоеПолеФормы"),, ЭлементСписка.Значение);
			Если ЯчейкаТаблицы = Неопределено Тогда
				ЗначениеЯчейки = "";
			Иначе
				Попытка
					Если ТестируемаяТаблицаФормы.ТекущийРежимРедактирование() ИЛИ ЯчейкаТаблицы.Вид = ВидПоляФормы.ПолеФлажка Тогда
						Попытка
							ЯчейкаТаблицы.Активизировать();
							ЗначениеЯчейки = ЯчейкаТаблицы.ПолучитьТекстРедактирования();
						Исключение
							ЗначениеЯчейки = "";
						КонецПопытки;
					Иначе
						ЗначениеЯчейки = ТестируемаяТаблицаФормы.ПолучитьТекстЯчейки(ЯчейкаТаблицы.Имя);
					КонецЕсли;
				Исключение
					ЗначениеЯчейки = "";
				КонецПопытки;
			КонецЕсли;
			
			СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
				УзелСтроки,
				ЭлементСписка.Значение,
				ЗначениеЯчейки);
		КонецЦикла;
		
		// Выход из цикла будет выполнен в том числе и при достижении конца таблицы
		Попытка
			ТестируемаяТаблицаФормы.ПерейтиКСледующейСтроке();
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	// Возвращение текущей строки
	Попытка
		ПереходВыполнен = ТестируемаяТаблицаФормы.ПерейтиКСтроке(ОписаниеСтроки, НаправлениеПереходаКСтроке.Вверх);
	Исключение
		ПереходВыполнен = Ложь;
	КонецПопытки;
	
	Если НЕ ПереходВыполнен Тогда
		Попытка
			ТестируемаяТаблицаФормы.ПерейтиКСтроке(ОписаниеСтроки, НаправлениеПереходаКСтроке.Вниз);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры



#КонецОбласти

#КонецОбласти

