#Область Перемнные

&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	АдресДереваМакрошагов                 = Параметры.АдресДереваМакрошагов;
	АдресДереваМакрошаговДляИнициализации = Параметры.АдресДереваМакрошаговДляИнициализации;
	ПутьКФормам                           = Параметры.ПутьКФормам;
	АдресДД                               = Параметры.АдресЗагружаемогоФайла;
	
	ЭтаОбработка        = РеквизитФормыВЗначение("Объект");
	
	ЗагрузитьИзФайла(АдресДД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы


#КонецОбласти


#Область ОбработчикиКоманд


#КонецОбласти


#Область ДополнительныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьИзФайла(АдресДД)
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресДД);
	
	ИмяВременногофайла = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		ДвоичныеДанныеФайла.Записать(ИмяВременногофайла);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'не удалось создать временный файл ('")
			+ ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
	// Чтение данных файла
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяВременногофайла);
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'ошибка чтения файла ('")
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ ")";
		Возврат;
	КонецПопытки;
	
	// Чтение схемы XSD
	Попытка
		
		// Чтение схемы XSD. Начало
		МакетСхемы = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаМакрошагов");
		ТекстСхемы = МакетСхемы.ПолучитьТекст();
		
		ЧтениеСхХМЛ = Новый ЧтениеXML;
		ЧтениеСхХМЛ.УстановитьСтроку(ТекстСхемы);
		
		ПостроительДОМ = Новый ПостроительDOM;
		ДокументДОМ = ПостроительДОМ.Прочитать(ЧтениеСхХМЛ);
		
		ПостроительСхемыХМЛ = Новый ПостроительСхемXML;
		СхемаХМЛ = ПостроительСхемыХМЛ.СоздатьСхемуXML(ДокументДОМ);
		
		НаборСхемХМЛ = Новый НаборСхемXML;
		НаборСхемХМЛ.Добавить(СхемаХМЛ);
		
		ФабрикаПакета = Новый ФабрикаXDTO(НаборСхемХМЛ);
		СериализаторПакета = Новый СериализаторXDTO(ФабрикаПакета);
		ЧтениеСхХМЛ.Закрыть();
		// Чтение схемы XSD. Конец
		
		// Чтение данных
		ТипДанныхХМЛ = ПолучитьXMLТип(ЧтениеXML);
		Если ТипЗнч(ТипДанныхХМЛ) = Тип("ТипДанныхXML")
				И ТипДанныхХМЛ.URIПространстваИмен="http://v8.1c.ru/stest/extforms"
				И ТипДанныхХМЛ.ИмяТипа="СоставМакрошагов" Тогда
			ОбъектХДТО = ФабрикаПакета.ПрочитатьXML(
				ЧтениеXML, ФабрикаПакета.Тип("http://v8.1c.ru/stest/extforms", "СоставМакрошагов"));
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'неверный формат данных файла.'");
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектХДТО) <> Тип("ОбъектXDTO") Тогда
			СообщениеОбОшибке = НСтр("ru = 'неверный формат данных файла.'");
			Возврат;
		Иначе
			Если ОбъектХДТО.Тип().URIПространстваИмен <> "http://v8.1c.ru/stest/extforms"
					ИЛИ ОбъектХДТО.Тип().Имя <> "СоставМакрошагов" Тогда
				СообщениеОбОшибке = 
					НСтр("ru = 'неверный формат данных файла (неверный URI пространства имен ""%1"").'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%1", ОбъектХДТО.Тип().URIПространстваИмен);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Добавление содержимого файла в таблицу
		
		Если ТипЗнч(ОбъектХДТО.Макрошаги.БлокСценарияСтрока) = Тип("СписокXDTO") Тогда
			
			Для каждого ТекущаяСтрока Из ОбъектХДТО.Макрошаги.БлокСценарияСтрока Цикл
				
				НоваяСтрока = Список.Добавить();
				
				НоваяСтрока.Добавить      = Истина;
				НоваяСтрока.Имя           = ТекущаяСтрока.Наименование;
				НоваяСтрока.Идентификатор = ТекущаяСтрока.УИШ;
				
			КонецЦикла;
			
			Список.Сортировать("Имя");
			
		КонецЕсли;
		
		ЗаполнитьПоляТаблицыПоУмолчанию();
		
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'возникло необрабатываемое исключение ('")
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + ")";
		Возврат;
	КонецПопытки;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоляТаблицыПоУмолчанию()
	
	лкДеревоМакрошагов = ПолучитьИзВременногоХранилища(АдресДереваМакрошагов);
	
	Для каждого СтрокаТабл Из Список Цикл
		
		// Поиск уже существующих строк
		СуществующаяСтрока = лкДеревоМакрошагов.Строки.Найти(СтрокаТабл.Идентификатор, "УИШ");
		
		Если СуществующаяСтрока = Неопределено Тогда
			СтрокаТабл.Заменить         = Ложь;
			СтрокаТабл.УжеСуществует    = Ложь;
			СтрокаТабл.ИмяСуществующего = "";
			
			ПодобратьУникальноеИмя(СтрокаТабл, лкДеревоМакрошагов);
			
		Иначе
			СтрокаТабл.Заменить         = Истина;
			СтрокаТабл.УжеСуществует    = Истина;
			СтрокаТабл.ИмяСуществующего = СуществующаяСтрока.Наименование;
			Если СтрокаТабл.Имя = СуществующаяСтрока.Наименование Тогда
				СтрокаТабл.НовоеИмя = "";
			Иначе
				СтрокаТабл.НовоеИмя = СтрокаТабл.ИмяСуществующего;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьУникальноеИмя(СтрокаТабл, лкДеревоМакрошагов)
	
	// Проверка уникальности имени
	Итератор = 0;
	БазаНаименования = СтрокаТабл.Имя;
	НаименованиеМакрошага = БазаНаименования;
	СтрокаТабл.ИмяНеУникально = Ложь;
	
	Пока лкДеревоМакрошагов.Строки.Найти(НаименованиеМакрошага, "Наименование") <> Неопределено Цикл
		Если Итератор = 0 Тогда
			СтрокаТабл.ИмяНеУникально = Истина;
		КонецЕсли;
		Итератор = Итератор + 1;
		НаименованиеМакрошага = БазаНаименования + НСтр("ru = ' (Копия '") + Строка(Итератор) + ")";
	КонецЦикла;
	
	Если СтрокаТабл.ИмяНеУникально Тогда
		СтрокаТабл.НовоеИмя = НаименованиеМакрошага;
	Иначе
		СтрокаТабл.НовоеИмя = "";
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Оформление неактивных
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Список");

	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Добавить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(153,153,153));
	ЭлементОформления.Использование = Истина;
	
	//// Оформление возможности замены
	//ЭлементОформления = УсловноеОформление.Элементы.Добавить();

	//ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Список.Заменить");

	//ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.УжеСуществует");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Ложь;

	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//ЭлементОформления.Использование = Истина;
	
	

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элементы.Список.ТекущиеДанные;
	
	Элементы.СписокЗаменить.ТолькоПросмотр = НЕ ДанныеСтроки.УжеСуществует;
	Элементы.СписокНовоеИмя.ТолькоПросмотр = (ДанныеСтроки.УжеСуществует И ДанныеСтроки.Заменить);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаменитьПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Список.ТекущиеДанные;
	Если ДанныеСтроки.УжеСуществует И ДанныеСтроки.Заменить Тогда
		Элементы.СписокНовоеИмя.ТолькоПросмотр = Истина;
		// Установка имени по умолчанию для существующего
		Если ДанныеСтроки.Имя = ДанныеСтроки.ИмяСуществующего Тогда
			ДанныеСтроки.НовоеИмя = "";
		Иначе
			ДанныеСтроки.НовоеИмя = ДанныеСтроки.ИмяСуществующего;
		КонецЕсли;
	Иначе
		Элементы.СписокНовоеИмя.ТолькоПросмотр = Ложь;
		
		ПодобратьУникальноеИмяНаСервере(Элементы.Список.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьУникальноеИмяНаСервере(ИдентификаторСтроки)
	
	ДанныеСтроки = Список.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ПодобратьУникальноеИмя(ДанныеСтроки, ПолучитьИзВременногоХранилища(АдресДереваМакрошагов));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтмеченные(Команда)
	
	МассивОтмеченных = Новый Массив;
	НомерСтроки = 0;
	Для каждого СтрТаблицы Из Список Цикл
		Если СтрТаблицы.Добавить Тогда
			СтруктураДобавления = Новый Структура;
			СтруктураДобавления.Вставить("Имя"          , СтрТаблицы.Имя);
			СтруктураДобавления.Вставить("Идентификатор", СтрТаблицы.Идентификатор);
			СтруктураДобавления.Вставить("Заменить"     , СтрТаблицы.Заменить);
			СтруктураДобавления.Вставить("НовоеИмя"     , СтрТаблицы.НовоеИмя);
			СтруктураДобавления.Вставить("УжеСуществует", СтрТаблицы.УжеСуществует);
			СтруктураДобавления.Вставить("НомерСтроки"  , Строка(НомерСтроки));

			
			МассивОтмеченных.Добавить(СтруктураДобавления);
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если ПроверитьУникальностьИменОтмеченных(МассивОтмеченных) Тогда
		Закрыть(МассивОтмеченных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИмя(Команда)
	
	ПодобратьУникальноеИмяНаСервере(Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры


&НаСервере
Функция ПроверитьУникальностьИменОтмеченных(МассивОтмеченных)
	
	ЕстьНеуникальные = Ложь;
	
	лкДеревоМакрошагов = ПолучитьИзВременногоХранилища(АдресДереваМакрошагов);
	
	Для каждого Структура Из МассивОтмеченных Цикл
		Если Структура.Заменить Тогда
			// Имя для замены отрабатывается программно - проверки не нужны
			Продолжить;
		Иначе
			Если ПустаяСтрока(Структура.НовоеИмя) Тогда
				ПроверяемоеИмя = Структура.Имя;
			Иначе
				ПроверяемоеИмя = Структура.НовоеИмя;
			КонецЕсли;
			
			НайденнаяСтрока = лкДеревоМакрошагов.Строки.Найти(ПроверяемоеИмя, "Наименование", Ложь);
			Если НайденнаяСтрока <> Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Имя ""%1"" уже содержится в сценарии, необходимо задать новое имя'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПроверяемоеИмя);
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ТекстСообщения;
				СообщениеПользователю.Поле = "Список[" + Структура.НомерСтроки + "].НовоеИмя";
				СообщениеПользователю.Сообщить();
				ЕстьНеуникальные = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат НЕ ЕстьНеуникальные;
	
КонецФункции

&НаКлиенте
Процедура ОтметитьВыделенные(Команда)
	
	Для каждого ИдентификаторСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Список.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.Добавить = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуВыделенных(Команда)
	
	Для каждого ИдентификаторСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Список.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.Добавить = Ложь;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти










