
#Если НЕ ВебКлиент Тогда
// Вебклиент не может выступать менеджером тестирования

#Область ПеременныеФормы

// Экспортная переменная для хранения указателя на основную форму обработки
&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

// Экспортная переменная для хранения указателя на форму
// с деревом шагов (либо главную форму, либо на форму макрошага)
&НаКлиенте
Перем ФормаШагов Экспорт;

// Указатель на форму Процедуры выполнения из которой был вызов
// макрошага
&НаКлиенте
Перем ФормаРодительскогоПроцесса Экспорт;

// Указатель на шаг вызова макрошага
&НаКлиенте
Перем ШагРодительскогоПроцесса Экспорт;

// Переменная для хранения остатка времени ожидания
// для шага Пауза
&НаКлиенте
Перем ВремяОжиданияОстаток;

// Для временного хранения данных шага при открытии формы
// макрошага, на время паузы
&НаКлиенте
Перем СохраненныеДанныеШага Экспорт;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимПрогона = Параметры.РежимПрогона;
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	КартинкаИнформация32 = Новый Картинка(ЭтаОбработка.ПолучитьМакет("КартинкаИнформация32"));
	
КонецПроцедуры

#КонецОбласти


#Область ОсновныеОбработчикиВыполнения

// Процедура подготовительных операций к выполнению шага
// В этой процедуре отрабатывается задержка перед выполнением шага,
// если она необходима, остановка выполнения и т.п.
&НаКлиенте
Процедура СцТ_ПодготовитьсяКВыполнениюШага() Экспорт
	
	Если ФормаШагов.СцТ_ИдентификаторТекущегоШагаСценария = Неопределено Тогда
		ФормаШагов.Элементы.ОстановитьВыполнение.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	// Проверка, что не инициирована остановка выполнения
	// Команда остановки может поступить или из управляющей конфигурации
	// Эту команду получит главная форма обработки
	// или из вызывающей формы посредством инициализации соответствующей команды
	
	ОстановкаИзКонфигурацииСТ = СцТ_ГлавнаяФорма.СцТ_ОстановленИзКонфигурацииСТ();
	// Проверка, что работа под управлением конфигурации, выполняется в процедуре
	Если СцТ_ГлавнаяФорма.СцТ_ОстановкаПоИнициативеПользователя ИЛИ ОстановкаИзКонфигурацииСТ Тогда
		
		Если СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "ПосредствомФайлов" Тогда
			ТекстСообщения = НСтр("ru = 'Выполнение сценария остановлено по инициативе пользователя'");
			СцТ_ГлавнаяФорма.СцТ_ИнформационноеСообщение("STOP", ТекстСообщения, "");
			СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "Отсутствует";
		КонецЕсли;
		
		Если ОстановкаИзКонфигурацииСТ Тогда
			ТекстОповещения =
				НСтр("ru = 'Выполнение сценария остановлено из управляющей конфигурации сценарного тестирования'");
		Иначе
			ТекстОповещения = НСтр("ru = 'Выполнение сценария остановлено'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Остановка сценария'"),, ТекстОповещения, КартинкаИнформация32);
		
		Возврат;
		
	КонецЕсли;
	
	// Получение данных текущего шага
	
	ТекущиеДанные = ФормаШагов.БлокСценария.НайтиПоИдентификатору(ФормаШагов.СцТ_ИдентификаторТекущегоШагаСценария);
	
	// Определение номера шага для отображения
	НомерТекШагаСтр = Формат(ТекущиеДанные.НомерШага, "ЧГ=0");
	
	// Отработка точек останова. Замечание: точку останова можно поставить и на неактивных шагах
	// При работе под управлением конфигурации СцТестирования точки останова игнорируются
	Если ТекущиеДанные.ТочкаОстанова И СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "Отсутствует" Тогда
		
		ФормаШагов.Элементы.ОстановитьВыполнение.Доступность = Ложь;
		
		Сигнал();
		
		//Если СцТ_ГлавнаяФорма.СцТ_ВыполнениеТеста = "АвтоматическийРежим" Тогда
		//	ТекстСообщенияВФайлПротокола = НСтр("ru = 'Выполнение сценария остановлено в точке останова на шаге №%1'");
		//	СцТ_ЗаписатьСообщениеВФайлПротокола(СтрЗаменить(ТекстСообщенияВФайлПротокола, "%1", НомерТекШагаСтр));
		//КонецЕсли;
		
		ТекстОповещения = НСтр("ru = 'Выполнение сценария остановлено в точке останова'");
		ПоказатьОповещениеПользователя(НСтр("ru = 'Остановка сценария'"),, ТекстОповещения, КартинкаИнформация32);
		Возврат;
		
	КонецЕсли;
	
	// Выполняются только активные шаги,
	// В другой базе выполняются только интерактивные шаги
	// Если есть ключ "Только шаги БЛ", то только шаги бизнес-логики
	Если НЕ ТекущиеДанные.Активность Тогда
		СцТ_ПерейтиНаСледующийШаг(ТекущиеДанные, Ложь);
		Возврат;
	ИначеЕсли (СцТ_ГлавнаяФорма.ДругаяИБ
			И (ТекущиеДанные.ТипШага = "АвтоГруппа"
			ИЛИ ТекущиеДанные.ТипШага = "Воспроизвести"
			ИЛИ ТекущиеДанные.ТипШага = "СравнитьСЭталоном"
			ИЛИ ТекущиеДанные.ТипШага = "СравнитьДвижения"
			ИЛИ ТекущиеДанные.ТипШага = "ЗаменаСсылки"
			ИЛИ ТекущиеДанные.ТипШага = "ВыполнитьПроцедуру"
			ИЛИ ТекущиеДанные.ТипШага = "ВыполнитьЗапрос" ))
		ИЛИ (СцТ_ГлавнаяФорма.СцТ_ДоступныйНаборШаговДляВыполнения = "ТолькоШагиБизнесЛогики"
		    И ТекущиеДанные.ТипШага <> "Группа"
			И ТекущиеДанные.ТипШага <> "АвтоГруппа"
			И ТекущиеДанные.ТипШага <> "Воспроизвести"
			И ТекущиеДанные.ТипШага <> "СравнитьСЭталоном"
			И ТекущиеДанные.ТипШага <> "СравнитьДвижения"
			И ТекущиеДанные.ТипШага <> "ЗаменаСсылки"
			И ТекущиеДанные.ТипШага <> "ВыполнитьПроцедуру"
			И ТекущиеДанные.ТипШага <> "ВыполнитьЗапрос") Тогда
			
		// в групы нужно входить, так как нет ограничения, что внутри группы не может быть
		// подчиненных групп другого типа
		СцТ_ПерейтиНаСледующийШаг(ТекущиеДанные);
		Возврат;
	КонецЕсли;
	
	// Ручное выполнений шагов
	Если (ТекущиеДанные.ТипШага = "ВыполнитьВРучную"
		ИЛИ ТекущиеДанные.ВыполнитьВручную = 1)
		И ТекущиеДанные.ТипШага <> "ИнтерактивнаяАвтоГруппа" Тогда
		
		Сигнал();
		
		Если СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "ПосредствомФайлов" Тогда
			ТекстСообщения = НСтр("ru = 'Шаг №%1 нужно выполнить вручную. Автоматическое выполнение сценария остановлено'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", НомерТекШагаСтр);
			СцТ_ГлавнаяФорма.СцТ_ИнформационноеСообщение("STOP", ТекстСообщения, "");
			СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "Отсутствует"
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// При необходимости запуск тестируемого приложения
	ЭтоИнтерактивныйШаг = СцТ_ЭтоИнтерактивныйШаг(ТекущиеДанные.ТипШага);
	
	Если ЭтоИнтерактивныйШаг
			И СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		
		Если СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "ПосредствомФайлов" Тогда
			
			// При работе из базы СТ в автоматическом режиме при
			// необходимости запускается тестируемое приложение.
			АвтозапускТестируемогоПриложения(ТекущиеДанные, Истина);
			
		Иначе
			// Запуск тестируемого приложения после вопроса пользователю
			
			ТекстВопроса = НСтр("ru = 'Нет информации о тестируемом приложении. Запустить тестируемое приложение?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОбАвтоматическомПодключении", ЭтотОбъект, ТекущиеДанные);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	Иначе
		ПродолжениеПодготовкиКВыполнениюШага(ТекущиеДанные);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбАвтоматическомПодключении(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		// СД - структура данных
		СД = Новый Структура;
		СД.Вставить("ТекущиеДанные", ТекущиеДанные);
		СД.Вставить("УпрФорма"     , ЭтотОбъект);
		
		СцТ_ГлавнаяФорма.СцТ_ТестируемоеПриложение(СД);
		
	Иначе
		// Ничего не делается
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозапускТестируемогоПриложения(ТекущиеДанные, ВыдатьИнформационноеСообщение = Истина)
	
	СообщениеОбОшибке = СцТ_ЗапуститьТестируемоеПриложениеАвтоматически();
	
	Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
		СцТ_ГлавнаяФорма.СцТ_ИнформационноеСообщение("ERR", СообщениеОбОшибке, "");
		СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "Отсутствует";
		//СцТ_ПоказатьСообщение_НаКлиенте(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		// Продолжение выполнения невозможно
		// в сообщении конфигурации СТ уже содержится описание причины
		// ошибки запуска тестируемого приложения
		Возврат;
	КонецЕсли;
	
	Если ВыдатьИнформационноеСообщение Тогда
		СцТ_ГлавнаяФорма.СцТ_ИнформационноеСообщение("OK", НСтр("ru = 'Тестируемое приложение запущено'"), "");
	КонецЕсли;
	
	ПродолжениеПодготовкиКВыполнениюШага(ТекущиеДанные);
	
КонецПроцедуры



&НаКлиенте
Процедура ПродолжениеПодготовкиКВыполнениюШага(ТекущиеДанные) Экспорт
	
		// Обработка паузы
	Если ТекущиеДанные.ТипШага = "Пауза" Тогда
		
		УзелВремениПаузы = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(
			ТекущиеДанные.Значение,
			"Имя",
			"ПродолжительностьПаузы");
		
		Если УзелВремениПаузы <> Неопределено И УзелВремениПаузы.Значение > 0 Тогда
			СцТ_ВыполнитьШаг_Пауза(УзелВремениПаузы.Значение);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Замер производительности только если он включен и только в режиме выполнения
	Если СцТ_ГлавнаяФорма.ВыполнятьЗамерПроизводительности И СцТ_ГлавнаяФорма.СцТ_РежимВыполнения Тогда
		Попытка
			СцТ_ГлавнаяФорма.СцТ_Контроллер.ОчиститьНакопленныеПоказателиПроизводительности();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Все предворительные операции выполнены - запуск шага
	СцТ_ВыполнитьТекущийШагТеста(ТекущиеДанные);
	
КонецПроцедуры


// Процедура - диспетчер для выполнения шага сценария
// В зависимости от типа действия вызывает соответствующий обработчик шага
// Параметры
// ТекущиеДанные - данные текущего шага
&НаКлиенте
Процедура СцТ_ВыполнитьТекущийШагТеста(ТекущиеДанные)
	
	ТекстОповещения           = "";
	ПризнакРучногоКомментария = Ложь;
	
	МассивИнфоСообщений = Новый Массив;
	
	// Оповещение управляющей конфигурации
	// Оповещение должно выдаться перед непосредственным выполнением шага
	Если СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "ПосредствомФайлов" Тогда
		ТекстСообщения = НСтр("ru = 'Выполнение шага №%1: %2'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(ТекущиеДанные.НомерШага));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТекущиеДанные.Наименование);
		СцТ_ГлавнаяФорма.СцТ_ИнформационноеСообщение("OK", ТекстСообщения, "");
		
	КонецЕсли;
	
	// Список значений, содержащий данные для визуального сравнения таблиц
	// при несовпадении данных в шагах "Сравнить с эталоном",
	// "Сравнить движения с эталоном"
	РазличияЭталонныхДанных = Неопределено;
	
	// Переменная для шага "Повторение"
	ПродолжатьЦикл = Ложь;
	
	Попытка
		
		Если ТекущиеДанные.ТипШага = "Комментарий" Тогда
			РезультатВыполненияШага = Истина;
			
		ИначеЕсли ТекущиеДанные.ТипШага = "Группа" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_Группа_НаКлиенте(
				ТекущиеДанные);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "АвтоГруппа" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_Группа_НаКлиенте(
				ТекущиеДанные);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "Воспроизвести" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ВоспроизвестиОбъект_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "СравнитьСЭталоном" Тогда
			РазличияЭталонныхДанных = Новый СписокЗначений;
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_СравнитьОбъектСЭталоном_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений,
				РазличияЭталонныхДанных);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "СравнитьДвижения" Тогда
			РазличияЭталонныхДанных = Новый СписокЗначений;
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_СверитьДвижениеДокумента_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений,
				РазличияЭталонныхДанных);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ВыполнитьПроцедуру" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ВыполнитьПроцедуру_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ВыполнитьЗапрос" Тогда
			РазличияЭталонныхДанных = Новый СписокЗначений;
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ВыполнитьЗапрос_НаКлиенте(
				ТекущиеДанные,
				РазличияЭталонныхДанных,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ЗаменаСсылки" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ЗаменаСсылки_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		// Выполнение интерактивных шагов
		
		ИначеЕсли ТекущиеДанные.ТипШага = "НажатьКнопкуКИ" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_НажатьКнопкуКИ_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ВыполнитьИнтерактивнуюКоманду" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ПерейтиПоНавигационнойСсылке_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ВыполнитьИнтерактивныйСкрипт" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ВыполнитьДействияЖурнала_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
		
		ИначеЕсли ТекущиеДанные.ТипШага = "ИнтерактивнаяАвтоГруппа" Тогда
			РезультатВыполненияШага = Истина;
			
		ИначеЕсли ТекущиеДанные.ТипШага = "НайтиФорму" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_НайтиФорму_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ПроверитьФорму" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ПроверитьФорму_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
		
		ИначеЕсли ТекущиеДанные.ТипШага = "НажатьКнопку" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_НажатьКнопку_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "НайтиЭлементФормы" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_НайтиЭлементФормы_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ЗаполнитьОдинРеквизитФормы"
			ИЛИ ТекущиеДанные.ТипШага = "ЗаполнитьКолонкуТаблицы" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ЗаполнитьОдинРеквизитФормы_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ЗаполнитьРеквизитыФормы"
			ИЛИ ТекущиеДанные.ТипШага = "ЗаполнитьСтрокуТаблицы" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ЗаполнитьРеквизитыФормы_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ПроверитьТабличныйДокумент" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ПроверитьТабличныйДокумент_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ЗакрытьКлиентскоеОкноФормы" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ЗакрытьКлиентскоеОкноФормы_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "АвтоГруппаТаблицаФормы" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_АвтоГруппаТаблицаФормы_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ДействиеСТаблицей" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ДействиеСТаблицей_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "НайтиСтрокуТаблицы" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_НайтиСтрокуТаблицы_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
				
		ИначеЕсли ТекущиеДанные.ТипШага = "ЗавершитьРаботуТестируемогоКлиента" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ЗавершитьРаботуТестируемогоКлиента_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений);
				
		ИначеЕсли ТекущиеДанные.ТипШага = "Пауза" Тогда
			РезультатВыполненияШага = Истина;
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ВыполнитьКлиентскуюПроцедуру" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ВыполнитьКлиентскуюПроцедуру(
				ТекущиеДанные,
				МассивИнфоСообщений);
				
		ИначеЕсли ТекущиеДанные.ТипШага = "Повторение" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_Повторение(
				ПродолжатьЦикл,
				ТекущиеДанные,
				МассивИнфоСообщений);
				
		ИначеЕсли ТекущиеДанные.ТипШага = "Условие" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_Условие(
				ПродолжатьЦикл,
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		ИначеЕсли ТекущиеДанные.ТипШага = "ВыполнитьМакрошаг" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ВыполнитьМакрошаг(
				ТекущиеДанные,
				МассивИнфоСообщений);
				
		ИначеЕсли ТекущиеДанные.ТипШага = "ПроверитьТекстОшибки" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ПроверитьТекстОшибки(
				ТекущиеДанные,
				МассивИнфоСообщений);
				
		ИначеЕсли ТекущиеДанные.ТипШага = "ВыбратьСообщениеПользователю" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ВыбратьСообщениеПользователю(
				ТекущиеДанные,
				МассивИнфоСообщений);
				
		ИначеЕсли ТекущиеДанные.ТипШага = "АвтоГруппаТабличныйДокумент" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_АвтогруппаТД(
				ТекущиеДанные,
				МассивИнфоСообщений);
				
		ИначеЕсли ТекущиеДанные.ТипШага = "ДействиеСТабДокументом" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ДействиеСТабДокументом(
				ТекущиеДанные,
				МассивИнфоСообщений);
				
		ИначеЕсли ТекущиеДанные.ТипШага = "ДействиеСЯчейкойТД" Тогда
			РезультатВыполненияШага = СцТ_ВыполнитьШаг_ДействиеСЯчейкойТД(
				ТекущиеДанные,
				МассивИнфоСообщений);
			
		Иначе
			
			РезультатВыполненияШага = Ложь;
			ТекстОповещения = НСтр("ru = 'Неизвестный тип шага ('") + ТекущиеДанные.ТипШага + ")";
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстОповещения);
			
		КонецЕсли;
		
	Исключение
		РезультатВыполненияШага = Ложь;
		
		ТекстОповещения = НСтр("ru = 'Ошибка при выполнении шага.'");
		
		ИнфОбОшибке = СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
		Если НЕ ПустаяСтрока(ИнфОбОшибке) Тогда
			ТекстОповещения = ТекстОповещения + "<br>" + ИнфОбОшибке;
		КонецЕсли;
		
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстОповещения);
	КонецПопытки;
	
	// Обработка ошибки в шаге с учетом действия при ошибке.
	Если НЕ РезультатВыполненияШага Тогда
		
		// Обработка выполняется только в шагах, в которых есть соответствующие настройки
		Если    ТекущиеДанные.ТипШага = "Воспроизвести"
			ИЛИ ТекущиеДанные.ТипШага = "СравнитьСЭталоном"
			ИЛИ ТекущиеДанные.ТипШага = "СравнитьДвижения"
			ИЛИ ТекущиеДанные.ТипШага = "ВыполнитьПроцедуру"
			ИЛИ ТекущиеДанные.ТипШага = "ВыполнитьЗапрос"
			ИЛИ ТекущиеДанные.ТипШага = "ЗаменаСсылки"
			ИЛИ ТекущиеДанные.ТипШага = "НажатьКнопкуКИ"
			ИЛИ ТекущиеДанные.ТипШага = "ВыполнитьИнтерактивнуюКоманду"
			ИЛИ ТекущиеДанные.ТипШага = "ВыполнитьИнтерактивныйСкрипт"
			ИЛИ ТекущиеДанные.ТипШага = "НайтиФорму"
			ИЛИ ТекущиеДанные.ТипШага = "ПроверитьФорму"
			ИЛИ ТекущиеДанные.ТипШага = "НажатьКнопку"
			ИЛИ ТекущиеДанные.ТипШага = "НайтиЭлементФормы"
			ИЛИ ТекущиеДанные.ТипШага = "ЗаполнитьОдинРеквизитФормы"
			ИЛИ ТекущиеДанные.ТипШага = "ЗаполнитьКолонкуТаблицы"
			ИЛИ ТекущиеДанные.ТипШага = "ЗаполнитьРеквизитыФормы"
			ИЛИ ТекущиеДанные.ТипШага = "ЗаполнитьСтрокуТаблицы"
			ИЛИ ТекущиеДанные.ТипШага = "ПроверитьТабличныйДокумент"
			ИЛИ ТекущиеДанные.ТипШага = "ДействиеСТаблицей"
			ИЛИ ТекущиеДанные.ТипШага = "НайтиСтрокуТаблицы"
			ИЛИ ТекущиеДанные.ТипШага = "ЗакрытьКлиентскоеОкноФормы"
			ИЛИ ТекущиеДанные.ТипШага = "ВыполнитьКлиентскуюПроцедуру"
			ИЛИ ТекущиеДанные.ТипШага = "ВыполнитьМакрошаг"
			ИЛИ ТекущиеДанные.ТипШага = "ПроверитьТекстОшибки"
			ИЛИ ТекущиеДанные.ТипШага = "ВыбратьСообщениеПользователю"
			ИЛИ ТекущиеДанные.ТипШага = "ДействиеСТабДокументом"
			ИЛИ ТекущиеДанные.ТипШага = "ДействиеСЯчейкойТД" Тогда
			
			ДействиеПриОшибке   = СцТ_ЗначениеВДереве(
				ТекущиеДанные.Значение,
				"ДействиеПриОшибке",
				"Остановить");
				
			ИмяПеременнойОшибки = СцТ_ЗначениеВДереве(
				ТекущиеДанные.Значение,
				"ПеременнаяПриОшибке",
				"");
				
			Если ДействиеПриОшибке = "Остановить" Тогда
				РезультатВыполненияШага = Ложь;
			Иначе
				// Продолжение выполнения при ошибке
				
				ТекстОповещения = НСтр("ru = 'Выполнение сценария продолжено со следующего шага'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстОповещения);
				
				РезультатВыполненияШага = Истина;
				
				Если НЕ ПустаяСтрока(ИмяПеременнойОшибки) Тогда
					// Переменная может быть не указана
					ИзменитьЗначениеГлобальногоПараметра(ИмяПеременнойОшибки, Ложь);
					
					ТекстОповещения = НСтр("ru = 'Результат выполнения шага сохранен в переменной %1'");
					ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", ИмяПеременнойОшибки);
					СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстОповещения);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заключительные операции
	ПоказателиПроизводительности = Неопределено;
	ЭтоИнтерактивныйШаг = СцТ_ЭтоИнтерактивныйШаг(ТекущиеДанные.ТипШага);
	// Регистрация замера производительности
	Если ЭтоИнтерактивныйШаг
		И СцТ_ГлавнаяФорма.ВыполнятьЗамерПроизводительности
		И СцТ_ГлавнаяФорма.СцТ_РежимВыполнения Тогда
		Попытка
			ПоказателиПроизводительности = СцТ_ГлавнаяФорма.СцТ_Контроллер.ПолучитьНакопленныеПоказателиПроизводительности(Истина);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	// Регистрация результатов в протоколе
	ВремяВыполненияШага = ТекущаяДата();
	
	СцТ_ЗарегистрироватьСообщениеВПротоколе_НаКлиенте(
		ТекущиеДанные,
		МассивИнфоСообщений,
		РезультатВыполненияШага,
		ПоказателиПроизводительности,
		ВремяВыполненияШага);
	
	Если РезультатВыполненияШага Тогда
		
		// Это успешное выполнение шага
		
		Если ТекущиеДанные.ТипШага = "ВыполнитьМакрошаг" Тогда
			// Переход к следующему шагу будет вызван из формы макрошага
			// А здесь остановка
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ТипШага = "Повторение" ИЛИ ТекущиеДанные.ТипШага = "Условие" Тогда
			// Значение переменной ПродолжатьЦикл определяет
			// какой раз выполняется вход в группу проверки условия
			СцТ_ПерейтиНаСледующийШаг(ТекущиеДанные, ПродолжатьЦикл);
			Возврат;
		КонецЕсли;
		
		СцТ_ПерейтиНаСледующийШаг(ТекущиеДанные);
		
	Иначе
		
		// При выполнении шага возникли проблемы
		
		// Попытка обработки ошибки в групповом шаге
		// и перехода к альтернативной группе
		ГрупповойШагСПризнакомПродолжения = Неопределено;
		Если ЕстьГруппаДляПродолжения(ГрупповойШагСПризнакомПродолжения, ТекущиеДанные) Тогда
			
			// Регистрация перехода в протоколе
			МассивИнфоСообщений = Новый Массив;
			ТекстОповещения = НСтр("ru = 'Найден родительский групповой шаг с признаком продолжения выполнения при ошибке'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстОповещения);
			
			СцТ_ЗарегистрироватьСообщениеВПротоколе_НаКлиенте(
				ГрупповойШагСПризнакомПродолжения,
				МассивИнфоСообщений,
				Истина,
				Неопределено,
				ВремяВыполненияШага);
			
			СцТ_ПерейтиНаСледующийШаг(ГрупповойШагСПризнакомПродолжения, Ложь);
			Возврат;
		КонецЕсли;
		
		// Переход к альтернативному выполнению автоматически не может быть найден - подготовка к остоновке выполнения
		
		Если СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "ПосредствомФайлов" Тогда
			
			ТекстСообщения = НСтр("ru = 'Ошибка при выполнении шага №%1. %2Подробнее см. в протоколе выполнения'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрЗаменить(Формат(ТекущиеДанные.НомерШага, "ЧРГ=''"), Символ(160), ""));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Символы.ПС);
			
			// Вывод управляющего сообщения в файл для конфигурации СцТ
			СцТ_ГлавнаяФорма.СцТ_ИнформационноеСообщение("ERR", ТекстСообщения, "");
			
			//// Сброс признака автоматического управления
			//СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "Отсутствует";
			
			// Выяснилось что при пакетном выполнении лучше закрывать приложение, так как оно мешается
			// особенно в случае с веб
			
			СцТ_ГлавнаяФорма.СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
			
		ИначеЕсли СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "Непосредственное" Тогда
			
			ТекстСообщения = НСтр("ru = 'Ошибка при выполнении шага №%1. %2Подробнее см. в протоколе выполнения'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Формат(ТекущиеДанные.НомерШага, "ЧГ=0"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Символы.ПС);
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Ошибка'"),, ТекстСообщения);
			
			СцТ_ГлавнаяФорма.СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
			
		Иначе
			// Это ручное управление обработкой - вывод информационного окна пользователю
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыОшибки", ЭтотОбъект, ДопПараметры);
			
			СцТ_ПоказатьСообщение_НаКлиенте(
				ТекущиеДанные,
				МассивИнфоСообщений,
				ПоказателиПроизводительности,
				ВремяВыполненияШага,
				РазличияЭталонныхДанных,
				ОбработчикОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Поиск и переход к следующему шагу сценария
//
// Параметры
// ПредыдущийШаг - данные предыдущего (выполненного) шага
// ВыполнятьПодчиненные - признак, дающий разрешение на выполнение подчиненных шагов
//                        в групповых шагах
&НаКлиенте
Процедура СцТ_ПерейтиНаСледующийШаг(
	ПредыдущийШаг,
	ВыполнятьПодчиненные = Истина,
	ВыполнитьСледующийШагПринудительно = Ложь) Экспорт
	
	// Установка отметки выполнения у негрупповых шагов
	Если    ПредыдущийШаг.ТипШага = "Группа"
		ИЛИ ПредыдущийШаг.ТипШага = "АвтоГруппа"
		ИЛИ ПредыдущийШаг.ТипШага = "ИнтерактивнаяАвтоГруппа"
		ИЛИ ПредыдущийШаг.ТипШага = "АвтоГруппаТаблицаФормы"
		ИЛИ (ПредыдущийШаг.ТипШага = "Повторение" И ВыполнятьПодчиненные) Тогда
		// В этих шагах отметка ставится по результатам выполнения подчинекнных шагов
		ПропуститьОтметку = Истина;
		
	ИначеЕсли ПредыдущийШаг.ТипШага = "Повторение" И НЕ ВыполнятьПодчиненные Тогда
		// группа повторения выполнена. Вынесено в отдельное условие для облегчения читаемости кода
		ПропуститьОтметку = Ложь;
		
	ИначеЕсли НЕ ПредыдущийШаг.Активность Тогда
		// у неактивных шагов отметка тоже не ставится
		ПропуститьОтметку = Истина;
		
	ИначеЕсли СцТ_ГлавнаяФорма.ДругаяИБ
		И  (ПредыдущийШаг.ТипШага = "Воспроизвести"
		ИЛИ ПредыдущийШаг.ТипШага = "СравнитьСЭталоном"
		ИЛИ ПредыдущийШаг.ТипШага = "СравнитьДвижения"
		ИЛИ ПредыдущийШаг.ТипШага = "ЗаменаСсылки"
		ИЛИ ПредыдущийШаг.ТипШага = "ВыполнитьПроцедуру"
		ИЛИ ПредыдущийШаг.ТипШага = "ВыполнитьЗапрос") Тогда
		// при выполнении только интерактивных шагов шаги бизнес-логики были пропущены
		ПропуститьОтметку = Истина;
		
	ИначеЕсли СцТ_ГлавнаяФорма.СцТ_ДоступныйНаборШаговДляВыполнения = "ТолькоШагиБизнесЛогики"
		И ПредыдущийШаг.ТипШага <> "Воспроизвести"
		И ПредыдущийШаг.ТипШага <> "СравнитьСЭталоном"
		И ПредыдущийШаг.ТипШага <> "СравнитьДвижения"
		И ПредыдущийШаг.ТипШага <> "ЗаменаСсылки"
		И ПредыдущийШаг.ТипШага <> "ВыполнитьПроцедуру"
		И ПредыдущийШаг.ТипШага <> "ВыполнитьЗапрос" Тогда
		// при выполнении шагов бизнес-логики выполняются только указанные типы шагов
		// остальные шаги были пропущены
		ПропуститьОтметку = Истина;
		
	Иначе
		// Все остальные шаги выполнялись
		ПропуститьОтметку = Ложь;
		
	КонецЕсли;
		
	Если НЕ ПропуститьОтметку Тогда
		ПредыдущийШаг.Выполнено = 1;
		
	КонецЕсли;
	
	ШагВходаВПроцедуру = ПредыдущийШаг;
	
	Если ПредыдущийШаг = Неопределено Тогда
		Если ФормаШагов.БлокСценария.ПолучитьЭлементы().Количество() = 0 Тогда
			СцТ_ВыполнениеТеста = "";
			ТекстОповещения = НСтр("ru='Не найдено ни одного шага в сценарии'");
			ПоказатьОповещениеПользователя(НСтр("ru = 'Выполнение невозможно...'"),, ТекстОповещения, КартинкаИнформация32);
			Возврат;
		Иначе
			СледующийШаг = ФормаШагов.БлокСценария.ПолучитьЭлементы()[0];
		КонецЕсли;
	Иначе
		// Возможны ситуации:
		// 1. Нужно войти в узел и выполнить первую подчиненную строку
		// 2. Нужно выполнить следующую строку
		// 3. Нужно выйти в родительский узел и перейти в следующую строку
		// 4. Во 2-м и 3-м случае может быть достигнут конец теста
		Если ВыполнятьПодчиненные
			И ПредыдущийШаг.ПолучитьЭлементы().Количество() > 0 Тогда
			
			СледующийШаг = ПредыдущийШаг.ПолучитьЭлементы()[0];
		Иначе
			Пока Истина Цикл
				
				// Очистка памяти от мусора
				Если ПредыдущийШаг.ТипШага = "ИнтерактивнаяАвтоГруппа" И СцТ_ГлавнаяФорма.СцТ_РежимВыполнения Тогда
					СцТ_ГлавнаяФорма.СцТ_ФормыТестируемогоПриложения.Удалить(ПредыдущийШаг.УИШ);
				КонецЕсли;
				
				Если ПредыдущийШаг.ТипШага = "АвтоГруппаТаблицаФормы" И СцТ_ГлавнаяФорма.СцТ_РежимВыполнения Тогда
					СцТ_ГлавнаяФорма.СцТ_ТаблицыТестируемогоПриложения.Удалить(ПредыдущийШаг.УИШ);
				КонецЕсли;
				//
				
				РодительскийУзел = ПредыдущийШаг.ПолучитьРодителя();
				Если РодительскийУзел = Неопределено Тогда
					РодительскийУзел = ФормаШагов.БлокСценария;
				КонецЕсли;
				
				ИндексУзла           = РодительскийУзел.ПолучитьЭлементы().Индекс(ПредыдущийШаг);
				КоличествоСтрокВУзле = РодительскийУзел.ПолучитьЭлементы().Количество();
				
				Если ИндексУзла < (КоличествоСтрокВУзле - 1) Тогда
					// Т.е. это не последняя строка
					СледующийШаг = РодительскийУзел.ПолучитьЭлементы()[ИндексУзла + 1];
					
					
					Если НЕ СледующийШаг.Активность
						И СцТ_ГлавнаяФорма.СцТ_ВыполнениеТеста = "АвтоматическийРежим" Тогда
						
						ПредыдущийШаг = СледующийШаг;
						Продолжить;
						
					КонецЕсли;
					
					// Отметка выполнения родительского узла. Выполнены еще не все строки
					СцТ_ГлавнаяФорма.СцТ_УстановитьФлагВыполненияУГрупповогоУзла(РодительскийУзел, ФормаШагов.БлокСценария);
					Прервать;
					
				ИначеЕсли РодительскийУзел = ФормаШагов.БлокСценария Тогда
					
					СцТ_ВизуализироватьШагВДереве(ШагВходаВПроцедуру);
					
					// Это последний шаг теста
					Если ФормаШагов = СцТ_ГлавнаяФорма
						И СцТ_ГлавнаяФорма.СцТ_ВыполнениеТеста = "АвтоматическийРежим" Тогда
						
						СцТ_ГлавнаяФорма.СцТ_ВыполнениеТеста = "";
						ФормаШагов.Элементы.ОстановитьВыполнение.Доступность = Ложь;
						
						#Если НЕ ВебКлиент Тогда
						Сигнал();
						#КонецЕсли
						
						Если    СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "ПосредствомФайлов"
							ИЛИ СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "Непосредственное" Тогда
							
							СцТ_ГлавнаяФорма.СцТ_ИнформационноеСообщение("OK", НСтр("ru = 'Сценарий успешно выполнен'"), "");
							СцТ_ГлавнаяФорма.СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске("EXIT");
							
						Иначе
							
							ПоказатьОповещениеПользователя(НСтр("ru = 'Сценарий выполнен'"),,, КартинкаИнформация32);
						КонецЕсли;
						
					ИначеЕсли ФормаШагов <> СцТ_ГлавнаяФорма Тогда
						
						// Управление родительской процедуре передается, если макрошаг открыт, как результат
						// выполнения шага "ВыполнитьМакрошаг", т.е. известен шаг родительского процесса
						Если ФормаРодительскогоПроцесса <> Неопределено И ШагРодительскогоПроцесса <> Неопределено Тогда
							ФормаШагов.Закрыть();
							ФормаРодительскогоПроцесса.СцТ_ПерейтиНаСледующийШаг(ШагРодительскогоПроцесса);
							Возврат;
						Иначе
							ПоказатьОповещениеПользователя(НСтр("ru = 'Макрошаг выполнен'"),,, КартинкаИнформация32);
						КонецЕсли;
						
					КонецЕсли;
					
					Возврат;
					
					// Иначе нужно перейти на узел выше и продолжить поиск строк,
					// т.е. продолжить цикл
				КонецЕсли;
				
				// Если группа, из которой выполняется переход на уровень вверх является группой цикла
				// то следует проверить выполнение условия выхода группе, т.е. обратный переход в группу
				Если РодительскийУзел.ТипШага = "Повторение" Тогда
					СледующийШаг = РодительскийУзел;
					Прервать;
				КонецЕсли;
				
				// Подготовка к следующей итерации
				ПредыдущийШаг = РодительскийУзел;
				СцТ_ГлавнаяФорма.СцТ_УстановитьФлагВыполненияУГрупповогоУзла(ПредыдущийШаг, ФормаШагов.БлокСценария);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СледующийШаг <> Неопределено Тогда
		
		// При первом вхождении в счетный цикл нужно удалить из таблицы параметров параметр цикла
		// при начале выполнения он будет создан - так обеспечивается нормальное выполнение
		Если СледующийШаг.ТипШага = "Повторение"
			И НЕ СцТ_ВПодчинении(ШагВходаВПроцедуру, СледующийШаг) Тогда
			
			УзелОписаниПовтора = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(СледующийШаг.Значение, "Имя", "ОписаниеПовтора");
			Если УзелОписаниПовтора = Неопределено Тогда
				УзелОписаниПовтора = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
					СледующийШаг.Значение,
					"ОписаниеПовтора",
					0,
					НСтр("ru = 'Описание повтора'"),
					Истина);
			КонецЕсли;
			
			ТипЦикла = СцТ_ЗначениеВДереве(УзелОписаниПовтора, "ТипЦикла", "Счетный");
			
			Если ТипЦикла = "Счетный" Тогда
				ИмяПеременной = СцТ_ЗначениеВДереве(УзелОписаниПовтора, "ИмяПеременной", "ПеременнаяЦикла");
				
				Если ТипЗнч(СцТ_ГлавнаяФорма.ГлобальныеПараметры) <> Тип("Структура") Тогда
					СцТ_ГлавнаяФорма.ГлобальныеПараметры = Новый Структура;
				КонецЕсли;
				
				СцТ_ГлавнаяФорма.ГлобальныеПараметры.Удалить(ИмяПеременной);
			КонецЕсли;
			
		КонецЕсли;
		
		ФормаШагов.СцТ_ИдентификаторТекущегоШагаСценария = СледующийШаг.ПолучитьИдентификатор();
		
		СцТ_ВизуализироватьШагВДереве(СледующийШаг);
		
		Если СцТ_ГлавнаяФорма.СцТ_ВыполнениеТеста = "АвтоматическийРежим"
			ИЛИ ВыполнитьСледующийШагПринудительно Тогда
			
			СцТ_ГлавнаяФорма.СцТ_ОтложенныйВызовСледующегоШага(ЭтотОбъект);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


&НаКлиенте
Функция ЕстьГруппаДляПродолжения(ГрупповойШагСПризнакомПродолжения, ДанныеТекущегоШага)
	
	Если ДанныеТекущегоШага <> Неопределено Тогда
		РодительскийШаг = ДанныеТекущегоШага.ПолучитьРодителя();
		Если РодительскийШаг = Неопределено Тогда
			Возврат Ложь;
		Иначе
			ДействиеПриОшибке   = СцТ_ЗначениеВДереве(РодительскийШаг.Значение, "ДействиеГрупповогоШагаПриОшибке", "Остановить");
			ИмяПеременнойОшибки = СцТ_ЗначениеВДереве(РодительскийШаг.Значение, "ПеременнаяОшибкиГрупповогоШага" , "");
			
			Если ДействиеПриОшибке = "Остановить" Тогда
				// Дальнейший поиск
				
				Если ЕстьГруппаДляПродолжения(ГрупповойШагСПризнакомПродолжения, РодительскийШаг) Тогда
					Возврат Истина;
				КонецЕсли;
				
			Иначе
				// Найден шаг с признаком продолжения
				ГрупповойШагСПризнакомПродолжения = РодительскийШаг;
				ИзменитьЗначениеГлобальногоПараметра(ИмяПеременнойОшибки, Ложь);
				
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции



#Область ОсновныеФункцииВыполненияШагов

// Выполнение шага "Пользовательская группа"
//
// Парметры
// ДанныеШага - данные шага в дереве
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_Группа_НаКлиенте(ДанныеШага)
	
	Возврат Истина;
	
КонецФункции

// Восстановление из структуры объекта справочника, документа или записи регистра сведений
// Если исходный документ был проведен делается попытка выполнить проведение
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ВоспроизвестиОбъект_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	ДанныеРодительскогоУзла = ДанныеШага.ПолучитьРодителя();
	ПараметрыДляПолученияОбъектаИБ = СцТ_ГлавнаяФорма.СцТ_ПолучитьПараметрыШагаДляПоискаОбъектаИБ(ДанныеРодительскогоУзла);
	
	СтруктураШага = СцТ_ГлавнаяФорма.СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(ДанныеШага);
	
	Возврат СцТ_ВыполнитьШаг_ВоспроизвестиОбъект_НаСервере(
		СтруктураШага,
		ПараметрыДляПолученияОбъектаИБ,
		МассивИнфоСообщений,
		СцТ_ГлавнаяФорма.АдресТаблицыСсылок,
		СцТ_ГлавнаяФорма.ГлобальныеПараметры);
	
КонецФункции

// Выполнение шага " Сравнить объект с эталоном"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_СравнитьОбъектСЭталоном_НаКлиенте(ДанныеШага, МассивИнфоСообщений, РазличияЭталонныхДанных)
	
	ДанныеРодительскогоУзла = ДанныеШага.ПолучитьРодителя();
	ПараметрыДляПолученияОбъектаИБ = СцТ_ГлавнаяФорма.СцТ_ПолучитьПараметрыШагаДляПоискаОбъектаИБ(ДанныеРодительскогоУзла);
	
	СтруктураШага = СцТ_ГлавнаяФорма.СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(ДанныеШага);
	
	Возврат СцТ_ВыполнитьШаг_СравнитьОбъектСЭталоном_НаСервере(
		СтруктураШага,
		ПараметрыДляПолученияОбъектаИБ,
		МассивИнфоСообщений,
		СцТ_ГлавнаяФорма.АдресТаблицыСсылок,
		РазличияЭталонныхДанных,
		СцТ_ГлавнаяФорма.ГлобальныеПараметры);
	
КонецФункции // ВыполнитьШаг_СравнитьОбъектСЭталоном

// Выполнение шага "Сравнить движения документа"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_СверитьДвижениеДокумента_НаКлиенте(ДанныеШага, МассивИнфоСообщений, РазличияЭталонныхДанных)
	
	ДанныеРодительскогоУзла = ДанныеШага.ПолучитьРодителя();
	ПараметрыДляПолученияОбъектаИБ = СцТ_ГлавнаяФорма.СцТ_ПолучитьПараметрыШагаДляПоискаОбъектаИБ(ДанныеРодительскогоУзла);
	
	СтруктураШага = СцТ_ГлавнаяФорма.СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(ДанныеШага);
	
	Возврат СцТ_ВыполнитьШаг_СверитьДвижениеДокумента_НаСервере(
		СтруктураШага,
		ПараметрыДляПолученияОбъектаИБ,
		МассивИнфоСообщений,
		СцТ_ГлавнаяФорма.АдресТаблицыСсылок,
		РазличияЭталонныхДанных,
		СцТ_ГлавнаяФорма.ГлобальныеПараметры);
	
КонецФункции

// Выполнение шага "Выполнить процедуру"
//
// Параметры
//	ДанныеШага - идентификатор шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ВыполнитьПроцедуру_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	СтруктураШага = СцТ_ГлавнаяФорма.СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(ДанныеШага);
	
	Возврат СцТ_ВыполнитьШаг_ВыполнитьПроцедуру_НаСервере(
		СтруктураШага,
		МассивИнфоСообщений,
		СцТ_ГлавнаяФорма.АдресТаблицыСсылок,
		СцТ_ГлавнаяФорма.ГлобальныеПараметры);
	
КонецФункции

// Выполнение шага "Выполнить запрос"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ВыполнитьЗапрос_НаКлиенте(ДанныеШага, РазличияЭталонныхДанных, МассивИнфоСообщений)
	
	СтруктураШага = СцТ_ГлавнаяФорма.СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(ДанныеШага);
	
	Возврат СцТ_ВыполнитьШаг_ВыполнитьЗапрос_НаСервере(
		СтруктураШага,
		МассивИнфоСообщений,
		СцТ_ГлавнаяФорма.АдресТаблицыСсылок,
		СцТ_ГлавнаяФорма.ГлобальныеПараметры,
		РазличияЭталонныхДанных);
	
КонецФункции

// Выполнение шага "Замена ссылки"
//
// Параметры
//	ДанныеШага - идентификатор шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ЗаменаСсылки_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	СтруктураШага = СцТ_ГлавнаяФорма.СцТ_ПреобразоватьСтрокуСценарияВСтруктуру(ДанныеШага);
	
	Возврат СцТ_ВыполнитьШаг_ЗаменаСсылки_НаСервере(
		СтруктураШага,
		МассивИнфоСообщений,
		СцТ_ГлавнаяФорма.АдресТаблицыСсылок,
		СцТ_ГлавнаяФорма.ГлобальныеПараметры);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Выполнение теста. Клиентские процедуры интерактивных шагов

// Выполнение шага "Нажать кнопку командного интерфейса"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_НажатьКнопкуКИ_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	УзелОписанияКнопки = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ОписаниеКнопкиКИ");
	
	Если    УзелОписанияКнопки = Неопределено
		ИЛИ ПустаяСтрока(УзелОписанияКнопки.Синоним) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрана кнопка командного интерфейса. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	УзелПутиПоиска = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ИСТЗ_ПутьКОбъекту");
	
	// Поиск окна-владельца кнопки КИ
	
	Попытка
		
		Если УзелОписанияКнопки.ТипУзла = "1" Тогда
			ОбъектВладелецКИ = СцТ_ГлавнаяФорма.СцТ_ПолучитьОсновноеОкноТестируемогоПриложения();
			Если ОбъектВладелецКИ = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Не найдено главное окно тестируемого приложения. Шаг не может быть выполнен'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		Иначе
			
			ОписаниеРезультата = "";
			ТекущееОкно = СцТ_ГлавнаяФорма.СцТ_ПолучитьФормуДляИнтерактивногоШага(
				ДанныеШага,
				Ложь,
				ОписаниеРезультата,
				Истина);
				
			Если ТекущееОкно = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Кнопка командного интерфейса не найдена. Не удалось выполнить обращение к окну текущей формы'");
				РасшифровкаОшибки = СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(ОписаниеРезультата);
				СцТ_ДобавитьПодстроку(ТекстСообщения, РасшифровкаОшибки, ":" + Символы.ПС);
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			ОбъектВладелецКИ = ТекущееОкно;
			
		КонецЕсли;
		
	Исключение
		
		РасшифровкаОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Ошибка при нажатии  кнопки командного интерфейса'");
		СцТ_ДобавитьПодстроку(ТекстСообщения, РасшифровкаОшибки, ":" + " ");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если УзелОписанияКнопки.Синоним = "К предыдущему окну" Тогда
		Попытка
			ОбъектВладелецКИ.ПерейтиКПредыдущемуОкну();
			Возврат Истина;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось перейти к предыдущему окну'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если УзелОписанияКнопки.Синоним = "К следующему окну" Тогда
		Попытка
			ОбъектВладелецКИ.ПерейтиКСледующемуОкну();
			Возврат Истина;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось перейти к следующему окну'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если УзелОписанияКнопки.Синоним = "К начальной странице" Тогда
		Попытка
			ОбъектВладелецКИ.ПерейтиКНачальнойСтранице();
			Возврат Истина;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось перейти к начальной странице'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	
	Попытка
		КомандныйИнтерфейсОбъект = ОбъектВладелецКИ.ПолучитьКомандныйИнтерфейс();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось получить командный интерфейс окна'");
		РасшифровкаОшибки = ОписаниеОшибки();
		СцТ_ДобавитьПодстроку(ТекстСообщения, РасшифровкаОшибки, ":" + " ");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ВариантПоискаОбъекта = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ВариантПоискаОбъекта", "", , Ложь);
	
	Если ПустаяСтрока(ВариантПоискаОбъекта) Тогда
		ВариантПоискаОбъекта = "011";
	КонецЕсли;
	
	НажимаемыйОбъект = СцТ_ГлавнаяФорма.СцТ_НайтиИнтерактивныйОбъектТестируемогоПриложения(
		КомандныйИнтерфейсОбъект,
		ВариантПоискаОбъекта,
		Тип("ТестируемаяКнопкаКомандногоИнтерфейса"),
		"$" + УзелОписанияКнопки.Синоним,
		УзелОписанияКнопки.Синоним,
		УзелПутиПоиска);
	
	ТипОбъекта = ТипЗнч(НажимаемыйОбъект);
	Если ТипОбъекта <> Тип("ТестируемаяКнопкаКомандногоИнтерфейса") Тогда
		Если ТипОбъекта = Тип("Строка") Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось найти кнопку командного интерфейса: '") + НажимаемыйОбъект;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось найти кнопку командного интерфейса'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		НажимаемыйОбъект.Нажать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось нажать кнопку командного интерфейса'");
		РасшифровкаОшибки = ОписаниеОшибки();
		СцТ_ДобавитьПодстроку(ТекстСообщения, РасшифровкаОшибки, ":" + " ");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ТекстСообщения = НСтр("ru = 'Кнопка командного интерфейса успешно нажата'");
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	
	Возврат Истина;
	
КонецФункции

// Выполнение шага "Переход по навигационной ссылке"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ПерейтиПоНавигационнойСсылке_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	НавСсылка = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "НавигационнаяСсылка", "", ,Ложь);
	
	// Навигационная ссылка может быть параметром
	НавСсылка = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(НавСсылка);
	
	Если ПустаяСтрока(НавСсылка) Тогда
		ТекстСообщения = НСтр("ru = 'Навигационная ссылка не задана'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ОсновноеОкно = СцТ_ГлавнаяФорма.СцТ_ПолучитьОсновноеОкноТестируемогоПриложения();
	Если ОсновноеОкно = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось обратиться к основному окну клиентского приложения, возможно, не запущено тестируемое приложение'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ОсновноеОкно.ВыполнитьКоманду(НавСсылка);
		ТекстСообщения = НСтр("ru = 'Переход по навигационной ссылке выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	Исключение
		ТекстСообщения = НСтр("ru = 'При переходе по навигационной ссылке произошла ошибка'");
		РасшифровкаОшибки = ОписаниеОшибки();
		СцТ_ДобавитьПодстроку(ТекстСообщения, РасшифровкаОшибки, ":" + " ");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ТекстСообщения = НСтр("ru = 'Переход по навигационной ссылке выполнен'");
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	Возврат Истина;
	
КонецФункции

// Выполнение шага "Выполнение действий журнала пользователя"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ВыполнитьДействияЖурнала_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТекстСкрипта = Строка(СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ТекстСкрипта", "", , Ложь));
	
	#Если НЕ ВебКлиент Тогда
	ТекущийНомерУзла = 1;
	
	Попытка
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстСкрипта);
		ЧтениеXML.Прочитать(); // Прочитать узел <uilog>
		
		СтекОбъектовТестируемогоПриложения = Новый Массив;
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ТекущийНомерУзла = ТекущийНомерУзла + 1;
				
				ИмяУзла      = ВРег(СокрЛП(ЧтениеXML.Имя));
				АтрибутыУзла = СцТ_ГлавнаяФорма.СцТ_АтрибутыУзла(ЧтениеXML);
				
				Если СцТ_ГлавнаяФорма.СцТ_УзелОписываетОбъектТестируемогоПриложения(ИмяУзла) Тогда
					
					СцТ_ДобавитьОбъектТестируемогоПриложенияВСтекОбъектов(
						ИмяУзла,
						АтрибутыУзла,
						СтекОбъектовТестируемогоПриложения);
					
				Иначе
					
					СцТ_ВыполнитьИнтерактивнуюКомандуНадОбъектомТестируемогоПриложения(
						ИмяУзла,
						АтрибутыУзла,
						СтекОбъектовТестируемогоПриложения,
						ЧтениеXML);
						
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				Если СцТ_ГлавнаяФорма.СцТ_УзелОписываетОбъектТестируемогоПриложения(ЧтениеXML.Имя) Тогда
					СцТ_УдалитьОбъектТестируемогоПриложенияИзСтекаОбъектов(СтекОбъектовТестируемогоПриложения);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить действие журнала %1: %2'");
		Если ТекущийНомерУзла = 0 Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, " %1", ".");
		Иначе
			ТекстСообщения = СтрЗаменить(
				ТекстСообщения,
				"%1",
				НСтр("ru = '. Запись журнала №'") + СтрЗаменить(Строка(ТекущийНомерУзла), Символ(160), ""));
			КонецЕсли;
			
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%2",
			СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке()));
			
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	#Иначе
		ТекстСообщения = НСтр("ru = 'В веб-клиенте выполнение этой операции недоступно.'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	#КонецЕсли
	
	ТекстСообщения = НСтр("ru = 'Действия журнала успешно выполнены'");
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	Возврат Истина;
	
КонецФункции

// Выполнение шага "Поиск нужной формы"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_НайтиФорму_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ИскатьПоИмени         = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ИскатьПоИмени"        , Истина, , Ложь);
	ИскатьПоЗаголовку     = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ИскатьПоЗаголовку"    , Истина, , Ложь);
	ИскатьПоЗаголовкуОкна = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ИскатьПоЗаголовкуОкна", Ложь  , , Ложь);
	ИмяФормыВРег          = ВРег(СокрЛП(ДанныеШага.ИмяФормы));
	ЗаголовокОкнаФормы    = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ЗаголовокОкнаФормы"   , ""    , , Ложь);
	
	ЗаголовокОкнаФормы = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(ЗаголовокОкнаФормы);
	
	// Настройка новых элементов
	УсловиеВыполнения   = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "УсловиеВыполнения"  , "Найдена");
	
	ШагАвтоГруппы           = ДанныеШага.ПолучитьРодителя();
	
	НеобходимоОкно = Истина;
	
	// Т.к. при поиске формы необходимо также получать окно, в котором она расположена,
	// то поиск формы выполняется внутри окон приложения
	
	Если ИскатьПоЗаголовку Тогда
		ЗаголовокФормы = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(ДанныеШага.ЗаголовокФормы);
		
		// Обход ошибки платформы
		ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "** **", "*");
		ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "**", "*");
		
	Иначе
		ЗаголовокФормы = Неопределено;
	КонецЕсли;
	
	ОтобранныеПоЗаголовку = Новый Массив;
	Если ИскатьПоЗаголовкуОкна ИЛИ НеобходимоОкно Тогда
		
		// Проверить появление формы с заданным заголовком по таймауту (если задан поиск по заголовку)
		Если ИскатьПоЗаголовку И НЕ ИскатьПоЗаголовкуОкна Тогда
			
			// Если выполняется поиск формы в окне с заданным заголовком,
			// тогда не искать форму с таймаутом по заголовку -
			// таймаут будет использован при поиске окна
			
			НайденаяФорма = СцТ_ГлавнаяФорма.СцТ_Контроллер.НайтиОбъект(
				Тип("ТестируемаяФорма"),
				ЗаголовокФормы,
				,
				СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов);
			
			Если НайденаяФорма = Неопределено И УсловиеВыполнения = "Найдена" Тогда
				ТекстСообщения = НСтр("ru = 'Не найдена форма с заголовком ""%1""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ЗаголовокФормы);
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				
				СцТ_ГлавнаяФорма.СцТ_ФормыТестируемогоПриложения.Удалить(ШагАвтоГруппы.УИШ);
				Возврат Ложь;
				
			ИначеЕсли НайденаяФорма = Неопределено И УсловиеВыполнения <> "Найдена" Тогда
				// нужно было проверить, что формы нет
				ТекстСообщения = НСтр("ru = 'Проверка отсутствия формы успешно выполнена.'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОкнаПриложения = СцТ_ГлавнаяФорма.СцТ_Контроллер.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"),
			?(ИскатьПоЗаголовкуОкна, ЗаголовокОкнаФормы, Неопределено),
			,
			СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов);
		
		Если ИскатьПоЗаголовкуОкна И ОкнаПриложения.Количество() = 0 Тогда
			
			Если УсловиеВыполнения = "Найдена" Тогда
				ТекстСообщения = НСтр("ru = 'Не найдено окно с заголовком ""%1""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ЗаголовокОкнаФормы);
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
				
			Иначе
				// нужно было проверить, что формы нет
				ТекстСообщения = НСтр("ru = 'Проверка отсутствия формы успешно выполнена.'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		// Поиск открытых форм в окнах
		Для каждого ОкноПриложения Из ОкнаПриложения Цикл
			ТипОкна = ?(ОкноПриложения.Основное, 1, 2);
			// Таймаут не требуется, т.к. по таймауту выполнена проверка ранее
			ФормыОкна = ОкноПриложения.НайтиОбъекты(Тип("ТестируемаяФорма"), ЗаголовокФормы);
			Для каждого Форма Из ФормыОкна Цикл
				ОтобранныеПоЗаголовку.Добавить(
					Новый Структура("ФормаОбъект,ОкноОбъект,ТипОкна", Форма, ОкноПриложения, ТипОкна));
			КонецЦикла;
		КонецЦикла;
		
		Если ОтобранныеПоЗаголовку.Количество() = 0 Тогда
			Если ЗаголовокФормы = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Не найдено ни одной формы тестируемого приложения'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не найдена форма с заголовком ""%1""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ЗаголовокФормы);
			КонецЕсли;
			
			Если УсловиеВыполнения = "Найдена" Тогда
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
				
			Иначе
				// нужно было проверить, что формы нет
				ТекстСообщения = НСтр("ru = 'Проверка отсутствия формы успешно выполнена.'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Иначе найти все формы за одно обращение, т.к. не нужен дескриптор окна формы
		// (если в автоматическом режиме не требуется принудительно закрывать окно формы
		//  или нажимать кнопку на панели навигации)
		// Достигается увеличение быстродействия пропорционально количеству открытых окон
		// приложения.
		ФормыПриложения = СцТ_ГлавнаяФорма.СцТ_Контроллер.НайтиОбъекты(Тип("ТестируемаяФорма"),
			ЗаголовокФормы,
			,
			СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов);
		
		Для каждого ДескрипторФормы Из ФормыПриложения Цикл
			ОтобранныеПоЗаголовку.Добавить(
				Новый Структура("ФормаОбъект,ОкноОбъект,ТипОкна",
					ДескрипторФормы,
					Неопределено, Неопределено));
		КонецЦикла;
		
		Если ОтобранныеПоЗаголовку.Количество() = 0 Тогда
			
			Если УсловиеВыполнения = "Найдена" Тогда
				ТекстСообщения = НСтр("ru = 'Не найдена форма с заголовком ""%1""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ЗаголовокФормы);
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
				
			Иначе
				// нужно было проверить, что формы нет
				ТекстСообщения = НСтр("ru = 'Проверка отсутствия формы успешно выполнена.'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Отбор по имени: т.к. метод НайтиОбъекты() не предназначен для поиска формы по имени,
	// то поиск по имени осуществляется перебором форм, найденых по заголовку
	Если НЕ ИскатьПоИмени Тогда
		ОтобранныеПоИмени = ОтобранныеПоЗаголовку;
	Иначе
		ОтобранныеПоИмени = Новый Массив;
		Для каждого ОписательФормы Из ОтобранныеПоЗаголовку Цикл
			Если ИмяФормыВРег = ВРег(СокрЛП(СцТ_ГлавнаяФорма.СцТ_ИмяИнтерактивногоОбъекта(ОписательФормы.ФормаОбъект))) Тогда
				ОтобранныеПоИмени.Добавить(ОписательФормы);
			КонецЕсли;
		КонецЦикла;
		Если ОтобранныеПоИмени.Количество() = 0 Тогда
			
			Если УсловиеВыполнения = "Найдена" Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось найти форму с именем ""%1""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ДанныеШага.ИмяФормы);
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
				
			Иначе
				// нужно было проверить, что формы нет
				ТекстСообщения = НСтр("ru = 'Проверка отсутствия формы успешно выполнена.'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Отбор форм по искомым на формах элементам
	УзелИскомыхЭлементов = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ЭлементыФормы");
	ИскомыеЭлементы = ?(
		УзелИскомыхЭлементов = Неопределено ИЛИ НЕ УзелИскомыхЭлементов.Активность,
		Неопределено,
		УзелИскомыхЭлементов.ПолучитьЭлементы());
	
	Если ИскомыеЭлементы = Неопределено Тогда
		ОтобранныеФормы = ОтобранныеПоИмени;
	Иначе
		ОтобранныеФормы = Новый Массив;
		Для каждого ОписательФормы Из ОтобранныеПоИмени Цикл
			Если СцТ_ФормаПриложенияСодержитЭлементы(ОписательФормы.ФормаОбъект, ИскомыеЭлементы) Тогда
				ОтобранныеФормы.Добавить(ОписательФормы);
			КонецЕсли;
		КонецЦикла;
		Если ОтобранныеФормы.Количество() = 0 Тогда
			
			Если УсловиеВыполнения = "Найдена" Тогда
				ТекстСообщения = НСтр("ru = 'Форма, содержащая указанные элементы (элементы с указанными значениями), не найдена'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				
				Возврат Ложь;
				
			Иначе
				// нужно было проверить, что формы нет
				ТекстСообщения = НСтр("ru = 'Проверка отсутствия формы успешно выполнена.'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	КоличествоНайденныхФорм = ОтобранныеФормы.Количество();
	Если КоличествоНайденныхФорм > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Найдено более одной формы (%1). Необходимо уточнить критерии поиска формы'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(КоличествоНайденныхФорм));
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	ИначеЕсли КоличествоНайденныхФорм < 1 Тогда
		
		Если УсловиеВыполнения = "Найдена" Тогда
			
			ТекстСообщения = НСтр("ru = 'Не удалось найти форму'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			
			Возврат Ложь;
			
		Иначе
			// нужно было проверить, что формы нет
			ТекстСообщения = НСтр("ru = 'Проверка отсутствия формы успешно выполнена.'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ФормыТестируемогоПриложения[ШагАвтоГруппы.УИШ] = ОтобранныеФормы[0];
	
	Если СцТ_ГлавнаяФорма.ВидТестируемогоКлиента <> 2 Тогда
		
		// Иначе в веб-клиенте отображается окно с надписью "Нажмите ОК, чтобы активизировать окно"
		Попытка
			ОтобранныеФормы[0].ФормаОбъект.Активизировать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Если УсловиеВыполнения = "НеНайдена" Тогда
		ТекстСообщения = НСтр("ru = 'Найдена форма, которая должна отсутствовать'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	Иначе
		// Форма найдена - все верно
		ТекстСообщения = НСтр("ru = 'Поиск формы выполнен успешно.'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Выполнение шага "Проверка свойств текущей формы"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ПроверитьФорму_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторАвтоГруппы = ДанныеШага.ПолучитьРодителя().ПолучитьИдентификатор();
	
	УзелОписанияПроверки = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "СостояниеФормы");
	
	Если УзелОписанияПроверки = Неопределено Тогда
		// Пользователь по какой то причине не указал что нужно проверить
		// "Ничего" проверено верно
		ТекстСообщения = НСтр("ru = 'Шаг не содержит информации о том, что нужно проверить'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	// Получение указателей на фору и окно
	ОписательФормы  = СцТ_ГлавнаяФорма.СцТ_ФормыТестируемогоПриложения[ДанныеШага.ПолучитьРодителя().УИШ];
	
	Если ПустаяСтрока(УзелОписанияПроверки.Действие) 
		И УзелОписанияПроверки.Значение = "Закрыта"
		ИЛИ УзелОписанияПроверки.Действие = "ПроверитьФормаЗакрыта" Тогда
		// Учтена совместимость с предыдущими версиями данных
		
		// Проверка, что форма закрыта
		
		Если ОписательФормы = Неопределено Тогда
			// Сведений о форме нет, т.е. шаг выполнен верно
			Возврат Истина;
			
		Иначе
			ФормаПриложения = ОписательФормы.ФормаОбъект;
			
			Если ФормаПриложения <> Неопределено Тогда
				РезультатОжидания = ФормаПриложения.ОжидатьЗакрытие(СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов);
				Если НЕ РезультатОжидания Тогда
					ТекстСообщения = НСтр("ru = 'Проверка закрытия формы не выполнена - тестируемая форма открыта'");
					СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
					
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// во всех остальных случаях форма скорее всего не существует (закрыта)
			Возврат Истина;
			
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(УзелОписанияПроверки.Действие) 
		И УзелОписанияПроверки.Значение = "Открыта"
		ИЛИ УзелОписанияПроверки.Действие = "ПроверитьФормаОткрыта" Тогда
		// Проверка, что форма все еще открыта
		
		Если ОписательФормы = Неопределено Тогда
			// Сведений о форме нет, т.е. форма не открыта
			ТекстСообщения = НСтр("ru = 'Не удалось получить сведения о тестируемой форме. Скорее всего форма закрыта.'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		Иначе
			ФормаПриложения = ОписательФормы.ФормаОбъект;
			
			Если ФормаПриложения = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось получить сведения о тестируемой форме. Скорее всего форма закрыта.'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			Иначе
				РезультатОжидания = ФормаПриложения.ОжидатьЗакрытие(СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов);
				Если РезультатОжидания Тогда
					ТекстСообщения = НСтр("ru = 'Проверка закрытия формы не выполнена - тестируемая форма закрыта'");
					СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru = 'Проверка выполнена успешно. Форма открыта'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли УзелОписанияПроверки.Действие = "Активизировать" Тогда
		// Попытка активизировать форму
		ФормаПриложения = ОписательФормы.ФормаОбъект;
		
		Если ФормаПриложения = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Нет сведений о тестируемой форме. Не удалось активизировать форму'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
		Иначе
			// Если есть сведения об окне, то сначала нужно активизировать окно
			Если ОписательФормы.ОкноОбъект <> Неопределено Тогда
				Попытка
					ОписательФормы.ОкноОбъект.Активизировать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Попытка
				ФормаПриложения.Активизировать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось активизировать форму'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			
			ТекстСообщения = НСтр("ru = 'Форма активизирована'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли УзелОписанияПроверки.Действие = "ПроверитьЗаголовок" Тогда
		ФормаПриложения = ОписательФормы.ФормаОбъект;
		
		Если ФормаПриложения = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Нет сведений о тестируемой форме. Не удалось активизировать форму'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		Иначе
			Если НЕ СцТ_ГлавнаяФорма.СцТ_ТестСтроки(ФормаПриложения.ТекстЗаголовка, УзелОписанияПроверки.Значение, Ложь) Тогда
				ТекстСообщения = НСтр("ru = 'Заголовок формы не соответствует эталонному шаблону.
					|Заголовок тестируемой формы: ""'") + ФормаПриложения.ТекстЗаголовка + ("'""'")
					+ Символы.ПС
					+ НСтр("ru = 'Шаблон эталонного заголовка: ""'") + УзелОписанияПроверки.Значение + """.";
					
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Проверка выполнена успешно. Заголовок соответствует эталону'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
				Возврат Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли УзелОписанияПроверки.Действие = "ПроверитьМодифицированность" Тогда
		ТестируемаяФорма = ОписательФормы.ФормаОбъект;
		Если ТестируемаяФорма = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Нет сведений о тестируемой форме. Не удалось проверить модифицированность'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		ТекМодифицированность = ТестируемаяФорма.ТекущаяМодифицированность();
		Если ТекМодифицированность
			И УзелОписанияПроверки.Значение = "НЕМодифицирована"
			ИЛИ НЕ ТекМодифицированность
			И УзелОписанияПроверки.Значение = "Модифицирована" Тогда
			ТекстСообщения = НСтр("ru = 'Текущая модифицированность не соответствует эталонной.
				|Текущее значение - %1, эталонное - %2'");
				
			Если ТекМодифицированность Тогда
				ТекстМод = "Модифицирована";
			Иначе
				ТекстМод = "НЕ модифицирована";
			КонецЕсли;
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекстМод);
			
			Если УзелОписанияПроверки.Значение = "Модифицирована" Тогда
				ТекстМод = "Модифицирована";
			Иначе
				ТекстМод = "НЕ модифицирована";
			КонецЕсли;
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТекстМод);
			
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Проверка выполнена успешно. Модифицированность формы соответствует эталону'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		Возврат Истина;
		
	ИначеЕсли УзелОписанияПроверки.Действие = "ПерейтиКСледующемуЭлементу" Тогда
		
		ТестируемаяФорма = ОписательФормы.ФормаОбъект;
		Если ТестируемаяФорма = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Нет сведений о тестируемой форме. Не удалось перейти к следующему элементу'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		Попытка
			ТестируемаяФорма.ПерейтиКСледующемуЭлементу();
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось перейти к следующему элементу. Возможно, форма не содержит элементов или текущий элемент последний'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецПопытки;
		
		ТекстСообщения = НСтр("ru = 'Переход к следующему элементу выполнен успешно.'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		Возврат Истина;
		
	ИначеЕсли УзелОписанияПроверки.Действие = "ПерейтиКПредыдущемуЭлементу" Тогда
		ТестируемаяФорма = ОписательФормы.ФормаОбъект;
		Если ТестируемаяФорма = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Нет сведений о тестируемой форме. Не удалось перейти к предыдущему элементу'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		Попытка
			ТестируемаяФорма.ПерейтиКПредыдущемуЭлементу();
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось перейти к предыдущему элементу. Возможно, форма не содержит элементов или текущий элемент первый'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецПопытки;
		
		ТекстСообщения = НСтр("ru = 'Переход к предыдущему элементу выполнен успешно.'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		Возврат Истина;
		
	ИначеЕсли УзелОписанияПроверки.Действие = "ЗакрытьОкноСообщений" Тогда
		
		ТекущееОкно = ОписательФормы.ОкноОбъект;
		
		Если ТекущееОкно = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось определить текущее окно'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		Если ТекущееОкно.ПолучитьТекстыСообщенийПользователю().Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Текущее окно не содержит сообщений пользователю'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		Попытка
			ТекущееОкно.ЗакрытьПанельСообщенийПользователю();
		Исключение
			ТекстСообщения = НСтр("ru = 'При закрытии окна сообщений возникла ошибка'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецПопытки;
		
		ТекстСообщения = НСтр("ru = 'Окно сообщений успешно закрыто'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		Возврат Истина;
		
	ИначеЕсли УзелОписанияПроверки.Действие = "ПроверитьОтсутствиеСообщений" Тогда
		
		ТекущееОкно = ОписательФормы.ОкноОбъект;
		
		Если ТекущееОкно = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось определить текущее окно'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		КоличествоСообщений = ТекущееОкно.ПолучитьТекстыСообщенийПользователю().Количество();
		Если КоличествоСообщений > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Текущее окно содержит %1 пользователю'");
			КоличествоСообщенийСтрокой = Строка(КоличествоСообщений);
			Если Прав(КоличествоСообщенийСтрокой, 1) = "1" Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", КоличествоСообщенийСтрокой + " " + НСтр("ru = 'сообщение'"));
			ИначеЕсли Прав(КоличествоСообщенийСтрокой, 1) = "2"
				ИЛИ Прав(КоличествоСообщенийСтрокой, 1) = "3"
				ИЛИ Прав(КоличествоСообщенийСтрокой, 1) = "4" Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", КоличествоСообщенийСтрокой + " " + НСтр("ru = 'сообщения'"));
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", КоличествоСообщенийСтрокой + " " + НСтр("ru = 'сообщений'"));
			КонецЕсли;
			
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Выполнение шага "Нажать кнопку (картинку или надпись) на форме"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_НажатьКнопку_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеРезультата = "";
	ФормаПриложения = СцТ_ГлавнаяФорма.СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(
		ДанныеШага,
		ОписаниеРезультата);
		
	Если ФормаПриложения = Неопределено Тогда
		ТекстСообщения = СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(ОписаниеРезультата);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ВидОбъекта          = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ВидОбъекта"         , "",          , Ложь);
	ИмяКнопки           = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ИмяКнопки"          , "",          , Ложь);
	ДействиеСКнопкой    = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ДействиеСКнопкой"   , "",          , Ложь);
	ЗаголовокОбъекта    = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ИмяКнопки"          , "", "Синоним", Ложь);
	ПредставлениеКнопки = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ПредставлениеКнопки", "",          , Ложь);
	УзелПути            = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ИСТЗ_ПутьКОбъекту");
	
	// Определение типа нажимаемого объекта из пути объекта.
	// Тип нажимаемого объекта хранится в последнем элементе
	// пути поиска объекта.
	Если УзелПути = Неопределено Тогда
		ТипНажимаемогоОбъекта = Неопределено;
	Иначе
		ЭлементыПути = УзелПути.ПолучитьЭлементы();
		КоличествоЭлементовПути = ЭлементыПути.Количество();
		Если КоличествоЭлементовПути = 0 Тогда
			ТипНажимаемогоОбъекта = Неопределено;
		Иначе
			ТипНажимаемогоОбъекта = СцТ_ГлавнаяФорма.СцТ_ТипТестируемогоОбъектаИзЧисла(
				ЭлементыПути[КоличествоЭлементовПути - 1].Значение);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяКнопки) Тогда
		ТекстСообщения = НСтр("ru = 'В шаге сценария не задана кнопка'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ВариантПоискаОбъекта = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ВариантПоискаОбъекта", "", , Ложь);
	
	Если ПустаяСтрока(ВариантПоискаОбъекта) Тогда
		Если Лев(ИмяКнопки, 1) = "$" Тогда
			ВариантПоискаОбъекта = "011";
		Иначе
			ВариантПоискаОбъекта = "100";
		КонецЕсли;
	КонецЕсли;
	
	НажимаемыйОбъект = СцТ_ГлавнаяФорма.СцТ_НайтиИнтерактивныйОбъектТестируемогоПриложения(
		ФормаПриложения,
		ВариантПоискаОбъекта,
		ТипНажимаемогоОбъекта,
		ИмяКнопки,
		ЗаголовокОбъекта,
		УзелПути);
	
	Если ТипЗнч(НажимаемыйОбъект) = Тип("Строка") Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти'")
			+ " "
			+ НажимаемыйОбъект;
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	ИначеЕсли НажимаемыйОбъект = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не найден нажимаемый кнопку'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеВидаНажимаемоегоОбъекта = СцТ_ГлавнаяФорма.СцТ_ПолучитьВидОбъекта(НажимаемыйОбъект);
	
	ФактическийВидОбъекта = ОписаниеВидаНажимаемоегоОбъекта.Вид;
	
	Если ФактическийВидОбъекта <> "КнопкаКоманднойПанели"
		И ФактическийВидОбъекта <> "ОбычнаяКнопка"
		И ФактическийВидОбъекта <> "Гиперссылка"
		И ФактическийВидОбъекта <> "Картинка"
		И ФактическийВидОбъекта <> "Надпись"
		И ФактическийВидОбъекта <> "ПолеФлажка" Тогда
		
		ТекстСообщения = НСтр("ru = 'Найденый элемент формы не нажимается (%1)'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеВидаНажимаемоегоОбъекта.Синоним);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	// "Включить" и "Отключить" пока не поддерживается
	// на данном этапе проверка уже выполнена
	Если ДействиеСКнопкой = "Нажать" Тогда
		
		Попытка
			НажимаемыйОбъект.Активизировать();
		Исключение
		КонецПопытки;
		
		Попытка
			
			Если ОписаниеВидаНажимаемоегоОбъекта.Вид <> "ПолеФлажка" Тогда
				НажимаемыйОбъект.Нажать();
			Иначе
				НажимаемыйОбъект.УстановитьОтметку();
			КонецЕсли;
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить нажатие ""%1"": %2'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПредставлениеКнопки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОписаниеОшибки());
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецПопытки;
		
	ИначеЕсли ДействиеСКнопкой = "Включить" Тогда
		
		ТекстСообщения = НСтр("ru = 'Действие ""Включить"" на текущий момент не поддерживается'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		// Не поддерживается платформой
		
	ИначеЕсли ДействиеСКнопкой = "Отключить" Тогда
		
		ТекстСообщения = НСтр("ru = 'Действие ""Отключить"" на текущий момент не поддерживается'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		// Не поддерживается платформой
		
	ИначеЕсли ДействиеСКнопкой <> "Проверить" Тогда
		
		ТекстСообщения = НСтр("ru = 'Неизвестное действие: ""%1""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ДействиеСКнопкой);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	Иначе
		Ошибка = Ложь;
		Если ФактическийВидОбъекта <> ВидОбъекта Тогда
			ТекстСообщения = НСтр("ru = 'Не совпадает вид эталонного и существующего объекта: ""%1"" и ""%2"". '");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_СинонимВидаИнтерактивногоОбъекта(ВидОбъекта));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОписаниеВидаНажимаемоегоОбъекта.Синоним);
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Ошибка = Истина;
		КонецЕсли;
		
		ФактическийЗаголовок = СцТ_ГлавнаяФорма.СцТ_ЗаголовокИнтерактивногоОбъекта(НажимаемыйОбъект);
		Если ВРег(СокрЛП(ЗаголовокОбъекта)) <> ВРег(СокрЛП(ФактическийЗаголовок)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не совпадает заголовок эталонного и текущего объекта: ""%1"" и ""%2""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ЗаголовокОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ФактическийЗаголовок);
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			
			Ошибка = Истина;
			
		КонецЕсли;
		
		Если НЕ Ошибка Тогда
			ТекстСообщения = НСтр("ru = 'Нажатие успешно выполнено'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		КонецЕсли;
		
		Возврат НЕ Ошибка;
		
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Нажатие успешно выполнено'");
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	Возврат Истина;
	
КонецФункции

// Выполнение шага "Найти элемент формы"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_НайтиЭлементФормы_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеРезультата = "";
	ФормаПриложения = СцТ_ГлавнаяФорма.СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(
		ДанныеШага,
		ОписаниеРезультата);
		
	Если ФормаПриложения = Неопределено Тогда
		ТекстСообщения = СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(ОписаниеРезультата);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	УзелОбъекта = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ИмяОбъекта");
	
	Если УзелОбъекта = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не задан элемент формы'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	ИмяОбъекта       = УзелОбъекта.Значение;
	ЗаголовокОбъекта = УзелОбъекта.Синоним;
	
	Если ПустаяСтрока(ИмяОбъекта) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан элемент формы'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	ДействиеСОбъектом = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ДействиеСОбъектом", "", , Ложь);
	
	ИскатьСредиВидимых = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ИскатьТолькоСредиВидимых", Истина, , Ложь);
	
	Если ПустаяСтрока(ДействиеСОбъектом) Тогда
		ТекстСообщения = НСтр("ru = 'Не указано назначение шага'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	УзелПути             = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ИСТЗ_ПутьКОбъекту");
	ВариантПоискаОбъекта = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ВариантПоискаОбъекта", "", , Ложь);
	ТипЭлемента          = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ТипОбъекта"          , -1, , Ложь);
	
	Если ТипЗнч(ТипЭлемента) = Тип("Число")
		И (ТипЭлемента < 3 ИЛИ ТипЭлемента > 7) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан тип элемента формы'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		Возврат Ложь;
		
	ИначеЕсли  ТипЗнч(ТипЭлемента) = Тип("Строка")
		И ТипЭлемента <> "ТестируемоеПолеФормы"
		И ТипЭлемента <> "ТестируемаяГруппаФормы"
		И ТипЭлемента <> "ТестируемаяКнопкаФормы"
		И ТипЭлемента <> "ТестируемаяТаблицаФормы"
		И ТипЭлемента <> "ТестируемаяДекорацияФормы" Тогда
		Возврат Ложь;
		
	ИначеЕсли ТипЗнч(ТипЭлемента) <> Тип("Строка") И ТипЗнч(ТипЭлемента) <> Тип("Число") Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ВариантПоискаОбъекта) Тогда
		Если Лев(ИмяОбъекта, 1) = "$" Тогда
			ВариантПоискаОбъекта = "011";
		Иначе
			ВариантПоискаОбъекта = "100";
		КонецЕсли;
	КонецЕсли;
	
	Если ДействиеСОбъектом = "ПроверитьЧтоТекущий" Тогда
		// Искать ничего не нужно. Достаточно проверить свойства текущего объекта с заданными
		Попытка
			ТекущийОбъектФормы = ФормаПриложения.ПолучитьТекущийЭлемент();
		Исключение
			ТекущийОбъектФормы = Неопределено;
		КонецПопытки;
		
		Если ТекущийОбъектФормы = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось получить текущий элемент формы'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		Если Лев(ВариантПоискаОбъекта, 1) = "1" И ТекущийОбъектФормы.Имя <> ИмяОбъекта
			ИЛИ Прав(ВариантПоискаОбъекта, 1) = "1" И ТекущийОбъектФормы.ТекстЗаголовка <> ЗаголовокОбъекта Тогда
			ТекстСообщения = НСтр("ru = 'Текущий элемент формы - другой. Текущим должен быть ""%1"", является текущим - ""%2""'");
			Если Прав(ВариантПоискаОбъекта, 1) = "1" Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ЗаголовокОбъекта);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТекущийОбъектФормы.ТекстЗаголовка);
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяОбъекта);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ТекущийОбъектФормы.Имя);
			КонецЕсли;
			
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		Иначе
			// Текущий элемент отвечает критериям поиска
			ТекстСообщения = НСтр("ru ='Проверка выполнена успешно: элемент является текущим'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
			Возврат Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ТипЭлемента) = Тип("Число") Тогда
		ТипЭлементаСтрокой = СцТ_ГлавнаяФорма.СцТ_ТипТестируемогоОбъектаИзЧисла(ТипЭлемента);
	Иначе
		ТипЭлементаСтрокой = Тип(ТипЭлемента);
	КонецЕсли;
	
	// Для других действий требуется выполнить поиск элемента формы
	ИнтерактивныйОбъект = СцТ_ГлавнаяФорма.СцТ_НайтиИнтерактивныйОбъектТестируемогоПриложения(
		ФормаПриложения,
		ВариантПоискаОбъекта,
		ТипЭлементаСтрокой,
		ИмяОбъекта,
		ЗаголовокОбъекта,
		УзелПути,
		(ДействиеСОбъектом = "ПроверитьОтсутствие"));
	
	Если ТипЗнч(ИнтерактивныйОбъект) = Тип("Строка") Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти элемент формы '")
			+ ИнтерактивныйОбъект;
			
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ДействиеСОбъектом = "ПроверитьОтсутствие" Тогда
		Если ИнтерактивныйОбъект = Неопределено Тогда
			// Все нормально. Нужного элемента нет
			ТекстСообщения = НСтр("ru ='Проверка выполнена успешно: элемент отсутствует.'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
			Возврат Истина;
		Иначе
			Попытка
				ВидимостьЭлемента = ИнтерактивныйОбъект.ТекущаяВидимость();
			Исключение
				ВидимостьЭлемента = Неопределено;
			КонецПопытки;
			
			Если ИскатьСредиВидимых И ВидимостьЭлемента <> Неопределено И НЕ ВидимостьЭлемента Тогда
				// Этот объект не виден пользователю, значит с ео точки зрения объекта нет
				ТекстСообщения = НСтр("ru ='Проверка выполнена успешно: элемент отстутствует среди видимых'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
				Возврат Истина;
			Иначе
				ТекстСообщения = НСтр("ru = 'Проверка отсутствия элемента не выполнена. Заданный элемент обнаружен в тестируемом приложении'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Для остальных действий необходимо существование элемента
	Если ИнтерактивныйОбъект = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Нужный элемент не найден на текущей форме'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	// Вместо конструкций ИначеЕсли используются простые условия - кажется, что это 
	// повысит читаемость процедуры
	
	Если ДействиеСОбъектом = "ПроверитьСуществование" Тогда
		
		Попытка
			ВидимостьЭлемента = ИнтерактивныйОбъект.ТекущаяВидимость();
		Исключение
			ВидимостьЭлемента = Неопределено;
		КонецПопытки;
		
		Если ИскатьСредиВидимых И ВидимостьЭлемента <> Неопределено И НЕ ВидимостьЭлемента Тогда
			ТекстСообщения = НСтр("ru = 'Проверка существования элемента не выполнена. Элемент не видим для пользователя'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		Иначе
			ТекстСообщения = НСтр("ru ='Проверка выполнена успешно: элемент найден'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
			Возврат Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДействиеСОбъектом = "Активизировать" Тогда
		Попытка
			ИнтерактивныйОбъект.Активизировать();
		Исключение
			ТекстСообщения = НСтр("ru ='Не удалось активизировать выбранный элемент. Ошибка при активизации элемента: '")
				+ СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
				
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецПопытки;
		
		ТекстСообщения = НСтр("ru ='Элемент успешно активизирован'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		Возврат Истина;
		
	КонецЕсли;
	
	Если ДействиеСОбъектом = "ПроверитьСвойства" Тогда
		
		УзелСвойств = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "СвойстваОбъекта", Ложь);
		Если УзелСвойств = Неопределено Тогда
			ТекстСообщения = НСтр("ru ='Не удалось выполнить проверку свойств элемента: не заданы значения свойств'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		ОписаниеРазличий = "";
		Для каждого УзелСвойства Из УзелСвойств.ПолучитьЭлементы() Цикл
			
			Если НЕ УзелСвойства.Активность Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеСвойства = "";
			
			Если УзелСвойства.Имя = "Видимость" Тогда
				ПредставлениеСвойства = НСтр("ru = 'видимость'");
				Попытка
					ЗначениеСвойства = ИнтерактивныйОбъект.ТекущаяВидимость();
				Исключение
					ЗначениеСвойства = Неопределено;
				КонецПопытки;
			ИначеЕсли УзелСвойства.Имя = "Доступность" Тогда
				ПредставлениеСвойства = НСтр("ru = 'доступность'");
				Попытка
					ЗначениеСвойства = ИнтерактивныйОбъект.ТекущаяДоступность();
				Исключение
					ЗначениеСвойства = Неопределено;
				КонецПопытки;
			ИначеЕсли УзелСвойства.Имя = "ТолькоПросмотр" Тогда
				ПредставлениеСвойства = НСтр("ru = 'только просмотр'");
				Попытка
					ЗначениеСвойства = ИнтерактивныйОбъект.ТекущееТолькоПросмотр();
				Исключение
					ЗначениеСвойства = Неопределено;
				КонецПопытки;
			ИначеЕсли УзелСвойства.Имя = "Заголовок" Тогда
				ПредставлениеСвойства = НСтр("ru = 'заголовок'");
				Попытка
					ЗначениеСвойства = ИнтерактивныйОбъект.ТекстЗаголовка;
				Исключение
					ЗначениеСвойства = "";
				КонецПопытки;
			ИначеЕсли УзелСвойства.Имя = "ТекстПодсказки" Тогда
				ПредставлениеСвойства = НСтр("ru = 'текст подсказки'");
				Попытка
					ЗначениеСвойства = ИнтерактивныйОбъект.ПолучитьТекстПодсказки();
				Исключение
					ЗначениеСвойства = "";
				КонецПопытки;
			Иначе
				// Неизвестное свойство
				Продолжить;
			КонецЕсли;
			
			// Проверка заданного свойства
			
			Если УзелСвойства.Значение <> ЗначениеСвойства Тогда
				ОписаниеРазличий =
					 ОписаниеРазличий
					+ ?(ПустаяСтрока(ОписаниеРазличий), "", ";" + Символы.ПС)
					+ ПредставлениеСвойства + ": " + НСтр("ru = 'эталонное значение - '")
					+ Строка(УзелСвойства.Значение)
					+ НСтр("ru = ', фактическое значение - '")
					+ Строка(ЗначениеСвойства);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ОписаниеРазличий) Тогда
			ТекстСообщения =
				  НСтр("ru = 'Значения свойств выбранного элемента не соответствуют эталонным:'")
				+ Символы.ПС
				+ ОписаниеРазличий
				+ ".";
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru ='Проверка выполнена успешно: свойства элемент соответствуют эталонным'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		Возврат Истина;
		
	КонецЕсли;
	
	Если ДействиеСОбъектом = "Свернуть" Тогда
		Попытка
			ИнтерактивныйОбъект.Свернуть();
		Исключение
			ТекстСообщения = НСтр("ru ='Не удалось свернуть группу формы: '")
				+ СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
				
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецПопытки;
		
		ТекстСообщения = НСтр("ru ='Группа формы успешно свернута'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
	Если ДействиеСОбъектом = "Развернуть" Тогда
		Попытка
			ИнтерактивныйОбъект.Развернуть();
		Исключение
			ТекстСообщения = НСтр("ru ='Не удалось развернуть группу формы: '")
				+ СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецПопытки;
		
		ТекстСообщения = НСтр("ru ='Группа формы успешно развернута'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		Возврат Истина;
		
	КонецЕсли;
	
	
	Если ДействиеСОбъектом = "НажатьКнопку" Тогда
		
		///////////////////////////////////////////////////////////////////////////////////////
		УзелКнопки =  СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "КнопкаЭлемента", Ложь);
		
		ПредставлениеКнопки = СцТ_ЗначениеВДереве(УзелКнопки, "ПредставлениеКнопки", "",          , Ложь);
		ИмяКнопки           = СцТ_ЗначениеВДереве(УзелКнопки, "ИмяКнопки"          , "",          , Ложь);
		ЗаголовокОбъекта    = СцТ_ЗначениеВДереве(УзелКнопки, "ИмяКнопки"          , "", "Синоним", Ложь);
		
		УзелПути            = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(УзелКнопки, "Имя", "ИСТЗ_ПутьКОбъекту");
		
		ВариантПоискаОбъекта = СцТ_ЗначениеВДереве(УзелКнопки, "ВариантПоискаОбъекта", "", , Ложь);
		
		Если ПустаяСтрока(ВариантПоискаОбъекта) Тогда
			Если Лев(ИмяКнопки, 1) = "$" Тогда
				ВариантПоискаОбъекта = "011";
			Иначе
				ВариантПоискаОбъекта = "100";
			КонецЕсли;
		КонецЕсли;
		
		НажимаемыйОбъект = СцТ_ГлавнаяФорма.СцТ_НайтиИнтерактивныйОбъектТестируемогоПриложения(
			ИнтерактивныйОбъект,
			ВариантПоискаОбъекта,
			Тип("ТестируемаяКнопкаФормы"),
			ИмяКнопки,
			ЗаголовокОбъекта,
			УзелПути);
		
		Если ТипЗнч(НажимаемыйОбъект) = Тип("Строка") Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка при поиске кнопки '")
				+ НажимаемыйОбъект;
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		Если НажимаемыйОбъект = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не найдена кнопка'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		ОписаниеВидаНажимаемоегоОбъекта = СцТ_ГлавнаяФорма.СцТ_ПолучитьВидОбъекта(НажимаемыйОбъект);
		
		ФактическийВидОбъекта = ОписаниеВидаНажимаемоегоОбъекта.Вид;
		
		Если ФактическийВидОбъекта <> "КнопкаКоманднойПанели"
			И ФактическийВидОбъекта <> "ОбычнаяКнопка"
			И ФактическийВидОбъекта <> "Гиперссылка"
			И ФактическийВидОбъекта <> "Картинка"
			И ФактическийВидОбъекта <> "Надпись"
			И ФактическийВидОбъекта <> "ПолеФлажка" Тогда
			
			ТекстСообщения = НСтр("ru = 'Найденый элемент нельзя нажать (%1)'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеВидаНажимаемоегоОбъекта.Синоним);
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
		Попытка
			НажимаемыйОбъект.Нажать();
		Исключение
		КонецПопытки;
		
		
		ТекстСообщения = НСтр("ru ='Кнопка успешно нажата'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		Возврат Истина;
		
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru ='Действие с элементом формы успешно выполнено'");
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	Возврат Истина;
	
КонецФункции

// Выполнение шага "Заполнить отдельный реквизит формы" или "заполнить ячейку  таблицы"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ЗаполнитьОдинРеквизитФормы_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	УзелОписанияРеквизита = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "РеквизитФормы");
	Если УзелОписанияРеквизита = Неопределено Тогда
		ТекстСообщения = ?(ДанныеШага.ТипШага = "ЗаполнитьКолонкуТаблицы",
						   НСтр("ru = 'Не выбрана колонка таблицы'"),
						   НСтр("ru = 'Не выбран реквизит формы'"));
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	УзлыОписания = УзелОписанияРеквизита.ПолучитьЭлементы();
	Если УзлыОписания.Количество() = 0 Тогда
		ТекстСообщения = ?(ДанныеШага.ТипШага = "ЗаполнитьКолонкуТаблицы",
						   НСтр("ru = 'Не выбрана колонка таблицы'"),
						   НСтр("ru = 'Не выбран реквизит формы'"));
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	УзелРеквизита = УзлыОписания.Получить(0);
	
	Если ПустаяСтрока(УзелРеквизита.Имя) Тогда
		ТекстСообщения = ?(ДанныеШага.ТипШага = "ЗаполнитьКолонкуТаблицы",
							НСтр("ru = 'Не задано имя колонки'"),
							НСтр("ru = 'Не задано имя реквизита'"));
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Ошибка          = "";
	ФормаПриложения = СцТ_ГлавнаяФорма.СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(
		ДанныеШага,
		Ошибка);
		
	Если ФормаПриложения = Неопределено Тогда
		ТекстСообщения = СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(Ошибка);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	
	Попытка
		Сообщение = "";
		РезультатВыполненения = СцТ_ВыполнитьДействиеНадРеквизитомФормы(
			ФормаПриложения,
			УзелРеквизита,
			Сообщение,
			ДанныеШага.Значение);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, Сообщение);
	Исключение
		ТекстСообщения = НСтр("ru = '%1: Возникло необрабатываемое исключение: %2'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", УзелРеквизита.Представление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОписаниеОшибки());
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	Если РезультатВыполненения Тогда
		ТекстСообщения = НСтр("ru = 'Действие с элементом формы успешно выполнено'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	КонецЕсли;
	
	Возврат РезультатВыполненения;
	
КонецФункции

// Выполнение шага "Заполнить все реквизиты формыа" или "Заполнить строку таблицы"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ЗаполнитьРеквизитыФормы_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	УзелОписанияРеквизитов = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "Реквизиты");
	Если УзелОписанияРеквизитов = Неопределено
		ИЛИ УзелОписанияРеквизитов.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстСообщения = ?(ДанныеШага.ТипШага = "ЗаполнитьСтрокуТаблицы",
						   НСтр("ru = 'Не выбраны колонки таблицы'"),
						   НСтр("ru = 'Не выбраны реквизиты формы'"));
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Ошибка = "";
	ФормаПриложения = СцТ_ГлавнаяФорма.СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(
		ДанныеШага,
		Ошибка);
		
	Если ФормаПриложения = Неопределено Тогда
		ТекстСообщения = СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(Ошибка);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	УзлыОписанияРеквизитов = УзелОписанияРеквизитов.ПолучитьЭлементы();
	
	Для каждого УзелРеквизита Из УзлыОписанияРеквизитов Цикл
		
		Если НЕ УзелРеквизита.Активность Тогда
			Продолжить;
		КонецЕсли;
		
		Сообщение = "";
		Попытка
			РезультатВыполненения = СцТ_ВыполнитьДействиеНадРеквизитомФормы(
				ФормаПриложения,
				УзелРеквизита,
				Сообщение,
				ДанныеШага.Значение);
				
		Исключение
			ТекстСообщения = НСтр("ru = '%1: Возникло необрабатываемое исключение: %2'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", УзелРеквизита.Представление);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОписаниеОшибки());
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		
		Если НЕ РезультатВыполненения Тогда
			
			ПредставлениеРеквизита = НСтр("ru = 'Реквизит №%1: '");
			ПредставлениеРеквизита = СтрЗаменить(ПредставлениеРеквизита,
				"%1",
				Строка(УзлыОписанияРеквизитов.Индекс(УзелРеквизита) + 1));
			
			Если НЕ ПустаяСтрока(УзелРеквизита.Представление) Тогда
				ПредставлениеРеквизита = ПредставлениеРеквизита + УзелРеквизита.Представление + " - ";
			ИначеЕсли НЕ ПустаяСтрока(УзелРеквизита.Синоним) Тогда
				ПредставлениеРеквизита = ПредставлениеРеквизита + """" + УзелРеквизита.Синоним + """ - ";
			ИначеЕсли НЕ ПустаяСтрока(УзелРеквизита.Имя) Тогда
				ПредставлениеРеквизита = ПредставлениеРеквизита + """" + УзелРеквизита.Имя + """ - ";
			КонецЕсли;
			
			ТекстСообщения = ПредставлениеРеквизита + Сообщение;
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		Иначе
			Если НЕ ПустаяСтрока(Сообщение) Тогда
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, Сообщение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	ТекстСообщения = НСтр("ru = 'Элементы формы успешно заполнены'");
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	Возврат Истина;
	
КонецФункции

// Выполнение шага "Проверить табличный документ"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ПроверитьТабличныйДокумент_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	УзелТабДок = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ТабличныйДокумент");
	Если УзелТабДок = Неопределено ИЛИ ПустаяСтрока(УзелТабДок.Значение) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран табличный документ'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если УзелТабДок.Действие <> "Заполнить" И УзелТабДок.Действие <> "Проверить" Тогда
		ТекстСообщения = НСтр("ru = 'Неизвестное действие над табличным документом: %1'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(УзелТабДок.Действие));
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбластьТабДок = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(УзелТабДок.Представление);
	Попытка
		КоординатыОбласти = СцТ_ГлавнаяФорма.СцТ_КоординатыОбластиИзАдреса(ОбластьТабДок);
	Исключение
		ТекстСообщения = НСтр("ru = 'Неверно задана область табличного документа'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	КонецПопытки;
	
	//Если эталонныеданные содержатся во внешнем файле, тогда нужно прочитать файл и подгрузить данные
	УзелОписанияФайла = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ФайлТабличногоДокумента");
	Если УзелОписанияФайла <> Неопределено Тогда
		Если УзелОписанияФайла.Активность Тогда
			Если ПустаяСтрока(УзелОписанияФайла.Значение) Тогда
				ТекстСообщения = НСтр("ru = 'При проверке табличного документа должны использоваться данные из файла, но не задано имя файла'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
			ИмяФайлаОтчета = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(УзелОписанияФайла.Значение);
			ПроверочныйФайл = Новый Файл(ИмяФайлаОтчета);
			Если НЕ ПроверочныйФайл.Существует() Тогда
				ТекстСообщения = НСтр("ru = 'Не найден файл %1 с эталонными знаениями'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(ИмяФайлаОтчета));
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
			ДД = Новый ДвоичныеДанные(ИмяФайлаОтчета);
			АдрДД = ПоместитьВоВременноеХранилище(ДД, Новый УникальныйИдентификатор);
			
			ПрочитанныйТаблДок = ПолучитьИзВременногоХранилища(ПолучитьТД(АдрДД));
			
			// Перезапись данных
			УзелДанных = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(ДанныеШага.Значение, "ДанныеТабличногоДокумента");
			
			// Заполнение дерева данными
			СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеИзРеальногоТабличногоДокумента(
				УзелДанных,
				ПрочитанныйТаблДок,
				КоординатыОбласти);
			
		КонецЕсли;
	КонецЕсли;
	
	УзелДанных = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ДанныеТабличногоДокумента");
	Если УзелДанных = Неопределено ИЛИ УзелДанных.ПолучитьЭлементы().Количество() = 0  Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти данные об эталонном табличном документе'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат ЛОжь;
	КонецЕсли;
	
	УзелОбъединений = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ОбъединенныеОбласти");
	ЯчейкиЭталонВОбъединениях = Новый Соответствие;
	Если УзелОбъединений <> Неопределено Тогда
		Для каждого УзелОбъединения Из УзелОбъединений.ПолучитьЭлементы() Цикл
			Попытка
				СцТ_ЗаполнитьАдресаОбъединенныхЯчеек(ЯчейкиЭталонВОбъединениях, УзелОбъединения.Имя);
			Исключение
				ТекстСообщения = НСтр("ru = 'Неверный адрес объединенной области: %1. Ошибка: %2'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(УзелОбъединения.Имя));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОписаниеОшибки());
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	// Получение объекта тестируемого приложения, соответствующего табличному документу
	Ошибка = "";
	ФормаПриложения = СцТ_ГлавнаяФорма.СцТ_ПолучитьФормуДляИнтерактивногоШага(ДанныеШага, , Ошибка);
	Если ФормаПриложения = Неопределено Тогда
		ТекстСообщения = СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(Ошибка);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТаблДокОбъект = ФормаПриложения.НайтиОбъект(
		Тип("ТестируемоеПолеФормы"),
		,
		УзелТабДок.Значение,
		СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов);
	
	Если ТаблДокОбъект = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Поле табличного документа не найдено на форме'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ТаблДокОбъект.Активизировать();
	Исключение
	КонецПопытки;
	
	Если ТаблДокОбъект.Вид <> ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ТекстСообщения = НСтр("ru = 'Найденый объект тестируемого приложения не является табличным документом'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		// Определение координат левой верхней ячейки области таб. документа
		УзелПервойСтроки   = УзелДанных.ПолучитьЭлементы().Получить(0);
		УзелПервогоСтолбца = УзелПервойСтроки.ПолучитьЭлементы().Получить(0);
		НомерСтроки            = Число(Сред(УзелПервойСтроки.Имя, 2));
		НомерНачальногоСтолбца = Число(Сред(УзелПервогоСтолбца.Имя, 2));
		
		ЯчейкиРеалВОбъединениях          = Новый Соответствие;
		МассивИменОбъединенныхЯчеек_Реал = Новый Массив;
		
		ПредставлениеРазличий = "";
		ОшибкиПоОбластям = Новый Соответствие;
		Для каждого УзелСтроки Из УзелДанных.ПолучитьЭлементы() Цикл
			
			УзлыКолонок  = УзелСтроки.ПолучитьЭлементы();
			НомерКолонки = НомерНачальногоСтолбца;
			
			Для каждого УзелКолонки Из УзелСтроки.ПолучитьЭлементы() Цикл
				
				АдресЯчейки = ВРег(УзелСтроки.Имя + УзелКолонки.Имя);
				
				ЭталонЯчейкаВОбъединении = (ЯчейкиЭталонВОбъединениях[АдресЯчейки] = Истина);
				
				ТаблДокОбъект.УстановитьТекущуюОбласть(АдресЯчейки);
				АдресТекущейОбл = ТаблДокОбъект.ПолучитьАдресТекущейОбласти();
				
				// Как объединенные нужно учитывать все ячейки, так как в вебе
				// курсор в табличном документе не смещается дальше допустимой области
				
				Если МассивИменОбъединенныхЯчеек_Реал.Найти(АдресТекущейОбл) = Неопределено Тогда
					// Это левый верхний угол объединенной ячейки
					ЗначениеРеалЯчейки = СокрЛП(ТаблДокОбъект.ПолучитьТекстТекущейОбласти());
					МассивИменОбъединенныхЯчеек_Реал.Добавить(АдресТекущейОбл);
					РеалЯчейкаВОбъединении = Ложь;
					
				Иначе
					ЗначениеРеалЯчейки = "";
					РеалЯчейкаВОбъединении = Истина;
					
				КонецЕсли;
				
				Если УзелТабДок.Действие = "Заполнить" Тогда
					
					Если ЭталонЯчейкаВОбъединении Тогда
						Продолжить;
						
					ИначеЕсли РеалЯчейкаВОбъединении Тогда
						
						ТекстСообщения = НСтр("ru = 'Не удалось заполнить ячейку %1:
												|ячейка в тестируемом приложении входит в состав объединения'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(АдресЯчейки));
						СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
						Возврат Ложь;
						
					ИначеЕсли ЗначениеРеалЯчейки <> УзелКолонки.Значение Тогда
						
						Попытка
							ПолеВвода = ТаблДокОбъект.ПолучитьПолеТекущейОбласти();
							Если ТипЗнч(ПолеВвода) = Тип("ТестируемоеПолеФормы")
								И ПолеВвода.Вид = ВидПоляФормы.ПолеВвода Тогда
								ТаблДокОбъект.НачатьРедактированиеТекущейОбласти();
								ПолеВвода.ВвестиТекст(УзелКолонки.Значение);
								ТаблДокОбъект.ЗавершитьРедактированиеТекущейОбласти();
							КонецЕсли;
						Исключение
							ТекстСообщения = НСтр("ru = 'Не удалось заполнить ячеку %1: %2'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(АдресЯчейки));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОписаниеОшибки());
							СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
							Возврат Ложь;
							
						КонецПопытки;
						
					КонецЕсли;
					
				Иначе
					
					ЗначениеЭталонЯчейки = ?(ЭталонЯчейкаВОбъединении,
											 "",
											 СокрЛП(УзелКолонки.Значение));
					
					Если ЗначениеЭталонЯчейки <> ЗначениеРеалЯчейки Тогда
						ТекстОшибкиСтроки = СтрокаОшибочногоСравнения2хЭлементов();
						
						ЗЭЯ = ПреобразоватьЗначениеДляОтображения(ЗначениеЭталонЯчейки);
						ЗРЯ = ПреобразоватьЗначениеДляОтображения(ЗначениеРеалЯчейки);
						
						ТекстОшибкиСтроки = СтрЗаменить(ТекстОшибкиСтроки, "&amp;Name"  , АдресЯчейки);
						ТекстОшибкиСтроки = СтрЗаменить(ТекстОшибкиСтроки, "&amp;Value1", ЗЭЯ);
						ТекстОшибкиСтроки = СтрЗаменить(ТекстОшибкиСтроки, "&amp;Value2", ЗРЯ);
						
						СцТ_ДобавитьПодстроку(ПредставлениеРазличий, ТекстОшибкиСтроки, Символы.ВК);
					КонецЕсли;
					
				КонецЕсли;
				
				НомерКолонки = НомерКолонки + 1;
				
			КонецЦикла;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Если УзелТабДок.Действие = "Проверить" Тогда
			Если НЕ ПустаяСтрока(ПредставлениеРазличий) Тогда
				
				// Нужно добавить заголовок таблицы
				
				ЗаголовокТаблицы = НСтр("ru = 'Обнаружены отличия табличного документа от эталона:'");
				
				ЗаголовокТаблицы = ЗаголовокТаблицы + 
					"<table style=""text-align: left; width: 640px; height: 52px;"" border=""1"" cellpadding=""3"" cellspacing=""0"">";
				ЗаголовокТаблицы = ЗаголовокТаблицы + 
					"<tbody><tr>";
				
				ДобавляемаяСтрока = "<th style=""width: 182px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
				ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Адрес ячейки'"));
				ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
				
				ДобавляемаяСтрока = "<th style=""width: 204px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
				ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Эталонное значение'"));
				ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
				
				ДобавляемаяСтрока = "<th style=""width: 204px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
				ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Проверяемое значение'"));
				ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
				
				ЗаголовокТаблицы = ЗаголовокТаблицы + "</tr></tbody>";
				
				ТекстСообщения = ЗаголовокТаблицы + ПредставлениеРазличий + "</table>";
				
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникла ошибка'");
		ПодстрокаОшибки =  СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ОписаниеОшибки());
		СцТ_ДобавитьПодстроку(ТекстСообщения, ПодстрокаОшибки, ":<br>", "<i>",  "</i>");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ТекстСообщения = НСтр("ru = 'Табличный документ успешно проверен: расхождений с эталоном нет'");
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	Возврат Истина;
	
КонецФункции

// Выполнение шага "Закрыть форму"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ЗакрытьКлиентскоеОкноФормы_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеРезультата = "";
	ОписаниеФормы = СцТ_ГлавнаяФорма.СцТ_ПолучитьФормуДляИнтерактивногоШага(ДанныеШага, Истина, ОписаниеРезультата);
	
	Если ОписаниеФормы = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось обратиться к окну формы: %1'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(ОписаниеРезультата));
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТекущееОкно  = ОписаниеФормы.ОкноОбъект;
	ТекущаяФорма = ОписаниеФормы.ФормаОбъект;
	
	Попытка
		
		Если ТекущееОкно.Основное Тогда
			ТекстСообщения = НСтр("ru = 'Текущее окно является главным. Для закрытия главного окна тестируемого приложения
									|необходимо использовать шаг ""Завершить работу тестируемого приложения""'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		ТекущееОкно.Закрыть();
		
	Исключение
		ТекстСообщения = НСтр("ru = 'При закрытии клиентского окна формы произошла ошибка'")
			+ Символы.ПС
			+ СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		Если НЕ ТекущаяФорма.ОжидатьЗакрытие(СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов) Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось дождаться закрытия формы за установленный таймаут ожидания (%1 сек.)'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
				"%1",
				СтрЗаменить(Строка(СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов), Символ(160), ""));
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'При ожидании закрытия формы произошла ошибка'")
			+ Символы.ПС
			+ СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке()); 
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
	КонецПопытки;
	
	ТекстСообщения = НСтр("ru = 'Окно успешно закрыто'"); 
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	Возврат Истина;
	
КонецФункции

// Выполнение шага "Таблица формы"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_АвтоГруппаТаблицаФормы_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	РезультатВыполненияШага = Истина;
	
	ТаблицаНаФорме = СцТ_ГлавнаяФорма.СцТ_ПолучитьТаблицуДляИнтерактивногоШага(ДанныеШага);
	ТипОбъекта     = ТипЗнч(ТаблицаНаФорме);
	Если ТипОбъекта <> Тип("ТестируемаяТаблицаФормы") Тогда
		РезультатВыполненияШага = Ложь;
		Если ТипОбъекта = Тип("Строка") Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка поиска таблицы на форме: '")
				+ СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(ТаблицаНаФорме);
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось найти таблицу на форме'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		КонецЕсли;
	Иначе
		Попытка
			ТаблицаНаФорме.Активизировать();
		Исключение
			РезультатВыполненияШага = Ложь;
			ТекстСообщения = НСтр("ru = 'Таблица найдена но активизировать ее не удалось'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	
	Если РезультатВыполненияШага Тогда
		ТекстСообщения = НСтр("ru = 'Таблица найдена и активизирована'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	КонецЕсли;
	
	Возврат РезультатВыполненияШага;
	
КонецФункции

// Выполнение шага "Выполнить любое действие с таблицей"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ДействиеСТаблицей_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		КоличествоПовторенийШага = Число(СцТ_ЗначениеВДереве(ДанныеШага.Значение, "КоличествоПовторений", 1));
	Исключение
		КоличествоПовторенийШага = 1;
	КонецПопытки;
	
	ТаблицаНаФорме = СцТ_ГлавнаяФорма.СцТ_ПолучитьТаблицуДляИнтерактивногоШага(ДанныеШага);
	Если ТаблицаНаФорме <> Неопределено Тогда
		Попытка
			ТаблицаНаФорме.Активизировать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Для Итератор = 1 По КоличествоПовторенийШага Цикл
		РезультатВыполненияШага = СцТ_ВыполнитьДействиеСТаблицей_НаКлиенте(
			ДанныеШага,
			МассивИнфоСообщений);
		Если НЕ РезультатВыполненияШага Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если РезультатВыполненияШага Тогда
		ТекстСообщения = НСтр("ru = 'Действие с таблицей успешно выполнено'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	КонецЕсли;
	
	Возврат РезультатВыполненияШага;
	
КонецФункции

// Выполнение шага "Найти нужную строку таблицы"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_НайтиСтрокуТаблицы_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Ошибка = "";
	ТаблицаНаФорме = СцТ_ГлавнаяФорма.СцТ_ПолучитьТаблицуДляИнтерактивногоШага(ДанныеШага, Ошибка);
	Если НЕ ПустаяСтрока(Ошибка) Тогда
		ТекстСообщения = СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(Ошибка);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	НазначениеШага = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "НазначениеШага", "");
	Если ПустаяСтрока(НазначениеШага) Тогда
		ТекстСообщения = НСтр("ru = 'Не указано назначение шага'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если НазначениеШага <> "СделатьТекущейСтрокой"
		И НазначениеШага <> "ПроверитьОтсутствиеСтроки" Тогда
		ТекстСообщения = НСтр("ru = 'Неизвестное назначение шага поиска строки: ""%1""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", НазначениеШага);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ОбластьПоиска = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ОбластьПоиска", "");
	Если ПустаяСтрока(НазначениеШага) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана область поиска строки'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбластьПоиска <> "ТекущаяСтрока"
		И ОбластьПоиска <> "СНачалаТаблицы"
		И ОбластьПоиска <> "ОтТекущейСтроки"
		И ОбластьПоиска <> "ОтТекущейСтрокиВверх"
		И ОбластьПоиска <> "СКонцаТаблицы" Тогда
		ТекстСообщения = НСтр("ru = 'Неизвестная область поиска строки: ""%1""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОбластьПоиска);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ИскатьВПодчиненных = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ИскатьВПодчиненныхСтроках", Ложь);
	
	УзелКолонок = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "КолонкиВСтроке");
	
	Если УзелКолонок = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не заданы значения поиска'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	УзлыКолонок = УзелКолонок.ПолучитьЭлементы();
	
	// Проверить, что установлен флаг активности хотя бы у одной колонки
	ЕстьАктивнаяКолонка = Ложь;
	Для каждого УзелКолонки Из УзлыКолонок Цикл
		Если УзелКолонки.Активность Тогда
			ЕстьАктивнаяКолонка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьАктивнаяКолонка Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны значения в колонках для поиска строки'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если СцТ_ГлавнаяФорма.СцТ_ВыполнениеТеста <> "АвтоматическийРежим" Тогда
		Попытка
			ТаблицаНаФорме.Активизировать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		
		КолонкиТаблицыНаФорме = СцТ_КолонкиТаблицыФормы(ТаблицаНаФорме, Истина);
		
		Если ОбластьПоиска = "ТекущаяСтрока" Тогда
			
			ОписаниеРазличий  = "";
			СообщениеОбОшибке = "";
			СтрокаСоответствует = СцТ_ПроверитьТекущуюСтрокуТаблицы(
				ТаблицаНаФорме,
				УзлыКолонок,
				КолонкиТаблицыНаФорме,
				ОписаниеРазличий,
				СообщениеОбОшибке);
			
			Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
				ТекстСообщения = СообщениеОбОшибке;
				Возврат Ложь;
			КонецЕсли;
			
			Если НазначениеШага = "СделатьТекущейСтрокой"
				И НЕ СтрокаСоответствует Тогда
				ТекстСообщения = ОписаниеРазличий;
				Возврат Ложь;
			ИначеЕсли НазначениеШага = "ПроверитьОтсутствиеСтроки"
				И СтрокаСоответствует Тогда
				ТекстСообщения = НСтр("ru = 'Строка таблицы соответствует эталонной'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			
			Если ОбластьПоиска = "СНачалаТаблицы" Тогда
				ТаблицаНаФорме.ПерейтиКПервойСтроке();
			ИначеЕсли ОбластьПоиска = "СКонцаТаблицы" Тогда
				ТаблицаНаФорме.ПерейтиКПоследнейСтроке();
			КонецЕсли;
			
			СообщениеОбОшибке = "";
			
			// Индекс существующих колонок
			ТекстыЗаголовковКолонок = Новый Соответствие;
			Для каждого КлючЗначение Из КолонкиТаблицыНаФорме Цикл
				ТекстыЗаголовковКолонок[ВРег(СокрЛП(СцТ_ГлавнаяФорма.СцТ_ЗаголовокИнтерактивногоОбъекта(КлючЗначение.Значение)))] = Истина;
			КонецЦикла;
			
			ОписаниеСтроки = Новый Соответствие;
			Для каждого Узел Из УзлыКолонок Цикл
				
				Если НЕ Узел.Активность Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяКолонки            = Узел.Имя;
				КолонкаНайденаПоИмени = Ложь;
				
				Если Лев(ИмяКолонки, 1) <> "$" Тогда
					НайденаяКолонкаПоИмени = КолонкиТаблицыНаФорме[ИмяКолонки];
					Если НайденаяКолонкаПоИмени <> Неопределено Тогда
						КолонкаНайденаПоИмени = Истина;
						ОписаниеСтроки[СцТ_ГлавнаяФорма.СцТ_ЗаголовокИнтерактивногоОбъекта(НайденаяКолонкаПоИмени)] = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(Узел.Значение);
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ КолонкаНайденаПоИмени Тогда
					
					// Тогда попытаться найти по заголовку (если имя изменилось, а заголовок нет)
					//НайденыеКолонкиПоЗаголовку = ТаблицаНаФорме.НайтиОбъекты(Тип("ТестируемоеПолеФормы"), Узел.Синоним);
					КолонкаСуществует = (ТекстыЗаголовковКолонок[ВРег(СокрЛП(Узел.Синоним))] = Истина);
					Если НЕ КолонкаСуществует Тогда
						ТекстСообщения = НСтр("ru = 'Колонка с заголовком ""%1"" не обнаружена в таблице'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Узел.Синоним);
						СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
					КонецЕсли;
					
					ОписаниеСтроки[Узел.Синоним] = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(Узел.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОписаниеСтроки.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'В таблице не обнаружена ни одна из перечисленных колонок для поиска'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
			СтрокаНайдена = Ложь;
			Если ОбластьПоиска = "СНачалаТаблицы"
				ИЛИ ОбластьПоиска = "ОтТекущейСтроки" Тогда
				НаправлениеПерехода = Вычислить("НаправлениеПереходаКСтроке.Вниз");
			Иначе
				НаправлениеПерехода = Вычислить("НаправлениеПереходаКСтроке.Вверх");
			КонецЕсли;
			
			Попытка
				СтрокаНайдена = ТаблицаНаФорме.ПерейтиКСтроке(ОписаниеСтроки, НаправлениеПерехода);
			Исключение
				ТекстСообщения = НСтр("ru = 'Ошибка при поиске строки таблицы: '") + ОписаниеОшибки();
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			КонецПопытки;
			
			Если НазначениеШага = "СделатьТекущейСтрокой"
				И НЕ СтрокаНайдена Тогда
				ТекстСообщения = НСтр("ru = 'Строка не найдена в таблице'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			ИначеЕсли НазначениеШага = "ПроверитьОтсутствиеСтроки"
				И СтрокаНайдена Тогда
				ТекстСообщения = НСтр("ru = 'Строка таблицы найдена. Проверка отсутствия строки не выполнена'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникло необрабатываемое исключение: '") + ОписаниеОшибки();
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Выполнение шага "Завершение работы тестируемого приложения"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ЗавершитьРаботуТестируемогоКлиента_НаКлиенте(
	ДанныеШага,
	МассивИнфоСообщений)
	
	РазорватьСоединение = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "РазорватьСвязьСТестируемымПриложением", Ложь);
	
	Если НЕ СцТ_ГлавнаяФорма.СцТ_ТестируемоеПриложениеАктивно() Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет активного соединения с тестируемым приложением'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	Иначе
		
		Попытка
			ОсновноеОкно = СцТ_ГлавнаяФорма.СцТ_ПолучитьОсновноеОкноТестируемогоПриложения();
			Если ОсновноеОкно <> Неопределено Тогда
				ОсновноеОкно.Закрыть();
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка при попытке закрыть окно конфигурации: '")
				+ СцТ_ГлавнаяФорма.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		
		Если РазорватьСоединение Тогда
			Попытка
				СцТ_ГлавнаяФорма.СцТ_Контроллер.РазорватьСоединение();
				СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено;
				СцТ_ГлавнаяФорма.СцТ_СостояниеТП();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Работа тестируемого приложения успешно завершена'");
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	Возврат Истина;
	
КонецФункции

// Выполнение шага "Выполнить процедуру"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ВыполнитьКлиентскуюПроцедуру(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	УзелТекстаПроцедуры = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ТекстПроцедуры");
	
	Если УзелТекстаПроцедуры = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не найден текст процедуры. Внутренняя ошибка инструмента'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТекстПроцедуры = УзелТекстаПроцедуры.Значение;
	Если ТипЗнч(ТекстПроцедуры) <> Тип("Строка") Тогда
		ТекстСообщения = НСтр("ru='Не найден текст процедуры. Внутренняя ошибка инструмента'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстПроцедуры) Тогда
		// Процедура успешно выполнена.
		// Т.к. ничего делать не нужно
		Возврат Истина;
	КонецЕсли;
	
	// Задвоенные символы && считаются одним символом
	ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры, "&&", "#ST#");
	
	// Соласование имен параметров в тексте процедуры
	// с глобальными, внешними и внутренними параметрами
	
	ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры, "&", "СцТ_ГлавнаяФорма.ГлобальныеПараметры.");
	
	// Обратная замена символов подстановки
	ТекстПроцедуры = СтрЗаменить(ТекстПроцедуры, "#ST#", "&");
	
	
	// Заполнение структуры для внутренних параметров шага
	УзелПараметровШага = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ПараметрыШага");
	
	Если ТипЗнч(СцТ_ГлавнаяФорма.ГлобальныеПараметры) <> Тип("Структура") Тогда
		СцТ_ГлавнаяФорма.ГлобальныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если УзелПараметровШага <> Неопределено Тогда
		Для каждого СтрокаПараметра Из УзелПараметровШага.ПолучитьЭлементы() Цикл
			Если СцТ_ГлавнаяФорма.ГлобальныеПараметры.Свойство(СтрокаПараметра.Имя) Тогда
				// Перезаписывать значение нужно только, если они есть
				Если ЗначениеЗаполнено(СтрокаПараметра.Значение) Тогда
					СцТ_ГлавнаяФорма.ГлобальныеПараметры[СтрокаПараметра.Имя] = СтрокаПараметра.Значение;
				КонецЕсли;
			Иначе
				СцТ_ГлавнаяФорма.ГлобальныеПараметры.Вставить(СтрокаПараметра.Имя, СтрокаПараметра.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Нужно дать пользователю возможность использовать параметры тестируемого приложения,
	// о которых знает обработка, 
	
	ПеремТестируемоеПриложение = СцТ_ГлавнаяФорма.СцТ_Контроллер;
	
	ПеремТестируемаяФорма = Неопределено;
	
	Если ДанныеШага.ПолучитьРодителя() <> Неопределено Тогда
		ОписательФормы  = СцТ_ГлавнаяФорма.СцТ_ФормыТестируемогоПриложения[ДанныеШага.ПолучитьРодителя().УИШ];
		
		Если ОписательФормы <> Неопределено Тогда
			ПеремТестируемаяФорма = ОписательФормы.ФормаОбъект;
		Иначе
			ПеремТестируемаяФорма = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	РезультатШага = Истина;
	
	Попытка
		// Переменные, используемые в процедуре
		РезультатВыполнения = Истина;
		ТекстСообщения = "";
		
		Выполнить(ТекстПроцедуры);
		
		Если РезультатВыполнения = Истина Тогда
			СцТ_ТекстСообщения = НСтр("ru='Процедура выполнена <b>успешно</b>.'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, СцТ_ТекстСообщения);
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
			КонецЕсли;
		Иначе
			РезультатШага = Ложь;
			СцТ_ТекстСообщения = НСтр("ru='Результат выполнения процедуры отрицательный.'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, СцТ_ТекстСообщения);
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru='При выполнении процедуры возникла ошибка'");
		
		СцТ_ДобавитьПодстроку(ТекстСообщения, СцТ_ПредставлениеИсключения(ИнформацияОбОшибке(), Истина), ":<br>");
		
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат РезультатШага;
	
КонецФункции

// Выполнение шага "Выполнить процедуру"
//
// Параметры
//	ПродолжатьЦикл - Признак, что цикл должен быть продолжен
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_Повторение(ПродолжатьЦикл, ДанныеШага, МассивИнфоСообщений)
	
	УзелОписаниПовтора = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ОписаниеПовтора");
	Если УзелОписаниПовтора = Неопределено Тогда
		УзелОписаниПовтора = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДанныеШага.Значение,
			"ОписаниеПовтора",
			0,
			НСтр("ru = 'Описание повтора'"),
			Истина);
	КонецЕсли;
	
	ТипЦикла           = СцТ_ЗначениеВДереве(УзелОписаниПовтора, "ТипЦикла"          , "Счетный");
	ИмяПеременной      = СцТ_ЗначениеВДереве(УзелОписаниПовтора, "ИмяПеременной"     , "ПеременнаяЦикла");
	КонечноеЗначение   = СцТ_ЗначениеВДереве(УзелОписаниПовтора, "КонечноеЗначение"  , 1);
	НачальноеЗначение  = СцТ_ЗначениеВДереве(УзелОписаниПовтора, "НачальноеЗначение" , 1);
	Шаг                = СцТ_ЗначениеВДереве(УзелОписаниПовтора, "Шаг"               , 1);
	КоличествоПовторов = СцТ_ЗначениеВДереве(УзелОписаниПовтора, "КоличествоПовторов", 1);
	
	
	// Переменная цикла хранится в глобальных параметрах,
	// чтобы ее можно было использовать в программах
	
	Если ТипЗнч(СцТ_ГлавнаяФорма.ГлобальныеПараметры) <> Тип("Структура") Тогда
		СцТ_ГлавнаяФорма.ГлобальныеПараметры = Новый Структура;
	КонецЕсли;
	
	ПродолжатьЦикл = Ложь;
	
	Если ТипЦикла = "Счетный" Тогда
		ЗначениеПараметра = 0;
		Если СцТ_ГлавнаяФорма.ГлобальныеПараметры.Свойство(ИмяПеременной, ЗначениеПараметра) Тогда
			Если ТипЗнч(ЗначениеПараметра) <> Тип("Число") Тогда
				ТекстСообщения = НСтр("ru = 'Переменная цикла не является числом'");
				Возврат Ложь;
			КонецЕсли;
			ЗначениеПараметра = ЗначениеПараметра + Шаг;
			СцТ_ГлавнаяФорма.ГлобальныеПараметры[ИмяПеременной] = ЗначениеПараметра;
		Иначе
			ЗначениеПараметра = НачальноеЗначение;
			СцТ_ГлавнаяФорма.ГлобальныеПараметры.Вставить(ИмяПеременной, ЗначениеПараметра);
		КонецЕсли;
		
		Если ЗначениеПараметра > КонечноеЗначение И Шаг > 0
			ИЛИ ЗначениеПараметра < КонечноеЗначение И Шаг < 0 Тогда
			// Выход из цикла
			ПродолжатьЦикл = Ложь;
		Иначе
			// Продолжаем цикл
			ПродолжатьЦикл = Истина;
		КонецЕсли;
		
	Иначе
		ЗначениеПараметра = Ложь;
		Если СцТ_ГлавнаяФорма.ГлобальныеПараметры.Свойство(ИмяПеременной, ЗначениеПараметра) Тогда
			Если ТипЗнч(ЗначениеПараметра) <> Тип("Булево") И ТипЗнч(ЗначениеПараметра) <> Тип("Число") Тогда
				ТекстСообщения = НСтр("ru = 'Переменная цикла не является логической'");
				Возврат Ложь;
			КонецЕсли;
			СцТ_ГлавнаяФорма.ГлобальныеПараметры[ИмяПеременной] = ЗначениеПараметра;
		Иначе
			ТекстСообщения = НСтр("ru = 'Переменная цикла не определена. Возможно переменная не была объявлена в предыдущих шагах'");
			Возврат Ложь;
		КонецЕсли;
		
		Если ЗначениеПараметра Тогда
			// Продолжаем цикл
			ПродолжатьЦикл = Истина;
		Иначе
			// Выход из цикла
			ПродолжатьЦикл = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СцТ_ВыполнитьШаг_Условие(ВыполнятьПодчиненныеШаги, ДанныеШага, МассивИнфоСообщений)
	
	УзелОписанияУсловия = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ОписаниеУсловия");
	Если УзелОписанияУсловия = Неопределено Тогда
		УзелОписанияУсловия = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДанныеШага.Значение,
			"ОписаниеУсловия",
			0,
			НСтр("ru = 'Описание условия'"),
			Истина);
	КонецЕсли;
	
	ИмяПеременной      = СцТ_ЗначениеВДереве(УзелОписанияУсловия, "ИмяПеременной"     , "ПеременнаяУсловия");
	ЗначениеПеременной = СцТ_ЗначениеВДереве(УзелОписанияУсловия, "ЗначениеПеременной", Истина);
	
	// Переменная условия хранится в глобальных параметрах
	// чтобы ее можно было использовать в программах
	
	Если ТипЗнч(СцТ_ГлавнаяФорма.ГлобальныеПараметры) <> Тип("Структура") Тогда
		СцТ_ГлавнаяФорма.ГлобальныеПараметры = Новый Структура;
	КонецЕсли;
	
	ЗначениеПараметра = Ложь;
	Если СцТ_ГлавнаяФорма.ГлобальныеПараметры.Свойство(ИмяПеременной, ЗначениеПараметра) Тогда
		Если ТипЗнч(ЗначениеПараметра) <> Тип("Булево") И ТипЗнч(ЗначениеПараметра) <> Тип("Число") Тогда
			ТекстСообщения = НСтр("ru = 'Переменная условия не может быть преобразована в булево'");
			Возврат Ложь;
		КонецЕсли;
		СцТ_ГлавнаяФорма.ГлобальныеПараметры[ИмяПеременной] = ЗначениеПараметра;
	Иначе
		// Если переменная не объявлена, то ее значение равно ЛОЖЬ
		СцТ_ГлавнаяФорма.ГлобальныеПараметры.Вставить(ИмяПеременной, Ложь);
	КонецЕсли;
	
	Если ЗначениеПараметра = ЗначениеПеременной Тогда
		// Выполняем подчиненные шаги
		ВыполнятьПодчиненныеШаги = Истина;
	Иначе
		
		// Пропускам блок
		ВыполнятьПодчиненныеШаги = Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СцТ_ВыполнитьШаг_ПроверитьТекстОшибки(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Получаем данные шага
	ЭталонВариантПроверки = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ВариантПроверки", "ОшибкаПодробно", "Значение", Истина);
	ЭталонИмяМодуля       = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ИмяМодуля"      , ""              , "Значение", Истина);
	ЭталонИсходнаяСтрока  = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ИсходнаяСтрока" , ""              , "Значение", Истина);
	ЭталонНомерСтроки     = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "НомерСтроки"    , 0               , "Значение", Истина);
	ЭталонОписаниеОшибки  = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "Описание"       , ""              , "Значение", Истина);
	ЭталонДействие        = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "Действие"       , "Сведения"      , "Значение", Ложь);
	ЭталонЗакрытьОкно     = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ЗакрытьОкно"    , Истина          , "Значение", Ложь);
	
	ЭталонИмяМодуляАктивность       = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ИмяМодуля"      , "", "Активность", Истина);
	ЭталонИсходнаяСтрокаАктивность  = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ИсходнаяСтрока" , "", "Активность", Истина);
	ЭталонНомерСтрокиАктивность     = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "НомерСтроки"    , 0 , "Активность", Истина);
	ЭталонОписаниеОшибкиАктивность  = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "Описание"       , "", "Активность", Истина);
	
	// Получение сведений о проверяемом объекте
	ИнформацияОбОшибке = СцТ_ГлавнаяФорма.СцТ_Контроллер.ПолучитьТекущуюИнформациюОбОшибке();
	Если ИнформацияОбОшибке = Неопределено Тогда
		// В тестируемом приложении ошибки нет
		
		Если ЭталонВариантПроверки = "ОшибокНет" Тогда
			ТекстСообщения = НСтр("ru='Проверка отсутствия ошибок выполнена успешно'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
			Возврат Истина;
		Иначе
			// Это ошибочное состояние предполагалось, что будет ошибка
			ТекстСообщения = НСтр("ru='Ожидалось, что должно быть сообщение об ошибке. Сообщения нет'");
			Если ЭталонВариантПроверки = "ОшибкаПодробно" Тогда
				ТекстСообщения = ТекстСообщения
							   + " "
							   + "Эталонное значение:";
				
				Если ЭталонОписаниеОшибкиАктивность Тогда
					ТекстСообщения = ТекстСообщения + " " + ЭталонОписаниеОшибки;
				КонецЕсли;
				
				Если ЭталонИмяМодуляАктивность Тогда
					ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'Модуль:'") + " " + Строка(ЭталонНомерСтроки);
				КонецЕсли;
				
				Если ЭталонНомерСтрокиАктивность Тогда
					ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'Строка:'") + " " + ЭталонИмяМодуля;
				КонецЕсли;
				
				Если ЭталонИсходнаяСтрокаАктивность Тогда
					ТекстСообщения = ТекстСообщения + " (" + ЭталонИсходнаяСтрока + ")";
				КонецЕсли;
				
			КонецЕсли;
			
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			
			// Окно закрывать не нужно, так как его нет
			Возврат (ЭталонДействие = "Сведения");
			
		КонецЕсли;
	Иначе
		// Данные о тестируемом приложении
		// Леонэлла
		//ИмяМодуля       = ИнформацияОбОшибке.ИмяМодуля;
		//ИсходнаяСтрока  = ИнформацияОбОшибке.ИсходнаяСтрока;
		//НомерСтроки     = ИнформацияОбОшибке.НомерСтроки;
		//ОписаниеОшибки  = ИнформацияОбОшибке.Описание;
		ИмяМодуля       = ИнформацияОбОшибке.Причина.ИмяМодуля;
		ИсходнаяСтрока  = ИнформацияОбОшибке.Причина.ИсходнаяСтрока;
		НомерСтроки     = ИнформацияОбОшибке.Причина.НомерСтроки;
		ОписаниеОшибки  = ИнформацияОбОшибке.Причина.Описание;
		// Леонэлла \\
		
		
		Правильно = Ложь;
		
		Если ЭталонВариантПроверки = "ОшибокНет" Тогда
			// Ошибка, которой не должно было быть
			Правильно = Ложь;
			ТекстСообщения = НСтр("ru='Проверка отсутствия ошибок НЕ выполнена. Обнаружено сообщение об ошибке'");
			
			Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
				ТекстСообщения = ТекстСообщения + ":" + " " + ОписаниеОшибки;
			КонецЕсли;
			
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			
		ИначеЕсли ЭталонВариантПроверки = "ЕстьОшибка" Тогда
			Правильно = Истина;
			ТекстСообщения = НСтр("ru='Проверка наличия ошибки выполнена успешно. Сообщение об ошибке найдено'");
			Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
				ТекстСообщения = ТекстСообщения + ":" + " " + ОписаниеОшибки;
			КонецЕсли;
			
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			
		Иначе
			Правильно = Истина;
			ТекстНесоответствия = "";
			// Нужно сверить все реквизиты информации
			Если ЭталонИмяМодуляАктивность
				И ЭталонИмяМодуля <> ИмяМодуля Тогда
				Правильно = Ложь;
				ТекстНесоответствия = НСтр("ru = 'Имя модуля: Эталонное значение - %1, тестовое - %2'");
				ТекстНесоответствия = СтрЗаменить(ТекстНесоответствия, "%1", ЭталонИмяМодуля);
				ТекстНесоответствия = СтрЗаменить(ТекстНесоответствия, "%2", ИмяМодуля);
			КонецЕсли;
				
			Если ЭталонИсходнаяСтрокаАктивность
				И ЭталонИсходнаяСтрока <> ИсходнаяСтрока Тогда
				Правильно = Ложь;
				Если НЕ ПустаяСтрока(ТекстНесоответствия) Тогда
					ТекстНесоответствия = ТекстНесоответствия + "; ";
				КонецЕсли;
				ТекстНесоответствия = НСтр("ru = 'Исходная строка: Эталонное значение - %1, тестовое - %2'");
				ТекстНесоответствия = СтрЗаменить(ТекстНесоответствия, "%1", ЭталонИсходнаяСтрока);
				ТекстНесоответствия = СтрЗаменить(ТекстНесоответствия, "%2", ИсходнаяСтрока);
			КонецЕсли;
			
			Если ЭталонНомерСтрокиАктивность
				И ЭталонНомерСтроки <> НомерСтроки Тогда
				Правильно = Ложь;
				Если НЕ ПустаяСтрока(ТекстНесоответствия) Тогда
					ТекстНесоответствия = ТекстНесоответствия + "; ";
				КонецЕсли;
				ТекстНесоответствия = НСтр("ru = 'Номер строки: Эталонное значение - %1, тестовое - %2'");
				ТекстНесоответствия = СтрЗаменить(ТекстНесоответствия, "%1", Строка(ЭталонНомерСтроки));
				ТекстНесоответствия = СтрЗаменить(ТекстНесоответствия, "%2", Строка(НомерСтроки));
			КонецЕсли;
			
			Если ЭталонОписаниеОшибкиАктивность
				И ЭталонОписаниеОшибки <> ОписаниеОшибки Тогда
				Правильно = Ложь;
				Если НЕ ПустаяСтрока(ТекстНесоответствия) Тогда
					ТекстНесоответствия = ТекстНесоответствия + "; ";
				КонецЕсли;
				ТекстНесоответствия = НСтр("ru = 'Описание: Эталонное значение - %1, тестовое - %2'");
				ТекстНесоответствия = СтрЗаменить(ТекстНесоответствия, "%1", ЭталонОписаниеОшибки);
				ТекстНесоответствия = СтрЗаменить(ТекстНесоответствия, "%2", ОписаниеОшибки);
			КонецЕсли;
			
			Если Правильно Тогда
				ТекстСообщения = НСтр("ru='Проверка информации об ошибке выполнена успешно. Сообщение об ошибке найдено, все реквизиты соответствуют эталонным'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Иначе
				ТекстСообщения = НСтр("ru='Проверка информации об ошибки НЕ выполнена успешно. Сообщение об ошибке найдено, но реквизиты отличаются от эталонных: '")+ ТекстНесоответствия;
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если Правильно И ЭталонЗакрытьОкно
			ИЛИ НЕ Правильно И ЭталонДействие = "Сведения" И ЭталонЗакрытьОкно Тогда
			
			ОкнаПриложения = СцТ_ГлавнаяФорма.СцТ_Контроллер.НайтиОбъекты(
				Тип("ТестируемоеОкноКлиентскогоПриложения"),
				,
				,
				СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов);
				
			НужнаяФорма = Неопределено;
			НужноеОкно  = Неопределено;
			Для каждого ОкноПриложения Из ОкнаПриложения Цикл
				Если ОкноПриложения.НачальнаяСтраница ИЛИ ОкноПриложения.Основное Тогда
					// Окно сообщения об ошибке не может быть основным или начальной страницей
					Продолжить;
				КонецЕсли;
				
				ФормыОкна = ОкноПриложения.ПолучитьПодчиненныеОбъекты();
				Если ФормыОкна.Количество() <> 1 Тогда
					// Форма сообщения об ошибке всегда одна в окне
					Продолжить;
				КонецЕсли;
				
				ПроверяемаяФорма = ФормыОкна[0];
				
				Для Каждого ЭлементФормы Из ПроверяемаяФорма.ПолучитьПодчиненныеОбъекты() Цикл
					Если ТипЗнч(ЭлементФормы) = Тип("ТестируемоеПолеФормы")
						И ЭлементФормы.ТекстЗаголовка = ОписаниеОшибки Тогда
						
						// Это нужное окно
						НужнаяФорма = ПроверяемаяФорма;
						НужноеОкно  = ОкноПриложения;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НужноеОкно <> Неопределено Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НужноеОкно = Неопределено Тогда
				ТекстСообщения = НСтр("ru='Не удалось найти окно с сообщением об ошибке и закрыть его'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
				
				// Если не удалось закрыть окно с сообщением об ошибке, то очень маловероятно,
				// что сценарий можно продолжить
				
			Иначе
				
				// Закрытие выполняется кнопкой ОК, так как это правильно
				// с точки зрения работы с формой (метод закрыть() работает не всегда
				
				// Поиск кнопки ОК
				КнопкаОК = Неопределено;
				Для Каждого ЭлементФормы Из ПроверяемаяФорма.ПолучитьПодчиненныеОбъекты() Цикл
					Если ТипЗнч(ЭлементФормы) = Тип("ТестируемаяКнопкаФормы")
						И (ВРег(ЭлементФормы.ТекстЗаголовка) = "ОК" ИЛИ ВРег(ЭлементФормы.ТекстЗаголовка) = "OK") Тогда
						
						// Это нужное окно
						КнопкаОК = ЭлементФормы;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если КнопкаОК = Неопределено Тогда
					ТекстСообщения = НСтр("ru='Не удалось найти кнопку ОК в окне с сообщением об ошибке'");
					СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
					Возврат Ложь;
				Иначе
					КнопкаОК.Нажать();
				КонецЕсли;
				
				
				//Попытка
				//	НужноеОкно.Закрыть();
				//Исключение
				//	ТекстСообщения = НСтр("ru = 'При закрытии клиентского окна формы произошла ошибка'")
				//		+ Символы.ПС
				//		+ СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
				//	Возврат Ложь;
				//КонецПопытки;
				
				Попытка
					Если НЕ НужнаяФорма.ОжидатьЗакрытие(СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов) Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось дождаться закрытия формы за установленный таймаут ожидания (%1 сек.)'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
							"%1",
							СтрЗаменить(Строка(СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов), Символ(160), ""));
						Возврат Ложь;
					КонецЕсли;
				Исключение
					ТекстСообщения = НСтр("ru = 'При ожидании закрытия формы произошла ошибка'")
						+ Символы.ПС
						+ СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
					СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
					Возврат Ложь;
				КонецПопытки;
				
				Возврат Истина;
				
			КонецЕсли;
			
			
			
			//  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			//  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			//  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			//  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			//  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			//  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			
		ИначеЕсли Правильно И НЕ ЭталонЗакрытьОкно Тогда
			// Окно закрывать не нужно,
			// видимо его закроют отдельными шагами
			Возврат Истина;
			
		Иначе
			// Т.е. это неправильно
			
			// Это критичная ошибка и нужно остановить выполнение
			// Окно ошибки остается открытым
			// Либо окно закрывать не нужно - снят флаг его закрытия
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СцТ_ВыполнитьШаг_ВыбратьСообщениеПользователю(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	
	Действие                   = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "Действие"                      , "Сведения", "Значение", Ложь);
	ТекстСообщенияПользователю = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ВыбранноеСообщениеПользователю", "*"       , "Значение", Ложь);
	
	ОписаниеРезультата = "";
	ОписаниеФормы = СцТ_ГлавнаяФорма.СцТ_ПолучитьФормуДляИнтерактивногоШага(ДанныеШага, Истина, ОписаниеРезультата);
	
	Если ОписаниеФормы = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось обратиться к окну формы: %1'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(ОписаниеРезультата));
		Возврат (Действие = "Сведения");
	КонецЕсли;
	
	ТекущееОкно  = ОписаниеФормы.ОкноОбъект;
	ТекущаяФорма = ОписаниеФормы.ФормаОбъект;
	
	Если ТекущееОкно = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти окно для текущей формы'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат (Действие = "Сведения");
	КонецЕсли;
	
	Попытка
		ТекущееОкно.ВыбратьСообщениеПользователю(ТекстСообщенияПользователю);
		// Проверка правильности выбора проверяется другим шагом
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось найти требуемое сообщение пользователю'")
			+ Символы.ПС
			+ ТекстСообщенияПользователю;
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат (Действие = "Сведения");
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Выполнение шага "Выполнить макрошаг"
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьШаг_ВыполнитьМакрошаг(ДанныеШага, МассивИнфоСообщений)
	
	УзелИмениМакрошага = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ИмяМакрошага");
	
	Если УзелИмениМакрошага = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не известно имя макрошага. Внутренняя ошибка инструмента'");
		Возврат Ложь;
	КонецЕсли;
	
	ИмяМакрошага = УзелИмениМакрошага.Значение;
	Если ТипЗнч(ИмяМакрошага) <> Тип("Строка") ИЛИ ПустаяСтрока(ИмяМакрошага) Тогда
		ТекстСообщения = НСтр("ru='Не известно имя макрошага. Внутренняя ошибка инструмента'");
		Возврат Ложь;
	КонецЕсли;
	
	СохраненныеДанныеШага = ДанныеШага;
	
	УзелПараметровШага = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(СохраненныеДанныеШага.Значение, "Имя", "ПараметрыШага");
	
	Если ТипЗнч(СцТ_ГлавнаяФорма.ГлобальныеПараметры) <> Тип("Структура") Тогда
		СцТ_ГлавнаяФорма.ГлобальныеПараметры = Новый Структура;
	КонецЕсли;
		
	Для каждого СтрокаПараметра Из УзелПараметровШага.ПолучитьЭлементы() Цикл
		
		Если СцТ_ГлавнаяФорма.ГлобальныеПараметры.Свойство(СтрокаПараметра.Имя) Тогда
			// Перезаписывать значение нужно только, если они есть
			Если ЗначениеЗаполнено(СтрокаПараметра.Значение) Тогда
				СцТ_ГлавнаяФорма.ГлобальныеПараметры[СтрокаПараметра.Имя] = СтрокаПараметра.Значение;
			КонецЕсли;
		Иначе
			СцТ_ГлавнаяФорма.ГлобальныеПараметры.Вставить(СтрокаПараметра.Имя, СтрокаПараметра.Значение);
		КонецЕсли;
	КонецЦикла;
	
	
	// Форму макрошага нужно открыть в обработчике ожидания, чтобы закончился процесс
	// обработки этого текущего шага
	//ПодключитьОбработчикОжидания("СцТ_ОткрытьФормуМакрошагаДляВыполнения", 0.2, Истина);
	СцТ_ГлавнаяФорма.СцТ_ОтложенноОткрытьФормуМакрошагаДляВыполнения(ЭтотОбъект);
	
	Возврат Истина;
	
КонецФункции

// Выполнение шага Пауза
// Параметры
// ВремяПаузы - время паузы в секундах
&НаКлиенте
Процедура СцТ_ВыполнитьШаг_Пауза(ВремяПаузы)
	
	СцТ_ГлавнаяФорма.СцТ_ВыполнитьШагПауза(ЭтотОбъект, ВремяПаузы);
	
	//ВремяОжиданияОстаток = ВремяПаузы;
	//
	//// Выполнение основной процедуры ожидания
	//ПодключитьОбработчикОжидания("СцТ_ЗакончитьВыполнениеШага_Пауза", ВремяПаузы, Истина);
	//
	//// Периодическое оповещение пользователя об ожидании
	//ПодключитьОбработчикОжидания("СцТ_ОбработчикОповещенияОбОжидании", 5, Ложь);
	
КонецПроцедуры

// Окончание выполнения шага Пауза
//
&НаКлиенте
Процедура СцТ_ЗакончитьВыполнениеШага_Пауза() Экспорт
	
	//// Нужно отключить оповещение пользователя об ожидании
	//ОтключитьОбработчикОжидания("СцТ_ОбработчикОповещенияОбОжидании");
	//
	//Если СцТ_ГлавнаяФорма.СцТ_ОстановкаПоИнициативеПользователя Тогда
	//	Возврат;
	//КонецЕсли;
	
	ТекущиеДанные = ФормаШагов.БлокСценария.НайтиПоИдентификатору(
		ФормаШагов.СцТ_ИдентификаторТекущегоШагаСценария);
	
	СцТ_ВыполнитьТекущийШагТеста(ТекущиеДанные);
	
КонецПроцедуры

// Оповещение клиента об оставшемся времени во время отработки паузы
&НаКлиенте
Процедура СцТ_ОбработчикОповещенияОбОжидании()
	
	Если СцТ_ГлавнаяФорма.СцТ_ОстановкаПоИнициативеПользователя Тогда
		ОтключитьОбработчикОжидания("СцТ_ОбработчикОповещенияОбОжидании");
		ОтключитьОбработчикОжидания("СцТ_ЗакончитьВыполнениеШага_Пауза");
		Возврат;
	КонецЕсли;
	
	ВремяОжиданияОстаток = ВремяОжиданияОстаток - 5;
	ОсталосьМинут  = Цел(ВремяОжиданияОстаток / 60);
	ОсталосьСекунд = ВремяОжиданияОстаток - ОсталосьМинут * 60;
	
	ТекстОВремениОжидания = НСтр("ru = 'Осталось'");
	
	Если ОсталосьМинут > 0 Тогда
		ТекстОВремениОжидания = ТекстОВремениОжидания + " " + Строка(ОсталосьМинут) + " мин.";
	КонецЕсли;
	
	ТекстОВремениОжидания = ТекстОВремениОжидания + " " + Строка(ОсталосьСекунд) + " сек.";
	
	Если СцТ_ГлавнаяФорма.СцТ_ВнешнееУправлениеОбработкой = "ПосредствомФайлов" Тогда
		
		ТекстСообщения = НСтр("ru = 'Обработка ожидания. %1'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекстОВремениОжидания);
		
		СцТ_ГлавнаяФорма.СцТ_ИнформационноеСообщение("OK", ТекстСообщения, "");
		
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обработка ожидания'"),,ТекстОВремениОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ВыполнитьШаг_АвтогруппаТД(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТДнаФорме = СцТ_ПолучитьТДдляИнтерактивногоШага(ДанныеШага, МассивИнфоСообщений);
	
	Если ТДнаФорме = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Эталонный ТД будет получен только при необходимости - 
	// при первом выполнении шага действия с ТД
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СцТ_ВыполнитьШаг_ДействиеСТабДокументом(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТДнаФорме = СцТ_ПолучитьТДдляИнтерактивногоШага(ДанныеШага, МассивИнфоСообщений);
	
	Если ТДнаФорме = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Попытка получения эталонного табличного документа
	РодительскийУзел = ДанныеШага.ПолучитьРодителя();
	Если РодительскийУзел = Неопределено ИЛИ РодительскийУзел.ТипШага <> "АвтоГруппаТабличныйДокумент" Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти родительский узел описания табличного документа'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	УзелОписанияТД = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(РодительскийУзел.Значение, "Имя", "ТабличныйДокумент");
	Если УзелОписанияТД = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти описание табличного документа'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ВариантХраненияТД  = СцТ_ЗначениеВДереве(УзелОписанияТД, "ВариантХраненияТД", 0);
	
	Если ВариантХраненияТД = 0 Тогда
		// Хранится в виде дерева значений
		КоличествоСтрок   = СцТ_ЗначениеВДереве(УзелОписанияТД, "КоличествоСтрокТД"  , 1);
		КоличествоКолонок = СцТ_ЗначениеВДереве(УзелОписанияТД, "КоличествоКолонокТД", 1);
		
		ЭталонныйТД = Новый ТабличныйДокумент;
		
		ИндексСтр = 0;
		Для каждого УзелСтр Из УзелОписанияТД.ПолучитьЭлементы() Цикл
			Если Лев(УзелСтр.Имя, 1) <> "R" Тогда
				Продолжить;
			КонецЕсли;
			
			ИндексСтр  = ИндексСтр + 1;
			ИндексСтлб = 0;
			Для каждого УзелСтлб Из УзелСтр.ПолучитьЭлементы() Цикл
				ИндексСтлб = ИндексСтлб + 1;
				Если НЕ ПустаяСтрока(УзелСтлб.Значение) Тогда
					Обл = ЭталонныйТД.Область(ИндексСтр, ИндексСтлб, ИндексСтр, ИндексСтлб);
					Обл.Текст = УзелСтлб.Значение;
					// преобразование параметров нужно выполнять непосредственно перед сравнением
					// а не во время закладки на хранение
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ВариантХраненияТД = 1 Тогда
		// Хранится в виде файла в двоичных данных
		КоличествоСтрок = СцТ_ЗначениеВДереве(УзелОписанияТД, "КоличествоСтрокТД"  , 0);
		КоличествоСтрок = СцТ_ЗначениеВДереве(УзелОписанияТД, "КоличествоКолонокТД", 0);
		
		ЭталонныйТД = Новый ТабличныйДокумент;
		
		ДД64 = СцТ_ЗначениеВДереве(УзелОписанияТД, "ДвоичныеДанныеТД", "");
		Если ПустаяСтрока(ДД64) Тогда
			ТекстСообщения = НСтр("ru = 'Не найдены хранимые данные табличного документа'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		ТекстСообщения = "";
		Если НЕ ЗаполнитьТД_НаСервере(ЭталонныйТД, ДД64, ТекстСообщения) Тогда
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		КоличествоСтрок   = ЭталонныйТД.Высотатаблицы;
		КоличествоКолонок = ЭталонныйТД.ШиринаТаблицы;
		
	ИначеЕсли ВариантХраненияТД = 2 Тогда
		// Хранится путь к внешнему файлу
		
		ИмяВнешнегоФайла = СцТ_ЗначениеВДереве(УзелОписанияТД, "ФайлТабличногоДокумента", "");
		
		Если ПустаяСтрока(ИмяВнешнегоФайла) Тогда
			ТекстСообщения = НСтр("ru = 'Не задан путь хранения файла табличного документа'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		ИмяВнешнегоФайла = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(ИмяВнешнегоФайла);
		
		ЭталонныйТД = Новый ТабличныйДокумент;
		Попытка
			ДД = Новый ДвоичныеДанные(ИмяВнешнегоФайла);
			АдрДД = ПоместитьВоВременноеХранилище(ДД, Новый УникальныйИдентификатор);
			Если НЕ ЗаполнитьТДНаСервереИзДД(ЭталонныйТД, АдрДД, "") Тогда
				ТекстСообщения = НСтр("ru = 'Не задан путь хранения файла табличного документа'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось прочитать табличный документ из файла %1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяВнешнегоФайла);
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	// Есть эталонный ТД, есть ТД на форме - можно приступать к выполнению действия, заданного в шаге
	
	ДеревоЗначения = ДанныеШага.Значение;
	
	Действие       = СцТ_ЗначениеВДереве(ДеревоЗначения, "ДействиеСТаблДок", "Проверить");
	ВариантОбласти = СцТ_ЗначениеВДереве(ДеревоЗначения, "ВариантОбласти"  , "ВесьТД");
	
	Если ВариантОбласти = "ВесьТД" Тогда
		ПерваяКолонка     = 1;
		ПерваяСтрока      = 1;
		ПоследняяКолонка  = ЭталонныйТД.ШиринаТаблицы;
		ПоследняяСтрока   = ЭталонныйТД.ВысотаТаблицы;
		
	ИначеЕсли ВариантОбласти = "ЗаданнаяФормула" Тогда
		Область = СцТ_ЗначениеВДереве(ДеревоЗначения, "ФормулаОбласти" , "",, Истина);
		// Преобразование параметра в значение (при необходимости)
		Область = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(Область);
		
		Попытка
			КоординатыОбласти = СцТ_ГлавнаяФорма.СцТ_КоординатыОбластиИзАдреса(Область);
		Исключение
			ТекстСообщения = НСтр("ru = 'Неверно задана область табличного документа'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		
		ПерваяКолонка     = КоординатыОбласти.НачальнаяКолонка;
		ПерваяСтрока      = КоординатыОбласти.НачальнаяСтрока;
		ПоследняяКолонка  = КоординатыОбласти.КонечнаяКолонка;
		ПоследняяСтрока   = КоординатыОбласти.КонечнаяСтрока;
		
	Иначе
		ПерваяКолонка     = СцТ_ЗначениеВДереве(ДеревоЗначения, "ПерваяКолонка"   , 0,, Истина);
		ПоследняяКолонка  = СцТ_ЗначениеВДереве(ДеревоЗначения, "ПоследняяКолонка", 0,, Истина);
		ПерваяСтрока      = СцТ_ЗначениеВДереве(ДеревоЗначения, "ПерваяСтрока"    , 0,, Истина);
		ПоследняяСтрока   = СцТ_ЗначениеВДереве(ДеревоЗначения, "ПоследняяСтрока" , 0,, Истина);
		
	КонецЕсли;
	
	// Проверки корректности колонок и строк
	Если    ПерваяКолонка = 0
		ИЛИ ПерваяСтрока = 0
		ИЛИ ПоследняяКолонка = 0
		ИЛИ ПоследняяСтрока = 0
		ИЛИ ПерваяСтрока > ПоследняяСтрока
		ИЛИ ПерваяКолонка > ПоследняяКолонка Тогда
		
		ТекстСообщения = НСтр("ru = 'Неверно задана область табличного документа'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	
	КонецЕсли;
	
	// Начало выполнения действия
	
	
	Попытка
		ТДнаФорме.Активизировать();
	Исключение
	КонецПопытки;
	
	Если ТДнаФорме.Вид <> ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ТекстСообщения = НСтр("ru = 'Найденый объект тестируемого приложения не является табличным документом'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		МассивИменОбъединенныхЯчеек_Реал   = Новый Массив;
		МассивИменОбъединенныхЯчеек_Эталон = Новый Массив;
		
		ПредставлениеРазличий = "";
		
		Для НомерСтроки = ПерваяСтрока По ПоследняяСтрока Цикл
			Для НомерКолонки = ПерваяКолонка По ПоследняяКолонка Цикл
				
				АдресЯчейки = "R%1C%2";
				АдресЯчейки = СтрЗаменить(АдресЯчейки, "%1", Формат(НомерСтроки, "ЧГ=0"));
				АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(НомерКолонки, "ЧГ=0"));
				
				// Эталонное значение
				Область_Эталон = ЭталонныйТД.Область(АдресЯчейки);
				Если МассивИменОбъединенныхЯчеек_Эталон.Найти(Область_Эталон.Имя) = Неопределено Тогда
					// Эта ячейка используется первый раз
					Попытка
						ЭталонноеЗначение = ЭталонныйТД.Область(АдресЯчейки).Текст;
						ЭталонноеЗначение = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(ЭталонноеЗначение);
					Исключение
						ЭталонноеЗначение = Неопределено;
					КонецПопытки;
					МассивИменОбъединенныхЯчеек_Эталон.Добавить(Область_Эталон.Имя);
					ЭталонЯчейкаВОбъединении = Ложь;
				Иначе
					// значение в этой ячейке уже использовано
					ЭталонноеЗначение = "";
					ЭталонЯчейкаВОбъединении = Истина;
				КонецЕсли;
				
				// Тестируемое значение
				ТДнаФорме.УстановитьТекущуюОбласть(АдресЯчейки);
				ИмяОбласти_Реал = ТДнаФорме.ПолучитьАдресТекущейОбласти();
				
				Если МассивИменОбъединенныхЯчеек_Реал.Найти(ИмяОбласти_Реал) = Неопределено Тогда
					// Это левый верхний угол объединенной ячейки
					ЗначениеРеалЯчейки = СокрЛП(ТДнаФорме.ПолучитьТекстТекущейОбласти());
					
					МассивИменОбъединенныхЯчеек_Реал.Добавить(ИмяОбласти_Реал);
					РеалЯчейкаВОбъединении = Ложь;
					
				Иначе
					// эта ячейка уже использована
					ЗначениеРеалЯчейки = "";
					РеалЯчейкаВОбъединении = Истина;
					
				КонецЕсли;
				
				Если Действие = "Заполнить" Тогда
					
					Если ЭталонЯчейкаВОбъединении
						И ЗначениеРеалЯчейки = "" Тогда
						Продолжить;
						
					ИначеЕсли РеалЯчейкаВОбъединении
						И ЭталонноеЗначение <> "" Тогда
						
						ТекстСообщения = НСтр("ru = 'Не удалось заполнить ячейку %1, ячейка в тестируемом табличном документе входит в состав объединения'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(АдресЯчейки));
						СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
						Возврат Ложь;
						
					ИначеЕсли ЗначениеРеалЯчейки <> ЭталонноеЗначение Тогда
						
						Попытка
							ПолеВвода = ТДнаФорме.ПолучитьПолеТекущейОбласти();
							Если ТипЗнч(ПолеВвода) = Тип("ТестируемоеПолеФормы")
								И ПолеВвода.Вид = ВидПоляФормы.ПолеВвода Тогда
								ТДнаФорме.НачатьРедактированиеТекущейОбласти();
								ПолеВвода.ВвестиТекст(ЭталонноеЗначение);
								ТДнаФорме.ЗавершитьРедактированиеТекущейОбласти();
							КонецЕсли;
						Исключение
							ТекстСообщения = НСтр("ru = 'Не удалось заполнить ячеку %1: %2'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(АдресЯчейки));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОписаниеОшибки());
							СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
							Возврат Ложь;
							
						КонецПопытки;
						
					Иначе
						// ничего делать не нужно
						
					КонецЕсли;
					
				Иначе
					// Проверить
					
					Если СокрЛП(ЭталонноеЗначение) <> СокрЛП(ЗначениеРеалЯчейки) Тогда
						ТекстОшибкиСтроки = СтрокаОшибочногоСравнения2хЭлементов();
						
						ЭЗ = ПреобразоватьЗначениеДляОтображения(ЭталонноеЗначение);
						РЗ = ПреобразоватьЗначениеДляОтображения(ЗначениеРеалЯчейки);
						
						ТекстОшибкиСтроки = СтрЗаменить(ТекстОшибкиСтроки, "&amp;Name"  , АдресЯчейки);
						ТекстОшибкиСтроки = СтрЗаменить(ТекстОшибкиСтроки, "&amp;Value1", ЭЗ);
						ТекстОшибкиСтроки = СтрЗаменить(ТекстОшибкиСтроки, "&amp;Value2", РЗ);
						
						СцТ_ДобавитьПодстроку(ПредставлениеРазличий, ТекстОшибкиСтроки, Символы.ВК);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		// Оформление представления различий
		Если Действие = "Проверить" Тогда
			Если НЕ ПустаяСтрока(ПредставлениеРазличий) Тогда
				
				// Нужно добавить заголовок таблицы
				
				ЗаголовокТаблицы = НСтр("ru = 'Обнаружены отличия табличного документа от эталона:'");
				
				ЗаголовокТаблицы = ЗаголовокТаблицы + 
					"<table style=""text-align: left; width: 640px; height: 52px;"" border=""1"" cellpadding=""3"" cellspacing=""0"">";
				ЗаголовокТаблицы = ЗаголовокТаблицы + 
					"<tbody><tr>";
				
				ДобавляемаяСтрока = "<th style=""width: 182px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
				ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Адрес ячейки'"));
				ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
				
				ДобавляемаяСтрока = "<th style=""width: 204px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
				ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Эталонное значение'"));
				ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
				
				ДобавляемаяСтрока = "<th style=""width: 204px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
				ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Проверяемое значение'"));
				ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
				
				ЗаголовокТаблицы = ЗаголовокТаблицы + "</tr></tbody>";
				
				ТекстСообщения = ЗаголовокТаблицы + ПредставлениеРазличий + "</table>";
				
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникла ошибка'");
		ПодстрокаОшибки =  СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ОписаниеОшибки());
		СцТ_ДобавитьПодстроку(ТекстСообщения, ПодстрокаОшибки, ":<br>", "<i>",  "</i>");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ТекстСообщения = НСтр("ru = 'Табличный документ успешно проверен: расхождений с эталоном нет'");
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТД_НаСервере(ЭталонныйТД, ДД64, ТекстСообщения)
	
	ДД = Base64Значение(ДД64);
	ИмяВрФайла = ПолучитьИмяВременногоФайла("mxl");
	ДД.Записать(ИмяВрФайла);
	
	Попытка
		ЭталонныйТД.Прочитать(ИмяВрФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Хранимые данные не удалось прочитать в табличный документ. Возможно загружены данные другого формата'");
		//СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьТДНаСервереИзДД(ЭталонныйТД, АдрДД, ТекстСообщения)
	
	ДД = ПолучитьИзВременногоХранилища(АдрДД);
	ИмяВрФайла = ПолучитьИмяВременногоФайла("mxl");
	ДД.Записать(ИмяВрФайла);
	
	Попытка
		ЭталонныйТД.Прочитать(ИмяВрФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Хранимые данные не удалось прочитать в табличный документ. Возможно загружены данные другого формата'");
		//СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции


&НаКлиенте
Функция СцТ_ВыполнитьШаг_ДействиеСЯчейкойТД(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТДнаФорме = СцТ_ПолучитьТДдляИнтерактивногоШага(ДанныеШага, МассивИнфоСообщений);
	
	Если ТДнаФорме = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	ДеревоЗначения = ДанныеШага.Значение;
	
	ЯчейкаТД_Действие    = СцТ_ЗначениеВДереве(ДеревоЗначения, "Действие", "");
	ЯчейкаТД_АдресЯчейки = СцТ_ЗначениеВДереве(ДеревоЗначения, "Адрес", "");
	ЯчейкаТД_Значение    = СцТ_ЗначениеВДереве(ДеревоЗначения, "ТекстЯчейки", "");
	
	ЯчейкаТД_АдресЯчейки = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(ЯчейкаТД_АдресЯчейки);
	ЯчейкаТД_Значение    = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(ЯчейкаТД_Значение);
	
	
	// Проверки корректности колонок и строк
	Если ПустаяСтрока(ЯчейкаТД_Действие) Тогда
		ТекстСообщения = НСтр("ru = 'Не задано действие, которое нужно выполнить с ячейкой'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ЯчейкаТД_АдресЯчейки) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан адрес ячейки или не установлено значение параметра, в котором хранится адрес ячейки'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	// Начало выполнения действия
	
	Попытка
		ТДнаФорме.Активизировать();
	Исключение
	КонецПопытки;
	
	Если ТДнаФорме.Вид <> ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ТекстСообщения = НСтр("ru = 'Найденый объект тестируемого приложения не является табличным документом'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Тестируемое значение
	ТДнаФорме.УстановитьТекущуюОбласть(ЯчейкаТД_АдресЯчейки);
	
	Если ЯчейкаТД_Действие = "Заполнить" Тогда
		
		Попытка
			ПолеВвода = ТДнаФорме.ПолучитьПолеТекущейОбласти();
			Если ТипЗнч(ПолеВвода) = Тип("ТестируемоеПолеФормы")
				И ПолеВвода.Вид = ВидПоляФормы.ПолеВвода Тогда
				
				ТДнаФорме.НачатьРедактированиеТекущейОбласти();
				ПолеВвода.ВвестиТекст(ЯчейкаТД_Значение);
				ТДнаФорме.ЗавершитьРедактированиеТекущейОбласти();
			КонецЕсли;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось заполнить ячеку %1: %2'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(ЯчейкаТД_АдресЯчейки));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОписаниеОшибки());
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат Ложь;
			
		КонецПопытки;
		
	ИначеЕсли ЯчейкаТД_Действие = "Проверить" Тогда
		
		ЗначениеРеалЯчейки = СокрЛП(ТДнаФорме.ПолучитьТекстТекущейОбласти());
		Если ЯчейкаТД_Значение <> ЗначениеРеалЯчейки Тогда
			ТекстОшибкиСтроки = СтрокаОшибочногоСравнения2хЭлементов();
			
			ЭЗ = ПреобразоватьЗначениеДляОтображения(ЯчейкаТД_Значение);
			РЗ = ПреобразоватьЗначениеДляОтображения(ЗначениеРеалЯчейки);
			
			ТекстОшибкиСтроки = СтрЗаменить(ТекстОшибкиСтроки, "&amp;Name"  , ЯчейкаТД_АдресЯчейки);
			ТекстОшибкиСтроки = СтрЗаменить(ТекстОшибкиСтроки, "&amp;Value1", ЭЗ);
			ТекстОшибкиСтроки = СтрЗаменить(ТекстОшибкиСтроки, "&amp;Value2", РЗ);
			
			ТекстСообщения = НСтр("ru = 'Значение в ячейке отличается от эталонного:'");
			
			ТекстСообщения = ТекстСообщения + 
				"<table style=""text-align: left; width: 640px; height: 52px;"" border=""1"" cellpadding=""3"" cellspacing=""0"">";
			ТекстСообщения = ТекстСообщения + 
				"<tbody><tr>";
			
			ДобавляемаяСтрока = "<th style=""width: 182px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
			ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Адрес ячейки'"));
			ТекстСообщения = ТекстСообщения + ДобавляемаяСтрока;
			
			ДобавляемаяСтрока = "<th style=""width: 204px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
			ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Эталонное значение'"));
			ТекстСообщения = ТекстСообщения + ДобавляемаяСтрока;
			
			ДобавляемаяСтрока = "<th style=""width: 204px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
			ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Проверяемое значение'"));
			ТекстСообщения = ТекстСообщения + ДобавляемаяСтрока;
			
			ТекстСообщения = ТекстСообщения + "</tr></tbody>";
			
			ТекстСообщения = ТекстСообщения + ТекстОшибкиСтроки + "</table>";
			
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ЯчейкаТД_Действие = "Нажать" Тогда
		
		Попытка
			ПолеВвода = ТДнаФорме.ПолучитьПолеТекущейОбласти();
			Если ТипЗнч(ПолеВвода) = Тип("ТестируемоеПолеФормы")
				И (ПолеВвода.Вид = ВидПоляФормы.ПолеНадписи) Тогда
				ПолеВвода.Нажать();
			КонецЕсли;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось нажать гиперссылку в ячейке'");
			Возврат Ложь;
		КонецПопытки;
		
	ИначеЕсли ЯчейкаТД_Действие = "ВыбратьИзСписка" Тогда
		
		Попытка
			ПолеВвода = ТДнаФорме.ПолучитьПолеТекущейОбласти();
			Если ТипЗнч(ПолеВвода) = Тип("ТестируемоеПолеФормы")
				И ПолеВвода.Вид = ВидПоляФормы.ПолеВвода Тогда
				
				ТДнаФорме.НачатьРедактированиеТекущейОбласти();
				ПолеВвода.ВыбратьИзСпискаВыбора();
				ПолеВвода.ВыполнитьВыборИзСпискаВыбора(ЯчейкаТД_Значение);
				ТДнаФорме.ЗавершитьРедактированиеТекущейОбласти();
			КонецЕсли;

			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось выбрать значение из списка выбора'");
			Возврат Ложь;
		КонецПопытки;
		
		
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Табличный документ успешно проверен: расхождений с эталоном нет'");
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	
	Возврат Истина;
	
КонецФункции






#КонецОбласти


#Область ВспомогательныеПроцедурыДляВыполненияШаговБизнесЛогики

// Восстановление из структуры объекта справочника, документа или записи регистра сведений
// Если исходный документ был проведен делается попытка выполнить проведение
// 
// Параметры
// ИдентификаторШага - идентификатор данных шага в дереве
// ТекстВозвращаемогоСообщения - текст, содержащий описание ошибки
// Возвращаемое значение
// Истина - успешное выполнение шага, Ложь - возникли проблемы
&НаСервереБезКонтекста
Функция СцТ_ВыполнитьШаг_ВоспроизвестиОбъект_НаСервере(
	Знач СтруктураШага,
	Знач ПараметрыДляПоискаОбъекта,
	МассивСообщений = Неопределено,
	Знач АдресТаблицыСсылок,
	ГлобальныеПараметры)
	
	МодульЭтойОбработки = СцТ_ПолучитьЭтуОбработку();
	
	ДеревоЗначения = МодульЭтойОбработки.СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(СтруктураШага.ДеревоЗначения);
	
	УзелРеквизитов = ДеревоЗначения.Строки.Найти("Реквизиты", "Имя");
	
	// Узел реквизитов должен быть всегда, иначе не известно, что делать с этим объектом
	Если УзелРеквизитов = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не удалось восстановить сведения об объекте из структуры. Не найден узел %1'");
		Вставка = СцТ_ВыделенныйТекст(НСтр("ru = 'Реквизиты'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
		СцТ_ДобавитьИнфоСообщение(МассивСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ЭтотЭлементГруппа = Неопределено;
	Если ПараметрыДляПоискаОбъекта.ТипМД = "Справочники"
		ИЛИ ПараметрыДляПоискаОбъекта.ТипМД = "ПланыВидовХарактеристик" Тогда
		УзелЭтоГруппа = УзелРеквизитов.Строки.Найти("ЭтоГруппа", "Имя");
		Если УзелЭтоГруппа <> Неопределено Тогда
			ЭтотЭлементГруппа = УзелЭтоГруппа.Значение;
		Иначе
			ЭтотЭлементГруппа = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Модульной процедурой пользоваться нельзя так как нужно получить еще и сам надор для регистров сведений,
	// чтобы его записать
	Если ПараметрыДляПоискаОбъекта.ТипМД = "РегистрыСведений" Тогда
		
		СтруктураОтбора = МодульЭтойОбработки.СцТ_ПолучитьСтруктуруОтбора_НаСервере(
			ПараметрыДляПоискаОбъекта.ОсновнойПараметр,
			АдресТаблицыСсылок,
			ГлобальныеПараметры);
			
		// Получение записи РС по тобору
		Если Метаданные.РегистрыСведений.Найти(ПараметрыДляПоискаОбъекта.ИмяМД) <> Неопределено Тогда
			
			НаборЗаписей = РегистрыСведений[ПараметрыДляПоискаОбъекта.ИмяМД].СоздатьНаборЗаписей();
			
			Для каждого СтрокаОтбора Из СтруктураОтбора Цикл
				НаборЗаписей.Отбор[СтрокаОтбора.Ключ].Установить(СтрокаОтбора.Значение);
			КонецЦикла;
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 1 Тогда
				ОбъектИлиЗапись = НаборЗаписей[0];
			Иначе
				ОбъектИлиЗапись = НаборЗаписей.Добавить();
				Для каждого СтрокаОтбора Из СтруктураОтбора Цикл
					ОбъектИлиЗапись[СтрокаОтбора.Ключ] = СтрокаОтбора.Значение;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ОбъектИлиЗапись = Неопределено;
		КонецЕсли;
		
	Иначе
		// Объектные типы данных
		
		ИстиннаяСсылка = МодульЭтойОбработки.СцТ_ПолучитьЗначение_НаСервере(
			ПараметрыДляПоискаОбъекта.ОсновнойПараметр,
			АдресТаблицыСсылок,
			ПараметрыДляПоискаОбъекта.ТипПараметра,
			ГлобальныеПараметры,
			ПараметрыДляПоискаОбъекта.УИШ);
			
		Попытка
			ОбъектИлиЗапись = ИстиннаяСсылка.ПолучитьОбъект();
		Исключение
			ОбъектИлиЗапись = Неопределено;
		КонецПопытки;
		
		// Если объект не существует в базе,
		// то он создается
		Если ОбъектИлиЗапись = Неопределено Тогда
			
			Попытка
				ОбМД = Метаданные[ПараметрыДляПоискаОбъекта.ТипМД][ПараметрыДляПоискаОбъекта.ИмяМД];
			Исключение
				ТекстСообщения = НСтр("ru='В данной информационной базе отсутствует объект метаданных %1, необходимый для выполнения сценария'");
				Вставка = СцТ_ВыделенныйТекст(ПараметрыДляПоискаОбъекта.СинонимМД);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
				СцТ_ДобавитьИнфоСообщение(МассивСообщений, 1, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			
			Если ПараметрыДляПоискаОбъекта.ТипМД = "Справочники" Тогда
				Если ЭтотЭлементГруппа Тогда
					ОбъектИлиЗапись = Справочники[ПараметрыДляПоискаОбъекта.ИмяМД].СоздатьГруппу();
				Иначе
					ОбъектИлиЗапись = Справочники[ПараметрыДляПоискаОбъекта.ИмяМД].СоздатьЭлемент();
				КонецЕсли;
				
			ИначеЕсли ПараметрыДляПоискаОбъекта.ТипМД = "Документы" Тогда
				ОбъектИлиЗапись = Документы[ПараметрыДляПоискаОбъекта.ИмяМД].СоздатьДокумент();
				
			ИначеЕсли ПараметрыДляПоискаОбъекта.ТипМД = "ПланыВидовХарактеристик" Тогда
				Если ЭтотЭлементГруппа Тогда
					ОбъектИлиЗапись = ПланыВидовХарактеристик[ПараметрыДляПоискаОбъекта.ИмяМД].СоздатьГруппу();
				Иначе
					ОбъектИлиЗапись = ПланыВидовХарактеристик[ПараметрыДляПоискаОбъекта.ИмяМД].СоздатьЭлемент();
				КонецЕсли;
				
			ИначеЕсли ПараметрыДляПоискаОбъекта.ТипМД = "ПланыВидовРасчета" Тогда
				ОбъектИлиЗапись = ПланыВидовРасчета[ПараметрыДляПоискаОбъекта.ИмяМД].СоздатьВидРасчета();
				
			ИначеЕсли ПараметрыДляПоискаОбъекта.ТипМД = "ПланыСчетов" Тогда
				ОбъектИлиЗапись = ПланыСчетов[ПараметрыДляПоискаОбъекта.ИмяМД].СоздатьСчет();
				
			ИначеЕсли ПараметрыДляПоискаОбъекта.ТипМД = "БизнесПроцессы" Тогда
				ОбъектИлиЗапись = БизнесПроцессы[ПараметрыДляПоискаОбъекта.ИмяМД].СоздатьБизнесПроцесс();
				
			ИначеЕсли ПараметрыДляПоискаОбъекта.ТипМД = "Задачи" Тогда
				ОбъектИлиЗапись = Задачи[ПараметрыДляПоискаОбъекта.ИмяМД].СоздатьЗадачу();
				
			Иначе
				// создание объектов других типов пока что не предусмотрено
				ТекстСообщения = НСтр("ru='Восстановление объектов %1 из структуры не предусмотрено'");
				Вставка = СцТ_ВыделенныйТекст(ПараметрыДляПоискаОбъекта.ТипМД);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
				СцТ_ДобавитьИнфоСообщение(МассивСообщений, 1, ТекстСообщения);
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если ОбъектИлиЗапись = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не удалось ни найти ни создать объект или запись информационной базы.
		|В данной информационной базе отсутствует объект метаданных %1, необходимый для выполнения сценария'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПараметрыДляПоискаОбъекта.СинонимМД);
		СцТ_ДобавитьИнфоСообщение(МассивСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	СписокРеквизитовОбъекта = МодульЭтойОбработки.СцТ_ПолучитьСписокВсехАтрибутовОбъектаМетаданных(
		ПараметрыДляПоискаОбъекта.ТипМД,
		ПараметрыДляПоискаОбъекта.ИмяМД,
		ЭтотЭлементГруппа);
	
	// Заполнение реквизитов.
	// При заполнении реквизитов выполняется проверка их наличия в конфигурации
	Для каждого СтрокаРеквизита Из УзелРеквизитов.Строки Цикл
		Если СтрокаРеквизита.Активность
			И СписокРеквизитовОбъекта.НайтиПоЗначению(СтрокаРеквизита.Имя) <> Неопределено
			И СтрокаРеквизита.Имя <> "ЭтоГруппа" Тогда
			
			ТекстСообщения = "";
			ЗначениеСвойства = МодульЭтойОбработки.СцТ_ПолучитьЗначение_НаСервере(
					СтрокаРеквизита.Значение,
					АдресТаблицыСсылок,
					СтрокаРеквизита.ТипУзла,
					ГлобальныеПараметры);
			СцТ_ДобавитьИнфоСообщение(МассивСообщений, 1, ТекстСообщения);
			
			Попытка
				ОбъектИлиЗапись[СтрокаРеквизита.Имя] = ЗначениеСвойства;
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось установить значение свойства. Свойство %1 отсутствует'");
				Вставка = СцТ_ВыделенныйТекст(СтрокаРеквизита.Синоним);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
				СцТ_ДобавитьИнфоСообщение(МассивСообщений, 2, ТекстСообщения);
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение табличных частей
	УзелТабличныхЧастей = ДеревоЗначения.Строки.Найти("ТабличныеЧасти", "Имя");
	
	Если УзелТабличныхЧастей <> Неопределено
		И УзелТабличныхЧастей.Строки.Количество() > 0 Тогда
		
		ТабличныеЧастиМетаданных = Метаданные[ПараметрыДляПоискаОбъекта.ТипМД][ПараметрыДляПоискаОбъекта.ИмяМД].ТабличныеЧасти;
		
		// Обход табличных частей
		Для каждого УзелТабличнойЧасти Из УзелТабличныхЧастей.Строки Цикл
			// Проверка существования табличной части среди объектов метаданных
			// и проверка, что табличную часть нужно заполнять
			Если НЕ УзелТабличнойЧасти.Активность Тогда
				// Сообщение выводить не нужно. Скорее всего табличную часть отключили преднамеренно
				Продолжить;
			КонецЕсли;
			
			ТабличнаяЧастьМетаданных = ТабличныеЧастиМетаданных.Найти(УзелТабличнойЧасти.Имя);
			Если ТабличнаяЧастьМетаданных = Неопределено Тогда
				// Нужно вывести сообщение, о том что изменилась структура метаданных
				ТекстСообщения = НСтр("ru='Отсутствует табличная часть %1'");
				Вставка = СцТ_ВыделенныйТекст(УзелТабличнойЧасти.Синоним);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
				СцТ_ДобавитьИнфоСообщение(МассивСообщений, 2, ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			// Заполнение массива для проверки существования колонок в табличной части
			МассивИменКолонок = Новый Массив;
			Для каждого Реквизит Из ТабличнаяЧастьМетаданных.Реквизиты Цикл
				МассивИменКолонок.Добавить(Реквизит.Имя);
			КонецЦикла;
			
			// Обход строк
			ОбъектИлиЗапись[УзелТабличнойЧасти.Имя].Очистить();
			НомерСтроки = 1;
			Для каждого УзелСтроки Из УзелТабличнойЧасти.Строки Цикл
				
				// В строке шапки проверяется только наличие колонок
				Если УзелСтроки.Имя = "ШапкаТаблицы" ИЛИ НЕ УзелСтроки.Активность Тогда
					
					Для каждого УзелРеквизита Из УзелСтроки.Строки Цикл
						Если УзелРеквизита.Имя <> "НомерСтроки"
							И УзелСтроки.Активность
							И МассивИменКолонок.Найти(УзелРеквизита.Имя) = Неопределено Тогда
							
							ТекстСообщения = НСтр("ru='В табличной части %1 отсутствует колонка %2, которая есть в сценарии'");
							Вставка = СцТ_ВыделенныйТекст(УзелТабличнойЧасти.Синоним);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
							Вставка = СцТ_ВыделенныйТекст(УзелРеквизита.Синоним);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Вставка);
							СцТ_ДобавитьИнфоСообщение(МассивСообщений, 2, ТекстСообщения);
							
						КонецЕсли;
					КонецЦикла;
					
					Для каждого УзелМассива ИЗ МассивИменКолонок Цикл
						Если УзелСтроки.Строки.Найти(УзелМассива, "Имя") = Неопределено Тогда
							
							ТекстСообщения = НСтр("ru='В табличной части %1 добавлена колонка %2, которая отсутствует в сценарии'");
							Вставка = СцТ_ВыделенныйТекст(УзелТабличнойЧасти.Синоним);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
							Вставка = СцТ_ВыделенныйТекст(УзелМассива);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Вставка);
							СцТ_ДобавитьИнфоСообщение(МассивСообщений, 2, ТекстСообщения);
							
						КонецЕсли;
					КонецЦикла;
					
					Продолжить;
				КонецЕсли;
				
				// Неактивные строки не выполняются
				Если НЕ УзелСтроки.Активность Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ОбъектИлиЗапись[УзелТабличнойЧасти.Имя].Добавить();
				
				// Заполнение данных строки
				Для каждого УзелРеквизита Из УзелСтроки.Строки Цикл
					Если УзелРеквизита.Имя <> "НомерСтроки"
						И УзелСтроки.Активность
						И МассивИменКолонок.Найти(УзелРеквизита.Имя) <> Неопределено Тогда
						
						ТекстСообщения = "";
						НоваяСтрока[УзелРеквизита.Имя] = МодульЭтойОбработки.СцТ_ПолучитьЗначение_НаСервере(
							УзелРеквизита.Значение,
							АдресТаблицыСсылок,
							УзелРеквизита.ТипУзла,
							ГлобальныеПараметры);
							
						СцТ_ДобавитьИнфоСообщение(МассивСообщений, 1, ТекстСообщения);
						
					КонецЕсли;
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Запись объекта или записи
	УзелВариантаЗаписи = ДеревоЗначения.Строки.Найти("ВариантЗаписи", "Имя");
	
	Если УзелВариантаЗаписи = Неопределено
		ИЛИ ПустаяСтрока(УзелВариантаЗаписи.Значение) Тогда
		ВариантЗаписи = "Записать";
	Иначе
		ВариантЗаписи = УзелВариантаЗаписи.Значение;
	КонецЕсли;
	
	Попытка
		Если ВариантЗаписи = "Записать" Тогда
			Если ПараметрыДляПоискаОбъекта.ТипМД = "РегистрыСведений" Тогда
				НаборЗаписей.Записать();
			Иначе
				ОбъектИлиЗапись.Записать();
			КонецЕсли;
		ИначеЕсли ВариантЗаписи = "ПровестиНеоперативно" Тогда
			ОбъектИлиЗапись.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		ИначеЕсли ВариантЗаписи = "ПровестиОперативно" Тогда
			ОбъектИлиЗапись.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		ИначеЕсли ВариантЗаписи = "ОтменаПроведения" Тогда
			ОбъектИлиЗапись.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			// Иначе ничего не делаем
		КонецЕсли;
	Исключение
		Если ПараметрыДляПоискаОбъекта.ТипМД = "РегистрыСведений" Тогда
			ТекстСообщения = НСтр("ru='Не удалось записать запись регистра сведений'");
		Иначе
			ТекстСообщения = НСтр("ru='Не удалось записать объект'");
		КонецЕсли;
		
		СцТ_ДобавитьПодстроку(ТекстСообщения, ОписаниеОшибки(), ":<br>");
		СцТ_ДобавитьИнфоСообщение(МассивСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	// Удачное завершение шага
	Если ПараметрыДляПоискаОбъекта.ТипМД = "РегистрыСведений" Тогда
		ТекстСообщения = НСтр("ru='Запись регистра сведений <b>успешно</b> восстановлена'");
	Иначе
		ТекстСообщения = НСтр("ru='Объект <b>успешно</b> восстановлен'");
	КонецЕсли;
	СцТ_ДобавитьИнфоСообщение(МассивСообщений, 5, ТекстСообщения);
	
	Возврат Истина;
	
КонецФункции

// Сравнение структуры объекта со структурой, хранимой в шаге
// Параметры
// ИдентификаторШага - идентификатор данных шага в дереве
// ТекстВозвращаемогоСообщения - текст, содержащий описание ошибки
// Возвращаемое значение
// Истина - успешное выполнение шага, Ложь - возникли проблемы
&НаСервереБезКонтекста
Функция СцТ_ВыполнитьШаг_СравнитьОбъектСЭталоном_НаСервере(
	Знач СтруктураШага,
	Знач ПараметрыДляПоискаОбъекта,
	МассивИнфоСообщений,
	Знач АдресТаблицыСсылок,
	РазличияЭталонныхДанных,
	ГлобальныеПараметры)
	
	Ошибка = Ложь;
	
	МодульЭтойОбработки = СцТ_ПолучитьЭтуОбработку();
	
	// Ищем только существующие объекты. Новые создавать не нужно
	ТекстСообщения = "";
	ОбъектИлиЗапись = МодульЭтойОбработки.ПолучитьОбъектИлиЗаписьПоСтруктуреПоиска(ПараметрыДляПоискаОбъекта, АдресТаблицыСсылок, ГлобальныеПараметры,, ТекстСообщения);
	
	Если ОбъектИлиЗапись = Неопределено Тогда
		Если ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = НСтр("ru='По описанию родительского узла не удалось найти объект или запись информационной базы.'");
		КонецЕсли;
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоЗначения = МодульЭтойОбработки.СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(СтруктураШага.ДеревоЗначения);
	УзелРеквизитов = ДеревоЗначения.Строки.Найти("Реквизиты", "Имя");
	
	// Узел реквизитов должен быть всегда, иначе не известно, что делать с этим объектом
	Если УзелРеквизитов = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не удалось восстановить сведения об объекте из структуры. Не найден узел %1'");
		Вставка = СцТ_ВыделенныйТекст(НСтр("ru = 'Реквизиты'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ЭтотЭлементГруппа = Неопределено;
	Если ПараметрыДляПоискаОбъекта.ТипМД = "Справочники"
		ИЛИ ПараметрыДляПоискаОбъекта.ТипМД = "ПланыВидовХарактеристик" Тогда
		УзелЭтоГруппа = УзелРеквизитов.Строки.Найти("ЭтоГруппа", "Имя");
		Если УзелЭтоГруппа <> Неопределено Тогда
			ЭтотЭлементГруппа = УзелЭтоГруппа.Значение;
		Иначе
			ТекстСообщения = НСтр("ru='Отсутствет значение свойства %1'");
			Вставка = СцТ_ВыделенныйТекст(НСтр("ru = 'Это группа'"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
			// Попытка присвоить значение по-умолчанию
			ЭтотЭлементГруппа = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СписокРеквизитовОбъекта = МодульЭтойОбработки.СцТ_ПолучитьСписокВсехАтрибутовОбъектаМетаданных(
		ПараметрыДляПоискаОбъекта.ТипМД,
		ПараметрыДляПоискаОбъекта.ИмяМД,
		ЭтотЭлементГруппа);
	
	
	// ************************
	// Проверка реквизитовШапки
	
	ТекстПроверкиРеквизитов = "";
	ТипДата = Тип("Дата");
	ТипХЗ   = Тип("ХранилищеЗначения");
	
	// Проверка, что не добавились новые реквизиты
	Для каждого ЭлементСписка Из СписокРеквизитовОбъекта Цикл
		Если УзелРеквизитов.Строки.Найти(ЭлементСписка.Значение, "Имя") = Неопределено Тогда
			ТекстСообщения = НСтр("ru='%3 %1 добавлено новое свойство %2'");
			Если ПараметрыДляПоискаОбъекта.ТипМД = "РегистрыСведений" Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", НСтр("ru = 'Записи'"));
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", НСтр("ru = 'Объекту'"));
			КонецЕсли;
			Вставка = СцТ_ВыделенныйТекст(СтруктураШага.ПредставлениеОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
			Вставка = СцТ_ВыделенныйТекст(ЭлементСписка.Представление);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Вставка);
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаОшибкиСравненияРеквизитов = "";
	Для каждого СтрокаРеквизита Из УзелРеквизитов.Строки Цикл
		
		Если НЕ СтрокаРеквизита.Активность Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибкиСтроки = "";
		
		// Проверка, что все нужные свойства в наличии
		Если СписокРеквизитовОбъекта.НайтиПоЗначению(СтрокаРеквизита.Имя) = Неопределено Тогда
			// Выводится информационное сообщение, что тест нужно актуализировать
			ТекстОшибки = НСтр("ru='У %3 %1 отсутствует свойство %2, используемое в сценарии'");
			Если ПараметрыДляПоискаОбъекта.ТипМД = "РегистрыСведений" Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", НСтр("ru = 'записи'"));
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", НСтр("ru = 'объекта'"));
			КонецЕсли;
			Вставка = СцТ_ВыделенныйТекст(СтруктураШага.ПредставлениеОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
			Вставка = СцТ_ВыделенныйТекст(ЭлементСписка.Представление);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Вставка);
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = "";
		ЭталонноеЗначениеРеквизита = МодульЭтойОбработки.СцТ_ПолучитьЗначение_НаСервере(
			СтрокаРеквизита.Значение,
			АдресТаблицыСсылок,
			СтрокаРеквизита.ТипУзла,
			ГлобальныеПараметры,
			СтруктураШага.УИШ);
			
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		
		ТестовоеЗначениеРеквизита = ОбъектИлиЗапись[СтрокаРеквизита.Имя];
		
		// Приведение даты к заданной точности сравнения, преобразование хр. знч.
		ТипТестовогоЗначения = ТипЗнч(ТестовоеЗначениеРеквизита);
		
		Если ТипЗнч(ЭталонноеЗначениеРеквизита) = ТипХЗ Тогда
			ЭталонноеЗначениеРеквизита = XMLСтрока(ЭталонноеЗначениеРеквизита);
		КонецЕсли;
		
		Если ТипЗнч(ЭталонноеЗначениеРеквизита) = Тип("Строка")
			И Найти(ЭталонноеЗначениеРеквизита, "Хранилище значения") > 0 Тогда
			// Это старый вариант сравнения
			ТестовоеЗначениеРеквизита = СцТ_ПредставлениеХранилищаЗначения(ТестовоеЗначениеРеквизита);
		КонецЕсли;
		
		Если ТипТестовогоЗначения = ТипХЗ Тогда
			ТестовоеЗначениеРеквизита = XMLСтрока(ТестовоеЗначениеРеквизита);
		КонецЕсли;
		
		Если НЕ СцТ_СравнитьЗначениеДвухРеквизитов_НаСервере(ЭталонноеЗначениеРеквизита, ТестовоеЗначениеРеквизита) Тогда
			
			// Вывод округленных дат
			ЭталонноеСтр = Строка(ЭталонноеЗначениеРеквизита);
			
			ТекстОшибкиСтроки = СтрокаОшибочногоСравнения2хЭлементов();
			
			ЭЗ = ПреобразоватьЗначениеДляОтображения(ЭталонноеСтр);
			РЗ = ПреобразоватьЗначениеДляОтображения(Строка(ТестовоеЗначениеРеквизита));
			
			ТекстОшибкиСтроки = СтрЗаменить(ТекстОшибкиСтроки, "&amp;Name"  , СтрокаРеквизита.Синоним);
			ТекстОшибкиСтроки = СтрЗаменить(ТекстОшибкиСтроки, "&amp;Value1", ЭЗ);
			ТекстОшибкиСтроки = СтрЗаменить(ТекстОшибкиСтроки, "&amp;Value2", РЗ);
			
			ДействиеСравнения = СтрокаРеквизита.Действие;
			Если ДействиеСравнения = "Проверить" ИЛИ ДействиеСравнения <> "Проверить" И ДействиеСравнения <> "Сведения" Тогда
				Ошибка = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		СцТ_ДобавитьПодстроку(СтрокаОшибкиСравненияРеквизитов, ТекстОшибкиСтроки, Символы.ВК);
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаОшибкиСравненияРеквизитов) Тогда
		// Нужно добавить заголовок таблицы
		
		ЗаголовокТаблицы = НСтр("ru = 'Ошибки сравнения свойств %3 %1'");
		Если ПараметрыДляПоискаОбъекта.ТипМД = "РегистрыСведений" Тогда
			ЗаголовокТаблицы = СтрЗаменить(ЗаголовокТаблицы, "%3", НСтр("ru = 'записи'"));
		Иначе
			ЗаголовокТаблицы = СтрЗаменить(ЗаголовокТаблицы, "%3", НСтр("ru = 'объекта'"));
		КонецЕсли;
		ЗаголовокТаблицы = СтрЗаменить(ЗаголовокТаблицы, "%1", СцТ_ВыделенныйТекст(СтруктураШага.ПредставлениеОбъекта));
		ЗаголовокТаблицы = ЗаголовокТаблицы + 
			"<table style=""text-align: left; width: 640px; height: 52px;"" border=""1"" cellpadding=""3"" cellspacing=""0"">";
		ЗаголовокТаблицы = ЗаголовокТаблицы + 
			"<tbody><tr>";
		
		ДобавляемаяСтрока = "<th style=""width: 182px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
		ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Параметр'"));
		ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
		
		ДобавляемаяСтрока = "<th style=""width: 204px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
		ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Значение в шаге'"));
		ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
		
		ДобавляемаяСтрока = "<th style=""width: 204px; background-color: rgb(255, 207, 2); text-align: center;"">%1</th>";
		ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", НСтр("ru = 'Проверяемое значение'"));
		ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
		
		ЗаголовокТаблицы = ЗаголовокТаблицы + "</tr></tbody>";
		
		СтрокаОшибкиСравненияРеквизитов = ЗаголовокТаблицы + СтрокаОшибкиСравненияРеквизитов + "</table>";
		
	КонецЕсли;
	
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, СтрокаОшибкиСравненияРеквизитов);
	
	// ***************************
	// Сравнение табличных частей
	УзелТабличныхЧастей = ДеревоЗначения.Строки.Найти("ТабличныеЧасти", "Имя");
	Если УзелТабличныхЧастей <> Неопределено
		И УзелТабличныхЧастей.Строки.Количество() > 0 Тогда
		
		ТабличныеЧастиМетаданных = Метаданные[ПараметрыДляПоискаОбъекта.ТипМД][ПараметрыДляПоискаОбъекта.ИмяМД].ТабличныеЧасти;
		
		// Проверка, что все ТЧ есть в сценарии
		Для каждого ТЧ из  ТабличныеЧастиМетаданных Цикл
			Если УзелТабличныхЧастей.Строки.Найти(ТЧ.Имя, "Имя") = Неопределено Тогда
				ТекстСообщения = НСтр("ru='Объекту %1 добавлена новая табличная часть %2'");
				Вставка = СцТ_ВыделенныйТекст(СтруктураШага.ПредставлениеОбъекта);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
				Вставка = СцТ_ВыделенныйТекст(ТЧ.Синоним);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Вставка);
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		
		// Обход табличных частей
		Для каждого УзелТабличнойЧасти Из УзелТабличныхЧастей.Строки Цикл
			
			Если НЕ УзелТабличнойЧасти.Активность Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТабличныеЧастиМетаданных.Найти(УзелТабличнойЧасти.Имя) = Неопределено Тогда
				// Нужно вывести сообщение, о том что изменилась структура метаданных
				ТекстСообщения = НСтр("ru='Отсутствует табличная часть %1, используемая в сценарии'");
				Вставка = СцТ_ВыделенныйТекст(УзелТабличнойЧасти.Синоним);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			// Сравнение табличных частей производится как сравнение двух таблиц значений
			// Так как теоретически номера строк при переходе на новый релиз могут меняться
			ПроверяемаяТаблица = ОбъектИлиЗапись[УзелТабличнойЧасти.Имя].Выгрузить();
			
			ТекстСообщения = "";
			СтруктураТаблицы = СцТ_СформироватьТаблицуИзУзлаДерева_НаСервере(
				УзелТабличнойЧасти,
				АдресТаблицыСсылок,
				МодульЭтойОбработки,
				ГлобальныеПараметры,
				СтруктураШага.УИШ);
				
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
			
			ЭталоннаяТаблица      = СтруктураТаблицы.ТаблицаЗначений;
			МассивИсключений      = СтруктураТаблицы.МассивИсключений;
			МассивИсключенийСтрок = СтруктураТаблицы.МассивСтрокИсключений;
			МассивКлючевыхПолей   = СтруктураТаблицы.МассивКлючевыхПолей;
			ДействияСКолонками    = СтруктураТаблицы.ДействияСКолонками;
			
			МодульЭтойОбработки.СцТ_ПреобразоватьВТаблицеХранилищеЗначенияВСтроку(ПроверяемаяТаблица);
			
			// В таблице содержатся уже нормальные ссылки. Они были получены при преобразовании дерева в таблицу
			РезультатСравнения = СцТ_СравнитьДвеТаблицыЗначений_НаСервере(
				МодульЭтойОбработки,
				ПроверяемаяТаблица,   // таблица значений - проверяемая таблица ИБ
				ЭталоннаяТаблица,     // таблица значений - таблица, хранимая в шаге
				МассивИнфоСообщений,  // массив, в котором регистрируются ошибки и пр.информация
				МассивКлючевыхПолей,
				МассивИсключений,
				МассивИсключенийСтрок,
				ДействияСКолонками,
				УзелТабличнойЧасти.Синоним);
			
			Если НЕ РезультатСравнения Тогда
				Ошибка = Истина;
				ОписательТаблицы = Новый Структура;
				
				ЭталоннаяТаблица.Колонки.Удалить("ПометкаВычерка");
				ОписательТаблицы.Вставить("АдресЭталоннойТЗ",
					ПоместитьВоВременноеХранилище(ЭталоннаяТаблица, Новый УникальныйИдентификатор));
				
				ПроверяемаяТаблица.Колонки.Удалить("ПометкаВычерка");
				ОписательТаблицы.Вставить("АдресТестовойТЗ",
					ПоместитьВоВременноеХранилище(ПроверяемаяТаблица, Новый УникальныйИдентификатор));
				
				ОписательТаблицы.Вставить("МассивИсключений", МассивИсключений);
				ОписательТаблицы.Вставить("МассивКлючевыхПолей", МассивКлючевыхПолей);
				ОписательТаблицы.Вставить("ТипОбъекта", "СравниваемаяТабличнаяЧасть");
				ОписательТаблицы.Вставить("БезСохраненияИзменений", Истина);
				
				РазличияЭталонныхДанных.Добавить(ОписательТаблицы,
					НСтр("ru = 'Отличия табличной части ""'") + УзелТабличнойЧасти.Синоним + """");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ошибка Тогда
		Возврат Ложь;
	Иначе
		// Удачное завершение шага
		Если ПараметрыДляПоискаОбъекта.ТипМД = "РегистрыСведений" Тогда
			ТекстСообщения = НСтр("ru='Сравнение записи регистра сведений выполнено <b>успешно</b>'");
		Иначе
			ТекстСообщения = НСтр("ru='Сравнение объекта выполнено <b>успешно</b>'");
		КонецЕсли;
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ВыполнитьШаг_СравнитьОбъектСЭталоном

&НаСервереБезКонтекста
// Возвращает строковое представление хранилища значения,
// содержащее контрольную сумму MD5
//
// Параметры:
//	ХранЗнач (ХранилищеЗначения) - хранилище значения,
//		представление которого необходимо вычислить.
//
// Возвращаемое значение:
//	Строка - строковое представление хранилища значения;
//
Функция СцТ_ПредставлениеХранилищаЗначения(ХранЗнач) Экспорт
	
	Попытка
		
		СтрВнутр = ЗначениеВСтрокуВнутр(ХранЗнач);
		ПозицияBase64 = Найти(СтрВнутр, "{#base64:");
		ПозицияЗакрывающейСкобки = Найти(СтрВнутр, "}");
		Если ПозицияBase64 > 0 Тогда
			СтрокаBase64 = Сред(СтрВнутр, ПозицияBase64 + 9, ПозицияЗакрывающейСкобки - ПозицияBase64 - 9);
			ДД = Base64Значение(СтрокаBase64);
			ХД = Новый ХешированиеДанных(ХешФункция.MD5);
			ХД.Добавить(ДД);
			ХешСтр = Строка(ХД.ХешСумма);
		КонецЕсли;
		
		Результат = НСтр("ru = 'Хранилище значения (MD5: '")
			+ СтрЗаменить(ХешСтр, " ", "") + ")";
		
		Возврат Результат;
		
	Исключение
		Возврат НСтр("ru = 'Хранилище значения (ошибка при вычислении контрольной суммы: '")
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + ")";
	КонецПопытки;
	
КонецФункции


// Выполнение шага "Сравнить движения документа"
//
// Параметры
//	ИдентификаторШага - идентификатор шага в дереве
//	ТекстВозвращаемогоСообщения - текст описания выполнения шага
// Возвращаемое значение - результат выполнения
// Истина - выполнен успешно, Ложь - есть ошибки
&НаСервереБезКонтекста
Функция СцТ_ВыполнитьШаг_СверитьДвижениеДокумента_НаСервере(
	Знач СтруктураШага,
	Знач ПараметрыДляПоискаОбъекта,
	МассивИнфоСообщений,
	Знач АдресТаблицыСсылок,
	РазличияЭталонныхДанных,
	ГлобальныеПараметры)
	
	МодульЭтойОбработки = СцТ_ПолучитьЭтуОбработку();
	
	Ошибка = Ложь;
	
	Если ПараметрыДляПоискаОбъекта.ТипМД <> "Документы" Тогда
		
		// Удачное завершение шага - т.к. проверять нечего, но сценарий нужно проверить
		ТекстСообщения = НСтр("ru='Сверка движений для объекта типа %1 не может быть выполнена'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(СтруктураШага.ТипМетаданных));
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		Возврат Истина;
		
	КонецЕсли;
	
	// Ищем только существующие документы. Новые создавать не нужно
	ТекстСообщения = "";
	Документ = МодульЭтойОбработки.ПолучитьОбъектИлиЗаписьПоСтруктуреПоиска(ПараметрыДляПоискаОбъекта, АдресТаблицыСсылок, ГлобальныеПараметры,, ТекстСообщения);
	
	Если Документ = Неопределено Тогда
		Если ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = НСтр("ru='По описанию родительского узла не удалось найти документ в информационной базе.'");
		КонецЕсли;
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоЗначения = МодульЭтойОбработки.СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(СтруктураШага.ДеревоЗначения);
	
	УзелДвижений = ДеревоЗначения.Строки.Найти("ДвиженияПоРегистрам", "Имя");
	
	Если УзелДвижений = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не найдены сведения о движениях в данных шага'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ДвиженияДокумента = Документ.Метаданные().Движения;
	
	ТекстСообщения = "";
	
	// Обход движений в дереве
	Для каждого УзелДвижения Из УзелДвижений.Строки Цикл
		
		Если НЕ УзелДвижения.Активность Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка, что движение существует и что к нему есть право чтения
		// У коллекции движений нет метода Найти
		НужноеДвижение = Неопределено;
		Для каждого Движение Из ДвиженияДокумента Цикл
			Если ВРег(Движение.Имя) = ВРег(УзелДвижения.Имя) Тогда
				НужноеДвижение = Движение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НужноеДвижение = Неопределено
			ИЛИ НЕ ПравоДоступа("Чтение", НужноеДвижение) Тогда
			
			ТекстСообщения = НСтр("ru='Нет права чтения для получения сведений о движении по регистру %1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(УзелДвижения.Синоним));
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
			Продолжить;
			
		КонецЕсли;
		
		СтруктураЭталона = СцТ_СформироватьТаблицуИзУзлаДерева_НаСервере(
			УзелДвижения,
			АдресТаблицыСсылок,
			МодульЭтойОбработки,
			ГлобальныеПараметры,
			СтруктураШага.УИШ);
		
		ЭталоннаяТаблица    = СтруктураЭталона.ТаблицаЗначений;
		МассивИсключений    = СтруктураЭталона.МассивИсключений;
		МассивКлючевыхПолей = СтруктураЭталона.МассивКлючевыхПолей;
		ДействияСКолонками  = СтруктураЭталона.ДействияСКолонками;
		
		// Заполнение проверяемой таблицы
		Попытка
			НаборРегистра = Документ.Движения.Найти(Движение.Имя);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось найти движение по регистру %1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(УзелДвижения.Синоним));
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		НаборРегистра.Отбор.Регистратор.Установить(Документ.Ссылка, Истина);
		НаборРегистра.Прочитать();
		
		ПроверяемаяТаблица = НаборРегистра.Выгрузить();
		
		КолонкаМоментВремени = ПроверяемаяТаблица.Колонки.Найти("МоментВремени");
		Если КолонкаМоментВремени <> Неопределено Тогда
			ПроверяемаяТаблица.Колонки.Удалить(КолонкаМоментВремени);
		КонецЕсли;
		
		// Получение массива ключевых полей регистра
		Если УзелДвижения.Значение = "РегистрСведений" Тогда
			ТипМетаданных = "РегистрыСведений";
			
		ИначеЕсли УзелДвижения.Значение = "РегистрНакопления" Тогда
			ТипМетаданных = "РегистрыНакопления";
			
		ИначеЕсли УзелДвижения.Значение = "РегистрБухгалтерии" Тогда
			ТипМетаданных = "РегистрыБухгалтерии";
			
		ИначеЕсли УзелДвижения.Значение = "РегистрРасчета" Тогда
			ТипМетаданных = "РегистрыРасчета";
			
		Иначе
			ТипМетаданных = Неопределено;
			
		КонецЕсли;
		
		МодульЭтойОбработки.СцТ_ПреобразоватьВТаблицеХранилищеЗначенияВСтроку(ПроверяемаяТаблица);
		
		// В строке есть своя таблица, которую нужно сравнить
		РезультатСравнения = СцТ_СравнитьДвеТаблицыЗначений_НаСервере(
			МодульЭтойОбработки,
			ПроверяемаяТаблица,
			ЭталоннаяТаблица,
			МассивИнфоСообщений,
			МассивКлючевыхПолей,
			МассивИсключений,,
			ДействияСКолонками,
			УзелДвижения.Синоним);
		
		Если НЕ РезультатСравнения Тогда
			
			Ошибка = Истина;
			
			// сохранение таблиц для визуального просмотра
			ОписательТаблицы = Новый Структура;
			ЭталоннаяТаблица.Колонки.Удалить("ПометкаВычерка");
			ОписательТаблицы.Вставить("АдресЭталоннойТЗ",
				ПоместитьВоВременноеХранилище(ЭталоннаяТаблица, Новый УникальныйИдентификатор));
			
			ПроверяемаяТаблица.Колонки.Удалить("ПометкаВычерка");
			ОписательТаблицы.Вставить("АдресТестовойТЗ",
				ПоместитьВоВременноеХранилище(ПроверяемаяТаблица, Новый УникальныйИдентификатор));
			
			ОписательТаблицы.Вставить("МассивИсключений", МассивИсключений);
			ОписательТаблицы.Вставить("МассивКлючевыхПолей", МассивКлючевыхПолей);
			ОписательТаблицы.Вставить("ТипОбъекта", "ДвиженияДокумента");
			ОписательТаблицы.Вставить("БезСохраненияИзменений", Истина);
			
			РазличияЭталонныхДанных.Добавить(ОписательТаблицы,
				НСтр("ru = 'Отличия движения ""'") + УзелДвижения.Синоним + """");
			
		КонецЕсли;
	КонецЦикла;
	
	Если Ошибка Тогда
		Возврат Ложь;
	Иначе
		ТекстСообщения = НСтр("ru='Сверка движенийдокумента выполнена <b>успешно</b>'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Выполнение шага "Выполнить процедуру"
// Параметры
//	ИдентификаторШага - идентификатор шага в дереве
//	ТекстВозвращаемогоСообщения - текст описания выполнения шага
&НаСервереБезКонтекста
Функция СцТ_ВыполнитьШаг_ВыполнитьПроцедуру_НаСервере(
	Знач СтруктураШага,
	МассивИнфоСообщений,
	Знач АдресТаблицыСсылок,
	ГлобальныеПараметры)
	
	РезультатШага = Истина;
	
	МодульЭтойОбработки = СцТ_ПолучитьЭтуОбработку();
	
	ДеревоЗначения = МодульЭтойОбработки.СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(СтруктураШага.ДеревоЗначения);
	
	УзелТекстаПроцедуры = ДеревоЗначения.Строки.Найти("ТекстПроцедуры", "Имя");
	
	Если УзелТекстаПроцедуры = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не найден узел текста процедуры.'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТекстПроцедуры = УзелТекстаПроцедуры.Значение;
	Если ТипЗнч(ТекстПроцедуры) <> Тип("Строка") ИЛИ ПустаяСтрока(ТекстПроцедуры) Тогда
		ТекстСообщения = НСтр("ru='Текст процедуры не заполнен.'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Заполнение параметров процедуры
	ПараметрыПроцедуры = Новый Структура;
	УзелПараметровПроцедуры = ДеревоЗначения.Строки.Найти("ПараметрыПроцедуры", "Имя");
	Если УзелПараметровПроцедуры <> Неопределено Тогда
		УзелПараметровПроцедуры.Строки.Сортировать("Имя Убыв");
		Для каждого УзелПараметра Из УзелПараметровПроцедуры.Строки Цикл
			ПараметрыПроцедуры.Вставить(УзелПараметра.Имя,
				МодульЭтойОбработки.СцТ_ПолучитьЗначение_НаСервере(УзелПараметра.Значение, АдресТаблицыСсылок, УзелПараметра.ТипУзла, ГлобальныеПараметры));
				
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		// Переменные, используемые в процедуре
		РезультатВыполнения = Истина;
		ТекстСообщения = "";
		
		Выполнить(ТекстПроцедуры);
		
		// Передача значений в клиентские параметры
		Если УзелПараметровПроцедуры <> Неопределено Тогда
			Для каждого УзелПараметра Из УзелПараметровПроцедуры.Строки Цикл
				Если УзелПараметра.ТипУзла = "Параметр" Тогда
					Если ГлобальныеПараметры.Свойство(УзелПараметра.Значение) Тогда
						ГлобальныеПараметры[УзелПараметра.Значение] = ПараметрыПроцедуры[УзелПараметра.Имя];
					Иначе
						ГлобальныеПараметры.Вставить(УзелПараметра.Значение, ПараметрыПроцедуры[УзелПараметра.Имя]);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
		Если РезультатВыполнения = Истина Тогда
			СцТ_ТекстСообщения = НСтр("ru='Процедура выполнена <b>успешно</b>.'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, СцТ_ТекстСообщения);
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
			КонецЕсли;
		Иначе
			РезультатШага = Ложь;
			СцТ_ТекстСообщения = НСтр("ru='Результат выполнения процедуры отрицательный.'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, СцТ_ТекстСообщения);
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru='При выполнении процедуры возникла ошибка'");
		
		СцТ_ДобавитьПодстроку(ТекстСообщения, СцТ_ПредставлениеИсключения(ИнформацияОбОшибке(), Истина), ":<br>");
		
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат РезультатШага;
	
КонецФункции

// Выполнение шага "Выполнить запрос"
//
// Параметры
//	ИдентификаторШага - идентификатор шага в дереве,
//	ТекстВозвращаемогоСообщения - текст описания выполнения шага
// Возвращаемое значение - результат выполнения шага
// Истина - ошибок нет, Ложь - есть ошибки
&НаСервереБезКонтекста
Функция СцТ_ВыполнитьШаг_ВыполнитьЗапрос_НаСервере(
	Знач СтруктураШага,
	МассивИнфоСообщений,
	Знач АдресТаблицыСсылок,
	ГлобальныеПараметры,
	РазличияЭталонныхДанных)
	
	МодульЭтойОбработки = СцТ_ПолучитьЭтуОбработку();
	
	ДеревоЗначения = МодульЭтойОбработки.СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(СтруктураШага.ДеревоЗначения);
	
	УзелТекстаЗапроса     = ДеревоЗначения.Строки.Найти("ТекстЗапроса", "Имя");
	УзелПараметров        = ДеревоЗначения.Строки.Найти("ПараметрыЗапроса", "Имя");
	УзелТаблицыРезультата = ДеревоЗначения.Строки.Найти("РезультатЗапроса", "Имя");
	
	Если    УзелТекстаЗапроса     = Неопределено
		ИЛИ УзелПараметров        = Неопределено
		ИЛИ УзелТаблицыРезультата = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru='Не найдены данные для выполнения Запроса'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяПараметра");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра");
	
	Для каждого СтрокаПараметра Из УзелПараметров.Строки Цикл
		НоваяСтрокаПараметра = ТаблицаПараметров.Добавить();
		НоваяСтрокаПараметра.ИмяПараметра = СтрокаПараметра.Имя;
		ТекстСообщения = "";
		НоваяСтрокаПараметра.ЗначениеПараметра = МодульЭтойОбработки.СцТ_ПолучитьЗначение_НаСервере(
			СтрокаПараметра.Значение,
			АдресТаблицыСсылок,
			СтрокаПараметра.ТипУзла,
			ГлобальныеПараметры);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		
	КонецЦикла;
	
	Ошибка = Ложь;
	
	ПроверочнаяТаблица = СцТ_ВыполнитьЗапросИВернутьРезультатЗапроса_НаСервере(
		МодульЭтойОбработки,
		УзелТекстаЗапроса.Значение,
		ТаблицаПараметров,
		Ошибка,
		МассивИнфоСообщений);
		
	Если ПроверочнаяТаблица = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В запросе не может быть колонок - исключений
	ТекстСообщения = "";
	ЭталоннаяТаблица = СцТ_СформироватьТаблицуИзУзлаДерева_НаСервере(
		УзелТаблицыРезультата,
		АдресТаблицыСсылок,
		МодульЭтойОбработки,
		ГлобальныеПараметры,
		СтруктураШага.УИШ).ТаблицаЗначений;
		
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
	
	МодульЭтойОбработки.СцТ_ПреобразоватьВТаблицеХранилищеЗначенияВСтроку(ПроверочнаяТаблица);
	
	РезультатСравнения = СцТ_СравнитьДвеТаблицыЗначений_НаСервере(
		МодульЭтойОбработки,
		ПроверочнаяТаблица,
		ЭталоннаяТаблица,
		МассивИнфоСообщений);
	
	Если НЕ РезультатСравнения Тогда
		Ошибка = Истина;
		
		ОписательТаблицы = Новый Структура;
		ЭталоннаяТаблица.Колонки.Удалить("ПометкаВычерка");
		ОписательТаблицы.Вставить("АдресЭталоннойТЗ",
			ПоместитьВоВременноеХранилище(ЭталоннаяТаблица, Новый УникальныйИдентификатор));
		
		ПроверочнаяТаблица.Колонки.Удалить("ПометкаВычерка");
		ОписательТаблицы.Вставить("АдресТестовойТЗ",
			ПоместитьВоВременноеХранилище(ПроверочнаяТаблица, Новый УникальныйИдентификатор));
		
		ОписательТаблицы.Вставить("МассивИсключений"   , Новый Массив);
		ОписательТаблицы.Вставить("МассивКлючевыхПолей", Новый Массив);
		//ОписательТаблицы.Вставить("ТипОбъекта", "ДвиженияДокумента");
		ОписательТаблицы.Вставить("БезСохраненияИзменений", Истина);
		
		РазличияЭталонныхДанных.Добавить(ОписательТаблицы,
			НСтр("ru = 'Отличия результата запроса'"));
		
	КонецЕсли;
	
	Если НЕ РезультатСравнения Тогда
		Возврат Ложь;
	Иначе
		ТекстСообщения = НСтр("ru='Результат запроса идентичен эталонному.'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу - результат запроса
//
//Параметры
//	МодульЭтойОбработки - указатель на модуль этой обработки
//	ТекстЗапроса - текст запроса
//	ТаблицаПараметров - таблица параметров к запросу
//	Ошибка - признак ошибки
//	ВозвращаемыйТекстСообщения  - текст описания ошибки
//	АдресТаблицыСсылок - адрес хранения таблицы ссылок
// Возвращаеморе значение
// Таблица значений с результатом выполнения запроса
// в случае ошибки возвращается Неопределено
&НаСервереБезКонтекста
Функция СцТ_ВыполнитьЗапросИВернутьРезультатЗапроса_НаСервере(
	МодульЭтойОбработки,
	ТекстЗапроса,
	ТаблицаПараметров = Неопределено,
	Ошибка,
	МассивИнфоСообщений)
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстСообщения = НСтр("ru='Не заполнен текст запроса'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	
	// Проверка, что для всех параметров в запросе установлены значения
	Попытка
		Параметры = Запрос.НайтиПараметры();
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось получить параметры. Возможно есть ошибка в тексте запроса'");
		
		СцТ_ДобавитьПодстроку(ТекстСообщения, ОписаниеОшибки(), ":<br>");
		
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		
		Ошибка = Истина;
		Возврат Неопределено;
	КонецПопытки;
	
	Если Параметры.Количество() > 0 Тогда
		Если ТипЗнч(ТаблицаПараметров) <> Тип("ТаблицаЗначений") Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнены значения параметров'");
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
			Ошибка = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		СтрокаНенайденныхПараметров = "";
		Для каждого ПарамЗапроса Из Параметры Цикл
			СтрокаПараметров = ТаблицаПараметров.Найти(ПарамЗапроса.Имя, "ИмяПараметра");
			Если СтрокаПараметров = Неопределено Тогда
				СцТ_ДобавитьПодстроку(СтрокаНенайденныхПараметров, СцТ_ВыделенныйТекст(ПарамЗапроса.Имя), ", ");
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(СтрокаНенайденныхПараметров) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнены значения параметров:<br>%1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаНенайденныхПараметров);
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
			Ошибка = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		// Таблица параметров в эту процедуру передана уже с истинными значениями
		Для каждого СтрокаПараметров Из ТаблицаПараметров Цикл
			Если ТипЗнч(СтрокаПараметров.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
				ЗначениеПараметра = Новый СписокЗначений;
				Для каждого ЭлементСписка Из СтрокаПараметров.ЗначениеПараметра Цикл
					ЗначениеПараметра.Добавить(ЭлементСписка.Значение);
				КонецЦикла;
			Иначе
				ЗначениеПараметра = СтрокаПараметров.ЗначениеПараметра;
			КонецЕсли;
			Запрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, ЗначениеПараметра);
		КонецЦикла;
	КонецЕсли;
	
	// Предусмотреть все возможные ошибки в запросе достаточно сложно
	// Предполагается, что запрос должен быть достаточно простым
	Попытка
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить запрос. Возможно запрос слишком сложный или содержит ошибки. Попробуйте упростить запрос'");
		СцТ_ДобавитьПодстроку(ТекстСообщения, ОписаниеОшибки(), ":<br>");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		РезультатЗапроса = Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Функция выполнения шага замена ссылки
// 
// Параметры
//	ИдентификаторШага - идентификатор шага в дереве
//	ТекстВозвращаемогоСообщения - текст сообщения о выполнении шага
// Возвращаемое значение - результат выполнения
// Истина - выполнено успешно, Ложь - возникла ошибка
&НаСервереБезКонтекста
Функция СцТ_ВыполнитьШаг_ЗаменаСсылки_НаСервере(
	Знач СтруктураШага,
	МассивИнфоСообщений,
	Знач АдресТаблицыСсылок,
	ГлобальныеПараметры)
	
	МодульЭтойОбработки = СцТ_ПолучитьЭтуОбработку();
	
	ДеревоЗначения = МодульЭтойОбработки.СцТ_ИнициализироватьДеревоЗначенияИзСтруктуры(СтруктураШага.ДеревоЗначения);
	
	УзелТекстаЗапроса = ДеревоЗначения.Строки.Найти("ТекстЗапроса", "Имя");
	УзелПараметров    = ДеревоЗначения.Строки.Найти("ПараметрыЗапроса", "Имя");
	
	Если    УзелТекстаЗапроса     = Неопределено
		ИЛИ УзелПараметров        = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru='Не найден текст запроса для поиска ссылки.'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяПараметра");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра");
	Для каждого СтрокаПараметра Из УзелПараметров.Строки Цикл
		НоваяСтрокаПараметра = ТаблицаПараметров.Добавить();
		НоваяСтрокаПараметра.ИмяПараметра      = СтрокаПараметра.Имя;
		ТекстСообщения = "";
		НоваяСтрокаПараметра.ЗначениеПараметра = МодульЭтойОбработки.СцТ_ПолучитьЗначение_НаСервере(
			СтрокаПараметра.Значение,
			АдресТаблицыСсылок,
			СтрокаПараметра.ТипУзла,
			ГлобальныеПараметры);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
	КонецЦикла;
	
	Ошибка = Ложь;
	РезультатЗапроса = СцТ_ВыполнитьЗапросИВернутьРезультатЗапроса_НаСервере(
		МодульЭтойОбработки,
		УзелТекстаЗапроса.Значение,
		ТаблицаПараметров,
		Ошибка,
		МассивИнфоСообщений);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='В информационной базе не найден объект соответствующий условиям поиска'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ПроверочнаяСтрока = РезультатЗапроса[0];
	
	Попытка
		НоваяСсылка = ПроверочнаяСтрока.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru='Возникла ошибка при получении ссылки из результата запроса. Возможно в запросе отсутствует поле'");
		СцТ_ДобавитьПодстроку(ТекстСообщения, " " + СцТ_ВыделенныйТекст(НСтр("ru = 'Ссылка'")));
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	// Найти нужную строку в таблице ссылок и подставить туда значение
	Если НЕ ПустаяСтрока(АдресТаблицыСсылок) Тогда
		ТаблицаСсылокНаСервере = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
		
		ОтборПоТаблице = Новый Структура;
		ОтборПоТаблице.Вставить("Ссылка", СтруктураШага.ОбСсылка);
		
		НужныеСтроки = ТаблицаСсылокНаСервере.НайтиСтроки(ОтборПоТаблице);
		Если НужныеСтроки.Количество() > 0 Тогда
			НужныеСтроки[0].СоответствиеСсылок = НоваяСсылка;
		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(ТаблицаСсылокНаСервере, АдресТаблицыСсылок);
	КонецЕсли;
	
	// удачное завершение шага
	ТекстСообщения = НСтр("ru='Замена ссылки выполнена'");
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 5, ТекстСообщения);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#Область РаботаССообщениямиПользователю

// Отображение сообщения для пользователя
//
// Параметры
//	ТекстСообщения - отображаемый текст
//	РазличияЭталонныхДанных - содержание различий
&НаКлиенте
Процедура СцТ_ПоказатьСообщение_НаКлиенте(
	ТекущиеДанные,
	МассивИнфоСообщений = Неопределено,
	ПоказателиПроизводительности,
	ВремяВыполненияШага,
	РазличияЭталонныхДанных = Неопределено,
	ОбработчикОповещения)
	
	
	Если МассивИнфоСообщений <> Неопределено Тогда
		Для каждого СтруктураИнфоСообщения Из МассивИнфоСообщений Цикл
			Если СтруктураИнфоСообщения.ТипОшибки = 0
				ИЛИ СтруктураИнфоСообщения.ТипОшибки = 1 Тогда
				// Отображение причины остановки
				ОтображаемыеТипы = Новый СписокЗначений;
				ОтображаемыеТипы.Добавить(0);
				ОтображаемыеТипы.Добавить(1);
				СцТ_ГлавнаяФорма.СцТ_ПоказатьИнформационноеСообщение(
					МассивИнфоСообщений,
					ТекущиеДанные,
					ФормаШагов,
					ПоказателиПроизводительности,
					ВремяВыполненияШага,
					РазличияЭталонныхДанных,
					ОбработчикОповещения);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ЗарегистрироватьСообщениеВПротоколе_НаКлиенте(
	СтрокаШага,
	МассивИнфоСообщений,
	РезультатВыполненияШага = Истина,
	ПоказателиПроизводительности = Неопределено,
	ВремяВыполнения = Неопределено)
	
	Если ВремяВыполнения = Неопределено Тогда
		ВремяВыполнения = ТекущаяДата();
	КонецЕсли;
	
	ДатаВыполненияШага  = Формат(ВремяВыполнения, "ДФ=""дд.ММ.гг""");
	ВремяВыполненияШага = Формат(ВремяВыполнения, "ДФ=""ЧЧ:мм:сс""");
	
	НомерШагаСтрокой      = Формат(СтрокаШага.НомерШага,"ЧГ=0");
	
	ТипШага        = СтрокаШага.ТипШага;
	Наименование   = СтрокаШага.Наименование;
	НомерШага      = СтрокаШага.НомерШага;
	
	Если РезультатВыполненияШага Тогда
		ОшибокВШаге = 0;
	Иначе
		ОшибокВШаге = 1;
	КонецЕсли;
	
	Пропущен = (СтрокаШага.Активность = 0);
	
	РодительскийШаг = СтрокаШага.ПолучитьРодителя();
	Если РодительскийШаг = Неопределено Тогда
		Если ФормаРодительскогоПроцесса <> Неопределено И ШагРодительскогоПроцесса <> Неопределено Тогда
			РодительскийШаг = ШагРодительскогоПроцесса;
		Иначе
			// Это основное дерево сценария
			
		КонецЕсли;
	КонецЕсли;
	
	Если РодительскийШаг = Неопределено Тогда
		ИдентификаторРодителя = "00000";
	Иначе
		ИдентификаторРодителя = РодительскийШаг.УИШ;
	КонецЕсли;
	
	Если ПоказателиПроизводительности = Неопределено Тогда
		Вызовы            = 0;
		Продолжительность = 0;
		Отправлено        = 0;
		Принято           = 0;
	Иначе
		Вызовы            = ПоказателиПроизводительности.Вызовы;
		Продолжительность = ПоказателиПроизводительности.Длительность;
		Отправлено        = ПоказателиПроизводительности.Отправлено;
		Принято           = ПоказателиПроизводительности.Принято;
	КонецЕсли;
	
	//СцТ_JSONЗапись = СцТ_ГлавнаяФорма.СцТ_ИнициализироватьЗаписьJSON();
	
	// ССП - СтруктураСтрокиПротокола
	ССП = Новый Структура;
	ССП.Вставить("Идентификатор"        , СтрокаШага.УИШ);
	ССП.Вставить("ИдентификаторРодителя", ИдентификаторРодителя);
	ССП.Вставить("НомерШага"            , НомерШага);
	ССП.Вставить("НомерШагаСтрокой"     , НомерШагаСтрокой);
	ССП.Вставить("Наименование"         , Наименование);
	
	ССП.Вставить("Ошибки"               , ОшибокВШаге);
	ССП.Вставить("Дата"                 , ДатаВыполненияШага);
	ССП.Вставить("Время"                , ВремяВыполненияШага);
	ССП.Вставить("ТипШага"              , ТипШага);
	ССП.Вставить("Пропущено"            , Пропущен);
	
	ССП.Вставить("Вызовы"               , Вызовы);
	ССП.Вставить("Продолжительность"    , Продолжительность);
	ССП.Вставить("Отправлено"           , Отправлено);
	ССП.Вставить("Принято"              , Принято);
	
	ССП.Вставить("МассивИнфоСообщений", МассивИнфоСообщений);
	
	// Формирование строки JSON
	СцТ_JSONЗапись = Новый ЗаписьJSON;
	СцТ_JSONЗапись.УстановитьСтроку();
	ЗаписатьJSON(СцТ_JSONЗапись, ССП);
	
	СтрокаJSON = СцТ_JSONЗапись.Закрыть();
	
	// Непосредственная запись в файл
	СцТ_ГлавнаяФорма.СцТ_ЗаписатьJSONвФайл(СтрокаJSON);
	
	
КонецПроцедуры

#КонецОбласти


#Область СравнениеЗначенийНаСервере

// Процедура сравнения массивов строк таблиц
// Строки содержат истинные значения
// сравнение выполняется по большему совпадению
//
// Параметры
//	МодульЭтойОбработки - указатель на модуль обработки
//	НовыеСтроки - массив строк тестовой таблицы
//	СтарыеСтроки - массив строк эталонной таблицы
//	КолонкиТаблицы - массив колонок таблицы
//	ТекстСообщения - текст сообщения
//	НазваниеСтроки - представление отбора строк
//	ПоляИсключения - массив колонок, которые не надо сравнивать
//	ДействияСКолонками - Действия, выполняемые с колонками
// Возвращаемое значение - результат сравнения
// Истина - массивы одинаковые, ложь - массивы отличаются
&НаСервереБезКонтекста
Функция СцТ_СравнитьДваМассиваСтрокТаблиц_НаСервере(
	МодульЭтойОбработки,
	НовыеСтроки,    // Тестируемая таблица
	Знач СтарыеСтроки,   // Эталонная таблица
	Знач СписокКолонок,
	Знач МассивКлючей,
	ТекстСообщения,
	ДействияСКолонками)
	
	ЕстьОшибки = Ложь;
	
	// Создание новой таблицы корреляции в которой будут фиксироваться количество полей
	// в которых строки не совпадают, 0 - полное совпадение строк
	ТаблицаКорреляции = Новый ТаблицаЗначений;
	ТаблицаКорреляции.Колонки.Добавить("ИндексНовойСтроки");
	ТаблицаКорреляции.Колонки.Добавить("ИндексСтаройСтроки");
	ТаблицаКорреляции.Колонки.Добавить("КорреляцияПроверить");
	ТаблицаКорреляции.Колонки.Добавить("КорреляцияСведения");
	ТаблицаКорреляции.Колонки.Добавить("Отметка", Новый ОписаниеТипов("Булево"));
	
	// Строки сравниваются каждая с каждой
	
	// Заполнение таблицы корреляции
	КоличествоНовыхСтрок  = НовыеСтроки.Количество();
	КоличествоСтарыхСтрок = СтарыеСтроки.Количество();
	Для НомСтаройСтроки = 0 По КоличествоСтарыхСтрок - 1 Цикл
		СтараяСтрока = СтарыеСтроки[НомСтаройСтроки];
		Для НомНовойСтроки = 0 По КоличествоНовыхСтрок - 1 Цикл
			НоваяСтрока = НовыеСтроки[НомНовойСтроки];
			
			КоличествоНесовпаденийПроверить = 0;
			КоличествоНесовпаденийСведения  = 0;
			Для каждого Колонка Из СписокКолонок Цикл
				
				ДействиеСравнения = "";
				Если ДействияСКолонками <> Неопределено Тогда
					ДействиеСравнения = ДействияСКолонками[Колонка.Значение];
				КонецЕсли;
				
				Если ДействиеСравнения <> "Проверить" И ДействиеСравнения <> "Сведения" Тогда
					ДействиеСравнения = "Проверить";
				КонецЕсли;
				
				Если НЕ СцТ_СравнитьЗначениеДвухРеквизитов_НаСервере(
					СтараяСтрока[Колонка.Значение],
					НоваяСтрока[Колонка.Значение]) Тогда
					
					Если ДействиеСравнения = "Проверить" Тогда
						КоличествоНесовпаденийПроверить = КоличествоНесовпаденийПроверить + 1;
					Иначе
						КоличествоНесовпаденийСведения = КоличествоНесовпаденийСведения + 1;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ДобавляемаяСтрока = ТаблицаКорреляции.Добавить();
			ДобавляемаяСтрока.ИндексНовойСтроки   = НомНовойСтроки;
			ДобавляемаяСтрока.ИндексСтаройСтроки  = НомСтаройСтроки;
			ДобавляемаяСтрока.КорреляцияПроверить = КоличествоНесовпаденийПроверить;
			ДобавляемаяСтрока.КорреляцияСведения  = КоличествоНесовпаденийСведения;
			ДобавляемаяСтрока.Отметка             = Ложь;

		КонецЦикла;
	КонецЦикла;
	
	// Сортируем таблицу по возрастанию корреляции - верхняя строка будет нужной парой.
	// Фиксируем пару строк и ее отличия
	// Удаляем строки, где встречается хотя бы одна строка пары
	// Повторяем операцию до тех пор, пока не закончатся пары строк
	
	// Обработанные строки отмечаются в поле КорреляцияПроверить значением 1000000
	ОтборКорреляций = Новый Структура;
	ОтборКорреляций.Вставить("Отметка", Истина);
	Пока ТаблицаКорреляции.Количество() > ТаблицаКорреляции.НайтиСтроки(ОтборКорреляций).Количество() Цикл
		
		ТаблицаКорреляции.Сортировать("Отметка,КорреляцияПроверить,КорреляцияСведения");
		СтрокаНужнойПары  = ТаблицаКорреляции[0];
		НомерНовойСтроки  = СтрокаНужнойПары.ИндексНовойСтроки;
		НомерСтаройСтроки = СтрокаНужнойПары.ИндексСтаройСтроки;
		// Переместим нужную пару в конец таблицы и пометим, будем считать,
		// что количество строк меньше миллиона
		СтрокаНужнойПары.Отметка = Истина;
		КоличествоКорреляций = ТаблицаКорреляции.Количество();
		
		// Удаление всех строк в таблице корреляции, в которых упоминаются обработанные строки
		Для ОбратныйИндекс = 1 По КоличествоКорреляций Цикл
			ИндексТекущейСтроки = КоличествоКорреляций - ОбратныйИндекс;
			СтрТаблицы = ТаблицаКорреляции[ИндексТекущейСтроки];
			
			Если (СтрТаблицы.ИндексНовойСтроки = НомерНовойСтроки
				ИЛИ СтрТаблицы.ИндексСтаройСтроки = НомерСтаройСтроки)
				И НЕ СтрТаблицы.Отметка Тогда
				
				ТаблицаКорреляции.Удалить(ИндексТекущейСтроки);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Все строки разбиты на пары.
	// ***************************
	
	// Добавление в сообщение сведений о строках которых нет в тестируемой таблице
	Для НомСтаройСтроки = 0 По КоличествоСтарыхСтрок - 1 Цикл
		
		ПодстрокаСообщения = "";
		
		Если ТаблицаКорреляции.Найти(НомСтаройСтроки, "ИндексСтаройСтроки") = Неопределено Тогда
			
			ПодстрокаСообщения = СцТ_ВыводСведенийОСтрокеТаблицы(
				СтараяСтрока,
				Неопределено,
				МассивКлючей,
				СписокКолонок,
				"ОтсутствуетТестируемаяСтрока");
			
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
		СцТ_ДобавитьПодстроку(ТекстСообщения, ПодстрокаСообщения);
		
	КонецЦикла;
	
	// Добавление в сообщение сведений о строках которых нет в эталонной таблице
	// т.е. лишние строки в тестируемой таблице
	Для НомНовойСтроки = 0 По КоличествоНовыхСтрок - 1 Цикл
		ПодстрокаСообщения = "";
		
		Если ТаблицаКорреляции.Найти(НомНовойСтроки, "ИндексНовойСтроки") = Неопределено Тогда
			// Для этой строки не найдена пара
			НоваяСтрока = НовыеСтроки[НомНовойСтроки];
			
			ПодстрокаСообщения = СцТ_ВыводСведенийОСтрокеТаблицы(
				Неопределено,
				НоваяСтрока,
				МассивКлючей,
				СписокКолонок,
				"ОтсутствуетЭталоннаяСтрока");
			
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		СцТ_ДобавитьПодстроку(ТекстСообщения, ПодстрокаСообщения);
	КонецЦикла;
	
	// Добавление сведений о строках, которые содержат отличия
	Для каждого СтрКорреляции Из ТаблицаКорреляции Цикл
		
		ПодстрокаСообщения = "";
		ЕстьОтличия = Ложь;
		
		НоваяСтрока  = НовыеСтроки[СтрКорреляции.ИндексНовойСтроки];
		СтараяСтрока = СтарыеСтроки[СтрКорреляции.ИндексСтаройСтроки];
		
		СтрокаСообщения = "";
		СтрокаСведений  = "";
		Для каждого Колонка Из СписокКолонок Цикл
			
			ДействиеСравнения = "";
			Если ДействияСКолонками <> Неопределено Тогда
				ДействиеСравнения = ДействияСКолонками[Колонка.Значение];
			КонецЕсли;
			
			Если ДействиеСравнения <> "Проверить" И ДействиеСравнения <> "Сведения" Тогда
				ДействиеСравнения = "Проверить";
			КонецЕсли;
			
			Если НЕ СцТ_СравнитьЗначениеДвухРеквизитов_НаСервере(НоваяСтрока[Колонка.Значение], СтараяСтрока[Колонка.Значение]) Тогда
				ЕстьОтличия = Истина;
				
				Если ДействиеСравнения = "Проверить" Тогда
					ЕстьОшибки = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОтличия Тогда
			
			ПодстрокаСообщения = СцТ_ВыводСведенийОСтрокеТаблицы(
				СтараяСтрока,
				НоваяСтрока,
				МассивКлючей,
				СписокКолонок,
				"ЕстьНесовпаденияВСтроке");
			
			СцТ_ДобавитьПодстроку(ТекстСообщения, ПодстрокаСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Универсальная функция сравнения двух произвольных таблиц значений
// таблицы должны содержать уже истинные значения
//
// параметры
// МодульЭтойОбработки    - указатель на модуль этой обработки
//	НоваяТаблица          - Проверяемая таблица значений
//	СтараяТаблица         - эталонная таблица значений
//	ТекстСравненияТаблицы - строковая переменная для сообщений об отличиях
//	КлючевыеПоля          - массив полей для идентификации строки
//	ПоляИсключения        - массив полей не участвующих в сравнении
//	СтрокиИсключения      - массив номеров строк не участвующих в сравнении
// Возвращаемое значение  - результат сравнения
// Истина - таблицы одинаковые, Ложь - есть отличия
&НаСервереБезКонтекста
Функция СцТ_СравнитьДвеТаблицыЗначений_НаСервере(
	МодульЭтойОбработки,
	Знач ТекущаяТаблица,  // - то, что в базе в текущий момент
	Знач ЭталоннаяТаблица, // - таблица в данных шага
	МассивИнфоСообщений,
	Знач КлючевыеПоля       = Неопределено,
	Знач ПоляИсключения     = Неопределено,
	Знач СтрокиИсключения   = Неопределено,
	ДействияСКолонками = Неопределено,
	НазваниеТаблицы = "")
	
	Ошибка = Ложь;
	
	Если ТекущаяТаблица = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить проверяемую таблицу %1'");
		Вставка = СцТ_ВыделенныйТекст(НазваниеТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭталоннаяТаблица = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить хранимую в шаге таблицу %1'");
		Вставка = СцТ_ВыделенныйТекст(НазваниеТаблицы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	МассивКолонокТестируемойТаблицы = ТекущаяТаблица.Колонки;
	МассивКолонок = ЭталоннаяТаблица.Колонки;
	
	СписокКолонок = Новый СписокЗначений;
	Для каждого Колонка Из МассивКолонок Цикл
		Если ПустаяСтрока(Колонка.Заголовок) Тогда
			ЗаголовокКолонки = Колонка.Имя;
		Иначе
			ЗаголовокКолонки = Колонка.Заголовок;
		КонецЕсли;
		
		Если Колонка.Имя <> "ПометкаВычерка" Тогда
			СписокКолонок.Добавить(Колонка.Имя, Колонка.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка, что не появилось новых колонок
	Для каждого ТестируемаяКолонка Из МассивКолонокТестируемойТаблицы Цикл
		Если СписокКолонок.НайтиПоЗначению(ТестируемаяКолонка.Имя) = Неопределено
			И ПоляИсключения <> Неопределено
			И ПоляИсключения.Найти(ТестируемаяКолонка.Имя) = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru='В таблицу %1 добавлена колонка %2, отсутствующая в шаге'");
			Вставка = СцТ_ВыделенныйТекст(НазваниеТаблицы);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
			ЗаголовокКолонки = ТестируемаяКолонка.Заголовок;
			Если ПустаяСтрока(ЗаголовокКолонки) Тогда
				ЗаголовокКолонки = ТестируемаяКолонка.Имя;
			КонецЕсли;
			
			Вставка = СцТ_ВыделенныйТекст(ЗаголовокКолонки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Вставка);
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
			
		КонецЕсли;
	КонецЦИкла;
	
	КоличествоКолонок = СписокКолонок.Количество();
	Для ОбратныйИндекс = 1 По КоличествоКолонок Цикл
		Колонка = СписокКолонок[КоличествоКолонок - ОбратныйИндекс];
		Если ПоляИсключения <> Неопределено
			И ПоляИсключения.Найти(Колонка.Значение) <> Неопределено
			ИЛИ Колонка.Значение = "ПометкаВычерка" Тогда
			
			СписокКолонок.Удалить(КоличествоКолонок - ОбратныйИндекс);
			
		КонецЕсли;
	КонецЦикла;
	
	// Проверка наличия колонок в проверяемой таблице - удаление несуществующих колонок
	// из эталонной таблицы
	КоличествоКолонок = СписокКолонок.Количество();
		Если КоличествоКолонок > 0 Тогда
		Для ОбратныйИндекс = 1 По КоличествоКолонок Цикл
			Колонка = СписокКолонок[КоличествоКолонок - ОбратныйИндекс];
			Если ТекущаяТаблица.Колонки.Найти(Колонка.Значение) = Неопределено Тогда
				
				ТекстСообщения = НСтр("ru='В таблице %1 отсутствует колонка %2, сведения о которой есть в шаге'");
				Вставка = СцТ_ВыделенныйТекст(НазваниеТаблицы);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Вставка);
				Вставка = СцТ_ВыделенныйТекст(Колонка.Представление);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Вставка);
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
				
				// Возможно это не критичная ошибка, а неактуальность теста
				СписокКолонок.Удалить(КоличествоКолонок - ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Приведение ключей к нормальному виду
	Если ТипЗнч(КлючевыеПоля) <> Тип("Массив") Тогда
		КлючевыеПоля = Новый Массив;
	КонецЕсли;
	
	КоличествоКлючей = КлючевыеПоля.Количество();
	
	Если КоличествоКлючей > 0 Тогда
		Для ОбрИндекс = 1 ПО КоличествоКлючей Цикл
			КлючевоеПоле = КлючевыеПоля[КоличествоКлючей - ОбрИндекс];
			
			Если СписокКолонок.НайтиПоЗначению(КлючевоеПоле) = Неопределено Тогда
				КлючевыеПоля.Удалить(КоличествоКлючей - ОбрИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущаяТаблица.Количество() = 0 И ЭталоннаяТаблица.Количество() = 0 Тогда
		// Все нормально
		Возврат Истина;
		
	Иначе
		
		// Подготовка таблиц к проверке
		// ****************************
		Если ЭталоннаяТаблица.Колонки.Найти("ПометкаВычерка") = Неопределено Тогда
			ЭталоннаяТаблица.Колонки.Добавить("ПометкаВычерка");
		КонецЕсли;
		ЭталоннаяТаблица.ЗаполнитьЗначения(Ложь, "ПометкаВычерка");
		
		Если ТекущаяТаблица.Колонки.Найти("ПометкаВычерка") = Неопределено Тогда
			ТекущаяТаблица.Колонки.Добавить("ПометкаВычерка");
		КонецЕсли;
		ТекущаяТаблица.ЗаполнитьЗначения(Ложь, "ПометкаВычерка");
		
		// Построчная проверка таблиц
		// **************************
		
		СтрокаОшибокСравнения = "";
		
		// Выполняется проход по эталонной таблице и проверяются
		// значения в тестовой таблице
		Для каждого СтрокаЭталоннойТаблицы Из ЭталоннаяТаблица Цикл
			
			ЛокальнаяСтрокаОшибкиСравнения = "";
			
			// Строку могли уже вычеркнуть
			Если СтрокаЭталоннойТаблицы.ПометкаВычерка Тогда
				Продолжить;
			КонецЕсли;
			
			
			СтруктураОтбора          = Новый Структура;
			СтруктураОтбораДляПечати = Новый Структура;
			
			
			Для каждого КлючевоеПоле Из КлючевыеПоля Цикл
				Попытка
					ЗначениеОтбора = СтрокаЭталоннойТаблицы[КлючевоеПоле];
				Исключение
					Продолжить;
				КонецПопытки;
				СтруктураОтбора.Вставить(КлючевоеПоле, ЗначениеОтбора);
				СтруктураОтбораДляПечати.Вставить(КлючевоеПоле, ЗначениеОтбора);
			КонецЦикла;
			
			СтруктураОтбора.Вставить("ПометкаВычерка", Ложь);
			
			НайденныеСтроки = ТекущаяТаблица.НайтиСтроки(СтруктураОтбора);
			КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
			
			Если КоличествоНайденныхСтрок = 0 Тогда
				
				// Это ошибка - в тестируемой таблице отстуствует соответствие для строки из эталонной таблицы
				Ошибка = Истина;
				
				// Регистрация ошибки
				ЛокальнаяСтрокаОшибкиСравнения = СцТ_ВыводСведенийОСтрокеТаблицы(
					СтрокаЭталоннойТаблицы,
					Неопределено,
					КлючевыеПоля,
					СписокКолонок,
					"ОтсутствуетТестируемаяСтрока");
				
				// Вычеркиваем строку
				СтрокаЭталоннойТаблицы.ПометкаВычерка = Истина;
				
			ИначеЕсли КоличествоНайденныхСтрок = 1 Тогда
				
				СравниваемаяСтрока = НайденныеСтроки[0];
				
				ЕстьНесовпадения = Ложь;
				
				// Можно сравнить все реквизиты
				Для каждого Колонка Из СписокКолонок Цикл
					
					ДействиеСравнения = "";
					Если ДействияСКолонками <> Неопределено Тогда
						ДействиеСравнения = ДействияСКолонками[Колонка.Значение];
					КонецЕсли;
					
					Если ДействиеСравнения <> "Проверить" И ДействиеСравнения <> "Сведения" Тогда
						ДействиеСравнения = "Проверить";
					КонецЕсли;
					
					Если НЕ СцТ_СравнитьЗначениеДвухРеквизитов_НаСервере(
						СтрокаЭталоннойТаблицы[Колонка.Значение],
						СравниваемаяСтрока[Колонка.Значение]) Тогда
						
						ЕстьНесовпадения = Истина;
						
						Если ДействиеСравнения = "Проверить" Тогда
							Ошибка = Истина;
							// Если зарегистрирована ошибка, то сравнивать значение до конца нет смысла
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЕстьНесовпадения Тогда
					// Регистрация ошибки
					ЛокальнаяСтрокаОшибкиСравнения = СцТ_ВыводСведенийОСтрокеТаблицы(
						СтрокаЭталоннойТаблицы,
						СравниваемаяСтрока,
						КлючевыеПоля,
						СписокКолонок,
						"ЕстьНесовпаденияВСтроке");
				КонецЕсли;
				
				// Вычеркиваем строки
				СтрокаЭталоннойТаблицы.ПометкаВычерка = Истина;
				СравниваемаяСтрока.ПометкаВычерка     = Истина;
				
			Иначе
				// Найдено больше одной строки
				
				//Нужно выполнить такой же отбор в эталонной таблице и сравнить количество строк
				НайденныеСтрокиЭталоннойТаблицы = ЭталоннаяТаблица.НайтиСтроки(СтруктураОтбора);
				
				// Попытка сравнить строки друг с другом
				РезультатСравнения = СцТ_СравнитьДваМассиваСтрокТаблиц_НаСервере(
					МодульЭтойОбработки,
					НайденныеСтроки,
					НайденныеСтрокиЭталоннойТаблицы,
					СписокКолонок,
					КлючевыеПоля,
					ЛокальнаяСтрокаОшибкиСравнения,
					ДействияСКолонками);
				
				// Вычеркиваем строки
				Для каждого СтрМассива Из НайденныеСтроки Цикл
					СтрМассива.ПометкаВычерка = Истина;
				КонецЦикла;
				
				Для каждого СтрМассива Из НайденныеСтрокиЭталоннойТаблицы Цикл
					СтрМассива.ПометкаВычерка = Истина;
				КонецЦикла;
				
				Если НЕ РезультатСравнения Тогда
					Ошибка = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			СцТ_ДобавитьПодстроку(СтрокаОшибокСравнения, ЛокальнаяСтрокаОшибкиСравнения);
			
		КонецЦикла;
		
		// Поиск лишних строк в тестируемой таблице (необходимо, если задан ключ отбора)
		
		Для каждого СтрокаТекТаблицы Из ТекущаяТаблица Цикл
			
			Если СтрокаТекТаблицы.ПометкаВычерка Тогда
				Продолжить;
			КонецЕсли;
			
			ЛокальнаяСтрокаОшибкиСравнения = СцТ_ВыводСведенийОСтрокеТаблицы(
					Неопределено,
					СтрокаТекТаблицы,
					КлючевыеПоля,
					СписокКолонок,
					"ОтсутствуетЭталоннаяСтрока");
					
			СцТ_ДобавитьПодстроку(СтрокаОшибокСравнения, ЛокальнаяСтрокаОшибкиСравнения);
			
			Ошибка = Истина;
			
		КонецЦикла;
		
		
		Если НЕ ПустаяСтрока(СтрокаОшибокСравнения) Тогда
			// Строку нужно дополнить заголовком таблицы
			
			//Заголовок = НСтр("ru='В таблице %1 есть различия:");
			//Вставка = СцТ_ВыделенныйТекст(НазваниеТаблицы);
			//ТекстСообщения = СтрЗаменить(Заголовок, "%1", Вставка);
			
			// Оформление таблицы в html
			
			СтрокаОшибокСравнения = 
				СцТ_ДобавитьЗаголовокКТаблице(КлючевыеПоля, СписокКолонок, НазваниеТаблицы) +
				СтрокаОшибокСравнения +
				СцТ_ОкончаниеТаблицы();
			
			
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, СтрокаОшибокСравнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ Ошибка;
	
КонецФункции


// Сравнение значения двух реквизитов, произвольного типа
// Перед сравнением выполняется необходимое преобразование значений
// Параметры:
// ЭталонноеЗначение - первое сравниваемое значение
// ПроверяемоеЗначение - Второе сравниваемое значение
// Возвращаемое значение - результат сравнения
// Истина - значения равны, ложь - есть отличия
&НаСервереБезКонтекста
Функция СцТ_СравнитьЗначениеДвухРеквизитов_НаСервере(
	Знач ЭталонноеЗначение,
	Знач ПроверяемоеЗначение)
	
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("ХранилищеЗначения") Тогда
		ПроверяемоеЗначение = XMLСтрока(ПроверяемоеЗначение);
	КонецЕсли;
	
	Если ТипЗнч(ЭталонноеЗначение) = Тип("ХранилищеЗначения") Тогда
		ЭталонноеЗначение = XMLСтрока(ЭталонноеЗначение);
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемоеЗначение)= Тип("Число") Тогда
		ПроверяемоеЗначение = Окр(ПроверяемоеЗначение, 2);
	КонецЕсли;
	
	Если ТипЗнч(ЭталонноеЗначение)= Тип("Число") Тогда
		ЭталонноеЗначение = Окр(ЭталонноеЗначение, 2);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПроверяемоеЗначение) И НЕ ЗначениеЗаполнено(ЭталонноеЗначение) Тогда
		РезультатСравнения = Истина;
	Иначе
		РезультатСравнения = (ЭталонноеЗначение = ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат РезультатСравнения;
	
КонецФункции


// Функция получения таблицы значений и массива исключений
// на основе узла дерева значений с таблицей
// Параметры:
// УзелТабличнойЧасти - узел дерева значений с табличной частью
// Возвращаемое значение - структура
&НаСервереБезКонтекста
Функция СцТ_СформироватьТаблицуИзУзлаДерева_НаСервере(
	УзелТабличнойЧасти,
	АдресТаблицыСсылок,
	МодульОбработки,
	ГлобальныеПараметры,
	УИШ = "")
	
	КолонкиИсключений       = Новый Массив;
	СтрокиИсключений        = Новый Массив;
	КлючевыеПоля            = Новый Массив;
	ДействияСКолонками      = Новый Соответствие;
	ТаблицаЗначений         = Новый ТаблицаЗначений;
	
	УзелШапки = УзелТабличнойЧасти.Строки.Найти("ШапкаТаблицы", "Имя");
	
	Если УзелШапки <> Неопределено Тогда
		
		Для каждого СтрокаШапки Из УзелШапки.Строки Цикл
			ТаблицаЗначений.Колонки.Добавить(СтрокаШапки.Имя, , СтрокаШапки.Синоним, СтрокаШапки.Значение);
			
			// Добавление в исключение неактивных колонок
			Если НЕ СтрокаШапки.Активность Тогда
				КолонкиИсключений.Добавить(СтрокаШапки.Имя);
			ИначеЕсли СтрокаШапки.Действие = "Ключ" Тогда
				КлючевыеПоля.Добавить(СтрокаШапки.Имя);
			КонецЕсли;
			
			ДействияСКолонками[СтрокаШапки.Имя] = СтрокаШапки.Действие;
			
		КонецЦикла;
		
		Для каждого УзелСтроки Из УзелТабличнойЧасти.Строки Цикл
			
			Если УзелСтроки.Имя = "ШапкаТаблицы" Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавление в исключение неактивных строк
			Если НЕ УзелСтроки.Активность Тогда
				Продолжить; // Если строка не активна, то сравнивать ее не нужно
				СтрокиИсключений.Добавить(УзелСтроки.Значение);
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			
			Для каждого СтрокаРеквизита Из УзелСтроки.Строки Цикл
				
				Если ТаблицаЗначений.Колонки.Найти(СтрокаРеквизита.Имя) = Неопределено Тогда
					Сообщение = НСтр("ru='Не найдена колонка с именем ""<ИмяКолонки>""'");
					Сообщение = СтрЗаменить(Сообщение, НСтр("ru='<ИмяКолонки>'"), СтрокаРеквизита.Имя);
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока[СтрокаРеквизита.Имя] = МодульОбработки.СцТ_ПолучитьЗначение_НаСервере(
					СтрокаРеквизита.Значение,
					АдресТаблицыСсылок,
					СтрокаРеквизита.ТипУзла,
					ГлобальныеПараметры,
					УИШ);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("ТаблицаЗначений"      , ТаблицаЗначений);
	Структура.Вставить("МассивИсключений"     , КолонкиИсключений);
	Структура.Вставить("МассивСтрокИсключений", СтрокиИсключений);
	Структура.Вставить("МассивКлючевыхПолей"  , КлючевыеПоля);
	Структура.Вставить("ДействияСКолонками"   , ДействияСКолонками);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти


#Область ОбщиеОбработчикиИнтерактивныхШагов

// Учет текущего объекта тестируемого приложения в хранилище
//
// Параметры
//	ИмяУзла - имя нужного узла
//	АтрибутыУзла - параметры узла
//	СтекОбъектовТестируемогоПриложения - хранилище для учета
&НаКлиенте
Процедура СцТ_ДобавитьОбъектТестируемогоПриложенияВСтекОбъектов(
	ИмяУзла,
	АтрибутыУзла,
	СтекОбъектовТестируемогоПриложения)
	
	НайденыйОбъект = Неопределено;
	
	// Здесь поиск объекта в тестируемом приложении
	
	Если ИмяУзла = "CLIENTAPPLICATIONWINDOW" Тогда
		
		Если ВРег(СокрЛП(Строка(АтрибутыУзла["ISMAIN"]))) = "TRUE" Тогда
			НайденыйОбъект = СцТ_ГлавнаяФорма.СцТ_ПолучитьОсновноеОкноТестируемогоПриложения();
			Если НайденыйОбъект = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Не найдено главное окно тестируемого приложения'");
			КонецЕсли;
		Иначе
			
			ЗаголовокИскомогоОбъекта = Строка(АтрибутыУзла["CAPTION"]);
			НайденыйОбъект = СцТ_ГлавнаяФорма.СцТ_Контроллер.НайтиОбъект(
				Тип("ТестируемоеОкноКлиентскогоПриложения"),
				ЗаголовокИскомогоОбъекта,
				,
				СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов);
			
		КонецЕсли;
		
	Иначе
		// Иначе - это дочерний объект верхнего объекта стека
		
		РодительскийОбъект = СтекОбъектовТестируемогоПриложения[СтекОбъектовТестируемогоПриложения.ВГраница()];
		
		НайденыйОбъект = Неопределено;
		Если ИмяУзла = "COMMANDINTERFACE" Тогда
			НайденыйОбъект = РодительскийОбъект.ПолучитьКомандныйИнтерфейс();
			
		ИначеЕсли ИмяУзла = "FORMGROUP" И ТипЗнч(РодительскийОбъект) = Тип("ТестируемоеПолеФормы") Тогда
			НайденыйОбъект = РодительскийОбъект.ПолучитьКонтекстноеМеню();
			
		Иначе
			
			ПоискПоЗаголовку = Истина;
			ЗаголовокИскомогоОбъекта = Строка(АтрибутыУзла["TITLE"]);
			ИмяИскомогоОбъекта       = Строка(АтрибутыУзла["NAME"]);
			
			Если ИмяУзла = "FORM" Тогда
				ТипИскомогоОбъекта = Тип("ТестируемаяФорма");
				
			ИначеЕсли ИмяУзла = "FORMGROUP" Тогда
				ТипИскомогоОбъекта = Тип("ТестируемаяГруппаФормы");
				
			ИначеЕсли ИмяУзла = "FORMFIELD" Тогда
				ТипИскомогоОбъекта = Тип("ТестируемоеПолеФормы");
				
			ИначеЕсли ИмяУзла = "FORMTABLE" Тогда
				ТипИскомогоОбъекта = Тип("ТестируемаяТаблицаФормы");
				
			ИначеЕсли ИмяУзла = "FORMBUTTON" Тогда
				ТипИскомогоОбъекта = Тип("ТестируемаяКнопкаФормы");
				
			ИначеЕсли ИмяУзла = "FORMDECORATION" Тогда
				ТипИскомогоОбъекта = Тип("ТестируемаяДекорацияФормы");
				
			ИначеЕсли ИмяУзла = "FORMDECORATION" Тогда
				ТипИскомогоОбъекта = Тип("ТестируемаяДекорацияФормы");
				
			ИначеЕсли ИмяУзла = "COMMANDINTERFACEGROUP" Тогда
				ТипИскомогоОбъекта = Тип("ТестируемаяГруппаКомандногоИнтерфейса");
				
			ИначеЕсли ИмяУзла = "COMMANDINTERFACEBUTTON" Тогда
				ТипИскомогоОбъекта = Тип("ТестируемаяКнопкаКомандногоИнтерфейса");
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ИмяИскомогоОбъекта) Тогда
				НайденыйОбъект = РодительскийОбъект.НайтиОбъект(
					ТипИскомогоОбъекта,
					,
					ИмяИскомогоОбъекта,
					СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов);
			ИначеЕсли НЕ ПустаяСтрока(ЗаголовокИскомогоОбъекта) Тогда
				НайденыйОбъект = РодительскийОбъект.НайтиОбъект(
					ТипИскомогоОбъекта,
					ЗаголовокИскомогоОбъекта,
					,
					СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов);
			Иначе
				ВызватьИсключение НСтр("ru = 'Не задано имя и заголовок объекта'");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НайденыйОбъект = Неопределено Тогда
			// Возможно, у искомого объекта заголовок пуст, тогда выполнить попытку поиска по имени
			НайденыйОбъект = РодительскийОбъект.НайтиОбъект(
				ТипИскомогоОбъекта,
				,
				ЗаголовокИскомогоОбъекта,
				СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденыйОбъект = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найден объект тестируемого приложения ('")
			+ ИмяУзла
			+ НСтр("ru = ') с заголовком ""'")
			+ ЗаголовокИскомогоОбъекта + """";
	КонецЕсли;
	
	СтекОбъектовТестируемогоПриложения.Добавить(НайденыйОбъект);
	
КонецПроцедуры

// Выполнение интерактивного действия над элементом формы теируемого приложения
//
// Параметры
//	ИмяКоманды - имя команды
//	АтрибутыКоманды - параметры команды
//	СтекОбъектовТестируемогоПриложения - хранилище текущих объектов тестируемого приложения
//	ЧтениеXML - стандартный узел чтения xml
&НаКлиенте
Процедура СцТ_ВыполнитьИнтерактивнуюКомандуНадОбъектомТестируемогоПриложения(
	ИмяКоманды,
	АтрибутыКоманды,
	СтекОбъектовТестируемогоПриложения,
	ЧтениеXML)
	
	#Если НЕ ВебКлиент Тогда
	
	Если СтекОбъектовТестируемогоПриложения.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не найден активный объект тестируемого приложения'");
	КонецЕсли;
	
	ТестируемыйОбъект = СтекОбъектовТестируемогоПриложения[СтекОбъектовТестируемогоПриложения.ВГраница()];
	
	Если ИмяКоманды = "ACTIVATE" Тогда
		ТестируемыйОбъект.Активизировать();
		
	ИначеЕсли ИмяКоманды = "CLOSE" Тогда
		ТестируемыйОбъект.Закрыть();
		
	ИначеЕсли ИмяКоманды = "CLICK" Тогда
		ТестируемыйОбъект.Нажать();
		
	ИначеЕсли ИмяКоманды = "CLEAR" Тогда
		ТестируемыйОбъект.Очистить();
		
	ИначеЕсли ИмяКоманды = "STARTCHOOSING" Тогда
		ТестируемыйОбъект.Выбрать();
		
	ИначеЕсли ИмяКоманды = "STARTCHOOSINGFROMCHOICELIST" Тогда
		ТестируемыйОбъект.ВыбратьИзСпискаВыбора();
		
	ИначеЕсли ИмяКоманды = "OPEN" Тогда
		ТестируемыйОбъект.Открыть();
		
	ИначеЕсли ИмяКоманды = "INCREASEVALUE" Тогда
		ТестируемыйОбъект.УвеличитьЗначение();
		
	ИначеЕсли ИмяКоманды = "DECREASEVALUE" Тогда
		ТестируемыйОбъект.УменьшитьЗначение();
		
	ИначеЕсли ИмяКоманды = "SETCHECK" Тогда
		ТестируемыйОбъект.УстановитьОтметку();
		
	ИначеЕсли ИмяКоманды = "BEGINEDITINGCURRENTAREA" Тогда
		ТестируемыйОбъект.НачатьРедактированиеТекущейОбласти();
		
	ИначеЕсли ИмяКоманды = "FINISHEDITINGCURRENTAREA" Тогда
		ТестируемыйОбъект.ЗавершитьРедактированиеТекущейОбласти();
		
	ИначеЕсли ИмяКоманды = "GOTONEXTITEM" Тогда
		ТестируемыйОбъект.ПерейтиКСледующемуЭлементу();
		
	ИначеЕсли ИмяКоманды = "GOTOPREVIOUSITEM" Тогда
		ТестируемыйОбъект.ПерейтиКПредыдущемуЭлементу();
		
	ИначеЕсли ИмяКоманды = "GOONELEVELUP" Тогда
		ТестируемыйОбъект.ПерейтиНаУровеньВверх();
		
	ИначеЕсли ИмяКоманды = "GOONELEVELDOWN" Тогда
		ТестируемыйОбъект.ПерейтиНаУровеньВниз();
		
	ИначеЕсли ИмяКоманды = "GOTONEXTROW" Тогда
		ТестируемыйОбъект.ПерейтиКСледующейСтроке();
		
	ИначеЕсли ИмяКоманды = "GOTOPREVIOUSROW" Тогда
		ТестируемыйОбъект.ПерейтиКПредыдущейСтроке();
		
	ИначеЕсли ИмяКоманды = "GOTOFIRSTROW" Тогда
		ТестируемыйОбъект.ПерейтиКПервойСтроке();
		
	ИначеЕсли ИмяКоманды = "GOTOLASTROW" Тогда
		ТестируемыйОбъект.ПерейтиКПоследнейСтроке();
		
	ИначеЕсли ИмяКоманды = "GOTONEXTMONTH" Тогда
		ТестируемыйОбъект.ПерейтиНаМесяцВперед();
		
	ИначеЕсли ИмяКоманды = "GOTOPREVIOUSMONTH" Тогда
		ТестируемыйОбъект.ПерейтиНаМесяцНазад();
		
	ИначеЕсли ИмяКоманды = "GOTONEXTYEAR" Тогда
		ТестируемыйОбъект.ПерейтиНаГодВперед();
		
	ИначеЕсли ИмяКоманды = "GOTOPREVIOUSYEAR" Тогда
		ТестируемыйОбъект.ПерейтиНаГодНазад();
		
	ИначеЕсли ИмяКоманды = "CHOOSE" Тогда
		ТестируемыйОбъект.Выбрать();
		
	ИначеЕсли ИмяКоманды = "CHANGEROW" Тогда
		ТестируемыйОбъект.ИзменитьСтроку();
		
	ИначеЕсли ИмяКоманды = "ENDEDITROW" Тогда
		ТестируемыйОбъект.ЗакончитьРедактированиеСтроки();
		
	ИначеЕсли ИмяКоманды = "ADDROW" Тогда
		ТестируемыйОбъект.ДобавитьСтроку();
		
	ИначеЕсли ИмяКоманды = "DELETEROW" Тогда
		ТестируемыйОбъект.УдалитьСтроку();
		
	ИначеЕсли ИмяКоманды = "EXPAND" Тогда
		ТестируемыйОбъект.Развернуть(Новый Соответствие);
		
	ИначеЕсли ИмяКоманды = "COLLAPSE" Тогда
		ТестируемыйОбъект.Свернуть(Новый Соответствие);
		
	ИначеЕсли ИмяКоманды = "EXECUTECOMMAND" Тогда
		ТестируемыйОбъект.ВыполнитьКоманду(Строка(АтрибутыКоманды["URL"]));
		
	ИначеЕсли ИмяКоманды = "INPUTTEXT" Тогда
		ТестируемыйОбъект.ВвестиТекст(Строка(АтрибутыКоманды["TEXT"]));
		
	ИначеЕсли ИмяКоманды = "EXECUTECHOICEFROMCHOICELIST" Тогда
		ТестируемыйОбъект.ВыполнитьВыборИзСпискаВыбора(Строка(АтрибутыКоманды["PRESENTATION"]));
		
	ИначеЕсли ИмяКоманды = "SELECTOPTION" Тогда
		ТестируемыйОбъект.ВыбратьВариант(Строка(АтрибутыКоманды["PRESENTATION"]));
		
	ИначеЕсли ИмяКоманды = "GOTODATE" Тогда
		ДатаСтр = АтрибутыКоманды["DATE"];
		Если ДатаСтр = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не задана дата для перехода в команде gotoDate'");
		КонецЕсли;
		
		Попытка
			Дата1С = XMLЗначение(Тип("Дата"), ДатаСтр);
		Исключение
			ВызватьИсключение НСтр("ru = 'Дата для перехода в команде gotoDate имеет неверный формат'");
		КонецПопытки;
		
		ТестируемыйОбъект.ПерейтиКДате(Дата1С);
		
	ИначеЕсли ИмяКоманды = "SETCURRENTAREA" Тогда
		ТестируемыйОбъект.УстановитьТекущуюОбласть(Строка(АтрибутыКоманды["AREA"]));
		
	ИначеЕсли ИмяКоманды = "GOTOROW" Тогда
		
		Если ТипЗнч(ТестируемыйОбъект) <> Тип("ТестируемаяТаблицаФормы") Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка команды перехода к строке. Тестируемый объект не является таблицей формы ('")
				+ ТипЗнч(ТестируемыйОбъект) + ")";
		КонецЕсли;
		
		НаправлениеТекст = ВРег(СокрЛП(Строка(АтрибутыКоманды["DIRECTION"])));
		Если НаправлениеТекст = "UP" Тогда
			НаправлениеПерехода = Вычислить("НаправлениеПереходаКСтроке.Вверх");
		ИначеЕсли НаправлениеТекст = "DOWN" Тогда
			НаправлениеПерехода = Вычислить("НаправлениеПереходаКСтроке.Вниз");
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестное направление в команде перехода к строке (direction = ""'")
				+ Строка(АтрибутыКоманды["DIRECTION"]) + """)";
		КонецЕсли;
		
		ДанныеДляПоиска = СцТ_ПрочитатьДанныеДляПоискаСтрокиТаблицы(ЧтениеXML, ТестируемыйОбъект);
		Если НЕ ТестируемыйОбъект.ПерейтиКСтроке(ДанныеДляПоиска, НаправлениеПерехода) Тогда
			ВызватьИсключение НСтр("ru = 'Строка таблицы не найдена'");
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтрЗаменить(НСтр("ru = 'Неизвестное имя команды ""%1""'"), "%1", ИмяКоманды);
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

// Удаление объекта тестируемого приложения из хранилища
// для учета текущих объектов
//
// параметры
//	СтекОбъектовТестируемогоПриложения - хранилище текущих объектов
&НаКлиенте
Функция СцТ_УдалитьОбъектТестируемогоПриложенияИзСтекаОбъектов(
	СтекОбъектовТестируемогоПриложения)
	
	Если СтекОбъектовТестируемогоПриложения.Количество() > 0 Тогда
		СтекОбъектовТестируемогоПриложения.Удалить(СтекОбъектовТестируемогоПриложения.ВГраница());
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка скрипта: стек объектов пуст, невозможно удалить объект из стека'");
	КонецЕсли;
	
КонецФункции

// Чтение из протокола данных для поиска строки таблицы
//
// Параметры
// ЧтениеXML - стандартный элемент
// ТаблицаФормы - указатель на таблицу формы
// Возвращаемое значение - данные для поиска
&НаКлиенте
Функция СцТ_ПрочитатьДанныеДляПоискаСтрокиТаблицы(ЧтениеXML, ТаблицаФормы)
	
	#Если НЕ ВебКлиент Тогда
	
	Результат = Новый Соответствие;
	
	Пока ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Field" Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			АтрибутыПоиска = СцТ_ГлавнаяФорма.СцТ_АтрибутыУзла(ЧтениеXML);
			ЗаголовокПоля = Строка(АтрибутыПоиска["TITLE"]);
			ТекстЯчейки   = Строка(АтрибутыПоиска["CELLTEXT"]);
			Результат.Вставить(ЗаголовокПоля, ТекстЯчейки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
	#КонецЕсли
	
КонецФункции

// Проверка, что форма содержит указанные элементы
//
// Параметры
// ПроверяемаяФорма - указатель на тестируемую форму
// ИскомыеЭлементы - список элементов, которые нужно проверить
// Возвращаемое значение - Истина - искомые элементы содержатся на форме,
// Лодь- не содержатся
&НаКлиенте
Функция СцТ_ФормаПриложенияСодержитЭлементы(ПроверяемаяФорма, ИскомыеЭлементы)
	
	Если ИскомыеЭлементы = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = Истина;
	Для каждого ИскомыйЭлемент Из ИскомыеЭлементы Цикл
		
		Если НЕ ИскомыйЭлемент.Активность Тогда
			Продолжить;
		КонецЕсли;
		
		НайденыйЭлемент = ПроверяемаяФорма.НайтиОбъект(, , ИскомыйЭлемент.Имя);
		Если НайденыйЭлемент = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			ВидНайденогоЭлемента = СцТ_ГлавнаяФорма.СцТ_ПолучитьВидОбъекта(НайденыйЭлемент).Вид;
		Исключение
			ВидНайденогоЭлемента = "Неопределено";
		КонецПопытки;
		
		Если ВидНайденогоЭлемента <> ИскомыйЭлемент.ТипУзла Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ИскомыйЭлемент.Действие = "2" Тогда
			
			// Проверить также и данные найденого элемента
			ДанныеНайденогоЭлемента = Неопределено;
			
			Попытка
				ДанныеНайденогоЭлемента = СцТ_ГлавнаяФорма.СцТ_ДанныеПоляФормы(НайденыйЭлемент);
			Исключение
			КонецПопытки;
			
			Если ДанныеНайденогоЭлемента <> Неопределено Тогда
				ДанныеНайденогоЭлемента = СцТ_ГлавнаяФорма.СцТ_ИстинныеДанныеДляПоляФормы(
					ВидНайденогоЭлемента,
					ДанныеНайденогоЭлемента);
			КонецЕсли;
			
			Если ИскомыйЭлемент.Значение <> ДанныеНайденогоЭлемента Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Получение пользовательского представления тестируемых элементов
//
// Параметры
// ВидОбъекта - служебное название
// Возвращаемое значение - пользовательское название элемента
&НаКлиенте
Функция СцТ_СинонимВидаИнтерактивногоОбъекта(ВидОбъекта)
	
	Если ВидОбъекта = "Гиперссылка" Тогда
		Возврат НСтр("ru = 'Гиперссылка'");
		
	ИначеЕсли ВидОбъекта = "ГруппаКнопок" Тогда
		Возврат НСтр("ru = 'Группа кнопок'");
		
	ИначеЕсли ВидОбъекта = "ГруппаКолонок" Тогда
		Возврат НСтр("ru = 'Группа колонок'");
		
	ИначеЕсли ВидОбъекта = "Картинка" Тогда
		Возврат НСтр("ru = 'Картинка'");
		
	ИначеЕсли ВидОбъекта = "КнопкаКоманднойПанели" Тогда
		Возврат НСтр("ru = 'Кнопка'");
		
	ИначеЕсли ВидОбъекта = "КоманднаяПанель" Тогда
		Возврат НСтр("ru = 'Командная панель'");
		
	ИначеЕсли ВидОбъекта = "КонтекстноеМеню" Тогда
		Возврат НСтр("ru = 'Контекстное меню'");
		
	ИначеЕсли ВидОбъекта = "Надпись" Тогда
		Возврат НСтр("ru = 'Надпись'");
		
	ИначеЕсли ВидОбъекта = "ОбычнаяГруппа" Тогда
		Возврат НСтр("ru = 'Группа элементов'");
		
	ИначеЕсли ВидОбъекта = "ОбычнаяКнопка" Тогда
		Возврат НСтр("ru = 'Кнопка'");
		
	ИначеЕсли ВидОбъекта = "Подменю" Тогда
		Возврат НСтр("ru = 'Подменю'");
		
	ИначеЕсли ВидОбъекта = "ПолеHTMLДокумента" Тогда
		Возврат НСтр("ru = 'Поле HTML-документа'");
		
	ИначеЕсли ВидОбъекта = "ПолеВвода" Тогда
		Возврат НСтр("ru = 'Поле ввода'");
		
	ИначеЕсли ВидОбъекта = "ПолеГеографическойСхемы" Тогда
		Возврат НСтр("ru = 'Географическая схема'");
		
	ИначеЕсли ВидОбъекта = "ПолеГрафическойСхемы" Тогда
		Возврат НСтр("ru = 'Графическая схема'");
		
	ИначеЕсли ВидОбъекта = "ПолеДендрограммы" Тогда
		Возврат НСтр("ru = 'Дендрограма'");
		
	ИначеЕсли ВидОбъекта = "ПолеДиаграммы" Тогда
		Возврат НСтр("ru = 'Диаграмма'");
		
	ИначеЕсли ВидОбъекта = "ПолеДиаграммыГанта" Тогда
		Возврат НСтр("ru = 'Диаграмма Ганта'");
		
	ИначеЕсли ВидОбъекта = "ПолеИндикатора" Тогда
		Возврат НСтр("ru = 'Индикатор'");
		
	ИначеЕсли ВидОбъекта = "ПолеКалендаря" Тогда
		Возврат НСтр("ru = 'Календарь'");
		
	ИначеЕсли ВидОбъекта = "ПолеПереключателя" Тогда
		Возврат НСтр("ru = 'Переключатель'");
		
	ИначеЕсли ВидОбъекта = "ПолеПолосыРегулирования" Тогда
		Возврат НСтр("ru = 'Полоса регулирования'");
		
	ИначеЕсли ВидОбъекта = "ПолеТабличногоДокумента" Тогда
		Возврат НСтр("ru = 'Табличный документ'");
		
	ИначеЕсли ВидОбъекта = "ПолеТекстовогоДокумента" Тогда
		Возврат НСтр("ru = 'Текстовый документ'");
		
	ИначеЕсли ВидОбъекта = "ПолеФлажка" Тогда
		Возврат НСтр("ru = 'Флажок'");
		
	ИначеЕсли ВидОбъекта = "ПолеФорматированногоДокумента" Тогда
		Возврат НСтр("ru = 'Форматированный документ'");
		
	ИначеЕсли ВидОбъекта = "Страница" Тогда
		Возврат НСтр("ru = 'Страница'");
		
	ИначеЕсли ВидОбъекта = "Страницы" Тогда
		Возврат НСтр("ru = 'Набор страниц'");
		
	ИначеЕсли ВидОбъекта = "ТаблицаФормы" Тогда
		Возврат НСтр("ru = 'Таблица'");
		
	ИначеЕсли ВидОбъекта = "ТестируемаяФорма" Тогда
		Возврат НСтр("ru = 'Форма'");
		
	ИначеЕсли ВидОбъекта = "ТестируемоеОкноКлиентскогоПриложения" Тогда
		Возврат НСтр("ru = 'Окно'");
		
	ИначеЕсли ВидОбъекта = "ТестируемоеПриложение" Тогда
		Возврат НСтр("ru = 'Тестирумеое приложение'");
		
	ИначеЕсли ВидОбъекта = "КомандныйИнтерфейс" Тогда
		Возврат НСтр("ru = 'Командный интерфейс'");
		
	ИначеЕсли ВидОбъекта = "ГруппаКомандногоИнтерфейса" Тогда
		Возврат НСтр("ru = 'Группа интерфейса'");
		
	ИначеЕсли ВидОбъекта = "КнопкаКомандногоИнтерфейса" Тогда
		Возврат НСтр("ru = 'Кнопка'");
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Выполнение интерактивного действия с элементом формы тестируемого приложения
//
// Параметры
//	ФормаТестируемогоПриложения - указатель на тестируемую форму
//	УзелРеквизита - узел дерева данных с описанием реквизита
//	ТекстСообщения - текст сообщения о выполнении действия
// Возвращаемое значение - Истина - выполнено без ошибок.
&НаКлиенте
Функция СцТ_ВыполнитьДействиеНадРеквизитомФормы(
	ФормаТестируемогоПриложения,
	УзелРеквизита,
	ТекстСообщения,
	ДеревоШага)
	
	РаботаСТаблицей = (ТипЗнч(ФормаТестируемогоПриложения) = Тип("ТестируемаяТаблицаФормы"));
	
	Если ПустаяСтрока(УзелРеквизита.Имя) Тогда
		ТекстСообщения = ?(РаботаСТаблицей,
			НСтр("ru = 'Не выбрана колонка таблицы'"),
			НСтр("ru = 'Не выбран реквизит формы'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(УзелРеквизита.Действие) Тогда
		ТекстСообщения = ?(РаботаСТаблицей,
							НСтр("ru = 'Не задано действие над колонкой таблицы'"),
							НСтр("ru = 'Не задано действие над реквизитом формы'"));
		Возврат Ложь;
	КонецЕсли;
	
	ВариантПоискаОбъекта = СцТ_ЗначениеВДереве(УзелРеквизита, "ВариантПоискаОбъекта", "", , Ложь);
	
	Если ПустаяСтрока(ВариантПоискаОбъекта) Тогда
		Если Лев(УзелРеквизита.Имя, 1) = "$" Тогда
			ВариантПоискаОбъекта = "011";
		Иначе
			ВариантПоискаОбъекта = "100";
		КонецЕсли;
	КонецЕсли;
	
	УзелПутиПоиска = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(УзелРеквизита, "Имя", "ИСТЗ_ПутьКОбъекту", Ложь);
	
	РеквизитОбъект = СцТ_ГлавнаяФорма.СцТ_НайтиИнтерактивныйОбъектТестируемогоПриложения(
		ФормаТестируемогоПриложения,
		ВариантПоискаОбъекта,
		Тип("ТестируемоеПолеФормы"),
		УзелРеквизита.Имя,
		УзелРеквизита.Синоним,
		УзелПутиПоиска);
	
	Если РеквизитОбъект = Неопределено Тогда
		
		ТекстСообщения = ?(РаботаСТаблицей,
							НСтр("ru = 'Не найдена колонка в таблице: %1'"),
							НСтр("ru = 'Не найдено поле на форме: %1'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", УзелРеквизита.Представление);
		Возврат Ложь;
		
	Иначе
		
		ТипОбъекта = ТипЗнч(РеквизитОбъект);
		Если ТипОбъекта = Тип("Строка") Тогда
			// Это сообщение об ошибке поиска объекта
			ТекстСообщения = ?(
				РаботаСТаблицей,
				НСтр("ru = 'Ошибка при поиска колонки таблицы: %1'"),
				НСтр("ru = 'Ошибка при поиске поля формы: %1'"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", РеквизитОбъект);
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеВидаРеквизита = СцТ_ГлавнаяФорма.СцТ_ПолучитьВидОбъекта(РеквизитОбъект);
	
	Попытка
		// Перед заполнением поле формы должно быть активизировано.
		РеквизитОбъект.Активизировать();
	Исключение
		Если (РаботаСТаблицей И УзелРеквизита.ТипУзла = "ПолеФлажка")
			ИЛИ (УзелРеквизита.Действие <> "ПолучитьСведения"
			И УзелРеквизита.Действие <> "Проверить") Тогда
			// Тогда это заполнение и поле обязательно должно быть активизировано.
			// Для проверки колонки флажка колонка флажка тоже должна быть активной
			ТекстСообщения = НСтр("ru = 'Не удалось активизировать поле: %1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", УзелРеквизита.Представление);
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	
	ЗначениеРеквизита = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(УзелРеквизита.Значение);
	
	Если РаботаСТаблицей Тогда
		
		Если УзелРеквизита.ТипУзла <> "ПолеФлажка"
			И УзелРеквизита.Действие <> "ПолучитьСведения"
			И УзелРеквизита.Действие <> "Проверить"
			И УзелРеквизита.Действие <> "НажатьГиперссылку"
			И УзелРеквизита.Действие <> "Активизировать" Тогда
			
			Если НЕ ФормаТестируемогоПриложения.ТекущийРежимРедактирование() Тогда
				
				Попытка
					ФормаТестируемогоПриложения.ИзменитьСтроку();
				Исключение
					ТекстСообщения = НСтр("ru = 'Произошла исключительная ситуация при начале редактирования строки'")
						+ Символы.ПС
						+ СцТ_ГлавнаяФорма.СцТ_ПредставлениеИсключения(ИнформацияОбОшибке());
					Возврат Ложь;
				КонецПопытки;
				
				Если НЕ ФормаТестируемогоПриложения.ТекущийРежимРедактирование() Тогда
					
					ТекстСообщения = НСтр("ru = 'Редактирование строки таблицы не может быть выполнено'");
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УзелРеквизита.Действие = "ВвестиТекст" Тогда
		
		//РеквизитОбъект.ВвестиТекст(УзелРеквизита.Значение);
		РеквизитОбъект.ВвестиТекст(ЗначениеРеквизита);
		
	ИначеЕсли УзелРеквизита.Действие = "НажатьКнопкуВыбора" Тогда
		
		РеквизитОбъект.Выбрать();
		
	ИначеЕсли УзелРеквизита.Действие = "ВыбратьИзСпискаВыбора" Тогда
		
		Если СцТ_ГлавнаяФорма.ОбновлятьИндексППД И НЕ СцТ_ГлавнаяФорма.ДругаяИБ Тогда
			// Обновляется индекс ППД, т.к. м.б. задействован полнотекстовый поиск данных
			СцТ_ОбновитьИндексППДНаСервере();
		КонецЕсли;
		
		РеквизитОбъект.Выбрать();
		//РеквизитОбъект.ВыполнитьВыборИзСпискаВыбора(УзелРеквизита.Значение);
		РеквизитОбъект.ВыполнитьВыборИзСпискаВыбора(ЗначениеРеквизита);

		
	ИначеЕсли УзелРеквизита.Действие = "ВыбратьИзВыпадающегоСписка" Тогда
		
		Если СцТ_ГлавнаяФорма.ОбновлятьИндексППД И НЕ СцТ_ГлавнаяФорма.ДругаяИБ Тогда
			// Обновляется индекс ППД, т.к. м.б. задействован полнотекстовый поиск данных
			СцТ_ОбновитьИндексППДНаСервере();
		КонецЕсли;
		РеквизитОбъект.ВыбратьИзСпискаВыбора();
		//РеквизитОбъект.ВыполнитьВыборИзСпискаВыбора(УзелРеквизита.Значение);
		РеквизитОбъект.ВыполнитьВыборИзСпискаВыбора(ЗначениеРеквизита);
		
	ИначеЕсли УзелРеквизита.Действие = "Открыть" Тогда
		
		РеквизитОбъект.Открыть();
		
	ИначеЕсли УзелРеквизита.Действие = "Создать" Тогда
		
		РеквизитОбъект.Создать();
		
	ИначеЕсли УзелРеквизита.Действие = "Очистить" Тогда
		
		РеквизитОбъект.Очистить();
		
	ИначеЕсли УзелРеквизита.Действие = "УвеличитьЗначение" Тогда
		
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Число") И ЗначениеРеквизита > 0 Тогда
			Для Индекс = 1 По ЗначениеРеквизита Цикл
				РеквизитОбъект.УвеличитьЗначение();
			КонецЦикла;
		Иначе
			РеквизитОбъект.УвеличитьЗначение();
		КонецЕсли;
		
	ИначеЕсли УзелРеквизита.Действие = "УменьшитьЗначение" Тогда
		
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Число") И ЗначениеРеквизита > 0 Тогда
			Для Индекс = 1 По ЗначениеРеквизита Цикл
				РеквизитОбъект.УменьшитьЗначение();
			КонецЦикла;
		Иначе
			РеквизитОбъект.УменьшитьЗначение();
		КонецЕсли;
		
	ИначеЕсли УзелРеквизита.Действие = "ПерейтиКДате" Тогда
		
		//РеквизитОбъект.ПерейтиКДате(УзелРеквизита.Значение);
		РеквизитОбъект.ПерейтиКДате(ЗначениеРеквизита);
		
	ИначеЕсли УзелРеквизита.Действие = "Выбрать" Тогда
		
		РеквизитОбъект.Выбрать();
		
	ИначеЕсли УзелРеквизита.Действие = "ПерейтиНаГодВперед" Тогда
		
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Число") И ЗначениеРеквизита > 0 Тогда
			Для Индекс = 1 По ЗначениеРеквизита Цикл
				РеквизитОбъект.ПерейтиНаГодВперед();
			КонецЦикла;
		Иначе
			РеквизитОбъект.ПерейтиНаГодВперед();
		КонецЕсли;
		
	ИначеЕсли УзелРеквизита.Действие = "ПерейтиНаГодНазад" Тогда
		
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Число") И ЗначениеРеквизита > 0 Тогда
			Для Индекс = 1 По ЗначениеРеквизита Цикл
				РеквизитОбъект.ПерейтиНаГодНазад();
			КонецЦикла;
		Иначе
			РеквизитОбъект.ПерейтиНаГодНазад();
		КонецЕсли;
		
	ИначеЕсли УзелРеквизита.Действие = "ПерейтиНаМесяцВперед" Тогда
		
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Число") И ЗначениеРеквизита > 0 Тогда
			Для Индекс = 1 По ЗначениеРеквизита Цикл
				РеквизитОбъект.ПерейтиНаМесяцВперед();
			КонецЦикла;
		Иначе
			РеквизитОбъект.ПерейтиНаМесяцВперед();
		КонецЕсли;
		
	ИначеЕсли УзелРеквизита.Действие = "ПерейтиНаМесяцНазад" Тогда
		
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Число") И ЗначениеРеквизита > 0 Тогда
			Для Индекс = 1 По ЗначениеРеквизита Цикл
				РеквизитОбъект.ПерейтиНаМесяцНазад();
			КонецЦикла;
		Иначе
			РеквизитОбъект.ПерейтиНаМесяцНазад();
		КонецЕсли;
		
	ИначеЕсли УзелРеквизита.Действие = "ВводПоСтроке" Тогда
		
		Если СцТ_ГлавнаяФорма.ОбновлятьИндексППД И НЕ СцТ_ГлавнаяФорма.ДругаяИБ Тогда
			// Обновляется индекс ППД, т.к. м.б. задействован полнотекстовый поиск данных
			СцТ_ОбновитьИндексППДНаСервере();
		КонецЕсли;
		
		//РеквизитОбъект.ВвестиТекст(УзелРеквизита.Значение);
		РеквизитОбъект.ВвестиТекст(ЗначениеРеквизита);
		
		ВыполненВыбор = Ложь;
		Если СцТ_ГлавнаяФорма.ПараметрыСовместимости.ОжидатьФормированиеСпискаВыбора Тогда
			// Если не ниже 8.3.4
			
			РеквизитОбъект.ОжидатьФормированияВыпадающегоСписка(20);
			
			Попытка
				РеквизитОбъект.ВыполнитьВыборИзСпискаВыбора(0);
				ВыполненВыбор = Истина;
			Исключение
			КонецПопытки;
			
		Иначе
			
			// Задержка 5 сек. для открытия ожидания открытия списка выбора
			ТекДата = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Пока ТекущаяУниверсальнаяДатаВМиллисекундах() - ТекДата < 5000 Цикл
				Продолжить;
			КонецЦикла;
			
			// Попытка выбора значения из выпадающего списка
			// Ожидание перезаполнения списка
			ТекДата = ТекущаяДата();
			Пока ТекущаяДата() - ТекДата <= СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов Цикл
				Попытка
					РеквизитОбъект.ВыполнитьВыборИзСпискаВыбора(0);
				Исключение
					Продолжить;
				КонецПопытки;
				ВыполненВыбор = Истина;
				Прервать;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ВыполненВыбор Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить ввод по строке: '") + УзелРеквизита.Синоним;
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли УзелРеквизита.Действие = "ВыбратьВариант" Тогда
		
		//РеквизитОбъект.ВыбратьВариант(Строка(УзелРеквизита.Значение));
		РеквизитОбъект.ВыбратьВариант(Строка(ЗначениеРеквизита));
		
	ИначеЕсли УзелРеквизита.Действие = "УстановитьОтметку" Тогда
		
		ИстинныеДанные = СцТ_ГлавнаяФорма.СцТ_ИстинныеДанныеДляПоляФормы(УзелРеквизита.ТипУзла,
											СцТ_ГлавнаяФорма.СцТ_ДанныеПоляФормы(РеквизитОбъект));
		//Если ИстинныеДанные <> УзелРеквизита.Значение Тогда
		Если ИстинныеДанные <> ЗначениеРеквизита Тогда
			РеквизитОбъект.УстановитьОтметку();
		Иначе
			Возврат Истина;
		КонецЕсли;
		
		//Если СцТ_ИстинныеДанныеДляПоляФормы(УзелРеквизита.ТипУзла, СцТ_ГлавнаяФорма.СцТ_ДанныеПоляФормы(РеквизитОбъект))
		//	<> УзелРеквизита.Значение Тогда
		Если СцТ_ГлавнаяФорма.СцТ_ИстинныеДанныеДляПоляФормы(УзелРеквизита.ТипУзла, СцТ_ГлавнаяФорма.СцТ_ДанныеПоляФормы(РеквизитОбъект))
			<> ЗначениеРеквизита Тогда
			
			ТекстСообщения = НСтр("ru = 'Не удалось установить заданную отметку флажка'");
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли УзелРеквизита.Действие = "НажатьГиперссылку" Тогда
		Если РаботаСТаблицей Тогда
			// На самом деле нажатие гиперссылки в таблице не работает
			// вместо него делают просто выбор строки с фокусом в нужной ячейке
			Попытка
				ФормаТестируемогоПриложения.Выбрать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось нажать гиперссылку'");
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Попытка
				РеквизитОбъект.Нажать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось нажать гиперссылку'");
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли УзелРеквизита.Действие = "Активизировать" Тогда
		// Ничего не нужно делать - активизация уже выполнена
		
		
	ИначеЕсли УзелРеквизита.Действие <> "ПолучитьСведения" И УзелРеквизита.Действие <> "Проверить" И УзелРеквизита.Действие <> "ПроверитьТекст" Тогда
		
		ТекстСообщения = НСтр("ru = 'Неизвестное действие над реквизитом формы: ""%1""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", УзелРеквизита.Действие);
		Возврат Ложь;
		
		
	Иначе
		
		Если НЕ РаботаСТаблицей Тогда
			ПредставлениеДанныхПоля = СцТ_ГлавнаяФорма.СцТ_ДанныеПоляФормы(РеквизитОбъект);
		Иначе
			Если ФормаТестируемогоПриложения.ТекущийРежимРедактирование()
				ИЛИ УзелРеквизита.ТипУзла = "ПолеФлажка" Тогда
				ПредставлениеДанныхПоля = СцТ_ГлавнаяФорма.СцТ_ДанныеПоляФормы(РеквизитОбъект);
			Иначе
				ПредставлениеДанныхПоля = ФормаТестируемогоПриложения.ПолучитьТекстЯчейки(
					СцТ_ГлавнаяФорма.СцТ_ИмяИнтерактивногоОбъекта(РеквизитОбъект));
			КонецЕсли;
		КонецЕсли;
		
		ИстинныеДанныеПоля = СцТ_ГлавнаяФорма.СцТ_ИстинныеДанныеДляПоляФормы(УзелРеквизита.ТипУзла, ПредставлениеДанныхПоля);
		//ЕстьРазличиеДанных = (УзелРеквизита.Значение <> ИстинныеДанныеПоля);
		ЕстьРазличиеДанных = (ЗначениеРеквизита <> ИстинныеДанныеПоля);
		
		Если ЕстьРазличиеДанных Тогда
			ТекстСообщения = ?(РаботаСТаблицей,
								НСтр("ru = '%1 - данные колонки отличаются от указанных в шаге: ""%2"" и ""%3""'"),
								НСтр("ru = '%1 - данные поля отличаются от указанных в шаге: ""%2"" и ""%3""'"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", УзелРеквизита.Представление);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Строка(ИстинныеДанныеПоля));
			//ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", Строка(УзелРеквизита.Значение));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", Строка(ЗначениеРеквизита));
		КонецЕсли;
		
		Если УзелРеквизита.Действие = "ПолучитьСведения" Тогда
			
			Если ЕстьРазличиеДанных Тогда
				ТекстСообщения = НСтр("ru = 'Сведения. '") + ТекстСообщения;
			КонецЕсли;
			
			Возврат Истина;
			
		Иначе // УзелРеквизита.Действие = "Проверить"
			
			Если ЕстьРазличиеДанных Тогда
				ТекстСообщения = НСтр("ru = 'Проверка не выполнена. '") + ТекстСообщения;
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполнение адресов объединенных ячеек
//
// Параметры
//	АдресаЯчеек - массив адресов ячеек
//	АдресОбласти - адрес текущей области
&НаКлиенте
Процедура СцТ_ЗаполнитьАдресаОбъединенныхЯчеек(АдресаЯчеек, АдресОбласти)
	
	Координаты = СцТ_ГлавнаяФорма.СцТ_КоординатыОбластиИзАдреса(АдресОбласти);
	Для НомерСтроки = Координаты.НачальнаяСтрока По Координаты.КонечнаяСтрока Цикл
		Для НомерСтолбца = Координаты.НачальнаяКолонка По Координаты.КонечнаяКолонка Цикл
			АдресаЯчеек[СцТ_ГлавнаяФорма.СцТ_АдресЯчейки(НомерСтроки, НомерСтолбца)] = Истина;
		КонецЦикла;
	КонецЦикла;
	АдресВерхнейЛевой = СцТ_ГлавнаяФорма.СцТ_АдресЯчейки(Координаты.НачальнаяСтрока, Координаты.НачальнаяКолонка);
	АдресаЯчеек.Удалить(АдресВерхнейЛевой);
	
КонецПроцедуры

// Чтение колонок таблицы формы
//
// Параметры
//	ТаблицаНаФорме - указатель на таблицу формы
//	КакСоответствиеПоИменам - нужноли соответствие
//	МассивКолонок - массив колонок
// Возвращаемое значение - массив колонок
&НаКлиенте
Функция СцТ_КолонкиТаблицыФормы(ТаблицаНаФорме, КакСоответствиеПоИменам = Ложь)
	
	МассивКолонок = ?(КакСоответствиеПоИменам,
					  Новый Соответствие,
					  Новый Массив);
	
	ПодчиненныеОбъекты = ТаблицаНаФорме.НайтиОбъекты(
		Тип("ТестируемоеПолеФормы"),
		,
		,
		СцТ_ГлавнаяФорма.ТаймаутПоискаИнтерактивныхОбъектов);
	
	Если ПодчиненныеОбъекты = Неопределено Тогда
		Возврат МассивКолонок;
	КонецЕсли;
	
	Для каждого ПодчиненныйОбъект Из ПодчиненныеОбъекты Цикл
		
		Если КакСоответствиеПоИменам Тогда
			МассивКолонок[СцТ_ГлавнаяФорма.СцТ_ИмяИнтерактивногоОбъекта(ПодчиненныйОбъект)] = ПодчиненныйОбъект;
		Иначе
			МассивКолонок.Добавить(ПодчиненныйОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивКолонок;
	
КонецФункции

// Проверка текущей строки таблицы на соответствие значений
//
// Параметры
//	ТаблицаНаФорме - указатель на таблицу формы
//	УзлыКолонок - узел дерева с колонками
//	КолонкиТаблицыНаФорме - массив таблицы колонок
//	ОписаниеРазличий - текст описания различий
//	СообщениеОбОшибке  - сообщение об ошибке
// Возвращаемое значение - есть или нет различия
&НаКлиенте
Функция СцТ_ПроверитьТекущуюСтрокуТаблицы(
	ТаблицаНаФорме,
	УзлыКолонок,
	КолонкиТаблицыНаФорме,
	ОписаниеРазличий  = "",
	СообщениеОбОшибке = "")
	
	ОписаниеРазличий  = "";
	СообщениеОбОшибке = "";
	
	СтрокаСоответствует = Истина;
	Для каждого УзелКолонки Из УзлыКолонок Цикл
		
		Если НЕ УзелКолонки.Активность Тогда
			Продолжить;
		КонецЕсли;
		
		КолонкаТаблицы = Неопределено;
		Если Лев(УзелКолонки.Имя, 1) <> "$" Тогда
			КолонкаТаблицы = КолонкиТаблицыНаФорме[УзелКолонки.Имя];
		Иначе
			ЗаголовокКолонки = Сред(УзелКолонки.Имя, 2);
			НайденыеКолонки = ТаблицаНаФорме.НайтиОбъекты(Тип("ТестируемоеПолеФормы"), ЗаголовокКолонки);
			Если НайденыеКолонки = Неопределено ИЛИ НайденыеКолонки.Количество() = 0 Тогда
				КолонкаТаблицы = Неопределено;
			Иначе
				КолонкаТаблицы = НайденыеКолонки[0];
			КонецЕсли;
		КонецЕсли;
		
		Если КолонкаТаблицы = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'Не найдена колонка таблицы ""%1""'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%1", УзелКолонки.Синоним);
			Возврат Ложь;
		КонецЕсли;
		
		Если УзелКолонки.Синоним <> СцТ_ГлавнаяФорма.СцТ_ЗаголовокИнтерактивногоОбъекта(КолонкаТаблицы) Тогда
			СообщениеОбОшибке = НСтр("ru = 'Отличается заголовок колонки ""%1"": заголовок в тестируемом приложении - ""%2""'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%1", УзелКолонки.Синоним);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%2", КолонкаТаблицы.Заголовок);
			Возврат Ложь;
		КонецЕсли;
		
		ТекстВЯчейке = ТаблицаНаФорме.ПолучитьТекстЯчейки(КолонкаТаблицы.Имя);
		Если ТекстВЯчейке <> СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(УзелКолонки.Значение) Тогда
			СтрокаСоответствует = Ложь;
			ОписаниеРазличия = НСтр("ru = 'Различия в колонке %1: эталонное значение - ""%2"", значение в таблице: ""%3"";'");
			ОписаниеРазличия = СтрЗаменить(ОписаниеРазличия, "%1", УзелКолонки.Синоним);
			ОписаниеРазличия = СтрЗаменить(ОписаниеРазличия, "%2", Строка(УзелКолонки.Значение));
			ОписаниеРазличия = СтрЗаменить(ОписаниеРазличия, "%3", ТекстВЯчейке);
			ОписаниеРазличий = ОписаниеРазличий
				+ ?(ПустаяСтрока(ОписаниеРазличий), "", Символы.ПС)
				+ ОписаниеРазличия;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаСоответствует;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура СцТ_ОбновитьИндексППДНаСервере()
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		Если НЕ ПолнотекстовыйПоиск.ИндексАктуален() Тогда
			ПолнотекстовыйПоиск.ОбновитьИндекс(,Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ЭтоИнтерактивныйШаг(ТипШага)
	
	Возврат (ТипШага = "НажатьКнопкуКИ"
		ИЛИ ТипШага = "ВыполнитьИнтерактивнуюКоманду"
		ИЛИ ТипШага = "ВыполнитьИнтерактивныйСкрипт"
		ИЛИ ТипШага = "ИнтерактивнаяАвтоГруппа"
		ИЛИ ТипШага = "НайтиФорму"
		ИЛИ ТипШага = "ПроверитьФорму"
		ИЛИ ТипШага = "НажатьКнопку"
		ИЛИ ТипШага = "НайтиЭлементФормы"
		ИЛИ ТипШага = "ЗаполнитьОдинРеквизитФормы"
		ИЛИ ТипШага = "ЗаполнитьКолонкуТаблицы"
		ИЛИ ТипШага = "ЗаполнитьРеквизитыФормы"
		ИЛИ ТипШага = "ЗаполнитьСтрокуТаблицы"
		ИЛИ ТипШага = "ПроверитьТабличныйДокумент"
		ИЛИ ТипШага = "ЗакрытьКлиентскоеОкноФормы"
		ИЛИ ТипШага = "АвтоГруппаТаблицаФормы"
		ИЛИ ТипШага = "ДействиеСТаблицей"
		ИЛИ ТипШага = "НайтиСтрокуТаблицы"
		ИЛИ ТипШага = "ЗавершитьРаботуТестируемогоКлиента"
		ИЛИ ТипШага = "ВыполнитьКлиентскуюПроцедуру");
	
КонецФункции

// Получение экземпляра этой обработки на сервере
&НаСервереБезКонтекста
Функция СцТ_ПолучитьЭтуОбработку()
	
	// Для внутренней обработки
	//Возврат Обработки.СценарноеТестирование.Создать();
	// Для внешней обработки
	Возврат ВнешниеОбработки.Создать("СценарноеТестирование");
	
КонецФункции

// Поиск значения в дереве
//
// Парметры
//	ИмяПараметра - имя искомого параметра
//	ЕслиНеНайдено  - признак, что не найдено
//	ВозвращаемыйРеквизит  - поле, значение которого нужно вернуть
//	Рекурсивно  - нужно ли искать среди подчиненных
&НаКлиенте
Функция СцТ_ЗначениеВДереве(ДерЗнач,
	ИмяПараметра,
	ЕслиНеНайдено = Неопределено,
	ВозвращаемыйРеквизит = "Значение",
	Рекурсивно = Истина)
	
	УзелЗначения = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДерЗнач, "Имя", ИмяПараметра, Рекурсивно);
	Если УзелЗначения = Неопределено Тогда
		Возврат ЕслиНеНайдено;
	Иначе
		Возврат УзелЗначения[ВозвращаемыйРеквизит];
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СцТ_ЗапуститьТестируемоеПриложениеАвтоматически()
	// Если не веб-клиент, то порт тестируемого приложения подбирается автоматически
	
	СцТ_ГлавнаяФорма.ВидТестируемогоКлиента = СцТ_ГлавнаяФорма.СцТ_ВидКлиентаАвтоматическогоЗапуска;
	
	ОписаниеДействияЗапуска = НСтр("ru = 'Запуск тестируемого приложения (%1)'");
	
	Если СцТ_ГлавнаяФорма.ВидТестируемогоКлиента = 0 Тогда
		ОписаниеДействияЗапуска = СтрЗаменить(ОписаниеДействияЗапуска, "%1", НСтр("ru = 'тонкий клиент'"));
	ИначеЕсли СцТ_ГлавнаяФорма.ВидТестируемогоКлиента = 1 Тогда
		ОписаниеДействияЗапуска = СтрЗаменить(ОписаниеДействияЗапуска, "%1", НСтр("ru = 'толстый клиент'"));
	ИначеЕсли СцТ_ГлавнаяФорма.ВидТестируемогоКлиента = 2 Тогда
		ОписаниеДействияЗапуска = СтрЗаменить(ОписаниеДействияЗапуска, "%1", НСтр("ru = 'веб-клиент'"));
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ИнформационноеСообщение("OK", ОписаниеДействияЗапуска, "");
	
	Если СцТ_ГлавнаяФорма.ВидТестируемогоКлиента = 0 ИЛИ СцТ_ГлавнаяФорма.ВидТестируемогоКлиента = 1 Тогда
		
		// Выбор свободного порта
		
		СцТ_ГлавнаяФорма.ПортТестируемогоКлиента = 1537;
		ПортСвободен = Ложь;
		Пока НЕ ПортСвободен И СцТ_ГлавнаяФорма.ПортТестируемогоКлиента <= 1600 Цикл
			
			СцТ_ГлавнаяФорма.ПортТестируемогоКлиента = СцТ_ГлавнаяФорма.ПортТестируемогоКлиента + 1;
			Попытка
				ТестовоеПриложение =
					Вычислить("Новый ТестируемоеПриложение(""127.0.0.1"", СцТ_ГлавнаяФорма.ПортТестируемогоКлиента)");
				ТестовоеПриложение.УстановитьСоединение();
			Исключение
				// На текущий момент только по косвенным признакам удается определить,
				// что указанный порт свободен - из описания ошибки
				// (в описании ошибки м.б. также информация о том, что отличается
				// версия платформы и др.). Если описание ошибки содержит заданную
				// подстроку, то вероятнее всего, порт свободен.
				
				Если Найти(ОписаниеОшибки(),
						НСтр("ru = 'Возможно, клиент не запущен или неверно указаны параметры подключения'")) Тогда
					ПортСвободен = Истина;
					Прервать;
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Если НЕ ПортСвободен Тогда
			Возврат НСтр("ru = 'Не удалось выполнить запуск тестируемого приложения:
				|не удалось выбрать свободный порт тестируемого приложения (1538 - 1600)'");
		КонецЕсли;
		
		Символ160 = Символ(160);
		
		ТекстСообщения = НСтр("ru = '%1, порт %2'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеДействияЗапуска);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", Формат(СцТ_ГлавнаяФорма.ПортТестируемогоКлиента, "ЧГ=0"));
		
		СцТ_ГлавнаяФорма.СцТ_ИнформационноеСообщение("OK", ТекстСообщения, "");
		
	Иначе
		// Заполнение параметров, необходимых для запуска веб-клиента
		
		СцТ_ГлавнаяФорма.URLИБ                   = СцТ_ГлавнаяФорма.СцТ_URLИнформационнойБазы;
		СцТ_ГлавнаяФорма.ПортТестируемогоКлиента = СцТ_ГлавнаяФорма.СцТ_ПортПриложенияНаВебСервере;
		
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	СцТ_ГлавнаяФорма.СцТ_ЗапуститьТребуемоеПриложение(Неопределено, Истина, СообщениеОбОшибке);
	
	Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
		Возврат НСтр("ru = 'Не удалось запустить тестируемое приложение из-за ошибки: '")
			+ СообщениеОбОшибке;
	ИначеЕсли СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		Возврат НСтр("ru = 'Не удалось запустить тестируемое приложение из-за внутренней ошибки'");
	КонецЕсли;
	
	// Дождаться отображения любого окна
	Попытка
		НайденоеОкно = СцТ_ГлавнаяФорма.СцТ_Контроллер.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), , , 60);
		Если НайденоеОкно = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'Не удалось запустить тестируемое приложение.
				|Не удалось дождаться отображения окна тестируемого приложения'");
			СцТ_ГлавнаяФорма.СцТ_ИнформационноеСообщение("ERR", СообщениеОбОшибке, "");
			СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено;
			Возврат СообщениеОбОшибке;
		КонецЕсли;
	Исключение
		СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено;
		Возврат НСтр("ru = 'Не удалось запустить тестируемое приложение.
			|Не удалось дождаться отображения окна тестируемого приложения'");
	КонецПопытки;
	
	// Ожидание отображения основного окна тестируемого
	// приложения в течение 60 секунд
	СцТ_ГлавнаяФорма.СцТ_ИнформационноеСообщение(
		"OK",
		НСтр("ru = 'Ожидание отображения главного окна тестируемого приложения'"), "");
		
	ОсновноеОкно = Неопределено;
	ОтображеноОкноАвторизации = Ложь;
	ТекВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() - ТекВремя <= 120000 Цикл
		ОсновноеОкно = СцТ_ГлавнаяФорма.СцТ_ПолучитьОсновноеОкноТестируемогоПриложения();
		Если ОсновноеОкно <> Неопределено Тогда
			Прервать;
		Иначе
			
			// Выполнить попытку определения, что открыто окно авторизации
			Попытка
				ОкноАвторизации = СцТ_ГлавнаяФорма.СцТ_Контроллер.НайтиОбъект(
					Тип("ТестируемоеОкноКлиентскогоПриложения"),
					НСтр("ru = '1С:Предприятие. Доступ к информационной базе'"));
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если ОкноАвторизации <> Неопределено Тогда
				ОтображеноОкноАвторизации = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ОсновноеОкно = Неопределено Тогда
		Если ОтображеноОкноАвторизации Тогда
			Возврат НСтр("ru = 'Не удалось запустить тестируемое приложение.
				|Возможно, неверно указаны имя и пароль пользователя тестируемого приложения'");
		Иначе
			Возврат НСтр("ru = 'Ошибка при запуске тестируемого приложения.
				|Не обнаружено основное окно тестируемого приложения'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции


// Выполнение единичного действия с таблицей формы
//
// Параметры
//	ДанныеШага - данные шага в дереве
//	ТекстСообщения    - текст сообщения при возникновении ошибки
// Возвращаемое значение - Истина, если шаг выполнен без ошибок.
// Ложь - возникли ошибки в выполнении
&НаКлиенте
Функция СцТ_ВыполнитьДействиеСТаблицей_НаКлиенте(ДанныеШага, МассивИнфоСообщений)
	
	Если СцТ_ГлавнаяФорма.СцТ_Контроллер = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тестируемое приложение не запущено. Шаг не может быть выполнен'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ДействиеСТаблицей = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ДействиеСТаблицей", "");
	
	РежимВыделения = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "РежимВыделения", Ложь);
	
	Если ПустаяСтрока(ДействиеСТаблицей) Тогда
		ТекстСообщения = НСтр("Не задано действие над таблицей формы.");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 1, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	ТаблицаОбъект = СцТ_ГлавнаяФорма.СцТ_ПолучитьТаблицуДляИнтерактивногоШага(ДанныеШага, СообщениеОбОшибке);
	Если ТаблицаОбъект = Неопределено Тогда
		ТекстСообщения = ?(ПустаяСтрока(СообщениеОбОшибке),
			НСтр("ru = 'Не удалось выполнить обращение к таблице формы. Неизвестная ошибка'"),
			СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(СообщениеОбОшибке));
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		Если ДействиеСТаблицей = "ПерейтиВНачалоТаблицы" Тогда
			Попытка
				ТаблицаОбъект.ПерейтиКПервойСтроке(РежимВыделения);
			Исключение
			КонецПопытки;
			
		ИначеЕсли ДействиеСТаблицей = "ПерейтиВКонецТаблицы" Тогда
			Попытка
				ТаблицаОбъект.ПерейтиКПоследнейСтроке(РежимВыделения);
			Исключение
			КонецПопытки;
			
		ИначеЕсли ДействиеСТаблицей = "ПерейтиКСледующейСтроке" Тогда
			Попытка
				ТаблицаОбъект.ПерейтиКСледующейСтроке(РежимВыделения);
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось перейти к следующей строке. Возможно, текущая строка является последней'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			
		ИначеЕсли ДействиеСТаблицей = "ПерейтиКПредыдущейСтроке" Тогда
			Попытка
				ТаблицаОбъект.ПерейтиКПредыдущейСтроке(РежимВыделения);
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось перейти к предыдущей строке. Возможно, текущая строка является первой'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			
		ИначеЕсли ДействиеСТаблицей = "ПерейтиНаУровеньВверх" Тогда
			Попытка
				ТаблицаОбъект.ПерейтиНаУровеньВверх();
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось перейти на уровень вверх. Возможно, это самый верхний уровень'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			
			
		ИначеЕсли ДействиеСТаблицей = "ПерейтиНаУровеньВниз" Тогда
			Попытка
				ТаблицаОбъект.ПерейтиНаУровеньВниз();
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось перейти на уровень вниз. Возможно, это самый нижний уровень'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			
		ИначеЕсли ДействиеСТаблицей = "ПерейтиНаВерхнийУровень" Тогда
			
			Пока Истина Цикл
				Попытка
					ТаблицаОбъект.ПерейтиНаУровеньВверх();
				Исключение
					Возврат Истина;
				КонецПопытки;
			КонецЦикла;
			
		ИначеЕсли ДействиеСТаблицей = "ПерейтиНаНижнийУровень" Тогда
			
			Пока Истина Цикл
				Попытка
					ТаблицаОбъект.ПерейтиНаУровеньВниз();
				Исключение
					Возврат Истина;
				КонецПопытки;
			КонецЦикла;
			
		ИначеЕсли ДействиеСТаблицей = "РазвернутьСтроку" Тогда
			
			Если НЕ ТаблицаОбъект.ВозможноРазвернуть() Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось развернуть строку.'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
			Попытка
				ТаблицаОбъект.Развернуть();
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось развернут узел дерева, возможно он уже развернут'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			
		ИначеЕсли ДействиеСТаблицей = "СвернутьСтроку" Тогда
			
			Если НЕ ТаблицаОбъект.ВозможноРазвернуть() Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось свернуть строку.'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
			ТаблицаОбъект.Свернуть(Новый Соответствие);
			
		ИначеЕсли ДействиеСТаблицей = "ПерейтиКСледующейЯчейке" Тогда
			
			Попытка
				
				ИмяТекущейЯчейки = ТаблицаОбъект.ПолучитьТекущийЭлемент().Имя;
				ТаблицаОбъект.ПерейтиКСледующемуЭлементу();
				Если ИмяТекущейЯчейки = ТаблицаОбъект.ПолучитьТекущийЭлемент().Имя Тогда
					ТекстСообщения =
						НСтр("ru = 'Не удалось перейти к следующей ячейке. Достигнута крайняя правая ячейка таблицы'");
					СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;
				
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось перейти к следующей ячейке. Возможно, таблица не активна'");
				СцТ_ДобавитьПодстроку(ТекстСообщения, ОписаниеОшибки(), ":<br>");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			
		ИначеЕсли ДействиеСТаблицей = "ПерейтиКПредыдующейЯчейке" Тогда
			
			Попытка
				
				ИмяТекущейЯчейки = ТаблицаОбъект.ПолучитьТекущийЭлемент().Имя;
				ТаблицаОбъект.ПерейтиКПредыдущемуЭлементу();
				Если ИмяТекущейЯчейки = ТаблицаОбъект.ПолучитьТекущийЭлемент().Имя Тогда
					ТекстСообщения =
						НСтр("ru = 'Не удалось перейти к предыдущей ячейке. Достигнута крайняя левая ячейка таблицы'");
					СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;
				
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось перейти к предыдущей ячейке. Возможно, таблица не активна'");
				СцТ_ДобавитьПодстроку(ТекстСообщения, ОписаниеОшибки(), ":<br>");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			
		ИначеЕсли ДействиеСТаблицей = "ВыбратьСтроку" Тогда
			ТаблицаОбъект.Выбрать();
			
		ИначеЕсли ДействиеСТаблицей = "ДобавитьСтроку" Тогда
			ТаблицаОбъект.ДобавитьСтроку();
			
		ИначеЕсли ДействиеСТаблицей = "УдалитьСтроку" Тогда
			ТаблицаОбъект.УдалитьСтроку();
			
		ИначеЕсли ДействиеСТаблицей = "НачатьРедактированиеСтроки" Тогда
			
			Если НЕ ТаблицаОбъект.ТекущийРежимРедактирование() Тогда
				Попытка
					ТаблицаОбъект.ИзменитьСтроку();
				Исключение
					ТекстСообщения = НСтр("ru = 'Ошибка при начале редактирования строки'");
					СцТ_ДобавитьПодстроку(ТекстСообщения, СцТ_ПредставлениеИсключения(ИнформацияОбОшибке()), ":<br>");
					СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
					Возврат Ложь;
				КонецПопытки;
				
				//Если НЕ ТаблицаОбъект.ТекущийРежимРедактирование() Тогда
				//	ТекстСообщения = НСтр("ru = 'Не удалось начать редактирование текущей строки таблицы'");
				//	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				//	Возврат Ложь;
				//КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ДействиеСТаблицей = "ЗавершитьРедактированиеСтроки" Тогда
			
			Если ТаблицаОбъект.ТекущийРежимРедактирование() Тогда
				
				Попытка
					ТаблицаОбъект.ЗакончитьРедактированиеСтроки();
				Исключение
					
					ТекстСообщения =
						  НСтр("ru = 'Не удалось завершить редактирование строки'");
					СцТ_ДобавитьПодстроку(ТекстСообщения, СцТ_ПредставлениеИсключения(ИнформацияОбОшибке()), ":<br>");
					СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
					Возврат Ложь;
					
				КонецПопытки;
				
				Если ТаблицаОбъект.ТекущийРежимРедактирование() Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось завершить редактирование строки'");
					СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ДействиеСТаблицей = "ВыделитьВсеСтроки" Тогда
			ТаблицаОбъект.ВыделитьВсеСтроки();
			
		ИначеЕсли ДействиеСТаблицей = "СортироватьПоКолонке" Тогда
			КолонкаСортировки = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "КолонкаСортировки", "");
			
			Если ПустаяСтрока(КолонкаСортировки) Тогда
				ТекстСообщения = НСтр("ru = 'Не выполнить упорядочивание таблицы. Не указана колонка порядка'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
			Попытка
				ТаблицаОбъект.УстановитьПорядок(КолонкаСортировки);
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось выполнить упорядочивание таблицы. Возможно, что указанная колонка %1 отсутствует'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(КолонкаСортировки));
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			
		ИначеЕсли ДействиеСТаблицей = "СравнитьНесколькоСтрок" Тогда
			
			ВариантСравнения = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ВариантСравнения", "ВсюТаблицу");
			ПерваяСтрока     = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ПерваяСтрока"    , "Первая");
			ПоследняяСтрока  = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ПоследняяСтрока" , "КонецТаблицы");
			КоличествоСтрок  = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "КоличествоСтрок" , 1);
			
			// Заполнение списка колонок
			УзелКолонок = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(
				ДанныеШага.Значение,
				"Имя",
				"КолонкиТаблицы");
			
			Если УзелКолонок = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось найти узел описания колонок таблицы'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
			СписокКолонок = Новый СписокЗначений;
			Для каждого УзелКолонки Из УзелКолонок.ПолучитьЭлементы() Цикл
				Если УзелКолонки.Активность Тогда
					СписокКолонок.Добавить(УзелКолонки.Имя, УзелКолонки.Синоним, УзелКолонки.Активность);
				КонецЕсли;
			КонецЦикла;
			
			Если СписокКолонок.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Количество проверяемых колонок - 0'");
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
			// Проверка колонок в таблице на форме
			Для каждого ЭлементСписка Из СписокКолонок Цикл
				
				НайденнаяКолонка = ТаблицаОбъект.НайтиОбъект(Тип("ТестируемоеПолеФормы"), ЭлементСписка.Представление, ЭлементСписка.Значение);
				Если НайденнаяКолонка = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'На форме не удалось найти колонку %1'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СцТ_ВыделенныйТекст(ЭлементСписка.Представление));
					СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если ВариантСравнения = "ВсюТаблицу" ИЛИ ВариантСравнения = "ЗаданныйДиапазон" И ПерваяСтрока = "Первая" Тогда
				Пока Истина Цикл
					Попытка
						ТаблицаОбъект.ПерейтиКПервойСтроке();
					Исключение
					КонецПопытки;
					
					Попытка
						ТаблицаОбъект.ПерейтиНаУровеньВверх();
					Исключение
						Прервать;
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
			
			Если ПоследняяСтрока = "ЗаданноеКоличество" Тогда
				КС = КоличествоСтрок;
			Иначе
				КС = 100;
			КонецЕсли;
			
			
			УзелТаблицы = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(
				ДанныеШага.Значение,
				"Имя",
				"ДанныеТаблицы");
				
			
			СтрокаОшибокСравнения = "";
			
			Итератор = 0;
			
			ДостигнутКонецТестируемойТаблицы = Ложь;
			
			Для каждого УзелСтроки Из УзелТаблицы.ПолучитьЭлементы() Цикл
				
				Итератор = Итератор + 1;
				
				ЕстьНесовпадения = Ложь;
				СтруктураСтрокиЭталона     = Новый Структура;
				СтруктураТестируемойСтроки = Новый Структура;
				
				
				Для каждого ЭлементСпискаКолонок Из СписокКолонок Цикл
					Если НЕ ЭлементСпискаКолонок.Пометка Тогда
						Продолжить;
					КонецЕсли;
					
					// Тестовое значение
					ЯчейкаТаблицы = ТаблицаОбъект.НайтиОбъект(Тип("ТестируемоеПолеФормы"),, ЭлементСпискаКолонок.Значение);
					Если ЯчейкаТаблицы = Неопределено Тогда
						// Т.е. это явное несовпадение. Вообще то существование колонок было выполнено ранее,
						// Это дополнительная подстраховка
						ЗначениеЯчейки = "";
					Иначе
						Попытка
							Если ТаблицаОбъект.ТекущийРежимРедактирование() ИЛИ ЯчейкаТаблицы.Вид = ВидПоляФормы.ПолеФлажка Тогда
								Попытка
									ЯчейкаТаблицы.Активизировать();
									ЗначениеЯчейки = ЯчейкаТаблицы.ПолучитьТекстРедактирования();
								Исключение
									ЗначениеЯчейки = "";
								КонецПопытки;
							Иначе
								ЗначениеЯчейки = ТаблицаОбъект.ПолучитьТекстЯчейки(ЯчейкаТаблицы.Имя);
							КонецЕсли;
						Исключение
							// Т.е. это явное несовпадение.
							ЗначениеЯчейки = "";
						КонецПопытки;
					КонецЕсли;
					
					// Эталонное значение
					ЭталонноеЗначение = "";
					Для каждого УзелДерева Из УзелСтроки.ПолучитьЭлементы() Цикл
						Если УзелДерева.Имя = ЭлементСпискаКолонок.Значение Тогда
							ЭталонноеЗначение = УзелДерева.Значение;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					// Сравнение
					СтруктураСтрокиЭталона.Вставить(ЭлементСпискаКолонок.Значение, ЭталонноеЗначение);
					СтруктураТестируемойСтроки.Вставить(ЭлементСпискаКолонок.Значение, ЗначениеЯчейки);
					
					Если ЗначениеЯчейки <> ЭталонноеЗначение Тогда
						ЕстьНесовпадения = Истина;
					КонецЕсли;
					
				КонецЦикла;  // Цикл обхода колонок
				
				
				Если ЕстьНесовпадения Тогда
					// Регистрация ошибки
					ЛокальнаяСтрокаОшибкиСравнения = СцТ_ВыводСведенийОСтрокеТаблицы(
						СтруктураСтрокиЭталона,
						СтруктураТестируемойСтроки,
						Новый Массив,
						СписокКолонок,
						"ЕстьНесовпаденияВСтроке");
						
					СцТ_ДобавитьПодстроку(СтрокаОшибокСравнения, ЛокальнаяСтрокаОшибкиСравнения);
				КонецЕсли;
				
				
				// Выход из цикла будет выполнен в том числе и при достижении конца таблицы
				Попытка
					ТаблицаОбъект.ПерейтиКСледующейСтроке();
				Исключение
					ДостигнутКонецТестируемойТаблицы = Истина;
					Прервать;
				КонецПопытки;
			КонецЦикла;
			
			Если НЕ ДостигнутКонецТестируемойТаблицы И Итератор < КС Тогда
				// В эталонной таблице оказалось меньше строк.
				// Продолжение обхода тестируемой таблицы
				Для Ит = Итератор По КС Цикл
					
					СтруктураТестируемойСтроки = Новый Структура;
					
					Для каждого ЭлементСпискаКолонок Из СписокКолонок Цикл
						Если НЕ ЭлементСпискаКолонок.Пометка Тогда
							Продолжить;
						КонецЕсли;
						
						// Тестовое значение
						ЯчейкаТаблицы = ТаблицаОбъект.НайтиОбъект(Тип("ТестируемоеПолеФормы"),, ЭлементСпискаКолонок.Значение);
						Если ЯчейкаТаблицы = Неопределено Тогда
							// Т.е. это явное несовпадение. Вообще то существование колонок было выполнено ранее,
							// Это дополнительная подстраховка
							ЗначениеЯчейки = "";
						Иначе
							Попытка
								Если ТаблицаОбъект.ТекущийРежимРедактирование() ИЛИ ЯчейкаТаблицы.Вид = ВидПоляФормы.ПолеФлажка Тогда
									Попытка
										ЯчейкаТаблицы.Активизировать();
										ЗначениеЯчейки = ЯчейкаТаблицы.ПолучитьТекстРедактирования();
									Исключение
										ЗначениеЯчейки = "";
									КонецПопытки;
								Иначе
									ЗначениеЯчейки = ТаблицаОбъект.ПолучитьТекстЯчейки(ЯчейкаТаблицы.Имя);
								КонецЕсли;
							Исключение
								// Т.е. это явное несовпадение.
								ЗначениеЯчейки = "";
							КонецПопытки;
						КонецЕсли;
						
						СтруктураТестируемойСтроки.Вставить(ЭлементСпискаКолонок.Значение, ЗначениеЯчейки);
						
					КонецЦикла;
					
					
					// Регистрация ошибки
					ЛокальнаяСтрокаОшибкиСравнения = СцТ_ВыводСведенийОСтрокеТаблицы(
						Неопределено,
						СтруктураСтрокиЭталона,
						Новый Массив,
						СписокКолонок,
						"ОтсутствуетЭталоннаяСтрока");
					
					СцТ_ДобавитьПодстроку(СтрокаОшибокСравнения, ЛокальнаяСтрокаОшибкиСравнения);
					
					Попытка
						ТаблицаОбъект.ПерейтиКСледующейСтроке();
					Исключение
						Прервать;
					КонецПопытки;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СтрокаОшибокСравнения) Тогда
				// Строку нужно дополнить заголовком таблицы
				
				//Заголовок = НСтр("ru='В таблице %1 есть различия:");
				//Вставка = СцТ_ВыделенныйТекст(НазваниеТаблицы);
				//ТекстСообщения = СтрЗаменить(Заголовок, "%1", Вставка);
				
				// Оформление таблицы в html
				
				СтрокаОшибокСравнения = 
					СцТ_ДобавитьЗаголовокКТаблице(Новый Массив, СписокКолонок, "") +
					СтрокаОшибокСравнения +
					СцТ_ОкончаниеТаблицы();
				
				
				СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, СтрокаОшибокСравнения);
				Возврат ложь;
				
			КонецЕсли;
			
		Иначе
			ТекстСообщения =
				  НСтр("ru = 'Неизвестное действие над таблицей формы: ""'")
				+ ДействиеСТаблицей
				+ """";
			СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
			Возврат ложь;
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Возникло необрабатываемое исключение: '") + ОписаниеОшибки();
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Визуализация шага в дереве
// Визуализацией шагов нужно управлять, так как возможны "обгоны"
// выполнения шагов и отображения
// Параметры
// ВизуализируемыйШаг - шаг, который нужно визуализировать
// Принудительно - принудительная отметка невизуализируемого шага
&НаКлиенте
Процедура СцТ_ВизуализироватьШагВДереве(Знач ВизуализируемыйШаг) Экспорт
	
	Если ВизуализируемыйШаг = Неопределено
		ИЛИ ВизуализируемыйШаг = ФормаШагов.БлокСценария Тогда
		Возврат;
	КонецЕсли;
	
	РодительШага = ВизуализируемыйШаг.ПолучитьРодителя();
	Пока РодительШага <> Неопределено Цикл
		ИдентификаторРодителя = РодительШага.ПолучитьИдентификатор();
		Если НЕ ФормаШагов.Элементы.БлокСценария.Развернут(ИдентификаторРодителя) Тогда
			ФормаШагов.Элементы.БлокСценария.Развернуть(ИдентификаторРодителя, Ложь);
		КонецЕсли;
		РодительШага = РодительШага.ПолучитьРодителя();
	КонецЦикла;
	
	ФормаШагов.Элементы.БлокСценария.ТекущаяСтрока = ВизуализируемыйШаг.ПолучитьИдентификатор();
	
КонецПроцедуры


&НаКлиенте
Процедура СцТ_ОткрытьФормуМакрошагаДляВыполнения() Экспорт
	
	// Для выполнения шагов из макрошага нужно открыть форму макрошага
	// и начать выполнение в этой форме с первого шага
	
	ИмяМакрошага = СцТ_ЗначениеВДереве(СохраненныеДанныеШага.Значение, "ИмяМакрошага", "");
	Если ПустаяСтрока(ИмяМакрошага) Тогда
		СцТ_ПерейтиНаСледующийШаг(СохраненныеДанныеШага);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие"             , "Выполнение");
	ПараметрыФормы.Вставить("АдресДереваМакрошагов", СцТ_ГлавнаяФорма.АдресДереваМакрошагов);
	ПараметрыФормы.Вставить("ПутьКФормам"          , ПутьКФормам);
	ПараметрыФормы.Вставить("ИмяМакрошага"         , ИмяМакрошага);
	ПараметрыФормы.Вставить("РежимПрогона"         , РежимПрогона);
	
	ПараметрыФормы.Вставить("РежимСовместимости838", СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ФормаМакрошага = ОткрытьФорму(ПутьКФормам + "Макрошаг", ПараметрыФормы, ЭтотОбъект, Истина);
	
	ФормаМакрошага.СцТ_ГлавнаяФорма                = СцТ_ГлавнаяФорма;
	ФормаМакрошага.ФормаРодительскогоПроцесса      = ЭтотОбъект;
	ФормаМакрошага.ШагРодительскогоПроцесса        = СохраненныеДанныеШага;
	
	//Старт выполненения будет осуществлен при открытии формы макрошага
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТД(АдрДД)
	
	ПрочитанныйТаблДок = Новый ТабличныйДокумент;
	ИмяВрФайла = ПолучитьИмяВременногоФайла("mxl");
	
	ДД = ПолучитьИзВременногоХранилища(АдрДД);
	ДД.Записать(ИмяВрФайла);
	
	Попытка
		ПрочитанныйТаблДок.Прочитать(ИмяВрФайла);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	УдалитьФайлы(ИмяВрФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ПрочитанныйТаблДок);
	
КонецФункции


&НаКлиенте
Процедура ИзменитьЗначениеГлобальногоПараметра(ИмяХранимогоПараметра, Значениепараметра)
	
	Если ПустаяСтрока(ИмяХранимогоПараметра) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СцТ_ГлавнаяФорма.ГлобальныеПараметры) <> Тип("Структура") Тогда
		СцТ_ГлавнаяФорма.ГлобальныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если НЕ СцТ_ГлавнаяФорма.ГлобальныеПараметры.Свойство(ИмяХранимогоПараметра) Тогда
		СцТ_ГлавнаяФорма.ГлобальныеПараметры.Вставить(ИмяХранимогоПараметра, Значениепараметра);
	Иначе
		СцТ_ГлавнаяФорма.ГлобальныеПараметры[ИмяХранимогоПараметра] = Значениепараметра;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция СцТ_ВПодчинении(Знач ПроверяемыйШаг, Знач ПредполагаемыйРодитель)
	
	Пока ПроверяемыйШаг <> ФормаШагов.БлокСценария И ПроверяемыйШаг <> Неопределено Цикл
		
		Если ПроверяемыйШаг = ПредполагаемыйРодитель Тогда
			Возврат Истина;
		КонецЕсли;
		
		ПроверяемыйШаг = ПроверяемыйШаг.ПолучитьРодителя();
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Процедура СцТ_ДобавитьПодстроку(СтрокаОснова, Знач Подстрока, Знач Разделитель = "", Знач ТэгНачала = "", Знач ТэгОкончания = "")
	
	Если НЕ ПустаяСтрока(Подстрока) Тогда
		
		Если НЕ ПустаяСтрока(СтрокаОснова) И Разделитель <> "" Тогда
			СтрокаОснова = СтрокаОснова + Разделитель;
		КонецЕсли;
		
		СтрокаОснова = СтрокаОснова + ТэгНачала + Подстрока + ТэгОкончания;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СцТ_ВыделенныйТекст(ВыделяемыйТекст)
	
	Если НЕ ПустаяСтрока(ВыделяемыйТекст) Тогда
		
		ВозвращаемыйТекст = "<b>" + ВыделяемыйТекст + "</b>";
		
		Возврат ВозвращаемыйТекст;
		
	Иначе
		Возврат "";
		
		
	КонецЕсли;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Процедура СцТ_ДобавитьИнфоСообщение(МассивСообщений, Знач ТипОшибки, Знач ТекстСообщения)
	
	// 0 - ошибка выполнения
	// 1 - ошибка в данных сценария (что то не заполнено)
	// 2 - ошибка в структуре данных (требуется актуализация сценария)
	// 5 - это не ошибка
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСообщений = Неопределено Тогда
		МассивСообщений = Новый Массив;
	КонецЕсли;
	
	СтруктураИнфоСообщения = Новый Структура;
	СтруктураИнфоСообщения.Вставить("ТипОшибки"     , ТипОшибки);
	СтруктураИнфоСообщения.Вставить("ТекстСообщения", ТекстСообщения);
	
	МассивСообщений.Добавить(СтруктураИнфоСообщения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОшибочногоСравнения2хЭлементов()
	
	ВозвращаемаяСтрока = "<tbody><tr><td style=""width: 182px;"">&amp;Name</td>";
	ВозвращаемаяСтрока = ВозвращаемаяСтрока
		+ "<td style=""width: 204px; color: rgb(204, 0, 0);"">&amp;Value1</td>";
	ВозвращаемаяСтрока = ВозвращаемаяСтрока
		+ "<td style=""width: 204px; color: rgb(204, 0, 0);"">&amp;Value2</td>";
	ВозвращаемаяСтрока = ВозвращаемаяСтрока
		+ "</tr></tbody>";
	
	Возврат ВозвращаемаяСтрока;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СцТ_ВыводСведенийОСтрокеТаблицы(ДанныеСтрокиЭталона, ДанныеТестируемойСтроки, МассивКлючей, СписокКолонок, РезультатСравнения)
	
	СтрокаОписания = "";
	
	Подстрока = "<tr>";
	СцТ_ДобавитьПодстроку(СтрокаОписания, Подстрока);
	
	
	Если ДанныеСтрокиЭталона <> Неопределено Тогда
		РабочаяСтрока = ДанныеСтрокиЭталона;
	Иначе
		РабочаяСтрока = ДанныеТестируемойСтроки;
	КонецЕсли;
	
	// Вывод картинки
	Подстрока = "<td colspan=""1"" rowspan=""2"">%1</td>";
	Если РезультатСравнения = "ОтсутствуетТестируемаяСтрока" Тогда
		СтроковоеЗначение = "<img src=""data:image/png;base64,
			|iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAACXBIWXMAAAsTAAALEwEAmpwYAAAK
			|T2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AU
			|kSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXX
			|Pues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgAB
			|eNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAt
			|AGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3
			|AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dX
			|Lh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+
			|5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk
			|5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd
			|0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA
			|4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzA
			|BhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/ph
			|CJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5
			|h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+
			|Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhM
			|WE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQ
			|AkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+Io
			|UspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdp
			|r+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZ
			|D5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61Mb
			|U2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY
			|/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllir
			|SKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79u
			|p+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6Vh
			|lWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1
			|mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lO
			|k06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7Ry
			|FDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3I
			|veRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+B
			|Z7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/
			|0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
			|DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5q
			|PNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIs
			|OpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5
			|hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQ
			|rAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9
			|rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1d
			|T1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aX
			|Dm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7
			|vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3S
			|PVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKa
			|RptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO
			|32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21
			|e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfV
			|P1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i
			|/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8
			|IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
			|YAAAOpgAABdvkl/FRgAADDBJREFUeAEAIAzf8wH6+/7//wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAABAQAC//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//8ABAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEEAAAAAP/9AAD+/wAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAA/wAAAwECBAD+8OT96tkCAwABBQEA/wAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAAMB
			|AgIA+cuH9aAi9qIo97xoAQAAAQUBAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAQMDAPrQlvavev/9+/8EBPe8mffB
			|dAIBAAADAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH5+v4AAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAA/wACBgH+8eTylx0AAwMBChEA////+/b/8vcNZs4EGTH++v8AAQAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQB
			|AQAA97tp/vQAAQgR//Ls/vLtAQIJAP8A+LlkAAAAAQUBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMCAPrcvPnLtAIQDf7t7AENIgMT
			|K/7x7gEMDvrVzvnQoAIBAAABAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAA/wABBAH//wD2t2cABQD+8fUGLFgPZdAPZdEIO3n+8fIACwL3uHD++fYC
			|BAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIB
			|AwEA98OJ+9reAQgIAAMFCESNAgcNAAIDBzt8AQkQAAME/Obx9rt0AgAAAAMBAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAIEAPvy6va4fQEPBv76/QEGDP7+
			|/fwAAPwAAP8AAgEKGP/3+gESCve/l/rn1QMDAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAwECAAD2tGv+8PsBCQ8A/wL/+vn+9/H+AAD/AAD9+vX/+vgA/wEB
			|BAv/+gD1sGUAAAABBQEAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|BAMA+NvC98CsAxINAPn+AP0F//b3/vjz/wAA/wAA/vXu//TyAP4FAPr+AxEQ+czH982oAwEAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAD/AAEEAf4AAPWtZwEDAP8CCf/+AAAA
			|A//5/f/38f8AAP8AAP/17f/38gABBv/+AP8ABQELAvavbf36+QIFAQD/AAAAAAAAAAAAAAAAAAAA
			|AAIAAAAAAAAAAAAAAAAAAAAAAgEDAQD2v5H61NgCEhIA/P4A/gEA/wIA+wD/+PIAAAAAAAD+9u7/
			|9/wAAAQA/gEA/P8CDhL74ez1tXoCAAAAAwEAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAP8A
			|AwQA+/Pu9K15AQ4G/vsD/vsA//sA/vwC/vgA/vfxAAAAAAAA//Xu/vcA/v0C//sA/vsA/voBARIK
			|9bSO+efbAwMAAP8AAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAADAQEAAPWsbv3r9wEMEAD+/wD/
			|AP//AAD/AP/7AP/39f8AAP8AAP728P/7AAD/Af//AAD/AAD+/wEHDf/4APSoZgAAAAEEAQAAAAAA
			|AAAAAAAAAAIAAAAAAAAAAAAAAAAEAwD33Mn1uaUDFw7/+/7//QD//QD//QD//QEA+gD98ur+AAD/
			|AAD+8en/+QD//QH//QD//QD//QD/+/0CFhD3xMD2zK8EAgAAAAAAAAAAAAAAAAACAAAAAAAAAP8A
			|AQQB/wAA86Jm//8AAAEJ//wA//wA//wA//wA//wA/wwH/Mmr+9nH+dfE+semAAwI//wA//wA//wA
			|//wA//wAAP4GAQkB86Rs/Pz9AgUBAP8AAAAAAAAAAgAAAAAAAAACAQQBAPS9mfnN0gMWE//8/QD+
			|AAD+AAD+AAD+AAD/AQEJDf3e3Pqse/uygv7f3gEHCgD/AgD+AAD+AAD+AAD+AP/8/gISFPrb5vOw
			|fgMAAAADAQAAAAAAAAH5+v4A/wADBgH88u/rbyD/+fcCDxIA/v4AAAAAAAAAAAAAAAAA////8O0F
			|TXQFWIYAAwT8sIn6qXsBDg8AAgMAAAAAAAAAAAAAAAAAAQH/9/T+9/cVkNwGGiL9+v8AAQACAAAA
			|AAMBAQAA9K6D++HyAQ0S//v+//4A//4A//4A//4A//4A//b1AAwPA0x7/wUE/v4AA013ARgg/vPw
			|//4A//4A//4A//4A//4A//3/AQgO/u//9Kl6AQAAAAQBAAAAAgAAAAIDAPrx7vfCowMUBAD8/wD/
			|AAD+AAD+AAD+AAD+AAD+AAADBv/y9f7fzAEAAAEEAP7i1P/s7AAECAD+AAD+AAD+AAD+AAD+AAD+
			|AP/8/QMXCfjJrfjm3wMCAAAAAAQAAAACAAD74dX75ewEFxD/+/8AAAAAAAAAAAAAAAAAAAAAAQAA
			|AQj///r6mGX/UXgABwj7sIr+9fcBEBH/+/4AAAAAAAAAAAAAAAAAAAAAAAAABAz85ev73c4JGiH9
			|AAAEAAAA/gAABRkkAQgE+t7wBR4SAAABAP//AAAAAAAAAAAAAAEAAAD9AAoN/ejg/IpnAAAAAQsA
			|AREW//r8AP//AAAAAAAAAAAAAAAAAAEBAAEB/ens/v4ABRol/gAAAAAAAfn6/gABAQMEAPfKtu6Q
			|aP3p4///AAECAAAAAAAAAAAAAAAAAAAAAAAAAAABAAD+AAAAAAACAAD/AAAAAAAAAAAAAAAAAAAA
			|AAAAAAD/AP/9AAILBxBojA1NbP39AAD+/wH5+v4A/wAAAQAEBQH8+/z50ML+9vEBAwEAAAEAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/v0AAQQGKDUGFRn9
			|/QD//f8AAQAB+fr+AAAAAAAAAAABAgUAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAA/fwAAP//AAAAAAAABAAAAAAAAAAA
			|AAAA//77AP4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAACAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEAAQAA
			|//84eazv7HpH4wAAAABJRU5ErkJggg==""
			| alt="""" />";
	Иначе
		СтроковоеЗначение = "<img src=""data:image/png;base64,
			|iVBORw0KGgoAAAANSUhEUgAAABAAAAAPCAIAAABiEdh4AAAACXBIWXMAAAsTAAALEwEAmpwYAAAK
			|T2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AU
			|kSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXX
			|Pues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgAB
			|eNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAt
			|AGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3
			|AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dX
			|Lh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+
			|5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk
			|5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd
			|0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA
			|4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzA
			|BhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/ph
			|CJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5
			|h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+
			|Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhM
			|WE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQ
			|AkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+Io
			|UspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdp
			|r+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZ
			|D5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61Mb
			|U2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY
			|/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllir
			|SKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79u
			|p+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6Vh
			|lWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1
			|mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lO
			|k06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7Ry
			|FDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3I
			|veRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+B
			|Z7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/
			|0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5p
			|DoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5q
			|PNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIs
			|OpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5
			|hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQ
			|rAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9
			|rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1d
			|T1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aX
			|Dm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7
			|vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3S
			|PVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKa
			|RptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO
			|32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21
			|e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfV
			|P1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i
			|/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8
			|IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADq
			|YAAAOpgAABdvkl/FRgAAAu9JREFUeAEA3wIg/QH///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
			|AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAP//vNEDG8Vchi8AAAAASUVORK5CYII=""
			| alt="""" />";
		
	КонецЕсли;
	Подстрока = СтрЗаменить(Подстрока, "%1", СтроковоеЗначение);
	СцТ_ДобавитьПодстроку(СтрокаОписания, Подстрока);
	
	
	// Вывод ключей
	Для каждого КлючСтроки Из МассивКлючей Цикл
		СтроковоеЗначение = Строка(РабочаяСтрока[КлючСтроки]);
		
		Подстрока = "<td colspan=""1"" rowspan=""2"">%1</td>";
		Подстрока = СтрЗаменить(Подстрока, "%1", СтроковоеЗначение);
		СцТ_ДобавитьПодстроку(СтрокаОписания, Подстрока);
	КонецЦикла;
	
	// Вывод эталонных значений
	Для каждого Колонка Из СписокКолонок Цикл
		ИмяКолонки = Колонка.Значение;
		Если МассивКлючей.Найти(ИмяКолонки)<> Неопределено Тогда
			// эта колонка уже выведена
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтрокиЭталона = Неопределено Тогда
			ЗначениеЭталона = "";
		Иначе
			ЗначениеЭталона = ДанныеСтрокиЭталона[ИмяКолонки];
		КонецЕсли;
		
		// Преобразование строки к показу
		Если ДанныеТестируемойСтроки = Неопределено Тогда
			ТестируемоеЗначение = "";
		Иначе
			ТестируемоеЗначение = ДанныеТестируемойСтроки[ИмяКолонки];
			
			Если ТипЗнч(ТестируемоеЗначение) = Тип("ХранилищеЗначения") Тогда
				ТестируемоеЗначение = XMLСтрока(ТестируемоеЗначение);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТестируемоеЗначение <> ЗначениеЭталона
			И (ЗначениеЗаполнено(ТестируемоеЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеЭталона)) Тогда
			Подстрока = "<td style=""color: rgb(204, 0, 0);"">%1</td>";
		Иначе
			Подстрока = "<td>%1</td>";
		КонецЕсли;
		
		ОтображаемоеЗначениеЭталона = ПреобразоватьЗначениеДляОтображения(ЗначениеЭталона);
		//Если ПустаяСтрока(ЗначениеЭталона) Тогда
		//	ЗначениеЭталона = "-";
		//КонецЕсли;
		
		Подстрока = СтрЗаменить(Подстрока, "%1", ОтображаемоеЗначениеЭталона);
		
		СцТ_ДобавитьПодстроку(СтрокаОписания, Подстрока);
	КонецЦикла;
	
	СцТ_ДобавитьПодстроку(СтрокаОписания, "</tr>");
	
	
	СцТ_ДобавитьПодстроку(СтрокаОписания, "<tr>");
	
	// Вывод тестовых значений
	Для каждого Колонка Из СписокКолонок Цикл
		ИмяКолонки = Колонка.Значение;
		Если МассивКлючей.Найти(ИмяКолонки)<> Неопределено Тогда
			// эта колонка уже выведена
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтрокиЭталона = Неопределено Тогда
			ЗначениеЭталона = "";
		Иначе
			ЗначениеЭталона = ДанныеСтрокиЭталона[ИмяКолонки];
		КонецЕсли;
		
		Если ДанныеТестируемойСтроки = Неопределено Тогда
			ТестируемоеЗначение = "";
		Иначе
			ТестируемоеЗначение = ДанныеТестируемойСтроки[ИмяКолонки];
		КонецЕсли;
		
		Если ТестируемоеЗначение <> ЗначениеЭталона
			И (ЗначениеЗаполнено(ТестируемоеЗначение) ИЛИ ЗначениеЗаполнено(ЗначениеЭталона)) Тогда
			Подстрока = "<td style=""color: rgb(204, 0, 0);"">%1</td>";
		Иначе
			Подстрока = "<td>%1</td>";
		КонецЕсли;
		
		ОтображаемоеТестируемоеЗначение = ПреобразоватьЗначениеДляОтображения(ТестируемоеЗначение);
		//Если ПустаяСтрока(ТестируемоеЗначение) Тогда
		//	ТестируемоеЗначение = "-";
		//КонецЕсли;
		
		Подстрока = СтрЗаменить(Подстрока, "%1", ОтображаемоеТестируемоеЗначение);
		
		СцТ_ДобавитьПодстроку(СтрокаОписания, Подстрока);
	КонецЦикла;
	
	
	// Завершение строки
	Подстрока = "</tr>";
	СцТ_ДобавитьПодстроку(СтрокаОписания, Подстрока);
	
	Возврат СтрокаОписания;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьЗначениеДляОтображения(ИстинноеЗначение);
	
	Если ПустаяСтрока(ИстинноеЗначение) Тогда
		ВозвращаемоеЗначение = "&lt;NULL&gt;";
	Иначе
		ВозвращаемоеЗначение = СтрЗаменить(ИстинноеЗначение    , " "        , Символ(183));
		ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение, Символы.ПС , Символ(182));
		ВозвращаемоеЗначение = СтрЗаменить(ВозвращаемоеЗначение, Символы.Таб, Символ(171));
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция СцТ_ДобавитьЗаголовокКТаблице(МассивКлючей, СписокКолонок, НазваниеТаблицы)
	
	ЗаголовокТаблицы = НСтр("ru = 'Ошибки сравнения таблицы%1'");
	Если НЕ ПустаяСтрока(НазваниеТаблицы) Тогда
		ЗаголовокТаблицы = СтрЗаменить(ЗаголовокТаблицы, "%1", " " + НазваниеТаблицы);
	Иначе
		ЗаголовокТаблицы = СтрЗаменить(ЗаголовокТаблицы, "%1", "");
	КонецЕсли;
	
	ЗаголовокТаблицы = ЗаголовокТаблицы + 
		"<table style=""text-align: left;"" border=""1"" cellpadding=""3"" cellspacing=""0"">";
	ЗаголовокТаблицы = ЗаголовокТаблицы + 
		"<tbody>";
	ЗаголовокТаблицы = ЗаголовокТаблицы + 
		"<tr>";
		
	// Колонка картинки
	ДобавляемаяСтрока = "<th  style=""background-color: rgb(255, 207, 2);"" colspan=""1"" rowspan=""2"">#</th>";
	ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
	
	// Добавление сдвоенных ячеек для ключей
	Для каждого КолонкаКлюча Из МассивКлючей Цикл
		ДобавляемаяСтрока = "<th  style=""background-color: rgb(255, 207, 2);"" colspan=""1"" rowspan=""2"">%1</th>";
		КолонкаВСписке = СписокКолонок.НайтиПоЗначению(КолонкаКлюча);
		Если КолонкаВСписке <> Неопределено Тогда
			ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", КолонкаВСписке.Представление);
		Иначе
			ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", КолонкаКлюча);
		КонецЕсли;
		
		ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
	КонецЦикла;
	
	// Добавление строки строк Эталонной таблицы
	Для каждого Колонка Из СписокКолонок Цикл
		ИмяКолонки = Колонка.Значение;
		Если МассивКлючей.Найти(ИмяКолонки) <>  Неопределено Тогда
			// Эту колонку уже отобразили как ключ
			Продолжить;
		КонецЕсли;
		
		ДобавляемаяСтрока = "<th style=""background-color: rgb(255, 207, 2);"">%1</th>";
		ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", Колонка.Представление + " " + НСтр("ru = '(Э)'"));
		
		ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
		
	КонецЦикла;
	ЗаголовокТаблицы = ЗаголовокТаблицы + 
		"</tr>";
		
	ЗаголовокТаблицы = ЗаголовокТаблицы + 
		"<tr>";
	// Добавление строки строк тестовой таблицы
	Для каждого Колонка Из СписокКолонок Цикл
		ИмяКолонки = Колонка.Значение;
		Если МассивКлючей.Найти(ИмяКолонки) <>  Неопределено Тогда
			// Эту колонку уже отобразили как ключ
			Продолжить;
		КонецЕсли;
		
		ДобавляемаяСтрока = "<th style=""background-color: rgb(255, 207, 2);"">%1</th>";
		ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%1", Колонка.Представление + " " + НСтр("ru = '(Т)'"));
		
		ЗаголовокТаблицы = ЗаголовокТаблицы + ДобавляемаяСтрока;
		
	КонецЦикла;
	
	ЗаголовокТаблицы = ЗаголовокТаблицы + "</tr>";
	
	Возврат ЗаголовокТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СцТ_ОкончаниеТаблицы()
	
	Возврат "</tbody></table>";
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыОшибки(СтруктураОтвета, ДопПараметры) Экспорт
	
	Если СтруктураОтвета = Неопределено Тогда
		// Пользователь просто закрыл форму
		Возврат;
	КонецЕсли;
	
	ВыбранноеДействие = СтруктураОтвета.ВыбранноеДействие;
	
	ТипОшибки    = СтруктураОтвета.ТипОшибки;
	Комментарий  = СтруктураОтвета.Комментарий;
	
	// Регистрация выбора пользователя в протоколе
	ДанныеТекущегоШага = ДопПараметры.ТекущиеДанные;
	
	МассивИнфоСообщений = Новый Массив;
	
	Если ТипОшибки = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Это ошибка конфигурации.'");
		
	ИначеЕсли ТипОшибки = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Это ошибка инструмента.'");
		
	ИначеЕсли ТипОшибки = 2 Тогда
		ТекстСообщения = НСтр("ru = 'Нужна актуализация сценария.'");
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Это не ошибка'");
		
	КонецЕсли;
	
	Подстрока = НСтр("ru = 'Пользователь выбрал действие ""%1""'");
	
	Подстрока = СтрЗаменить(Подстрока, "%1", ВыбранноеДействие);
	
	СцТ_ДобавитьПодстроку(ТекстСообщения, Подстрока, " ");
	
	СцТ_ДобавитьПодстроку(ТекстСообщения, Комментарий, НСтр("ru = ' и добавил комментарий:<br>'"), "<i>", "</i>");
	
	СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, ТипОшибки, ТекстСообщения);
	
	РезультатВыполненияШага = (ТипОшибки > 1);
	
	СцТ_ЗарегистрироватьСообщениеВПротоколе_НаКлиенте(
		ДанныеТекущегоШага,
		МассивИнфоСообщений,
		РезультатВыполненияШага,
		Неопределено,
		ТекущаяДата());
		
	// Обработка выбранного пользователем действия
	Если ВыбранноеДействие = "ПродолжитьВыполнение" Тогда
		СцТ_ПерейтиНаСледующийШаг(ДанныеТекущегоШага);
		
	ИначеЕсли ВыбранноеДействие = "СледующийШаг" Тогда
		СцТ_ГлавнаяФорма.СцТ_ВыполнениеТеста = "ПошаговыйРежим";
		СцТ_ПерейтиНаСледующийШаг(ДанныеТекущегоШага,, Истина);
		
		
	ИначеЕсли ВыбранноеДействие = "ЗавершитьВыполнение" Тогда
		СцТ_ГлавнаяФорма.СцТ_ЗавершитьРаботуСистемыПриАвтоЗапуске();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СцТ_ПредставлениеИсключения(ИнфОшибка, ДляВеб = Ложь) Экспорт
	
	Если ДляВеб Тогда
		Возврат "<b>"
			+ НСтр("ru = 'Краткое описание ошибки: '")
			+ "</b>"
			+ КраткоеПредставлениеОшибки(ИнфОшибка)
			+ "<br><b>"
			+ НСтр("ru = 'Подробное описание ошибки: '")
			+ "</b>"
			+ ПодробноеПредставлениеОшибки(ИнфОшибка);
	Иначе
		Возврат НСтр("ru = 'Краткое описание ошибки: '") + КраткоеПредставлениеОшибки(ИнфОшибка)
			+ Символы.ПС
			+ НСтр("ru = 'Подробное описание ошибки: '")
			+ ПодробноеПредставлениеОшибки(ИнфОшибка);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьТДдляИнтерактивногоШага(Знач ДанныеШага, МассивИнфоСообщений)
	
	Пока ДанныеШага <> Неопределено И ДанныеШага.ТипШага <> "АвтоГруппаТабличныйДокумент" Цикл
		ДанныеШага = ДанныеШага.ПолучитьРодителя();
	КонецЦикла;
	
	Если ДанныеШага = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не найден узел описания табличного документа'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеРезультата = "";
	ФормаПриложения = СцТ_ГлавнаяФорма.СцТ_ПолучитьИнтерактивныйКонтейнерДляШагаСценария(
		ДанныеШага,
		ОписаниеРезультата);
		
	Если ФормаПриложения = Неопределено Тогда
		ТекстСообщения = СцТ_ГлавнаяФорма.СцТ_РасшифроватьОшибку(ОписаниеРезультата);
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	УзелОписанияТД = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ТабличныйДокумент");
	
	Если УзелОписанияТД = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не задан элемент формы'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИмяТД       = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(УзелОписанияТД.Значение);
	ЗаголовокТД = СцТ_ГлавнаяФорма.СцТ_ОпределитьЗначение_НаКлиенте(УзелОписанияТД.Синоним);
	
	Если ПустаяСтрока(ИмяТД) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан элемент формы'");
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 2, ТекстСообщения);
		Возврат Неопределено;
		
	КонецЕсли;
	
	УзелПути             = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДанныеШага.Значение, "Имя", "ИСТЗ_ПутьКОбъекту");
	ВариантПоискаОбъекта = СцТ_ЗначениеВДереве(ДанныеШага.Значение, "ВариантПоискаОбъекта", "", , Ложь);
	
	Если ПустаяСтрока(ВариантПоискаОбъекта) Тогда
		Если Лев(ИмяТД, 1) = "$" Тогда
			ВариантПоискаОбъекта = "011";
		Иначе
			ВариантПоискаОбъекта = "100";
		КонецЕсли;
	КонецЕсли;
	
	ТДнаФорме = СцТ_ГлавнаяФорма.СцТ_НайтиИнтерактивныйОбъектТестируемогоПриложения(
		ФормаПриложения,
		ВариантПоискаОбъекта,
		Тип("ТестируемоеПолеФормы"),
		ИмяТД,
		ЗаголовокТД,
		УзелПути);
	
	Если ТипЗнч(ТДнаФорме) = Тип("Строка") Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти табличный документ на форме'");
		
		СцТ_ДобавитьИнфоСообщение(МассивИнфоСообщений, 0, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	// Если дошли до сюда, значит ТД на форме найден
	
	Возврат ТДнаФорме;
	
КонецФункции





#КонецОбласти

#КонецЕсли





