
#Область Переменные

// Форма - владелец текущей формы (для краткости и наглядности вместо "ЭтаФорма.ВладелецФормы")
&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

&НаКлиенте
Перем СцТ_РодительУзла;

// Указатель на форму (главная или макрошага), из которой была открыта эта форма
&НаКлиенте
Перем ВызвавшаяФорма Экспорт;

// Указатель на ветку в дереве. Заполненяется, если шаг не новый
&НаКлиенте
Перем ДанныеШага Экспорт;

// Идентификатор узла в дереве. Заполнено если шаг не новый
&НаКлиенте
Перем ИдентификаторУзла Экспорт;

// Для хранения предыдущеего значения типа в таблице, чтобы отслеживать изменения
// Устанавливается перед началом изменения и проверяется при изменении
&НаКлиенте
Перем ПредыдущийТип;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимСовместимости838 Тогда
		УстановитьДействие("ПередЗакрытием", "ПередЗакрытиеБезРежимаСовместимости");
	КонецЕсли;
	
	// Если форма открыта под внешним управлением, то не вся функциональность
	// должна работать
	Если Параметры.ОткрытаПодВнешнимУправлением Тогда
		
		ФормаОткрытаПодВнешнимУправлением = Истина;
		
		Элементы.КМ_ТР_ВыбратьОбъектИБ.Доступность              = Ложь;
		Элементы.ТаблицаРеквизитовСравнитьВизуально.Доступность = Ложь;
		
	КонецЕсли;
	
	///
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	// Управление доступностью
	ТолькоПросмотр = Параметры.ТолькоПросмотр;
	Элементы.ПрименитьИЗакрыть.Доступность  = НЕ Параметры.ТолькоПросмотр;
	Элементы.ПрименитьИзменения.Доступность = НЕ Параметры.ТолькоПросмотр;
	
	// Таблицы передаваемые по адресам
	АдресТаблицыКлючей = Параметры.АдресТаблицыКлючей;
	АдресТаблицыСсылок = Параметры.АдресТаблицыСсылок;
	
	// основные атрибуты шага (ОА)
	// атрибуты, для редактирования, которых не требуется открытие формы настройки
	// или свернутые для хранения атрибуты
	ОА_ТипШага                          = Параметры.ТипШага;
	ОА_НомерШага                        = Параметры.НомерШага;
	ОА_Активность                       = Параметры.Активность;
	ОА_ОписательПоложенияШагаВДереве    = Параметры.ОписательПоложенияШагаВДереве;
	ОА_ЭтоНовый                         = Параметры.ЭтоНовый;
	ОА_СтруктураДанныхШага              = Параметры.СтруктураДанныхШага;
	
	// 1. Раскрытие структуры шага и определение типа шага
	Если ОА_СтруктураДанныхШага = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ДШ_Наименование                 = ОА_СтруктураДанныхШага.Наименование;
	ДШ_ТипМетаданных                = ОА_СтруктураДанныхШага.ТипМетаданных;
	ДШ_ИмяМетаданных                = ОА_СтруктураДанныхШага.ИмяМетаданных;
	ДШ_Автоописание                 = ОА_СтруктураДанныхШага.Автоописание;
	ДШ_Описание                     = ОА_СтруктураДанныхШага.Описание;
	ДШ_СкрытьАвтоописание           = ОА_СтруктураДанныхШага.СкрытьАвтоописание;
	ДШ_ОбСсылка                     = ОА_СтруктураДанныхШага.ОбСсылка;
	ДШ_ПредставлениеОбъекта         = ОА_СтруктураДанныхШага.ПредставлениеОбъекта;
	ДШ_ПредставлениеИмениМетаданных = ОА_СтруктураДанныхШага.ПредставлениеИмениМетаданных;
	ДШ_ИмяФормы                     = ОА_СтруктураДанныхШага.ИмяФормы;
	ДШ_ВыполнитьВручную             = ОА_СтруктураДанныхШага.ВыполнитьВручную;
	ДШ_Комментарий                  = ОА_СтруктураДанныхШага.Комментарий;
	ДШ_ЗаголовокФормы               = ОА_СтруктураДанныхШага.ЗаголовокФормы;
	ДШ_ДанныеКартинки               = ОА_СтруктураДанныхШага.ДанныеКартинки;
	
	Если ТипЗнч(ОА_СтруктураДанныхШага.ДеревоЗначения) = Тип("Структура") Тогда
		// Данные дерева переданы в виде структуры из главной формы обработки
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоЗначения,
			ОА_СтруктураДанныхШага.ДеревоЗначения);
	ИначеЕсли ТипЗнч(ОА_СтруктураДанныхШага.ДеревоЗначения) = Тип("ХранилищеЗначения") Тогда
		// Данные из конфигурации могут поступить в виде данных ХЗ
		Попытка
			ДЗ_НаСервере = ОА_СтруктураДанныхШага.ДеревоЗначения.Получить();
			ПреобразоватьЗначенияВДереве(ДЗ_НаСервере, Истина);
			ЗначениеВРеквизитФормы(ДЗ_НаСервере, "ДеревоЗначения");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Заполнение временной таблицы ссылок шага
	Если ОА_СтруктураДанныхШага.Свойство("МассивСсылокШага") И ТипЗнч(ОА_СтруктураДанныхШага.МассивСсылокШага) = Тип("Массив") Тогда
		ЭтаОбработка.СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(ТаблицаСсылокШага, ОА_СтруктураДанныхШага.МассивСсылокШага);
	КонецЕсли;
	
	// Добавление ссылок из общей таблицы ссылок
	ЭтаОбработка.СцТ_ДобавитьВТаблицуСсылокШагаСведенияИзТаблицыСсылок(
		ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага,
		АдресТаблицыСсылок,
		ТаблицаСсылокШага);
	
	// Признак, что наименование установлено вручную
	НаименованиеШагаИзмененоВручную = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ИСТЗ_НаименованиеРучное",
		Ложь);
		
	// Картинки для закладок описания и комментария
	АдресКартинкиКомментария = ПоместитьВоВременноеХранилище(ЭтаОбработка.ПолучитьМакет("КартинкаКомментария"));
	КартинкаКомментария = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинкиКомментария));
	
	Элементы.Страница_РедактируемоеОписание.Картинка = ?(
		ПустаяСтрока(ДШ_Описание),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Элементы.Страница_Комментарий.Картинка = ?(
		ПустаяСтрока(ДШ_Комментарий),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
		
	Если ПустаяСтрока(АдресТаблицыСсылок) Тогда
		ИстиннаяТаблицаСсылок = Неопределено;
	Иначе
		ИстиннаяТаблицаСсылок = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
	КонецЕсли;
	
	Если НЕ ОА_ЭтоНовый И Параметры.ВыполнятьПреобразованиеСсылочныхТипов Тогда
		ЭтаОбработка.ПреобразоватьДеревоЗначенийДляНовогоФормата(ДеревоЗначения, АдресТаблицыСсылок, ТаблицаСсылокШага, АдресТаблицыКлючей);
		Модифицированность = Истина;
	КонецЕсли;
	
	СцТ_НастроитьФормуДляШага();
	
	// Заполнение поведения при ошибке
	СцТ_ЗаполнитьДействиеШагаПриОшибке(ЭтотОбъект);
	
	// Модифицированность
	Если НЕ Модифицированность И ОА_ЭтоНовый Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущийЭлемент = Элементы.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_УдалениеШаговСценария" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметр.НайтиПоЗначению(ДанныеШага.ПолучитьИдентификатор()) <> Неопределено Тогда
			Модифицированность = Ложь;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли  ИмяСобытия = "СцТ_ПеремещениеУзловСценария" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		НовыйУзел = Параметр[ДанныеШага];
		Если НовыйУзел <> Неопределено Тогда
			ДанныеШага = НовыйУзел;
			ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
			ДШ_НомерШага      = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ОбновленыДанныеГрупповогоШага" Тогда
		
		Если Параметр = ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя Тогда
			СцТ_СформироватьПредставлениеРодителя();
			
			ТекстПредупреждения = НСтр("ru = 'Данные группового шага изменились. Требуется обновление данных.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ИзмениласьНумерацияШагов" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ДанныеШага = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,ИдентификаторУзла);
			ОА_НомерШага = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		Исключение
		КонецПопытки;
		
	ИначеЕсли ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ИзмененСоставКлючей" Тогда
		Если Источник = ЭтотОбъект Тогда
			СцТ_ПрименитьНастройкиКлючей(Параметр);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СцТ_ПослеОтветаНаВопросОСохраненииДанныхПриЗакрытииФормы",
			ЭтотОбъект);
			
		ТекстЫопроса = НСтр("ru = 'Данные шага были изменены. Применить изменения?'");
		ПоказатьВопрос(ОписаниеОповещения,
			ТекстЫопроса,
			РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиеБезРежимаСовместимости(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Если НЕ ЗавершениеРаботы Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"СцТ_ПослеОтветаНаВопросОСохраненииДанныхПриЗакрытииФормы",
				ЭтотОбъект);
				
			ТекстЫопроса = НСтр("ru = 'Данные шага были изменены. Применить изменения?'");
			ПоказатьВопрос(ОписаниеОповещения,
				ТекстЫопроса,
				РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Данные шага воспроизведения объекта информационной базы были изменены. При закрытии все изменения будут утеряны'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()
	
	Попытка
		СцТ_ГлавнаяФорма.СцТ_ОткрытыеФормыНастройкиШагов.Удалить(ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура СохранитьИЗакрытьФорму(Команда)
	
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Сохранение шага'"), , НСтр("ru = 'Данные шага сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтоназвание(Команда)
	
	СцТ_ОбновитьНаименование_НаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ХранимыеДанныеШага(Команда)
	
	// Всегда отображаются имеено хранимые данные, которые сохранены в дереве шагов
	Если ОА_ЭтоНовый Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага еще не записаны. Отобразить структуру хранения данных невозможно.
								         |Сохранить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеОтветаНаВопросОСохраненииНового", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
		Возврат;
	ИначеЕсли НЕ ОА_ЭтоНовый И Модифицированность Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага были изменены. Сохранить изменения перед отображением структуры?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеОтветаНаВопросОСохраненииСуществующего", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИдентификацииТаблицы(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Значение) = Тип("Строка") И Найти(ТекущиеДанные.Значение, "{""#"",") Тогда
		// Это ссылка в предыдущем типе данных
		ТекущиеДанные.ТипУзла = "Ссылка";
	КонецЕсли;
	
	Если ТекущиеДанные.ТипУзла <> "Ссылка" Тогда
		ТекстСообщения = НСтр("ru = 'Настройка структры идентификации может быть выполнена только для ссылочных типов.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыИдентификации = СцТ_ГлавнаяФорма.СцТ_ПолучитьСтруктуруИдентификацииСсылки(
		ТекущиеДанные.Значение,
		ТаблицаСсылокШага,
		ТекущиеДанные.Представление);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СцТ_ПослеИзмененияСтруктурыИдентификацииВТаблице",
		ЭтотОбъект,
		ТекущиеДанные);
		
	ПараметрыФормыИдентификации.Вставить("РежимСовместимости838" , СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ФормаИдентификации = ОткрытьФорму(ПутьКФормам + "КлючиИдентификации",
		ПараметрыФормыИдентификации,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
		
	ФормаИдентификации.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРеквизиты(Команда)
	
	Адрес = СцТ_ПоместитьНастройкуРеквизитовВоВременноеХранилище();
	
	ИмяТекущегоУзла = "";
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страница_ДанныеШага Тогда
		ИмяТекущейСтраницы = Элементы.СтраницыСтруктурыОбъекта.ТекущаяСтраница.Имя;
		Если ИмяТекущейСтраницы = "СтраницыДанных_Реквизиты" Тогда
			ИмяТаблицы = "Реквизиты";
		Иначе
			ИмяТаблицы = СтрЗаменить(ИмяТекущейСтраницы, "Страница_", "");
		КонецЕсли;
	КонецЕсли;
	
	ПФ = Новый Структура;
	ПФ.Вставить("Адрес"              , Адрес);
	ПФ.Вставить("ИмяТекущегоУзла"    , ИмяТаблицы);
	
	ПФ.Вставить("РежимСовместимости838", СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СцТ_ПослеНастройкиРеквизитов", ЭтотОбъект);
		
	ОткрытьФорму(
		ПутьКФормам + "НастройкаРеквизитов",
		ПФ,
		ЭтотОбъект,,,,
		ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьВизуально(Команда)
	
	ПараметрыДляПоискаОбъекта = СцТ_ГлавнаяФорма.СцТ_ПолучитьПараметрыШагаДляПоискаОбъектаИБ(СцТ_РодительУзла);
	
	// Адрес таблицы ссылок передается для поиска объекта или записи по данным родительского узла
	// этот шаг уже должен быть сохранен
	ДанныеДляСравнения = СцТ_ПодготовитьДанныеДляСравненияРеквизитовШапки_НаСервере(
		ПараметрыДляПоискаОбъекта,
		СцТ_ГлавнаяФорма.АдрестаблицыСсылок,
		СцТ_ГлавнаяФорма.ГлобальныеПараметры);
		
	Если ДанныеДляСравнения = Неопределено Тогда
		ТС = НСтр("ru = 'Не удалось найти исходный объект'");
		ПоказатьПредупреждение(, ТС);
		Возврат;
	КонецЕсли;
	
	ДанныеДляСравнения.Вставить("РежимСовместимости838", СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ОткрытьФорму(ПутьКФормам + "ВизуальноеСравнениеТаблиц", ДанныеДляСравнения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьТаблицуВизуально(Команда)
	
	ТекущаяСтраницаСтруктурыДанных = Элементы.СтраницыСтруктурыОбъекта.ТекущаяСтраница;
	
	Если ТекущаяСтраницаСтруктурыДанных = Неопределено ИЛИ ТекущаяСтраницаСтруктурыДанных = Элементы.СтраницыДанных_Реквизиты Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейСтраницы = ТекущаяСтраницаСтруктурыДанных.Имя;
	// Имя у страницы формализованное и состоит иЗ префикса "Страница_" и имени таблицы
	
	ИмяТаблицы = СтрЗаменить(ИмяТекущейСтраницы, "Страница_", "");
	
	// Объект ИБ для данного типа шага определяется по родительскому узлу
	ПараметрыДляПоискаОбъекта = СцТ_ГлавнаяФорма.СцТ_ПолучитьПараметрыШагаДляПоискаОбъектаИБ(СцТ_РодительУзла);
	
	Если ПараметрыДляПоискаОбъекта.ТипМД = "РегистрыСведений" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	// Родительский шаг уже сохранен, поэтому для поиска объекта или записи ИБ
	// нужна таблица ссылок сценария, а не локальная таблица ссылок этого шага
	ДанныеДляСравнения = СцТ_ПодготовитьДанныеДляВизуальногоСравненияТаблицНаСервере(
		ПараметрыДляПоискаОбъекта,
		ИмяТаблицы,
		СцТ_ГлавнаяФорма.АдрестаблицыСсылок,
		СцТ_ГлавнаяФорма.ГлобальныеПараметры,
		ТекстСообщения);
	
	Если ДанныеДляСравнения = Неопределено Тогда
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ПоказатьПредупреждение(, ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ДанныеДляСравнения.Вставить("РежимСовместимости838", СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ОткрытьФорму(ПутьКФормам + "ВизуальноеСравнениеТаблиц", ДанныеДляСравнения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуТаблицы(Команда)
	
	// Определение имени таблицы
	ИмяТаблицы = ОпределитьИмяТекущейТаблицы();
	Если ИмяТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелТаблицы = ОпределитьУзелТаблицыВДереве(ИмяТаблицы);
	
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение текущей строки в ТД. Строка заголовка тоже считается
	НомерТекущейСтроки = ОпределитьНомерТекущейСтрокиВТабличномДокументе(ИмяТаблицы);
	
	УзелШапки = ПолучитьУзелШапкиТаблицы(УзелТаблицы);
	
	Если УзелШапки = Неопределено Тогда
		// Нарушена структура дерева
		Возврат;
	КонецЕсли;
	
	// Считаем структуру дерева правильной: сначала строка шапки, затем строки по-порядку
	КоличествоСтрокВТаблице = УзелТаблицы.ПолучитьЭлементы().Количество();
	
	// Необходимо учесть и узел шапки
	Если НомерТекущейСтроки >= КоличествоСтрокВТаблице ИЛИ НомерТекущейСтроки <= 1 Тогда
		// Добавление в конец
		РеальныйНомерСтроки = КоличествоСтрокВТаблице;
		
		УзелНовойСтроки = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			УзелТаблицы,
			"СтрокаТаблицы_" + Формат(РеальныйНомерСтроки, "ЧГ=0"),
			РеальныйНомерСтроки);
		
	Иначе
		// Вставка после текущей строки. НомерТекущейСтроки уже учитывает, что индекс начинается с 0
		// и что первая строка является заголовком
		РеальныйНомерСтроки = НомерТекущейСтроки;
		
		УзелНовойСтроки = УзелТаблицы.ПолучитьЭлементы().Вставить(РеальныйНомерСтроки);
		УзелНовойСтроки.Имя        = "СтрокаТаблицы_" + Формат(РеальныйНомерСтроки, "ЧГ=0");
		УзелНовойСтроки.Значение   = РеальныйНомерСтроки;
		УзелНовойСтроки.Активность = Истина;
		
		// Перенумерация последующих строк
		НомерСтроки = 0;
		Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
			Если УзелДерева.Имя = "ШапкаТаблицы" Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			Если НомерСтроки > РеальныйНомерСтроки Тогда
				УзелДерева.Имя = "СтрокаТаблицы_" + Формат(НомерСтроки, "ЧГ=0");
				УзелНовойСтроки.Значение = НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НомерКолонки = 0;
	Для каждого КолонкаВШапке Из УзелШапки.ПолучитьЭлементы() Цикл
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			УзелНовойСтроки,
			КолонкаВШапке.Имя,
			Неопределено,
			КолонкаВШапке.Синоним,
			КолонкаВШапке.Активность,
			"",
			КолонкаВШапке.Действие);
			
	КонецЦикла;
	
	СцТ_ЗаполнитьТаблицуДанныхЗначениями(УзелТаблицы.ПолучитьИдентификатор(), ИмяТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокуТаблицы(Команда)
	
	// Определение имени таблицы
	ИмяТаблицы = ОпределитьИмяТекущейТаблицы();
	Если ИмяТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелТаблицы = ОпределитьУзелТаблицыВДереве(ИмяТаблицы);
	
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение текущей строки в ТД. Строка заголовка тоже считается
	НомерТекущейСтроки = ОпределитьНомерТекущейСтрокиВТабличномДокументе(ИмяТаблицы);
	
	// Считаем структуру дерева правильной: сначала строка шапки, затем строки по-порядку
	КоличествоСтрокВТаблице = УзелТаблицы.ПолучитьЭлементы().Количество();
	
	Если НомерТекущейСтроки <=1 ИЛИ НомерТекущейСтроки > КоличествоСтрокВТаблице Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана строка для копирования'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = Неопределено;
	ИмяСтрокиИсточника = "СтрокаТаблицы_" + Формат(НомерТекущейСтроки - 1, "ЧГ=0");
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = ИмяСтрокиИсточника Тогда
			СтрокаИсточник = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаИсточник = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не найдена строка для копирования'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	УзелНовойСтроки = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			УзелТаблицы,
			"СтрокаТаблицы_" + Формат(КоличествоСтрокВТаблице, "ЧГ=0"),
			КоличествоСтрокВТаблице);
	
	Для каждого КолонкаИсточник Из СтрокаИсточник.ПолучитьЭлементы() Цикл
		НовыйУзел = УзелНовойСтроки.ПОлучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйУзел, КолонкаИсточник);
		
	КонецЦикла;
	
	СцТ_ЗаполнитьТаблицуДанныхЗначениями(УзелТаблицы.ПолучитьИдентификатор(), ИмяТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоследнююСтроку(Команда)
	
	// Определение имени таблицы
	ИмяТаблицы = ОпределитьИмяТекущейТаблицы();
	Если ИмяТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелТаблицы = ОпределитьУзелТаблицыВДереве(ИмяТаблицы);
	
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение текущей строки в ТД. Строка заголовка тоже считается
	НомерТекущейСтроки = ОпределитьНомерТекущейСтрокиВТабличномДокументе(ИмяТаблицы);
	
	// Считаем структуру дерева правильной: сначала строка шапки, затем строки по-порядку
	КоличествоСтрокВТаблице = УзелТаблицы.ПолучитьЭлементы().Количество();
	
	Если НомерТекущейСтроки <=1 ИЛИ НомерТекущейСтроки > КоличествоСтрокВТаблице Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана строка'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	УдаляемаяСтрока = Неопределено;
	ИмяУдаляемойСтроки = "СтрокаТаблицы_" + Формат(НомерТекущейСтроки - 1, "ЧГ=0");
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = ИмяУдаляемойСтроки Тогда
			УдаляемаяСтрока = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УдаляемаяСтрока = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не найдена удаляемая строка'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	УзелТаблицы.ПолучитьЭлементы().Удалить(УдаляемаяСтрока);
	
	// Изменение индексов у остальных строк
	НомерСтроки = 0;
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = "ШапкаТаблицы" Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки >= (НомерТекущейСтроки - 1) Тогда
			УзелДерева.Имя = "СтрокаТаблицы_" + Формат(НомерСтроки, "ЧГ=0");
			УзелДерева.Значение = НомерСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	СцТ_ЗаполнитьТаблицуДанныхЗначениями(УзелТаблицы.ПолучитьИдентификатор(), ИмяТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	// Определение имени таблицы
	ИмяТаблицы = ОпределитьИмяТекущейТаблицы();
	Если ИмяТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелТаблицы = ОпределитьУзелТаблицыВДереве(ИмяТаблицы);
	
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение текущей строки в ТД. Строка заголовка тоже считается
	НомерТекущейСтроки = ОпределитьНомерТекущейСтрокиВТабличномДокументе(ИмяТаблицы);
	
	// Считаем структуру дерева правильной: сначала строка шапки, затем строки по-порядку
	КоличествоСтрокВТаблице = УзелТаблицы.ПолучитьЭлементы().Количество();
	
	Если НомерТекущейСтроки <=1 ИЛИ НомерТекущейСтроки > КоличествоСтрокВТаблице Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана строка для перемещения'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли; 
	
	Если НомерТекущейСтроки = 2 Тогда
		ТекстПредупреждения = НСтр("ru = 'Это первая строка. Перемещение вверх невозможно'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = Неопределено;
	СтрокаПриемник = Неопределено;
	ИмяСтрокиИсточника = "СтрокаТаблицы_" + Формат(НомерТекущейСтроки - 1, "ЧГ=0");
	ИмяСтрокиПриемника = "СтрокаТаблицы_" + Формат(НомерТекущейСтроки - 2, "ЧГ=0");
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = ИмяСтрокиИсточника Тогда
			СтрокаИсточник = УзелДерева;
		ИначеЕсли УзелДерева.Имя = ИмяСтрокиПриемника Тогда
			СтрокаПриемник = УзелДерева;
		КонецЕсли;
		
		Если СтрокаИсточник <> Неопределено И СтрокаПриемник <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаИсточник = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не найдена перемещаемая строка'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник.Имя = ИмяСтрокиПриемника;
	СтрокаИсточник.Значение = НомерТекущейСтроки - 2;
	
	СтрокаПриемник.Имя      = ИмяСтрокиИсточника;
	СтрокаПриемник.Значение = НомерТекущейСтроки - 1;
	
	УзелТаблицы.ПолучитьЭлементы().Сдвинуть(НомерТекущейСтроки - 1, -1);
	
	СцТ_ЗаполнитьТаблицуДанныхЗначениями(УзелТаблицы.ПолучитьИдентификатор(), ИмяТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	// Определение имени таблицы
	ИмяТаблицы = ОпределитьИмяТекущейТаблицы();
	Если ИмяТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелТаблицы = ОпределитьУзелТаблицыВДереве(ИмяТаблицы);
	
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение текущей строки в ТД. Строка заголовка тоже считается
	НомерТекущейСтроки = ОпределитьНомерТекущейСтрокиВТабличномДокументе(ИмяТаблицы);
	
	// Считаем структуру дерева правильной: сначала строка шапки, затем строки по-порядку
	КоличествоСтрокВТаблице = УзелТаблицы.ПолучитьЭлементы().Количество();
	
	Если НомерТекущейСтроки <=1 ИЛИ НомерТекущейСтроки > КоличествоСтрокВТаблице Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана строка для перемещения'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли; 
	
	Если НомерТекущейСтроки = КоличествоСтрокВТаблице Тогда
		ТекстПредупреждения = НСтр("ru = 'Это последняя строка. Перемещение вниз невозможно'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник = Неопределено;
	СтрокаПриемник = Неопределено;
	ИмяСтрокиИсточника = "СтрокаТаблицы_" + Формат(НомерТекущейСтроки - 1, "ЧГ=0");
	ИмяСтрокиПриемника = "СтрокаТаблицы_" + Формат(НомерТекущейСтроки, "ЧГ=0");
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = ИмяСтрокиИсточника Тогда
			СтрокаИсточник = УзелДерева;
		ИначеЕсли УзелДерева.Имя = ИмяСтрокиПриемника Тогда
			СтрокаПриемник = УзелДерева;
		КонецЕсли;
		
		Если СтрокаИсточник <> Неопределено И СтрокаПриемник <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаИсточник = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не найдена перемещаемая строка'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтрокаИсточник.Имя = ИмяСтрокиПриемника;
	СтрокаИсточник.Значение = НомерТекущейСтроки;
	
	СтрокаПриемник.Имя      = ИмяСтрокиИсточника;
	СтрокаПриемник.Значение = НомерТекущейСтроки - 1;
	
	УзелТаблицы.ПолучитьЭлементы().Сдвинуть(НомерТекущейСтроки - 1, 1);
	
	СцТ_ЗаполнитьТаблицуДанныхЗначениями(УзелТаблицы.ПолучитьИдентификатор(), ИмяТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъектИБ(Команда)
	
	ТекущиеДанныеСтроки = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
	Если ТекущиеДанныеСтроки = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана редактируемая строка'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТипМД_Строки     = "";
	ИмяМД_Строки     = "";
	СинонимМД_Строки = "";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеВыбораОбъектаИБ_ВТаблице", ЭтотОбъект, ТекущиеДанныеСтроки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипМД"           , ТипМД_Строки);
	ПараметрыФормы.Вставить("ИмяМД"           , ИмяМД_Строки);
	ПараметрыФормы.Вставить("СинонимМД"       , СинонимМД_Строки);
	ПараметрыФормы.Вставить("ПутьКФормам"     , ПутьКФормам);
	ПараметрыФормы.Вставить("ВыбиратьОбъектМД", Истина);
	
	
	Если ТекущиеДанныеСтроки.ТипУзла = "Предопределенное" И ЗначениеЗаполнено(ТекущиеДанныеСтроки.Значение) Тогда
		ПараметрыФормы.Вставить("Предопределенное", ТекущиеДанныеСтроки.Значение);
		
	ИначеЕсли ТекущиеДанныеСтроки.ТипУзла = "Ссылка" И ЗначениеЗаполнено(ТекущиеДанныеСтроки.Значение) Тогда
		
		СтруктураПоиска = Новый Структура("СтрокаИдентификатора", ТекущиеДанныеСтроки.Значение);
		НайденныеСтроки = ТаблицаСсылокШага.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НужнаяСтрока = НайденныеСтроки[0];
			ПараметрыФормы.ТипМД     = НужнаяСтрока.ТипМД;
			ПараметрыФормы.ИмяМД     = НужнаяСтрока.ИмяМД;
			ПараметрыФормы.СинонимМД = НужнаяСтрока.СинонимМД;
			
			ПараметрыФормы.Вставить("СтруктураИдентификации", НужнаяСтрока.СтруктураИдентификации);
		Иначе
			ПараметрыФормы.Вставить("ЗначениеПеречисления", ТекущиеДанныеСтроки.Значение);
			
		КонецЕсли;
	КонецЕсли;
	
	ФормаВыбораОбъектаИБ = ОткрытьФорму(ПутьКФормам + "ВыборОбъектовИБ", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
	ФормаВыбораОбъектаИБ.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АктивностьПриИзменении(Элемент)
	
	Если ОА_Активность = 2 Тогда
		ОА_Активность = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПроверочноеНаименование = СцТ_СформироватьОписаниеШага_НаКлиенте(Истина);
	
	НаименованиеШагаИзмененоВручную = (ДШ_Наименование <> ПроверочноеНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("СцТ_ОбновитьЗаголовкиЗакладок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("СцТ_ОбновитьЗаголовкиЗакладок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГруппыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ОА_ЭтоНовый Тогда
		РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Иначе
		РодительУзла = ДанныеШага.ПолучитьРодителя();
	КонецЕсли;
	
	Если РодительУзла <> Неопределено Тогда
		СцТ_ГлавнаяФорма.СцТ_ОткрытьФормуНастройкиШага(РодительУзла, ВызвавшаяФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриОшибкеПриИзменении(Элемент)
	
	УправлениеДоступностьюПеременнойОшибки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитовПриИзменении(Элемент)
	
	ТД = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
	УстановитьТипЗначенияПоля(ТД.ТипУзла, ТД);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТР_ТипЗначенияПриИзменении(Элемент)
	
	ТД = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
	
	Если ПредыдущийТип <> ТД.ТипУзла Тогда
		УстановитьТипЗначенияПоля(ТД.ТипУзла, ТД);
		
		Если ТД.ТипУзла = "Ссылка" И НЕ(ТипЗнч(ТД.Значение) = Тип("Строка") И Лев(ТД.Значение, 4) = "{""#""") Тогда
			// Ссылки еще нет, так как пользователь только еще выбрал тип ссылка
			
			ПараметрыФормыИдентификации = Новый Структура;
			ПараметрыФормыИдентификации.Вставить("ТипМД"                 , "");
			ПараметрыФормыИдентификации.Вставить("ИмяМД"                 , "");
			ПараметрыФормыИдентификации.Вставить("Идентификатор"         , ТД.Значение);
			ПараметрыФормыИдентификации.Вставить("СинонимМД"             , "");
			ПараметрыФормыИдентификации.Вставить("Представление"         , ТД.Представление);
			ПараметрыФормыИдентификации.Вставить("СтруктураИдентификации", Неопределено);
			ПараметрыФормыИдентификации.Вставить("АдресТаблицыКлючей"    , СцТ_ГлавнаяФорма.АдресТаблицыКлючей);
			ПараметрыФормыИдентификации.Вставить("ПоискПоЗапросу"        , Ложь);
			ПараметрыФормыИдентификации.Вставить("ТекстЗапроса"          , "");
			ПараметрыФормыИдентификации.Вставить("СтруктураПараметров"   , СцТ_ГлавнаяФорма.ГлобальныеПараметры);
			
			ПараметрыФормыИдентификации.Вставить("РежимСовместимости838" , СцТ_ГлавнаяФорма.РежимСовместимости838);
			
			
			ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеИзмененияСтруктурыИдентификацииВТаблице", ЭтотОбъект, ТД);
			
			ФормаНастройкиИдентификации = ОткрытьФорму(ПутьКФормам + "КлючиИдентификации",
				ПараметрыФормыИдентификации,
				ЭтотОбъект,,,,
				ОписаниеОповещения);
				
			ФормаНастройкиИдентификации.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
			
			Элементы.ТаблицаРеквизитов.ЗакончитьРедактированиеСтроки(Ложь);
			
		ИначеЕсли ТД.ТипУзла = "УникальныйИдентификатор" Тогда
			ТД.Значение = Строка(Новый УникальныйИдентификатор);
			
		ИначеЕсли ТД.ТипУзла = "Неопределено" Тогда
			ТД.Значение      = "Неопределено";
			ТД.Представление = НСтр("ru = 'Неопределено'");
			
		КонецЕсли;
		
		ПредыдущийТип = ТД.ТипУзла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючЗаписиРегистраПередНачаломИзменения(Элемент, Отказ)
	
	ТД = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
	ПредыдущийТип = ТД.ТипУзла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДШ_СкрытьАвтоописаниеПриИзменении(Элемент)
	
	ОбновитьПользовательскоеОписание();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница = Элементы.Страница_ОписаниеШага Тогда
		ОбновитьПользовательскоеОписание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеТаблицыВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ТекущаяСтраницаСтруктурыДанных = Элементы.СтраницыСтруктурыОбъекта.ТекущаяСтраница;
	
	Если ТекущаяСтраницаСтруктурыДанных = Неопределено
		ИЛИ (ТекущаяСтраницаСтруктурыДанных = Элементы.СтраницыДанных_Реквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейСтраницы = ТекущаяСтраницаСтруктурыДанных.Имя;
	// Имя у страницы формализованное и состоит иЗ префикса "Страница_" и имени таблицы
	
	ИмяТаблицы = СтрЗаменить(ИмяТекущейСтраницы, "Страница_", "");
	
	ИмяОбласти = Область.Имя;
	
	ПозицияКолонки = Найти(ВРег(ИмяОбласти), "C");
	Если ПозицияКолонки < 2 Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки_Строкой = Сред(ИмяОбласти, 2, ПозицияКолонки - 2);
	Попытка
		НомерСтроки = Число(НомерСтроки_Строкой);
	Исключение
		Возврат;
	КонецПопытки;
	
	НомерКолонки_Строкой = Сред(ИмяОбласти, ПозицияКолонки + 1);
	Попытка
		НомерКолонки = Число(НомерКолонки_Строкой);
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НомерСтроки = 1 Тогда
		ТекстПредупреждения = НСтр("ru = 'Редактировать заголовок запрещено'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	РедактируемаяОбласть = Область;
	
	// Получение данных из дерева
	УзелТЧ = Неопределено;
	Для каждого УзелДерева Из ДеревоЗначения.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = "ТабличныеЧасти" Тогда
			УзелТЧ = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелТаблицы = Неопределено;
	Для каждого УзелДерева Из УзелТЧ.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = ИмяТаблицы Тогда
			УзелТаблицы = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеСтрокиТаблицы = "СтрокаТаблицы_" + Формат(НомерСтроки - 1, "ЧГ=0");
	УзелСтроки = Неопределено;
	УзелШапки = Неопределено;
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = НазваниеСтрокиТаблицы Тогда
			УзелСтроки = УзелДерева;
		ИначеЕсли УзелДерева.Имя = "ШапкаТаблицы" Тогда
			УзелШапки = УзелДерева;
		КонецЕсли;
		
		Если УзелСтроки <> Неопределено И УзелШапки <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Если УзелСтроки = Неопределено ИЛИ УзелШапки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Сортируется только шапка, поэтому имя колонки нужно искать по шапке
	УзелКолонкиВШапке = Неопределено;
	Итератор = 0;
	Для каждого УзелДерева Из УзелШапки.ПолучитьЭлементы() Цикл
		Если УзелДерева.Активность Тогда
			Итератор = Итератор + 1;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Итератор = НомерКолонки Тогда
			УзелКолонкиВШапке = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелКолонкиВШапке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелКолонки = Неопределено;
	Для каждого УзелДерева Из УзелСтроки.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = УзелКолонкиВШапке.Имя Тогда
			УзелКолонки = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелКолонки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПФ = Новый Структура;
	ПФ.Вставить("Имя"               , УзелДерева.Имя);
	ПФ.Вставить("Синоним"           , УзелДерева.Синоним);
	ПФ.Вставить("ТипРеквизита"      , УзелДерева.ТипУзла);
	ПФ.Вставить("Значение"          , УзелДерева.Значение);
	ПФ.Вставить("Представление"     , УзелДерева.Представление);
	ПФ.Вставить("МТИ"               , СцТ_ГлавнаяФорма.СцТ_УпаковатьВМассивТаблицуСсылокШага(ТаблицаСсылокШага));
	ПФ.Вставить("АдресТаблицыКлючей", АдресТаблицыКлючей);
	
	ПФ.Вставить("РежимСовместимости838", СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ПФ.Вставить("ФормаОткрытаПодВнешнимУправлением", ФормаОткрытаПодВнешнимУправлением);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("РедактируемыйУзел"  , УзелКолонки);
	ДопПараметры.Вставить("РедактируемаяЯчейка", РедактируемаяОбласть);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеИзмененияДанныхЯчейки", ЭтотОбъект, ДопПараметры);
	
	ФормаРедактированияЯчейки = ОткрытьФорму(ПутьКФормам + "РедактированиеЯчейкиТаблицы", ПФ, ЭтотОбъект,,,, ОписаниеОповещения);
	
	ФормаРедактированияЯчейки.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиОповещений

// Обрабатывает нажатие пользователем кнопки в диалоге вопроса о сохранении
// данных шага перед закрытием формы
//
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииДанныхПриЗакрытииФормы(КодВозврата, ДопДанные) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли КодВозврата = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
		
		// При Отмене ничего не выполняется
		
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос диалога о Сохранении нового шага перед
// отображением хранимых данных
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииНового(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка нажатия "ДА"
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить шаг'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос диалога о Сохранении уже существующего модифицированного шага перед
// отображением хранимых данных
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииСуществующего(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		// Показываем, что хранится
		СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
		
	Иначе
		
		Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
			СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить изменения в шаге'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отображение родительского шага
// Параметры:
// ПриОткрытии - устанавливает признак, что настройка выполняется при открытии
// или (в противном случае) по обработке оповещения
&НаКлиенте
Процедура СцТ_СформироватьПредставлениеРодителя(ПриОткрытии = Истина) Экспорт
	
	Если ОА_ЭтоНовый И ПриОткрытии Тогда
		Если ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя = Неопределено Тогда
			ПредставлениеГруппы = "";
		Иначе
			// Поиск данных родительского узла в дереве по идентификатору шага
			СцТ_РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,
				ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
			
			Если СцТ_РодительУзла = Неопределено Тогда
				ПредставлениеГруппы = "";
			Иначе
				ОтобразитьПредставлениеСуществующегоРодительскогоШага(СцТ_РодительУзла);
			КонецЕсли;
		КонецЕсли;
		
		// Если родительский узел будет изменен у нового шага, то редактируемый шаг уже не имеет смысла,
		// так как неизвестно куда его вставить
		
	ИначеЕсли НЕ ОА_ЭтоНовый Тогда
		Если ДанныеШага = Неопределено Тогда
			ПредставлениеГруппы = "";
		Иначе
			СцТ_РодительУзла = ДанныеШага.ПолучитьРодителя();
			Если СцТ_РодительУзла = Неопределено Тогда
				ПредставлениеГруппы = "";
			Иначе
				ОтобразитьПредставлениеСуществующегоРодительскогоШага(СцТ_РодительУзла);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПредставлениеГруппы = "" Тогда
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы.СтраницаПустойГруппы;
	Иначе
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы.СтраницаЗаполненнойГруппы;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура СцТ_ПослеВыбораОбъектаИБ_ВТаблице(ВозвращенноеЗначение, ТекущиеДанныеСтроки) Экспорт
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		СтруктураДанных = ОбработатьВыборЗначенияВТаблицеНаСервере(ВозвращенноеЗначение);
		
		ТекущиеДанныеСтроки.ТипУзла       = СтруктураДанных.ТипЗначения;
		ТекущиеДанныеСтроки.Значение      = СтруктураДанных.Значение;
		ТекущиеДанныеСтроки.Представление = СтруктураДанных.Представление;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения, которой обрабатывается после закрытия формы
// редактирования структуры идентификации ссылки в таблице реквизитов
&НаКлиенте
Процедура СцТ_ПослеИзмененияСтруктурыИдентификацииВТаблице(Результат, ТекущиеДанныеСтроки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Изменение данных этой формы
	ТекущиеДанныеСтроки.Представление = Результат.Представление;
	ТекущиеДанныеСтроки.Значение      = Результат.Идентификатор;
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьВСтруктуруИдентификацииШагаСведенияОНовойСсылке(
		Результат.Идентификатор,
		ТаблицаСсылокШага,
		Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеНастройкиРеквизитов(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СцТ_ОбновитьОтображениеВСоответствииСНастройкой(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеИзмененияДанныхЯчейки(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЯчейкаТаблицы = ДопПараметры.РедактируемаяЯчейка;
	
	Ячейкатаблицы.Текст = Результат.Представление;
	
	РеадктируемыйУзел = ДопПараметры.РедактируемыйУзел;
	
	РеадктируемыйУзел.Имя           = Результат.Имя;
	РеадктируемыйУзел.Синоним       = Результат.Синоним;
	РеадктируемыйУзел.ТипУзла       = Результат.ТипРеквизита;
	РеадктируемыйУзел.Значение      = Результат.Значение;
	РеадктируемыйУзел.Представление = Результат.Представление;
	
	
	// Обновление таблицы ссылок шага
	ТаблицаСсылокШага.Очистить();
	
	Для каждого СтрИ Из Результат.МТИ Цикл
		
		НоваяСтрока = ТаблицаСсылокШага.Добавить();
		НоваяСтрока.СтрокаИдентификатора = СтрИ.СтрокаИдентификатора;
		НоваяСтрока.Представление        = СтрИ.Представление;
		НоваяСтрока.ТипМД                = СтрИ.ТипМД;
		НоваяСтрока.ИмяМД                = СтрИ.ИмяМД;
		НоваяСтрока.СинонимМД            = СтрИ.СинонимМД;
		НоваяСтрока.ПоискПоЗапросу       = СтрИ.ПоискПоЗапросу;
		НоваяСтрока.ТекстЗапроса         = СтрИ.ТекстЗапроса;
		
		Для каждого СИ Из СтрИ.СтруктураИдентификации Цикл
			
			НовСтр = НоваяСтрока.СтруктураИдентификации.Добавить();
			
			НовСтр.Имя             = СИ.Имя;
			НовСтр.Представление   = СИ.Представление;
			НовСтр.Значение        = СИ.Значение;
			НовСтр.СокрТипЗначения = СИ.СокрТипЗначения;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры



#КонецОбласти


#Область ВспомогательныеПроцедурыИФункции

#Область НастрокаПриЗагрузкеДанныхШага

// Индивидуальная настройка формы для шага
//
&НаСервере
Процедура СцТ_НастроитьФормуДляШага()
	
	ДеревоЗначенияНаСервере = РеквизитФормыВЗначение("ДеревоЗначения");
	
	// Подготовка данных
	СцТ_ОтобразитьТаблицуРеквизитов(ДеревоЗначенияНаСервере);
	
	СцТ_ОтобразитьТабличныеЧасти(ДеревоЗначенияНаСервере);
	
	Если ОА_ТипШага = "Воспроизвести" Тогда
		Элементы.ВариантЗаписи.Видимость = Истина;
		
		Элементы.ВариантЗаписи.СписокВыбора.Добавить("Записать", "Записать");
		Если ДШ_ТипМетаданных = "Документы" Тогда
			Элементы.ВариантЗаписи.СписокВыбора.Добавить("ПровестиНеоперативно", "Провести неоперативно");
			Элементы.ВариантЗаписи.СписокВыбора.Добавить("ПровестиОперативно"  , "Провести оперативно");
			Элементы.ВариантЗаписи.СписокВыбора.Добавить("ОтменаПроведения"    , "Отмена проведения");
		КонецЕсли;
		
		// Заполнение списка выбора варианта записи
		УзелВариантаЗаписи = ДеревоЗначенияНаСервере.Строки.Найти("ВариантЗаписи", "Имя");
		Если УзелВариантаЗаписи = Неопределено ИЛИ ПустаяСтрока(УзелВариантаЗаписи.Значение) Тогда
			ВариантЗаписи = "Записать";
		Иначе
			ВариантЗаписи = УзелВариантаЗаписи.Значение;
		КонецЕсли;
		
			Иначе
		Элементы.ВариантЗаписи.Видимость = Ложь;
	КонецЕсли;
	
	// Заполнение локальной таблицы ссылок
	Если НЕ ПустаяСтрока(АдресТаблицыСсылок) И НЕ ОА_ЭтоНовый Тогда
		
		ИстиннаяТаблицаСсылок = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
		Если ИстиннаяТаблицаСсылок.Колонки.Найти("СинонимМД") = Неопределено Тогда
			ИстиннаяТаблицаСсылок.Колонки.Добавить("СинонимМД", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		Для каждого СтрокаСсылки Из ИстиннаяТаблицаСсылок Цикл
			ИндексВМассиве = СтрокаСсылки.МассивУИШ.Найти(ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
			Если ИндексВМассиве <> Неопределено Тогда
				// Копируем описание ссылки
				СсылкаВШаге = ТаблицаСсылокШага.Добавить();
				СсылкаВШаге.СтрокаИдентификатора = СтрокаСсылки.Ссылка;
				
				СсылкаВШаге.Представление  = СтрокаСсылки.Представление;
				СсылкаВШаге.ТипМД          = СтрокаСсылки.ТипМД;
				СсылкаВШаге.ИмяМД          = СтрокаСсылки.ИмяМД;
				СсылкаВШаге.СинонимМД      = СтрокаСсылки.СинонимМД;
				СсылкаВШаге.ПоискПоЗапросу = СтрокаСсылки.ПоискПоЗапросу;
				СсылкаВШаге.ТекстЗапроса   = СтрокаСсылки.ТекстЗапроса;
				
				Если ПустаяСтрока(СсылкаВШаге.СинонимМД) Тогда
					Попытка
						СсылкаВШаге.СинонимМД = Метаданные[СсылкаВШаге.ТипМД][СсылкаВШаге.ИмяМД].Синоним;
					Исключение
						СсылкаВШаге.СинонимМД = СсылкаВШаге.ИмяМД;
					КонецПопытки;
				КонецЕсли;
				
				Для каждого КлючИдентификации Из СтрокаСсылки.СтруктураИдентификации Цикл
					НовыйКлюч = СсылкаВШаге.СтруктураИдентификации.Добавить();
					НовыйКлюч.Имя             = КлючИдентификации.Имя;
					НовыйКлюч.Представление   = КлючИдентификации.Представление;
					НовыйКлюч.Значение        = КлючИдентификации.Значение;
					НовыйКлюч.СокрТипЗначения = КлючИдентификации.СокрТипЗначения;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если таблицы ссылок еще не существует, то и описания ссылок еще нет
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страница_ДанныеШага;
	Элементы.СтраницыСтруктурыОбъекта.ТекущаяСтраница = Элементы.СтраницыДанных_Реквизиты;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ОтобразитьТаблицуРеквизитов(ДеревоДанных)
	
	СписокВыбора = Элементы.ТР_ТипЗначения.СписокВыбора;
	
	СписокВыбора.Добавить("Число"                  , НСтр("ru = 'Число'"));
	СписокВыбора.Добавить("Строка"                 , НСтр("ru = 'Строка'"));
	СписокВыбора.Добавить("Дата"                   , НСтр("ru = 'Дата'"));
	СписокВыбора.Добавить("Булево"                 , НСтр("ru = 'Булево'"));
	СписокВыбора.Добавить("Неопределено"           , НСтр("ru = 'Неопределено'"));
	СписокВыбора.Добавить("Предопределенное"       , НСтр("ru = 'Предопределенное значение'"));
	СписокВыбора.Добавить("Ссылка"                 , НСтр("ru = 'Ссылка (Идентификатор)'"));
	СписокВыбора.Добавить("УникальныйИдентификатор", НСтр("ru = 'Уникальный идентификатор'"));
	СписокВыбора.Добавить("СистемноеПеречисление"  , НСтр("ru = 'Системное перечисление'"));
	СписокВыбора.Добавить("ХранилищеЗначения"      , НСтр("ru = 'Хранилище значения'"));
	СписокВыбора.Добавить("Параметр"               , НСтр("ru = 'Параметр'"));
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	
	УзелРеквизитов = ДеревоДанных.Строки.Найти("Реквизиты", "Имя");
	
	Если УзелРеквизитов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеквизитов.Очистить();
	Для каждого СтрокаРеквизита Из УзелРеквизитов.Строки Цикл
		
		СтрокаРеквизитаФормы = ТаблицаРеквизитов.Добавить();
		СтрокаРеквизитаФормы.Имя           = СтрокаРеквизита.Имя;
		СтрокаРеквизитаФормы.Синоним       = СтрокаРеквизита.Синоним;
		
		СтрокаРеквизитаФормы.Значение      = СтрокаРеквизита.Значение;
		СтрокаРеквизитаФормы.Представление = СтрокаРеквизита.Представление;
		СтрокаРеквизитаФормы.Действие      = СтрокаРеквизита.Действие;
		СтрокаРеквизитаФормы.Активность    = СтрокаРеквизита.Активность;
		
		ТипУзла = СтрокаРеквизита.ТипУзла;
		
		Если  ТипУзла <> "Число"
			И ТипУзла <> "Строка"
			И ТипУзла <> "Дата"
			И ТипУзла <> "Булево"
			И ТипУзла <> "Неопределено"
			И ТипУзла <> "Предопределенное"
			И ТипУзла <> "Ссылка"
			И ТипУзла <> "УникальныйИдентификатор"
			И ТипУзла <> "СистемноеПеречисление"
			И ТипУзла <> "ХранилищеЗначения"
			И ТипУзла <> "Параметр" Тогда
			
			// Это старый тип хранения данных.
			// Если тип не указан, то будет попытка вычислить истинное значение по старому типу
			// Если пользователь открыл объект для редактирования, то он может сам указать тип
			ТипУзла = "";
			
		КонецЕсли;
		
		Если ТипУзла = "" И СтрокаРеквизитаФормы.Значение = "Неопределено" Тогда
			ТипУзла = "Неопределено";
		КонецЕсли;
		
		СтрокаРеквизитаФормы.ТипУзла       = ТипУзла;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготовка к отображению табличных частей объекта по данным дерева с данными
//
&НаСервере
Процедура СцТ_ОтобразитьТабличныеЧасти(ДеревоЗначения);
	
	УзелТабличныхЧастей = ДеревоЗначения.Строки.Найти("ТабличныеЧасти", "Имя", Истина);
	
	Если УзелТабличныхЧастей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Создание табличных документов, соответствующих табличным частям
	МассивНовыхРеквизитов = Новый Массив;
	
	Для каждого УзелТабличнойЧасти Из УзелТабличныхЧастей.Строки Цикл
		
		Если Элементы.Найти("Страница" + УзелТабличнойЧасти.Имя) = Неопределено Тогда
			// Добавление таблиц
			ЭтоНоваяТаблица = Истина;
			МассивНовыхРеквизитов.Добавить(
				Новый РеквизитФормы(
					"СцТ_Таблица_" + УзелТабличнойЧасти.Имя,
					Новый ОписаниеТипов("ТабличныйДокумент"),,
					УзелТабличнойЧасти.Синоним,
					Истина));
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивНовыхРеквизитов);
	
	// Отображение таблицы на форме
	Для каждого УзелТабличнойЧасти Из УзелТабличныхЧастей.Строки Цикл
		СцТ_ОтобразитьТаблицуНаФорме(УзелТабличнойЧасти, Элементы.СтраницыСтруктурыОбъекта);
		СцТ_ЗаполнитьТаблицуЗначениями(УзелТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

// Заполнение таблицы значениями по данным дерева
// 
// Параметры
// УзелТаблицы - узел дерева данных со значениями для заполнения
&НаСервере
Процедура СцТ_ЗаполнитьТаблицуЗначениями(УзелТаблицы)
	
	Попытка
		НужныйТД = ЭтотОбъект["СцТ_Таблица_" + УзелТаблицы.Имя];
	Исключение
		Возврат;
	КонецПопытки;
	
	НужныйТД.Очистить();
	
	// Заполнение шапки
	СписокКолонок = Новый СписокЗначений;
	
	// Добавление колонок таблицы
	УзелШапкиТаблицы = УзелТаблицы.Строки.Найти("ШапкаТаблицы", "Имя", Истина);
	
	Если УзелШапкиТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Вывод ячеек шапки
	НомерКолонки = 1;
	Для каждого СтрокаРеквизита Из УзелШапкиТаблицы.Строки Цикл
		Если СтрокаРеквизита.Активность Тогда
			СписокКолонок.Добавить(СтрокаРеквизита.Имя, СтрокаРеквизита.Синоним);
			
			АдресЯчейки = "R1C%2";
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(НомерКолонки, "ЧГ=0"));
			
			Ячейка = НужныйТД.Область(АдресЯчейки);
			Ячейка.Текст = СтрокаРеквизита.Синоним;
			НомерКолонки = НомерКолонки + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Оформление колонок
	Если НомерКолонки > 1 Тогда
		
		ШиринаКолонки = Окр(160/НомерКолонки, 0);
		
		Если ШиринаКолонки < 14 Тогда
			ШиринаКолонки = 14;
		КонецЕсли;
		
		Для П=1 По НомерКолонки - 1 Цикл
			АдресЯчейки = "C%2";
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(П, "ЧГ=0"));
			
			Ячейка = НужныйТД.Область(АдресЯчейки);
			
			Ячейка.ШиринаКолонки = ШиринаКолонки;
			
			Ячейка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
			Ячейка.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			
			АдресЯчейки = "R1C%2";
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(П, "ЧГ=0"));
			Ячейка = НужныйТД.Область(АдресЯчейки);
			
			Ячейка.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3); 
			Ячейка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3);
			
			Ячейка.ЦветФона = Новый Цвет(215,215,215);
			
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение значениями оставшейся части таблицы
	НомерСтроки = 2;
	Для каждого УзелСтроки Из УзелТаблицы.Строки Цикл
		
		Если УзелСтроки.Имя = "ШапкаТаблицы" Тогда
			Продолжить;
		КонецЕсли;
		
		НомерКолонки = 1;
		Для каждого ЭлементСписка Из СписокКолонок Цикл
			// Цикл выполняется по списку колонок, который содержит только отображаемые колонки
			// Отсортированные в нужном порядке
			
			ТекстЯчейки = "";
			УзелКолонки = УзелСтроки.Строки.Найти(ЭлементСписка.Значение, "Имя");
			Если УзелКолонки <> Неопределено Тогда
				АдресЯчейки = "R%1C%2";
				АдресЯчейки = СтрЗаменить(АдресЯчейки, "%1", Формат(НомерСтроки , "ЧГ=0"));
				АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(НомерКолонки, "ЧГ=0"));
				
				Ячейка = НужныйТД.Область(АдресЯчейки);
				
				Ячейка.Текст = УзелКолонки.Представление;
				Ячейка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
				Ячейка.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
				
			КонецЕсли;
			// Номер колонки нужно увеличить независимо от того,
			// Нашли или нет текущий узел - иначе собъются колонки
			НомерКолонки = НомерКолонки + 1;
			
		КонецЦикла;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла; 
	
КонецПроцедуры

// Отображение на форме таблицы
//
// Параметры
//	УзелТаблицы - узел дерева данных с описанием таблицы
//	РодительЭлементаФормы - элемент формы, на котором нужно отобразить таблицу
&НаСервере
Процедура СцТ_ОтобразитьТаблицуНаФорме(УзелТаблицы, РодительЭлементаФормы)
	
	ИмяСтраницы     = "Страница_" + УзелТаблицы.Имя;
	ИмяТаблицы      = "СцТ_Таблица_" + УзелТаблицы.Имя;
	СтраницаТаблицы = Элементы.Найти(ИмяСтраницы);
	
	Если СтраницаТаблицы <> Неопределено Тогда
		
		ЭтоНоваяТаблица   = Ложь;
		ЭлементТД = Элементы[ИмяТаблицы];
		СтраницаТаблицы.Видимость = УзелТаблицы.Активность;
		
	Иначе
		
		// Создание страницы для таблицы
		ЭтоНоваяТаблица = Истина;
		СтраницаДляТаблицы  = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), РодительЭлементаФормы);
		СтраницаДляТаблицы.Вид       = ВидГруппыФормы.Страница;
		СтраницаДляТаблицы.Заголовок = УзелТаблицы.Синоним;
		
		СтраницаДляТаблицы.Видимость = УзелТаблицы.Активность;
		
		ИмяКомПанели = "СцТ_КомПанель_" + УзелТаблицы.Имя;
		ЭлементКомПанель = Элементы.Добавить(ИмяКомПанели, Тип("ГруппаФормы"), СтраницаДляТаблицы);
		ЭлементКомПанель.Вид = ВидГруппыФормы.КоманднаяПанель;
		
		// Создание ТД на странице
		ЭлементТД = Элементы.Добавить(ИмяТаблицы, Тип("ПолеФормы"), СтраницаДляТаблицы);
		ЭлементТД.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
		ЭлементТД.ПутьКДанным = ИмяТаблицы;
		ЭлементТД.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		ЭлементТД.ОтображатьЗаголовки           = Истина;
		ЭлементТД.Видимость                     = Истина;
		//ЭлементТД.Редактирование                = Ложь;
		//ЭлементТД.ТолькоПросмотр                = Истина;
		//ЭлементТД.РазрешитьНачалоПеретаскивания = Ложь;
		//ЭлементТД.РазрешитьПеретаскивание       = Ложь;
		//ЭлементТД.Защита = Истина;
		
		ЭлементТД.УстановитьДействие("Выбор", "ДанныеТаблицыВыбор");
	
		// Добавление кнопок в командной панели
		
		// Кнопка визуального сравнения
		Если НЕ ФормаОткрытаПодВнешнимУправлением Тогда
		
			КнопкаСравнитьВизуально = Элементы.Добавить(
				"СцТ_" + УзелТаблицы.Имя + "СравнитьВизуально",
				Тип("КнопкаФормы"),
				ЭлементКомПанель);
			
			КнопкаСравнитьВизуально.ИмяКоманды = "СравнитьТаблицуВизуально";
		КонецЕсли;
		
		// Кнопка Добавить
		КнопкаДобавленияСтроки =  Элементы.Добавить(
			"СцТ_" + УзелТаблицы.Имя + "ДобавитьСтроку",
			Тип("КнопкаФормы"),
			ЭлементКомПанель);
		
		КнопкаДобавленияСтроки.ИмяКоманды = "ДобавитьСтрокуТаблицы";
		
		// Кнопка Копировать
		КнопкаДобавленияСтроки =  Элементы.Добавить(
			"СцТ_" + УзелТаблицы.Имя + "СкопироватьСтроку",
			Тип("КнопкаФормы"),
			ЭлементКомПанель);
		
		КнопкаДобавленияСтроки.ИмяКоманды = "СкопироватьСтрокуТаблицы";
		
		// Кнопка Удалить
		КнопкаУдаленияСтроки =  Элементы.Добавить(
			"СцТ_" + УзелТаблицы.Имя + "УдалитьПоследнююСтроку",
			Тип("КнопкаФормы"),
			ЭлементКомПанель);
		
		КнопкаУдаленияСтроки.ИмяКоманды = "УдалитьПоследнююСтроку";
		
		// Кнопка переместить наверх
		КнопкаУдаленияСтроки =  Элементы.Добавить(
			"СцТ_" + УзелТаблицы.Имя + "ПереместитьВверх",
			Тип("КнопкаФормы"),
			ЭлементКомПанель);
		
		КнопкаУдаленияСтроки.ИмяКоманды = "ПереместитьВверх";
		
		// Кнопка Переместить вниз
		КнопкаУдаленияСтроки =  Элементы.Добавить(
			"СцТ_" + УзелТаблицы.Имя + "ПереместитьВНиз",
			Тип("КнопкаФормы"),
			ЭлементКомПанель);
		
		КнопкаУдаленияСтроки.ИмяКоманды = "ПереместитьВНиз";
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура СцТ_ЗаполнитьДействиеШагаПриОшибке(ЭтотОбъект)
	
	СписокВыбора = Элементы.ДействиеПриОшибке.СписокВыбора;
	СписокВыбора.Добавить("Остановить", НСтр("ru = 'Остановить выполнение'"));
	СписокВыбора.Добавить("Продолжить", НСтр("ru = 'Продолжить выполнение'"));
	
	// Параметры действий при ошибке находятся в корне
	ДействиеПриОшибке = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ДействиеПриОшибке",
		"Остановить");
		
	ИмяПеременнойРеузльтатаВыполнения = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ПеременнаяОшибки",
		"");
	
	УправлениеДоступностьюПеременнойОшибки(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область СохранениеШагаВСценарии

// Сохранение реализовано в виде функции, т.к. потребуется
// ее выполнение в обработчике ПередЗакрытием
//
&НаКлиенте
Функция СцТ_ПрименитьИзменения_НаКлиенте() Экспорт
	
	// Проверка, что владелец формы еще не закрыт
	Если НЕ ВладелецФормы.Открыта() Тогда
		ТекстСообщения = НСтр("ru = 'Форма с деревом шагов уже закрыта. Применить изменения невозможно'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка правильности данных
	Отказ = Ложь;
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	ОбновитьПользовательскоеОписание();
	
	Если ПустаяСтрока(ДШ_Наименование) Тогда
		
		СцТ_СообщитьПользователю(НСтр("ru = 'Не заполнено наименование.'"),
			Отказ,
			"ДШ_Наименование");
	КонецЕсли;
	
	ОбновитьПользовательскоеОписание();
	
	// Проверка индивидуальных настроек шага и заполнение ДереваЗначения
	СцТ_ПодготовитьДанныеШагаДляСохранения_НаКлиенте(Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВозвращаемаяСтруктура = СцТ_СформироватьСтруктуруданныхШага_НаКлиенте();
	
	Если ОА_ЭтоНовый Тогда
		
		ДанныеШага = СцТ_ГлавнаяФорма.СцТ_СохранитьНовыйШаг(ВызвавшаяФорма, ВозвращаемаяСтруктура);
		
		ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
		ОА_НомерШага      = ДанныеШага.НомерШага;
		ОА_ЭтоНовый       = Ложь;
		
	Иначе
		СцТ_ГлавнаяФорма.СцТ_ПрименитьИзмененияВШаге(ВызвавшаяФорма, ДанныеШага, ВозвращаемаяСтруктура);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Заполнение дерева значения данными формы.
// Проверка корректности специфических для этого шага данных
&НаКлиенте
Процедура СцТ_ПодготовитьДанныеШагаДляСохранения_НаКлиенте(Отказ)
	
	// Проверки
	
	// Очищать дерево значения нельзя, так как оно содержит все сделанные изменения
	// Таблица реквизитов изменяется на форме, поэтому ее нужно сохранить
	// А табличные части редактируются непосредственно в дереве
	
	// Сохранение таблицы реквизитов
	УзелРеквизитов = Неопределено;
	Для каждого УзелДерева Из ДеревоЗначения.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = "Реквизиты" Тогда
			УзелРеквизитов = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелРеквизитов = Неопределено Тогда
		УзелРеквизитов = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"Реквизиты",
			"Реквизиты");
	КонецЕсли;
	
	УзелРеквизитов.ПолучитьЭлементы().Очистить();
	
	Для каждого СтрРеквизита Из ТаблицаРеквизитов Цикл
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			УзелРеквизитов,
			СтрРеквизита.Имя,
			СтрРеквизита.Значение,
			СтрРеквизита.Синоним,
			СтрРеквизита.Активность,
			СтрРеквизита.Представление,
			СтрРеквизита.Действие,
			"",
			СтрРеквизита.ТипУзла);
		
	КонецЦикла;
	
	Если НаименованиеШагаИзмененоВручную Тогда
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ИСТЗ_НаименованиеРучное",
			Истина);
	Иначе
		НайденныйУзел = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(
			ДеревоЗначения,
			"Имя",
			"ИСТЗ_НаименованиеРучное");
			
		Если НайденныйУзел <> Неопределено Тогда
			ДеревоЗначения.ПолучитьЭлементы().Удалить(НайденныйУзел);
		КонецЕсли;
	КонецЕсли;
	
	Если ОА_ТипШага = "Воспроизвести" Тогда
		
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ВариантЗаписи",
			ВариантЗаписи);
		
	КонецЕсли;
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДействиеПриОшибке",
		ДействиеПриОшибке);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ПеременнаяОшибки",
		ИмяПеременнойРеузльтатаВыполнения);
	
КонецПроцедуры

// Свертка данных шага в структуру
// и подготовка возвращаемой структуры отредактированного шага
&НаКлиенте
Функция СцТ_СформироватьСтруктуруданныхШага_НаКлиенте()
	
	// СДШ - структура данных шага
	СДШ = Новый Структура;
	
	СДШ.Вставить("ИдентификаторШага"           , ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
	СДШ.Вставить("НаименованиеШага"            , ДШ_Наименование);
	СДШ.Вставить("ТипМетаданных"               , ДШ_ТипМетаданных);
	СДШ.Вставить("ИмяМетаданных"               , ДШ_ИмяМетаданных);
	СДШ.Вставить("Автоописание"                , ДШ_Автоописание);
	СДШ.Вставить("Описание"                    , ДШ_Описание);
	СДШ.Вставить("СкрытьАвтоописание"          , ДШ_СкрытьАвтоописание);
	СДШ.Вставить("ОбСсылка"                    , ДШ_ОбСсылка);
	СДШ.Вставить("ПредставлениеОбъекта"        , ДШ_ПредставлениеОбъекта);
	СДШ.Вставить("ВыполнитьВручную"            , ДШ_ВыполнитьВручную);
	СДШ.Вставить("Комментарий"                 , ДШ_Комментарий);
	СДШ.Вставить("ИмяФормы"                    , ДШ_ИмяФормы);
	СДШ.Вставить("ПредставлениеИмениМетаданных", ДШ_ПредставлениеИмениМетаданных);
	СДШ.Вставить("ЗаголовокФормы"              , ДШ_ЗаголовокФормы);
	СДШ.Вставить("ДанныеКартинки"              , ДШ_ДанныеКартинки);
	СДШ.Вставить("ДеревоЗначения"              , СцТ_ГлавнаяФорма.СцТ_ДеревоформыВДеревоСтруктур(ДеревоЗначения));
	
	//Сначала из таблицы ссылок нужно удалить неиспользованные ссылки
	СписокИспользуемыхСсылокВШаге = Новый СписокЗначений;
	СцТ_ГлавнаяФорма.ИтерационноеЗаполнениеСпискаСсылок(ДеревоЗначения, СписокИспользуемыхСсылокВШаге);
	Если НЕ ПустаяСтрока(ДШ_ОбСсылка) И СписокИспользуемыхСсылокВШаге.НайтиПоЗначению(ДШ_ОбСсылка) = Неопределено Тогда
		СписокИспользуемыхСсылокВШаге.Добавить(ДШ_ОбСсылка);
	КонецЕсли;
	
	Если СписокИспользуемыхСсылокВШаге.Количество() = 0 Тогда
		ТаблицаСсылокШага.Очистить();
	Иначе
		КоличествоСтрок = ТаблицаСсылокШага.Количество();
		// Таблицу нужно обходить только сначала!
		Если КоличествоСтрок > 0 Тогда
			Итератор = 0;
			Пока Итератор < КоличествоСтрок Цикл
				СтрокаТаблицы = ТаблицаСсылокШага[Итератор];
				ЭлементСписка = СписокИспользуемыхСсылокВШаге.НайтиПоЗначению(СтрокаТаблицы.СтрокаИдентификатора);
				Если ЭлементСписка = Неопределено ИЛИ ЭлементСписка.Пометка Тогда
					// Пометка в списке отвечает за дублирующие строки
					ТаблицаСсылокШага.Удалить(Итератор);
					КоличествоСтрок = КоличествоСтрок - 1;
				Иначе
					Итератор = Итератор + 1;
					// Переход на следующую строку
					ЭлементСписка.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// МТИ - массив таблицы идентификации
	МТИ = СцТ_ГлавнаяФорма.СцТ_УпаковатьВМассивТаблицуСсылокШага(ТаблицаСсылокШага);
	
	// ВСД - возвращаемая структура данных
	ВСД = Новый Структура;
	ВСД.Вставить("ОписательПоложенияШагаВДереве", ОА_ОписательПоложенияШагаВДереве);
	ВСД.Вставить("Наименование"                 , ДШ_Наименование);
	ВСД.Вставить("Активность"                   , ОА_Активность);
	ВСД.Вставить("СтруктураДанныхШага"          , СДШ);
	ВСД.Вставить("ЭтоНовый"                     , ОА_ЭтоНовый);
	ВСД.Вставить("ТипШага"                      , ОА_ТипШага);
	ВСД.Вставить("СсылкиШага"                   , МТИ);
	
	Возврат ВСД;
	
КонецФункции



#КонецОбласти

#Область ФормированеОписанийИНаименований

// Формирование описания шага на клиенте
&НаКлиенте
Функция СцТ_СформироватьОписаниеШага_НаКлиенте(Краткое = Ложь)
	
	Если ФормаОткрытаПодВнешнимУправлением Тогда
		Если Краткое Тогда
			ВозвращаемоеОписание = ДШ_Наименование;
		Иначе
			ВозвращаемоеОписание = ДШ_Автоописание;
		КонецЕсли;
		
	Иначе
		Если Краткое Тогда
			Если ОА_ТипШага = "Воспроизвести" Тогда
				ВозвращаемоеОписание = СцТ_ГлавнаяФорма.СцТ_ПолучитьОписаниеШага_Воспроизвести(Неопределено, Истина, СцТ_РодительУзла);
			Иначе
				ВозвращаемоеОписание = СцТ_ГлавнаяФорма.СцТ_ПолучитьОписаниеШага_СравнитьСЭталоном(Неопределено, Истина, СцТ_РодительУзла);
			КонецЕсли;
			
		Иначе
				
			Если СцТ_РодительУзла <> Неопределено Тогда
				ТипМД = СцТ_РодительУзла.ТипМетаданных;
				СинонимМД = СцТ_РодительУзла.ПредставлениеИмениМетаданных;
			Иначе
				ТипМД     = "";
				СинонимМД = "";
			КонецЕсли;
			
			ВозвращаемоеОписание = СцТ_СформироватьОписаниеШага_НаСервере(ТипМД, СинонимМД);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеОписание;
	
КонецФункции

&НаСервере
Функция СцТ_СформироватьОписаниеШага_НаСервере(ТипМД, СинонимМД)
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	ДеревоЗначенийШага = РеквизитФормыВЗначение("ДеревоЗначения");
	
	Если ОА_ТипШага = "Воспроизвести" Тогда
		
		ВозвращаемоеЗначение = МодульОбъекта.СцТ_ПолучитьОписаниеШага_Воспроизвести_НаСервере(
			ТипМД,
			СинонимМД,
			ДеревоЗначенийШага);
		
	Иначе
		
		ВозвращаемоеЗначение = МодульОбъекта.СцТ_ПолучитьОписаниеШага_СравнитьСЭталоном_НаСервере(
			ТипМД,
			СинонимМД,
			ДеревоЗначенийШага);
			
	КонецЕсли;
		
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ОбновитьНаименование_НаКлиенте(Принудительно = Ложь)
	
	Если НЕ НаименованиеШагаИзмененоВручную ИЛИ Принудительно Тогда
		ДШ_Наименование = СцТ_СформироватьОписаниеШага_НаКлиенте(Истина);
	КонецЕсли;
	
	Если Принудительно Тогда
		НаименованиеШагаИзмененоВручную = Ложь;
		Модифицированность = Истина;
		// В остальных случаях менять модифицированность не нужно,
		// так как ее должно изменить изменение другого элемента формы
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСДеревомЗначения

// Возвращает значение заданного поля в дереве данных
//
// Параметры
//	ДерЗнач              - дерево с данными в котором ведется поиск
//	ИмяПараметра         - имя искомого параметра
//	ЕслиНеНайдено        - что вернуть, если значение не найдено
//	ВозвращаемыйРеквизит - имя колонки, которую нужно вернуть
//	Рекурсивно           - признак рекурсии
// Возвращаемое значение - значение нужного поля найденного узла
&НаСервереБезКонтекста
Функция СцТ_ЗначениеВДереве(
	ДерЗнач,
	ИмяПараметра,
	ЕслиНеНайдено = Неопределено,
	ВозвращаемыйРеквизит = "Значение",
	Рекурсивно = Истина)
	
	УзелЗначения = СцТ_НайтиУзелДереваФормы(ДерЗнач, "Имя", ИмяПараметра, Рекурсивно);
	Если УзелЗначения = Неопределено Тогда
		Возврат ЕслиНеНайдено;
	Иначе
		Возврат УзелЗначения[ВозвращаемыйРеквизит];
	КонецЕсли;
	
КонецФункции

// Поиск нужного узла в дереве данных
//
// Параметры
//	ДеревоФормы       - дерево, в котором ведется поиск
//	Реквизит          - имя поля в котором ведется поиск
//	ЗначениеРеквизита - значение в поле
//	Рекурсивно        - признак рекурсивного поиска
// Возвращаемое значение - найденный узел
&НаСервереБезКонтекста
Функция СцТ_НайтиУзелДереваФормы(
	ДеревоФормы,
	Реквизит,
	ЗначениеРеквизита,
	Рекурсивно = Ложь)
	
	Если ДеревоФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Узел Из ДеревоФормы.ПолучитьЭлементы() Цикл
		Если Узел[Реквизит] = ЗначениеРеквизита Тогда
			Возврат Узел;
		КонецЕсли;
		Если Рекурсивно Тогда
			НайденыйУзел = СцТ_НайтиУзелДереваФормы(Узел, Реквизит, ЗначениеРеквизита, Истина);
			Если НайденыйУзел <> Неопределено Тогда
				Возврат НайденыйУзел;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Заполнение дерева значения данными из структуры
//
// параметры
//	ДеревоФормы - заполняемое дерево
//	ДеревоСтруктур - структура с данными
&НаСервереБезКонтекста
Процедура СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоФормы, ДеревоСтруктур)
	
	СтрокиДереваФормы = ДеревоФормы.ПолучитьЭлементы();
	Для каждого СтрокаДереваСтруктур Из ДеревоСтруктур.ИСТЗ_Строки Цикл
		СтрокаДереваФормы = СтрокиДереваФормы.Добавить();
		Для каждого КлючЗначение Из СтрокаДереваСтруктур Цикл
			Если КлючЗначение.Ключ <> "ИСТЗ_Строки" Тогда
				СтрокаДереваФормы[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(СтрокаДереваФормы, СтрокаДереваСтруктур);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПреобразоватьЗначенияВДереве(ВеткаДерева, ДляОтображения = Истина)
	
	Для каждого СтрокаДерева Из ВеткаДерева.Строки Цикл
		
		Если ДляОтображения Тогда
			СтрокаДерева.Значение = ЗначениеИзСтрокиВнутр(СтрокаДерева.Значение);
		Иначе
			СтрокаДерева.Значение = ЗначениеВСтрокуВнутр(СтрокаДерева.Значение);
		КонецЕсли;
		
		ПреобразоватьЗначенияВДереве(СтрокаДерева, ДляОтображения);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Обновление картинок на закладках
// Вызывается посредством обработки ожидания, чтобы форма нормально закрывалась после редактирования
&НаКлиенте
Процедура СцТ_ОбновитьЗаголовкиЗакладок()
	
	Элементы.Страница_РедактируемоеОписание.Картинка = ?(
		ПустаяСтрока(ДШ_Описание),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Элементы.Страница_Комментарий.Картинка = ?(
		ПустаяСтрока(ДШ_Комментарий),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
КонецПроцедуры


// Формирование представление существующего шага
// параметры
// РодительскийШаг - указатель на данные родительского шага.
// НЕ может быть Неопределено
&НаКлиенте
Процедура ОтобразитьПредставлениеСуществующегоРодительскогоШага(РодительскийШаг)
	
	ПредставлениеГруппы = НСтр("ru = 'Шаг №%1 ""%2""'");
	ПредставлениеГруппы = СтрЗаменить(
		ПредставлениеГруппы,
		"%1",
		Формат(РодительскийШаг.НомерШага, "ЧГ=0"));
	
	ПредставлениеГруппы = СтрЗаменить(
		ПредставлениеГруппы,
		"%2",
		РодительскийШаг.Наименование);
	
КонецПроцедуры

// Вывод сообщения пользователю
//
// Параметры
// ТекстСообщения - отображаемый текст
// Отказ - ссылка на переменную отказ в вызываемой процедуре
// ПолеДанных - поле, которое должно получить фокус
&НаКлиенте
Процедура СцТ_СообщитьПользователю(ТекстСообщения, Отказ = Неопределено, ПолеДанных = "")
	
	Отказ = Истина;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Поле  = ПолеДанных;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюПеременнойОшибки(УпрФорма)
	
	Если УпрФорма.ДействиеПриОшибке = "Остановить" Тогда
		УпрФорма.Элементы.СтраницыПеременнойОшибки.ТекущаяСтраница = УпрФорма.Элементы.СтраницыПеременнойОшибки_Пустая;
	Иначе
		УпрФорма.Элементы.СтраницыПеременнойОшибки.ТекущаяСтраница = УпрФорма.Элементы.СтраницыПеременнойОшибки_Заполненная;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыборЗначенияВТаблицеНаСервере(ВозвращеннаяСтруктураДанных)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	ОписаниеВыбранногоЗначения = МодульОбработки.СцТ_ПолучитьОписаниеЗначения(
		ВозвращеннаяСтруктураДанных.ВыбранноеЗначение);
		
	Если ОписаниеВыбранногоЗначения.ТипЗначения = "Ссылка" Тогда
		// Нужно добавить структуру идентификации в таблицу ссылок шага
		
		// МСИ - массив структур идентификации
		МСИ = МодульОбработки.СцТ_ПреобразоватьДанныеФормыТаблицыСсылокШагаВСтруктуру(ТаблицаСсылокШага);
		
		МодульОбработки.СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(
			ВозвращеннаяСтруктураДанных.ВыбранноеЗначение,
			МСИ,
			ВозвращеннаяСтруктураДанных.ТипМД,
			ВозвращеннаяСтруктураДанных.ИмяМД,
			ВозвращеннаяСтруктураДанных.СинонимМД,
			АдресТаблицыКлючей,
			ОписаниеВыбранногоЗначения.ВнутрЗначение);
			
		// Обратное преобразование МСИ в таблицу ссылок шага
		МодульОбработки.СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(ТаблицаСсылокШага, МСИ);
		
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ТипЗначения"  , ОписаниеВыбранногоЗначения.ТипЗначения);
	СтруктураОтвета.Вставить("Значение"     , ОписаниеВыбранногоЗначения.ВнутрЗначение);
	СтруктураОтвета.Вставить("Представление", ОписаниеВыбранногоЗначения.Представление);
	
	Возврат СтруктураОтвета;
	
	
	
	
	//Если ВозвращеннаяСтруктураДанных.ТипМД = "Перечисления" Тогда
	//	
	//	МассивЗначений = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Метаданные().ЗначенияПеречисления;
	//	НужноеИмя = "";
	//	Для каждого ЗначениеПеречисления Из МассивЗначений ЦИкл
	//		ПолноеИмяПредопределенного = "Перечисление." + ВозвращеннаяСтруктураДанных.ИмяМД + "." + ЗначениеПеречисления.Имя;
	//		Если ПредопределенноеЗначение(ПолноеИмяПредопределенного) = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение Тогда
	//			НужноеИмя = ПолноеИмяПредопределенного;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	СтруктураСтроки.Вставить("ТипЗначения"  , "Предопределенное");
	//	СтруктураСтроки.Вставить("Значение"     , НужноеИмя);
	//	СтруктураСтроки.Вставить("Представление", Строка(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение));
	//	
	//Иначе
	//	Попытка
	//		Предопределенное = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Предопределенное;
	//	Исключение
	//		Предопределенное = Ложь;
	//	КонецПопытки;
	//	
	//	Если Предопределенное Тогда
	//		
	//		ИмяМ = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Метаданные().Имя;
	//		
	//		
	//		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "Справочник";
	//			
	//		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "Документ";
	//			
	//		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "ПланСчетов";
	//			
	//		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "ПланВидовХарактеристик";
	//			
	//		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "ПланВидовРасчета";
	//			
	//		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "Перечисление";
	//			
	//		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "БизнесПроцесс";
	//			
	//		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
	//			ТМД = "Задача";
	//			
	//		Иначе
	//			ТМД = "";
	//			
	//		КонецЕсли;
	//		
	//		Если ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Пустая() Тогда
	//			ВнутрЗначение = ТМД + "." + ИмяМ + ".ПустоеЗначение";
	//		Иначе
	//			МассивИменПредопределенных = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Метаданные().ПолучитьИменаПредопределенных();
	//			НужноеИмя = "";
	//			Для каждого ИмяПредопределенного Из МассивИменПредопределенных ЦИкл
	//				ПолноеИмяПредопределенного = ТМД + "." + ИмяМ + "." + ИмяПредопределенного;
	//				Если ПредопределенноеЗначение(ПолноеИмяПредопределенного) = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение Тогда
	//					НужноеИмя = ПолноеИмяПредопределенного;
	//					Прервать;
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//			ВнутрЗначение = НужноеИмя;
	//		КонецЕсли;
	//		ТипЗначения = "Предопределенное";
	//		
	//		СтруктураСтроки.Вставить("ТипЗначения"  , "Предопределенное");
	//		СтруктураСтроки.Вставить("Значение"     , ВнутрЗначение);
	//		СтруктураСтроки.Вставить("Представление", Строка(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение));
	//		
	//	Иначе
	//		ИдентификаторСсылки = Строка(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.УникальныйИдентификатор());
	//		
	//		МодульОбработки = РеквизитФормыВЗначение("Объект");
	//		
	//		// МСИ - массив структур идентификации
	//		МСИ = МодульОбработки.СцТ_ПреобразоватьДанныеФормыТаблицыСсылокШагаВСтруктуру(ТаблицаСсылокШага);
	//		
	//		МодульОбработки.СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(
	//			ВозвращеннаяСтруктураДанных.ВыбранноеЗначение,
	//			МСИ,
	//			ВозвращеннаяСтруктураДанных.ТипМД,
	//			ВозвращеннаяСтруктураДанных.ИмяМД,
	//			ВозвращеннаяСтруктураДанных.СинонимМД,
	//			АдресТаблицыКлючей,
	//			ИдентификаторСсылки);
	//			
	//		// Обратное преобразование МСИ в таблицу ссылок шага
	//		МодульОбработки.СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(ТаблицаСсылокШага, МТИ);
	//		
	//		СтруктураСтроки.Вставить("ТипЗначения"  , "Ссылка");
	//		СтруктураСтроки.Вставить("Значение"     , ИдентификаторСсылки);
	//		СтруктураСтроки.Вставить("Представление", Строка(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение));
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//Возврат СтруктураСтроки;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТипЗначенияПоля(ТекущийТип, ДанныеСтроки)
	
	Если ТекущийТип = "Число" Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Число");
		
	ИначеЕсли ТекущийТип = "Дата" Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Дата");
		
	ИначеЕсли ТекущийТип = "Булево" Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Булево");
		
	Иначе
		
		ОписаниеТипов = Новый ОписаниеТипов("Строка");
		
	КонецЕсли;
	
	ДанныеСтроки.Значение = ОписаниеТипов.ПривестиЗначение(ДанныеСтроки.Значение);
	
	Элементы.ТР_Значение.ОграничениеТипа = ОписаниеТипов;
	
	Элементы.ТР_Значение.ВыбиратьТип     = Ложь;
	Элементы.ТР_Значение.КнопкаВыбора    = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПользовательскоеОписание()
	
	ТекстОписания = ДШ_Описание;
	
	Если НЕ ДШ_СкрытьАвтоописание Тогда
		ДШ_Автоописание = СцТ_СформироватьОписаниеШага_НаКлиенте();
		ТекстОписания = СцТ_ГлавнаяФорма.СцТ_ДобавитьПодстроку(ТекстОписания, ДШ_Автоописание, Символы.ПС);
	КонецЕсли;
	
	ПользовательскоеОписание = ТекстОписания;
	
КонецПроцедуры

&НаСервере
Функция СцТ_ПоместитьНастройкуРеквизитовВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ДеревоЗначения"), УникальныйИдентификатор);
	
КонецФункции



// Обновление отображения формы в соответствии с настройкой
//
// Параметры
// АдресХранилища - адрес хранения настройки
&НаСервере
Процедура СцТ_ОбновитьОтображениеВСоответствииСНастройкой(АдресХранилища)
	
	ДеревоНастройки = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ДеревоЗначенияНаСервере = РеквизитФормыВЗначение("ДеревоЗначения");
	
	СцТ_ОбновитьНастройкиТаблицыРеквизитов(ДеревоНастройки, ДеревоЗначенияНаСервере);
	СцТ_ОбновитьНастройкиТабличныхЧастей(ДеревоНастройки, ДеревоЗначенияНаСервере);
	Модифицированность = Истина;
	
	ЗначениеВРеквизитФормы(ДеревоЗначенияНаСервере, "ДеревоЗначения");
	
КонецПроцедуры

// Обновление настроек таблицы отображения реквизитов
//
// Параметры
// ДеревоДанных - дерево хранения данных
&НаСервере
Процедура СцТ_ОбновитьНастройкиТаблицыРеквизитов(ДеревоНастройки, ДеревоСДанными)
	
	РеквизитыИзменились = Ложь;
	
	УзелРеквизитов_Настройка = ДеревоНастройки.Строки.Найти("Реквизиты", "Имя");
	УзелРеквизитов_Данные    = ДеревоСДанными.Строки.Найти("Реквизиты", "Имя");
	
	
	Если УзелРеквизитов_Настройка = Неопределено ИЛИ УзелРеквизитов_Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ УзелРеквизитов_Настройка.Активность Тогда
		УзелРеквизитов_Данные.Активность = Ложь;
		
		Элементы.СтраницыДанных_Реквизиты.Доступность = Ложь;
		Элементы.СтраницыДанных_Реквизиты.Заголовок   = НСтр("ru = 'Реквизиты (не активны)'");
	Иначе
		УзелРеквизитов_Данные.Активность = Истина;
		
		Элементы.СтраницыДанных_Реквизиты.Доступность = Истина;
		Элементы.СтраницыДанных_Реквизиты.Заголовок   = НСтр("ru = 'Реквизиты'");
	КонецЕсли;
	
	Для каждого СтрокаРеквизита_Настройка Из УзелРеквизитов_Настройка.Строки Цикл
		
		СтрокаДанных = УзелРеквизитов_Данные.Строки.Найти(СтрокаРеквизита_Настройка.Имя, "Имя");
		
		Если СтрокаДанных = Неопределено Тогда
			// Такого быть не должно
			Продолжить;
		КонецЕсли;
		
		Индекс_Данные = УзелРеквизитов_Данные.Строки.Индекс(СтрокаДанных);
		Индекс_Настройки = УзелРеквизитов_Настройка.Строки.Индекс(СтрокаРеквизита_Настройка);
		
		Дельта = Индекс_Настройки - Индекс_Данные;
		
		Если Дельта <> 0 Тогда
			УзелРеквизитов_Данные.Строки.Сдвинуть(СтрокаДанных, Дельта);
		КонецЕсли;
		
		
		Если СтрокаДанных.Активность <> СтрокаРеквизита_Настройка.Активность
			ИЛИ СтрокаДанных.Действие <> СтрокаРеквизита_Настройка.Действие
			ИЛИ Дельта <> 0 Тогда
			
			СтрокаДанных.Активность = СтрокаРеквизита_Настройка.Активность;
			СтрокаДанных.Действие   = СтрокаРеквизита_Настройка.Действие;
			
			// Изменение отображения
			ПараметрОтбора = Новый Структура("Имя", СтрокаРеквизита_Настройка.Имя);
			МассивОтобранныхСтрок = ТаблицаРеквизитов.НайтиСтроки(ПараметрОтбора);
			
			Если МассивОтобранныхСтрок.Количество() > 0 Тогда
				РедактируемаяСтрока = МассивОтобранныхСтрок[0];
			Иначе
				// Такого не должно быть - это рассогласование
				Продолжить;
			КонецЕсли;
			
			Если Дельта <> 0 Тогда
				ТаблицаРеквизитов.Сдвинуть(РедактируемаяСтрока, Дельта);
			КонецЕсли;
			
			РедактируемаяСтрока.Действие   = СтрокаРеквизита_Настройка.Действие;
			РедактируемаяСтрока.Активность = СтрокаРеквизита_Настройка.Активность;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновление настроек табличных частей
//
// Параметры
// ДеревоНастройки - дерево с настройками
&НаСервере
Процедура СцТ_ОбновитьНастройкиТабличныхЧастей(ДеревоНастройки, ДеревоДанных)
	
	УзелТЧ_Данные    = ДеревоДанных.Строки.Найти("ТабличныеЧасти", "Имя");
	УзелТЧ_Настройки = ДеревоНастройки.Строки.Найти("ТабличныеЧасти", "Имя");
	
	Если УзелТЧ_Данные = Неопределено ИЛИ УзелТЧ_Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ОписаниеТЧ_Данные Из УзелТЧ_Данные.Строки Цикл
		
		ОписаниеТЧ_Настройки = УзелТЧ_Настройки.Строки.Найти(ОписаниеТЧ_Данные.Имя, "Имя");
		Если ОписаниеТЧ_Настройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Управление закладками
		ИмяСтраницы = "Страница_" + ОписаниеТЧ_Данные.Имя;
		СтраницаСТаблицей = Элементы[ИмяСтраницы];
		
		Если ОписаниеТЧ_Данные.Активность <> ОписаниеТЧ_Настройки.Активность Тогда
			
			ОписаниеТЧ_Данные.Активность = ОписаниеТЧ_Настройки.Активность;
			СтраницаСТаблицей.Видимость = ОписаниеТЧ_Данные.Активность;
			
		КонецЕсли;
		
		ИндексТаблицы_Данные    = УзелТЧ_Данные.Строки.Индекс(ОписаниеТЧ_Данные);
		ИндексТаблицы_Настройка = УзелТЧ_Настройки.Строки.Индекс(ОписаниеТЧ_Настройки);
		
		Если ИндексТаблицы_Данные <> ИндексТаблицы_Настройка Тогда
			
			// Изменение положения в дереве
			Дельта = ИндексТаблицы_Настройка - ИндексТаблицы_Данные;
			
			Если Дельта <> 0 Тогда
				УзелТЧ_Данные.Строки.Сдвинуть(ОписаниеТЧ_Данные, Дельта);
				ЕстьИзменения = Истина;
			КонецЕсли;
			
			// Изменение положения на форме
			Если ИндексТаблицы_Настройка > ИндексТаблицы_Данные тогда
				ИндексТаблицы_Настройка = ИндексТаблицы_Настройка + 1;
			КонецЕсли;
			
			// Поиск нужного элемента. Первая страница (реквизитов) не считается
			ИндексЭлемента = -1;
			Местоположение = Неопределено;
			Для каждого Страница Из Элементы.СтраницыСтруктурыОбъекта.ПодчиненныеЭлементы Цикл
				Если ИндексЭлемента = ИндексТаблицы_Настройка Тогда
					Местоположение = Страница;
					Прервать;
				КонецЕсли;
				ИндексЭлемента = ИндексЭлемента + 1;
			КонецЦикла;
			
			Если Местоположение <> Неопределено Тогда
				Элементы.Переместить(СтраницаСТаблицей, Элементы.СтраницыСтруктурыОбъекта, Местоположение);
			КонецЕсли;
			
		КонецЕсли;
		
		СцТ_ОбновитьНастройкиТаблицы(ОписаниеТЧ_Настройки, ОписаниеТЧ_Данные);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ОбновитьНастройкиТаблицы(УзелТаблицы_Настройка, УзелТаблицы_Данные)
	
	УзелШапки_Данные = УзелТаблицы_Данные.Строки.Найти("ШапкаТаблицы", "Имя", Истина);
	
	Если УзелШапки_Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	Для каждого СтрокаНастройки Из УзелТаблицы_Настройка.Строки Цикл
		
		СтрокаДанных = УзелШапки_Данные.Строки.Найти(СтрокаНастройки.Имя, "Имя");
		
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс_Настройка = УзелТаблицы_Настройка.Строки.Индекс(СтрокаНастройки);
		Индекс_Данные    = УзелШапки_Данные.Строки.Индекс(СтрокаДанных);
		
		Дельта = Индекс_Настройка - Индекс_Данные;
		
		Если Дельта <> 0 Тогда
			УзелШапки_Данные.Строки.Сдвинуть(СтрокаДанных, Дельта);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если    СтрокаДанных.Активность <> СтрокаНастройки.Активность
			ИЛИ СтрокаДанных.Действие <> СтрокаНастройки.Действие Тогда
			
			СтрокаДанных.Активность = СтрокаНастройки.Активность;
			СтрокаДанных.Действие   = СтрокаНастройки.Действие;
			
			ЕстьИзменения = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		// Таблицу нужно перерисовать
		СцТ_ЗаполнитьТаблицуЗначениями(УзелТаблицы_Данные);
	КонецЕсли;
	
КонецПроцедуры



// Подготовка данных для визуального сравнения двух таблиц
//
// Параметры
// Знач ПараметрыДляПоискаОбъекта - структура параметров родительского шага, для поиска объекта или записи ИБ
//	Знач ИмяТаблицы - имя таблицы
//	Знач АдресТаблицыСсылок - адрес таблицы ссылок сценария для поиска объекта или записи ИБ
//	Знач ГлобальныеПараметры - структура глобальны параметров для определения истинных значений параметров
//	ТекстСообщения  - возвращаемое сообщение об ошибках в случае неудачи
&НаСервере
Функция СцТ_ПодготовитьДанныеДляВизуальногоСравненияТаблицНаСервере(
	Знач ПараметрыДляПоискаОбъекта,
	Знач ИмяТаблицы,
	Знач АдресТаблицыСсылок,
	Знач ГлобальныеПараметры,
	ТекстСообщения = "")
	
	Если ПараметрыДляПоискаОбъекта.ТипМД = "РегистрыСведений" Тогда
		// ТЧ нету
		Возврат Неопределено;
	КонецЕсли;
	
	МодульЭтойОбработки = РеквизитФормыВЗначение("Объект");
	
	ОбъектИлиЗапись = МодульЭтойОбработки.ПолучитьОбъектИлиЗаписьПоСтруктуреПоиска(
		ПараметрыДляПоискаОбъекта,
		АдресТаблицыСсылок,
		ГлобальныеПараметры);
	
	Если ОбъектИлиЗапись = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти объект или запись в информационной базе.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// ***************************
	// Построение эталонной таблицы
	
	ДеревоНаСервере = РеквизитФормыВЗначение("ДеревоЗначения");
	УзелТаблиц = ДеревоНаСервере.Строки.Найти("ТабличныеЧасти", "Имя");
	
	Если УзелТаблиц = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти узел табличных частей в структуре данных шага.'");
		Возврат Неопределено;
	КонецЕсли;
	
	УзелТаблицы = УзелТаблиц.Строки.Найти(ИмяТаблицы, "Имя");
	
	Если УзелТаблицы = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти узел таблицы %1 в структуре данных шага.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяТаблицы);
		Возврат Неопределено;
	КонецЕсли;
	
	МассивИсключений    = Новый Массив;
	МассивКлючевыхПолей = Новый Массив;
	
	// Вместо таблицы ссылок нужно передать таблицу ссылок шага
	АдрВременнойТаблСсылок = ПолучитьАдресТаблицыСсылокШагаДляВычисленияИстинныхЗначений();
	
	ЭталоннаяТаблица = МодульЭтойОбработки.СцТ_СформироватьТаблицуПоУзлуОписанияТаблицы(
		УзелТаблицы,
		МассивИсключений,
		МассивКлючевыхПолей,
		АдрВременнойТаблСсылок,
		ГлобальныеПараметры,
		ТекстСообщения);
		
	// ***************************
	// Построение тестируемой таблицы
	ТестоваяТаблица = ОбъектИлиЗапись[УзелТаблицы.Имя].Выгрузить();
	
	ТипОбъекта = "СравниваемаяТабличнаяЧасть";
	
	МодульЭтойОбработки.СцТ_ПреобразоватьВТаблицеХранилищеЗначенияВСтроку(ТестоваяТаблица);
	
	// Возвращаемая структура
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("АдресЭталоннойТЗ",
		ПоместитьВоВременноеХранилище(ЭталоннаяТаблица, УникальныйИдентификатор));
	СтруктураОтвета.Вставить("АдресТестовойТЗ",
		ПоместитьВоВременноеХранилище(ТестоваяТаблица , УникальныйИдентификатор));
	СтруктураОтвета.Вставить("МассивИсключений"   , МассивИсключений);
	СтруктураОтвета.Вставить("МассивКлючевыхПолей", МассивКлючевыхПолей);
	СтруктураОтвета.Вставить("ТипОбъекта"         , ТипОбъекта);
	СтруктураОтвета.Вставить("ИмяТаблицы"         , ИмяТаблицы);
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Подготовка данных для визуального сравнения таблицы реквизитов шапки
//
// Параметры
// Знач ПараметрыДляПоискаОбъекта - структура параметров родительского шага, для поиска объекта или записи ИБ
//	Знач АдресТаблицыСсылок - адрес таблицы ссылок сценария для поиска объекта или записи ИБ
//	Знач ГлобальныеПараметры - структура глобальны параметров для определения истинных значений параметров
//	ТекстСообщения  - возвращаемое сообщение об ошибках в случае неудачи
&НаСервере
Функция СцТ_ПодготовитьДанныеДляСравненияРеквизитовШапки_НаСервере(
	Знач ПараметрыДляПоискаОбъекта,
	Знач АдрестаблицыСсылок,
	Знач ГлобальныеПараметры,
	ТекстСообщения = "")
	
	МодульЭтойОбработки = РеквизитФормыВЗначение("Объект");
	
	// ***********************************
	// Подготовка эталонной таблицы
	
	// В отличие от табличных частей, истинные значения, которых хранятся
	// только в дереве значений, в данном случае, истинная таблица - на форме
	ЭталоннаяТаблица_НаСервере = РеквизитФормыВЗначение("ТаблицаРеквизитов");
	
	Для каждого Колонка Из ЭталоннаяТаблица_НаСервере.Колонки Цикл
		Если ПустаяСтрока(Колонка.Заголовок) Тогда
			Колонка.Заголовок = Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	// В сравнении участвуют только активные строки
	КоличествоСтрок = ЭталоннаяТаблица_НаСервере.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
		ОчереднаяСтрока = ЭталоннаяТаблица_НаСервере[КоличествоСтрок - ОбратныйИндекс];
		Если НЕ ОчереднаяСтрока.Активность Тогда
			ЭталоннаяТаблица_НаСервере.Удалить(ОчереднаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Вычисление истинных значений
	
	// Вместо таблицы ссылок нужно передать таблицу ссылок шага
	АдрВременнойТаблСсылок = ПолучитьАдресТаблицыСсылокШагаДляВычисленияИстинныхЗначений();
	
	ЭталоннаяТаблица_НаСервере.Колонки.Добавить("ИстинноеЗначение");
	Для каждого СтрТаблицы Из ЭталоннаяТаблица_НаСервере Цикл
		СтрТаблицы.ИстинноеЗначение = МодульЭтойОбработки.СцТ_ПолучитьЗначение_НаСервере(
			СтрТаблицы.Значение,
			АдрВременнойТаблСсылок,
			СтрТаблицы.ТипУзла,
			ГлобальныеПараметры);
	КонецЦикла;
	
	ЭталоннаяТаблица_НаСервере.Колонки.Удалить("Значение");
	ЭталоннаяТаблица_НаСервере.Колонки.Удалить("ТипУзла");
	ЭталоннаяТаблица_НаСервере.Колонки.Удалить("Действие");
	ЭталоннаяТаблица_НаСервере.Колонки.Удалить("Кл");
	ЭталоннаяТаблица_НаСервере.Колонки.Удалить("Активность");
	
	ЭталоннаяТаблица_НаСервере.Колонки.Добавить("Значение");
	ЭталоннаяТаблица_НаСервере.ЗагрузитьКолонку(ЭталоннаяТаблица_НаСервере.ВыгрузитьКолонку("ИстинноеЗначение"), "Значение");
	
	ЭталоннаяТаблица_НаСервере.Колонки.Удалить("ИстинноеЗначение");
	
	// ***********************************
	// Подготовка тестируемой таблицы
	
	ТестоваяТаблица_НаСервере = ЭталоннаяТаблица_НаСервере.Скопировать();
	
	ТестоваяТаблица_НаСервере.ЗаполнитьЗначения(Неопределено, "Значение, Представление");
	
	// Для поиска объекта или записи ИБ нужно передать истинную таблицу ссылок
	// так как вычисление выполняется по родительскому шагу
	ОбъектИлиЗапись = МодульЭтойОбработки.ПолучитьОбъектИлиЗаписьПоСтруктуреПоиска(
		ПараметрыДляПоискаОбъекта,
		АдресТаблицыСсылок,
		ГлобальныеПараметры);
		
	Если ОбъектИлиЗапись = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не найден объект или запись информационной базы'");
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого СтрРеквизита Из ТестоваяТаблица_НаСервере Цикл
		
		Попытка
			ИстинноеЗначение = ОбъектИлиЗапись[СтрРеквизита.Имя];
		Исключение
			ИстинноеЗначение = Неопределено;
		КонецПопытки;
		
		Если ТипЗнч(ИстинноеЗначение) = Тип("ХранилищеЗначения") Тогда
			СтрРеквизита.Значение = XMLСтрока(ИстинноеЗначение);
		Иначе
			СтрРеквизита.Значение = ИстинноеЗначение;
		КонецЕсли;
		
		СтрРеквизита.Представление = Строка(ИстинноеЗначение);
		
	КонецЦикла;
	
	// Сформируем масив имен колонок - исключений (сравнение по которым проводить не нужно)
	МассивИсключений = Новый Массив;
	
	// Сформируем массив ключевых полей с учетом исключений
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Имя");
	
	// Формирование возвращаемой структуры данных
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("АдресЭталоннойТЗ",
		ПоместитьВоВременноеХранилище(
			ЭталоннаяТаблица_НаСервере,
			УникальныйИдентификатор));
		
	СтруктураОтвета.Вставить("АдресТестовойТЗ",
		ПоместитьВоВременноеХранилище(
			ТестоваяТаблица_НаСервере,
			УникальныйИдентификатор));
		
	СтруктураОтвета.Вставить("МассивИсключений"    , МассивИсключений);
	СтруктураОтвета.Вставить("МассивКлючевыхПолей" , МассивКлючевыхПолей);
	СтруктураОтвета.Вставить("ТипОбъекта"          , "Реквизиты");
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Сохранение во временное хранилище таблицы ссылок шага
// для вычисления истинных значений ссылочного типа в шаге
&НаСервере
Функция ПолучитьАдресТаблицыСсылокШагаДляВычисленияИстинныхЗначений()
	
	ТаблицаСсылокНаСервере = РеквизитФормыВЗначение("ТаблицаСсылокШага");
	
	// Преобразование таблицы ссылок шага к формату хранимой таблицы ссылок
	ТаблицаСсылокНаСервере.Колонки.Добавить("Ссылка");
	ТаблицаСсылокНаСервере.ЗагрузитьКолонку(ТаблицаСсылокНаСервере.ВыгрузитьКолонку("СтрокаИдентификатора"), "Ссылка");
	ТаблицаСсылокНаСервере.Колонки.Добавить("СоответствиеСсылок");
	ТаблицаСсылокНаСервере.Колонки.Добавить("ТипМетаданных");
	ТаблицаСсылокНаСервере.ЗагрузитьКолонку(ТаблицаСсылокНаСервере.ВыгрузитьКолонку("ТипМД"), "ТипМетаданных");
	ТаблицаСсылокНаСервере.Колонки.Добавить("ИмяМетаданных");
	ТаблицаСсылокНаСервере.ЗагрузитьКолонку(ТаблицаСсылокНаСервере.ВыгрузитьКолонку("ИмяМД"), "ИмяМетаданных");
	
	АдрВременнойТаблСсылок = ПоместитьВоВременноеХранилище(ТаблицаСсылокНаСервере, Новый УникальныйИдентификатор);
	
	Возврат АдрВременнойТаблСсылок;
	
КонецФункции

&НаКлиенте
Функция ОпределитьИмяТекущейТаблицы()
	
	ТекущаяСтраницаСтруктурыДанных = Элементы.СтраницыСтруктурыОбъекта.ТекущаяСтраница;
	
	Если ТекущаяСтраницаСтруктурыДанных = Неопределено
		ИЛИ ТекущаяСтраницаСтруктурыДанных = Элементы.СтраницыДанных_Реквизиты Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейСтраницы = ТекущаяСтраницаСтруктурыДанных.Имя;
	// Имя у страницы формализованное и состоит иЗ префикса "Страница_" и имени таблицы
	
	ИмяТаблицы = СтрЗаменить(ИмяТекущейСтраницы, "Страница_", "");
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаКлиенте
Функция ОпределитьНомерТекущейСтрокиВТабличномДокументе(ИмяТаблицы)
	
	ИмяТекущейОбласти = Элементы["СцТ_Таблица_" + ИмяТаблицы].ТекущаяОбласть.Имя;
	
	КоличествоСимволов = СтрДлина(ИмяТекущейОбласти);
	Если КоличествоСимволов = 0 Тогда
		НомерТекущейСтроки = 0;
	Иначе          
		НомерТекущейСтроки_Строкой = "";
		ЕстьНачалоСтроки = Ложь;
		Для Индекс = 1 ПО КоличествоСимволов Цикл
			ТекущийСимвол = ВРег(Сред(ИмяТекущейОбласти, Индекс, 1));
			Если НЕ ЕстьНачалоСтроки И ТекущийСимвол = "R" Тогда
				ЕстьНачалоСтроки = Истина;
			ИначеЕсли ЕстьНачалоСтроки И (ТекущийСимвол = "C" ИЛИ ТекущийСимвол = ":") Тогда
				ЕстьНачалоСтроки = Ложь;
				Прервать;
			ИначеЕсли ЕстьНачалоСтроки И НЕ(ТекущийСимвол = "C" ИЛИ ТекущийСимвол = ":") Тогда
				НомерТекущейСтроки_Строкой = НомерТекущейСтроки_Строкой + ТекущийСимвол;
				
				// Иначе просто переход к следующему символу
			КонецЕсли;
			
		КонецЦикла;
		
		НомерТекущейСтроки_Строкой = СтрЗаменить(НомерТекущейСтроки_Строкой, " ", "");
		НомерТекущейСтроки_Строкой = СтрЗаменить(НомерТекущейСтроки_Строкой, Символ(160), "");
		
		Если ПустаяСтрока(НомерТекущейСтроки_Строкой) Тогда
			НомерТекущейСтроки = 0;
		Иначе
			Попытка
				НомерТекущейСтроки = Число(НомерТекущейСтроки_Строкой);
			Исключение
				НомерТекущейСтроки = 0;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерТекущейСтроки;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьУзелШапкиТаблицы(УзелТаблицы)
	
	УзелШапки           = Неопределено;
	
	Для каждого УзелДерева Из УзелТаблицы.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = "ШапкаТаблицы" Тогда
			УзелШапки = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УзелШапки;
	
КонецФункции

&НаКлиенте
Функция ОпределитьУзелТаблицыВДереве(ИмяТаблицы)
	
	УзелТЧ = Неопределено;
	Для каждого УзелДерева Из ДеревоЗначения.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = "ТабличныеЧасти" Тогда
			УзелТЧ = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелТЧ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УзелТаблицы = Неопределено;
	Для каждого УзелДерева Из УзелТЧ.ПолучитьЭлементы() Цикл
		Если УзелДерева.Имя = ИмяТаблицы Тогда
			УзелТаблицы = УзелДерева;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УзелТаблицы;
	
КонецФункции


&НаСервере
Процедура СцТ_ЗаполнитьТаблицуДанныхЗначениями(ИД_Таблицы, ИмяТаблицы)
	
	Попытка
		ТД = ЭтотОбъект["СцТ_Таблица_" + ИмяТаблицы];
	Исключение
		Возврат;
	КонецПопытки;
	
	УзелТаблицы = ДеревоЗначения.НайтиПоИдентификатору(ИД_Таблицы);
	
	ТД.Очистить();
	
	// Заполнение шапки
	СписокКолонок = Новый СписокЗначений;
	
	УзелШапкиТаблицы = ПолучитьУзелШапкиТаблицы(УзелТаблицы);
	Если УзелШапкиТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Добавление колонок таблицы
	
	// Вывод ячеек шапки
	НомерКолонки = 1;
	Для каждого СтрокаРеквизита Из УзелШапкиТаблицы.ПолучитьЭлементы() Цикл
		Если СтрокаРеквизита.Активность Тогда
			СписокКолонок.Добавить(СтрокаРеквизита.Имя, СтрокаРеквизита.Синоним);
			
			АдресЯчейки = "R1C%2";
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(НомерКолонки, "ЧГ=0"));
			
			Ячейка = ТД.Область(АдресЯчейки);
			Ячейка.Текст = СтрокаРеквизита.Синоним;
			НомерКолонки = НомерКолонки + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Оформление колонок
	Если НомерКолонки > 1 Тогда
		
		ШиринаКолонки = Окр(160/НомерКолонки, 0);
		
		Если ШиринаКолонки < 14 Тогда
			ШиринаКолонки = 14;
		КонецЕсли;
		
		Для П=1 По НомерКолонки - 1 Цикл
			АдресЯчейки = "C%2";
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(П, "ЧГ=0"));
			
			Ячейка = ТД.Область(АдресЯчейки);
			
			Ячейка.ШиринаКолонки = ШиринаКолонки;
			
			Ячейка.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
			Ячейка.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			
			АдресЯчейки = "R1C%2";
			АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(П, "ЧГ=0"));
			Ячейка = ТД.Область(АдресЯчейки);
			
			Ячейка.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3); 
			Ячейка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3);
			
			Ячейка.ЦветФона = Новый Цвет(215,215,215);
			
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение значениями оставшейся части таблицы
	НомерСтроки = 2;
	Для каждого УзелСтроки Из УзелТаблицы.ПолучитьЭлементы() Цикл
		
		Если УзелСтроки.Имя = "ШапкаТаблицы" Тогда
			Продолжить;
		КонецЕсли;
		
		НомерКолонки = 1;
		Для каждого ЭлементСписка Из СписокКолонок Цикл
			// Цикл выполняется по списку колонок, который содержит только отображаемые колонки
			// Отсортированные в нужном порядке
			
			ТекстЯчейки = "";
			УзелКолонки = Неопределено;
			Для каждого УзелДерева Из УзелСтроки.ПолучитьЭлементы() Цикл
				Если УзелДерева.Имя = ЭлементСписка.Значение Тогда
					УзелКолонки = УзелДерева;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если УзелКолонки <> Неопределено Тогда
				АдресЯчейки = "R%1C%2";
				АдресЯчейки = СтрЗаменить(АдресЯчейки, "%1", Формат(НомерСтроки , "ЧГ=0"));
				АдресЯчейки = СтрЗаменить(АдресЯчейки, "%2", Формат(НомерКолонки, "ЧГ=0"));
				
				Ячейка = ТД.Область(АдресЯчейки);
				
				Ячейка.Текст = УзелКолонки.Представление;
				Ячейка.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
				Ячейка.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная); 
				
			КонецЕсли;
			// Номер колонки нужно увеличить независимо от того,
			// Нашли или нет текущий узел - иначе собъются колонки
			НомерКолонки = НомерКолонки + 1;
			
		КонецЦикла;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла; 
	
КонецПроцедуры


&НаКлиенте
Процедура СцТ_ПрименитьНастройкиКлючей(ДанныеКлючей)
	
	УзелТаблиц = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(ДеревоЗначения, "Имя", "ТабличныеЧасти");
	
	Если УзелТаблиц = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелТаблицы = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(УзелТаблиц, "Имя", ДанныеКлючей.ИмяТаблицы);
	Если УзелТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелШапки = СцТ_ГлавнаяФорма.СцТ_НайтиУзелДереваФормы(УзелТаблицы, "Имя", "ШапкаТаблицы");
	
	Если УзелШапки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого УзелКолонки Из УзелШапки.ПолучитьЭлементы() Цикл
		
		ИмяКолонкиВРег = ВРег(УзелКолонки.Имя);
		
		Если ДанныеКлючей.Ключи.Найти(ИмяКолонкиВРег) <> Неопределено Тогда
			УзелКолонки.Действие = "Ключ";
		ИначеЕсли УзелКолонки.Действие = "Ключ" Тогда
			УзелКолонки.Действие = "Проверить";
		КонецЕсли;
		
		УзелКолонки.Активность = (ДанныеКлючей.АктивностьКолонок[ИмяКолонкиВРег] = Истина);
		
		ЭлементФормы = Элементы.Найти("ИСТЗ_Таблица" + ДанныеКлючей.ИмяТаблицы + УзелКолонки.Имя);
		Если ЭлементФормы <> Неопределено Тогда
			
			ЭлементФормы.Видимость = УзелКолонки.Активность;
			Если УзелКолонки.Действие = "Проверить" Тогда
				ЭлементФормы.ЦветФонаЗаголовка   = WebЦвета.ЗеленыйЛес;
				ЭлементФормы.ЦветТекстаЗаголовка = WebЦвета.Белый;
				ЭлементФормы.ШрифтЗаголовка = Новый Шрифт;
			ИначеЕсли УзелКолонки.Действие = "Сведения" Тогда
				ЭлементФормы.ЦветФонаЗаголовка   = WebЦвета.ГрифельноСерый;
				ЭлементФормы.ЦветТекстаЗаголовка = WebЦвета.Белый;
				ЭлементФормы.ШрифтЗаголовка      = Новый Шрифт;
			ИначеЕсли УзелКолонки.Действие = "Ключ" Тогда
				ЭлементФормы.ЦветФонаЗаголовка   = WebЦвета.РыжеватоКоричневый;
				ЭлементФормы.ЦветТекстаЗаголовка = WebЦвета.Белый;
				ЭлементФормы.ШрифтЗаголовка = Новый Шрифт(, , Истина);
			Иначе
				ЭлементФормы.ЦветФонаЗаголовка   = Новый Цвет;
				ЭлементФормы.ЦветТекстаЗаголовка = Новый Цвет;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры




#КонецОбласти

#КонецОбласти

