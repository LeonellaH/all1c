
#Область Переменные

// Форма - владелец текущей формы (для краткости и наглядности вместо "ЭтаФорма.ВладелецФормы")
&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

// Указатель на форму (главная или макрошага), из которой была открыта эта форма
&НаКлиенте
Перем ВызвавшаяФорма Экспорт;

// Указатель на ветку в дереве. Заполненяется, если шаг не новый
&НаКлиенте
Перем ДанныеШага Экспорт;

// Идентификатор узла в дереве. Заполнено если шаг не новый
&НаКлиенте
Перем ИдентификаторУзла Экспорт;

// Для хранения предыдущеего значения типа в таблице, чтобы отслеживать изменения
&НаКлиенте
Перем ПредыдущийТип;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимСовместимости838 Тогда
		УстановитьДействие("ПередЗакрытием", "ПередЗакрытиеБезРежимаСовместимости");
	КонецЕсли;
	
	// Если форма открыта под внешним управлением, то не вся функциональность
	// должна работать
	Если Параметры.ОткрытаПодВнешнимУправлением Тогда
		
		ФормаОткрытаПодВнешнимУправлением = Истина;
		
		Элементы.ВыбратьОбъектМетаданных.Доступность                                = Ложь;
		Элементы.КлючЗаписиРегистраВыбратьОбъектИнформационнойБазы.Доступность      = Ложь;
		Элементы.КлючЗаписиРегистраКонтекстноеМенюВыбратьСсылкуВТаблице.Доступность = Ложь;
		
		Элементы.ВыбратьОбъектИнформационнойБазы.Доступность                        = Ложь;
		
	КонецЕсли;
	///
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	// Управление доступностью
	ЭтотОбъект.ТолькоПросмотр = Параметры.ТолькоПросмотр;
	Элементы.ПрименитьИЗакрыть.Доступность  = НЕ Параметры.ТолькоПросмотр;
	Элементы.ПрименитьИзменения.Доступность = НЕ Параметры.ТолькоПросмотр;
	
	// Таблицы передаваемые по адресам
	АдресТаблицыКлючей = Параметры.АдресТаблицыКлючей;
	АдресТаблицыСсылок = Параметры.АдресТаблицыСсылок;
	
	// основные атрибуты шага (ОА)
	// атрибуты, для редактирования, которых не требуется открытие формы настройки
	// или свернутые для хранения атрибуты
	ОА_ТипШага                          = Параметры.ТипШага;
	ОА_НомерШага                        = Параметры.НомерШага;
	ОА_Активность                       = Параметры.Активность;
	ОА_ОписательПоложенияШагаВДереве    = Параметры.ОписательПоложенияШагаВДереве;
	ОА_ЭтоНовый                         = Параметры.ЭтоНовый;
	ОА_СтруктураДанныхШага              = Параметры.СтруктураДанныхШага;
	
	// 1. Раскрытие структуры шага и определение типа шага
	Если ОА_СтруктураДанныхШага = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ДШ_Наименование                 = ОА_СтруктураДанныхШага.Наименование;
	ДШ_ТипМетаданных                = ОА_СтруктураДанныхШага.ТипМетаданных;
	ДШ_ИмяМетаданных                = ОА_СтруктураДанныхШага.ИмяМетаданных;
	ДШ_Автоописание                 = ОА_СтруктураДанныхШага.Автоописание;
	ДШ_Описание                     = ОА_СтруктураДанныхШага.Описание;
	ДШ_СкрытьАвтоописание           = ОА_СтруктураДанныхШага.СкрытьАвтоописание;
	ДШ_ОбСсылка                     = ОА_СтруктураДанныхШага.ОбСсылка;
	ДШ_ПредставлениеОбъекта         = ОА_СтруктураДанныхШага.ПредставлениеОбъекта;
	ДШ_ПредставлениеИмениМетаданных = ОА_СтруктураДанныхШага.ПредставлениеИмениМетаданных;
	ДШ_ИмяФормы                     = ОА_СтруктураДанныхШага.ИмяФормы;
	ДШ_ВыполнитьВручную             = ОА_СтруктураДанныхШага.ВыполнитьВручную;
	ДШ_Комментарий                  = ОА_СтруктураДанныхШага.Комментарий;
	ДШ_ЗаголовокФормы               = ОА_СтруктураДанныхШага.ЗаголовокФормы;
	ДШ_ДанныеКартинки               = ОА_СтруктураДанныхШага.ДанныеКартинки;
	
	Если ТипЗнч(ОА_СтруктураДанныхШага.ДеревоЗначения) = Тип("Структура") Тогда
		// Данные дерева переданы в виде структуры из главной формы обработки
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоЗначения,
			ОА_СтруктураДанныхШага.ДеревоЗначения);
	ИначеЕсли ТипЗнч(ОА_СтруктураДанныхШага.ДеревоЗначения) = Тип("ХранилищеЗначения") Тогда
		// Данные из конфигурации могут поступить в виде данных ХЗ
		Попытка
			ДЗ_НаСервере = ОА_СтруктураДанныхШага.ДеревоЗначения.Получить();
			ПреобразоватьЗначенияВДереве(ДЗ_НаСервере, Истина);
			ЗначениеВРеквизитФормы(ДЗ_НаСервере, "ДеревоЗначения");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Заполнение временной таблицы ссылок шага
	Если ОА_СтруктураДанныхШага.Свойство("МассивСсылокШага")
		И ТипЗнч(ОА_СтруктураДанныхШага.МассивСсылокШага) = Тип("Массив") Тогда
		
		ЭтаОбработка.СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(
			ТаблицаСсылокШага,
			ОА_СтруктураДанныхШага.МассивСсылокШага);
	КонецЕсли;
	
	// Добавление ссылок из общей таблицы ссылок
	ЭтаОбработка.СцТ_ДобавитьВТаблицуСсылокШагаСведенияИзТаблицыСсылок(
		ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага,
		АдресТаблицыСсылок,
		ТаблицаСсылокШага);
	
	// Признак, что наименование установлено вручную
	НаименованиеШагаИзмененоВручную = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ИСТЗ_НаименованиеРучное",
		Ложь);
		
	// Картинки для закладок описания и комментария
	АдресКартинкиКомментария = ПоместитьВоВременноеХранилище(ЭтаОбработка.ПолучитьМакет("КартинкаКомментария"));
	КартинкаКомментария = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинкиКомментария));
	
	Элементы.Страница_РедактируемоеОписание.Картинка = ?(
		ПустаяСтрока(ДШ_Описание),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Элементы.Страница_Комментарий.Картинка = ?(
		ПустаяСтрока(ДШ_Комментарий),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	СцТ_НастроитьФормуДляШага();
	
	// Заполнение поведения при ошибке для группового шага
	СцТ_ЗаполнитьДействиеГрупповогоШагаПриОшибке(ЭтотОбъект);
	
	// Модифицированность
	Модифицированность = ОА_ЭтоНовый;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущийЭлемент = Элементы.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_УдалениеШаговСценария" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметр.НайтиПоЗначению(ДанныеШага.ПолучитьИдентификатор()) <> Неопределено Тогда
			Модифицированность = Ложь;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли  ИмяСобытия = "СцТ_ПеремещениеУзловСценария" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		НовыйУзел = Параметр[ДанныеШага];
		Если НовыйУзел <> Неопределено Тогда
			ДанныеШага = НовыйУзел;
			ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
			ДШ_НомерШага      = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ОбновленыДанныеГрупповогоШага" Тогда
		
		Если Параметр = ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя Тогда
			СцТ_СформироватьПредставлениеРодителя();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СцТ_ИзмениласьНумерацияШагов" Тогда
		
		Если ОА_ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ДанныеШага = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма, ИдентификаторУзла);
			ОА_НомерШага = ДанныеШага.НомерШага;
			СцТ_СформироватьПредставлениеРодителя();
		Исключение
		КонецПопытки;
		
	ИначеЕсли ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("СцТ_ОбработатьЗапросОСохраненииДанныхШага", ЭтотОбъект),
			НСтр("ru = 'Данные шага были изменены. Применить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиеБезРежимаСовместимости(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Если НЕ ЗавершениеРаботы Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СцТ_ОбработатьЗапросОСохраненииДанныхШага", ЭтотОбъект),
				НСтр("ru = 'Данные шага были изменены. Применить изменения?'"),
				РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Данные группового шага проверки бизнес-логики были изменены. При закрытии все изменения будут утеряны'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()
	
	Попытка
		СцТ_ГлавнаяФорма.СцТ_ОткрытыеФормыНастройкиШагов.Удалить(ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура СохранитьИЗакрытьФорму(Команда)
	
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Сохранение шага'"), , НСтр("ru = 'Данные шага сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтоназвание(Команда)
	
	СцТ_ОбновитьНаименование_НаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ХранимыеДанныеШага(Команда)
	
	// Всегда отображаются имеено хранимые данные, которые сохранены в дереве шагов
	Если ОА_ЭтоНовый Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага еще не записаны. Отобразить структуру хранения данных невозможно. Сохранить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеОтветаНаВопросОСохраненииНового", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
		Возврат;
	ИначеЕсли НЕ ОА_ЭтоНовый И Модифицированность Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные шага были изменены. Сохранить изменения перед отображением структуры?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеОтветаНаВопросОСохраненииСуществующего", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АктивностьПриИзменении(Элемент)
	
	Если ОА_Активность = 2 Тогда
		ОА_Активность = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПроверочноеНаименование = СцТ_СформироватьОписаниеШага_НаКлиенте(Истина);
	
	НаименованиеШагаИзмененоВручную = (ДШ_Наименование <> ПроверочноеНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("СцТ_ОбновитьЗаголовкиЗакладок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("СцТ_ОбновитьЗаголовкиЗакладок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГруппыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ОА_ЭтоНовый Тогда
		РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма, ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
	Иначе
		РодительУзла = ДанныеШага.ПолучитьРодителя();
	КонецЕсли;
	
	Если РодительУзла <> Неопределено Тогда
		СцТ_ГлавнаяФорма.СцТ_ОткрытьФормуНастройкиШага(РодительУзла, ВызвавшаяФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриОшибкеВПодчиненныхШагахПриИзменении(Элемент)
	
	УправлениеДоступностьюПеременнойОшибкиГрупповогоШага(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиОповещений

// Обрабатывает нажатие пользователем кнопки в диалоге вопроса о сохранении
// данных шага перед закрытием формы
// Параметры
//	КодВозврата - код нажатой кнопки (Да, Нет, Отмена);
//	ДопДанные - дополнительные данные;
//
&НаКлиенте
Процедура СцТ_ОбработатьЗапросОСохраненииДанныхШага(КодВозврата, ДопДанные) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли КодВозврата = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
		
		// При Отмене ничего не выполняется
		
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос диалога о Сохранении нового шага перед
// отображением хранимых данных
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииНового(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка нажатия "ДА"
	Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
		СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить шаг'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// После ответа на вопрос диалога о Сохранении уже существующего модифицированного шага перед
// отображением хранимых данных
&НаКлиенте
Процедура СцТ_ПослеОтветаНаВопросОСохраненииСуществующего(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		// Показываем, что хранится
		СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
		
	Иначе
		
		Если СцТ_ПрименитьИзменения_НаКлиенте() Тогда
			СцТ_ГлавнаяФорма.ОтобразитьХранимыеДанныеШага(ИдентификаторУзла, ВызвавшаяФорма);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить изменения в шаге'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеПроцедурыИФункции

#Область НастрокаПриЗагрузкеДанныхШага

// Индивидуальная настройка формы для шага
//
&НаСервере
Процедура СцТ_НастроитьФормуДляШага()
	
	// Заполнение списка выбора Типа МД
	СписокВыбора = Элементы.ДШ_ТипМетаданных.СписокВыбора;
	СписокВыбора.Добавить("Справочники"            , НСтр("ru = 'Справочник'"));
	СписокВыбора.Добавить("Документы"              , НСтр("ru = 'Документ'"));
	СписокВыбора.Добавить("РегистрыСведений"       , НСтр("ru = 'Регистр сведений'"));
	СписокВыбора.Добавить("ПланыСчетов"            , НСтр("ru = 'План счетов'"));
	СписокВыбора.Добавить("ПланыВидовРасчета"      , НСтр("ru = 'План видов расчета'"));
	СписокВыбора.Добавить("ПланыВидовХарактеристик", НСтр("ru = 'План видов характеристик'"));
	СписокВыбора.Добавить("БизнесПроцессы"         , НСтр("ru = 'Бизнес-процесс'"));
	СписокВыбора.Добавить("Задачи"                 , НСтр("ru = 'Задача'"));
	
	
	СписокВыбораТипа = Элементы.КЗР_ТипЗначения.СписокВыбора;
	СписокВыбораТипа.Добавить("Число"                  , НСтр("ru = 'Число'"));
	СписокВыбораТипа.Добавить("Строка"                 , НСтр("ru = 'Строка'"));
	СписокВыбораТипа.Добавить("Дата"                   , НСтр("ru = 'Дата'"));
	СписокВыбораТипа.Добавить("Булево"                 , НСтр("ru = 'Булево'"));
	СписокВыбораТипа.Добавить("Предопределенное"       , НСтр("ru = 'Предопределенное значение'"));
	СписокВыбораТипа.Добавить("Ссылка"                 , НСтр("ru = 'Ссылка (Идентификатор)'"));
	СписокВыбораТипа.Добавить("УникальныйИдентификатор", НСтр("ru = 'Уникальный идентификатор'"));
	СписокВыбораТипа.Добавить("СистемноеПеречисление"  , НСтр("ru = 'Системное перечисление'"));
	СписокВыбораТипа.Добавить("Параметр"               , НСтр("ru = 'Имя параметра'"));
	
	
	Если ДШ_ТипМетаданных = "РегистрыСведений" Тогда
		
		// Заполнение таблицы идентификации
		УзелКлючаЗаписиРегистра = СцТ_НайтиУзелДереваФормы(
			ДеревоЗначения,
			"Имя",
			"ИСТЗ_КлючЗаписиИБ");
			
		Если УзелКлючаЗаписиРегистра <> Неопределено Тогда
			Для каждого СтрокаКлюча Из УзелКлючаЗаписиРегистра.ПолучитьЭлементы() Цикл
				НоваяСтрока = КлючЗаписиРегистра.Добавить();
				НоваяСтрока.Имя           = СтрокаКлюча.Имя;
				НоваяСтрока.Синоним       = СтрокаКлюча.Синоним;
				НоваяСтрока.Значение      = СтрокаКлюча.Значение;
				НоваяСтрока.Представление = СтрокаКлюча.Представление;
				НоваяСтрока.ТипЗначения   = СтрокаКлюча.ТипУзла;
			КонецЦикла;
		КонецЕсли;
		
		Элементы.СтраницыТипаМД.ТекущаяСтраница = Элементы.СтраницыТипаМД_Записи;
	Иначе
		Элементы.СтраницыТипаМД.ТекущаяСтраница = Элементы.СтраницыТипаМД_Ссылки;
	КонецЕсли;
	
	
	// Заполнение локальной таблицы ссылок
	Если НЕ ПустаяСтрока(АдресТаблицыСсылок) И НЕ ОА_ЭтоНовый Тогда
		
		ИстиннаяТаблицаСсылок = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
		Если ИстиннаяТаблицаСсылок.Колонки.Найти("СинонимМД") = Неопределено Тогда
			ИстиннаяТаблицаСсылок.Колонки.Добавить("СинонимМД"         , Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		Для каждого СтрокаСсылки Из ИстиннаяТаблицаСсылок Цикл
			ИндексВМассиве = СтрокаСсылки.МассивУИШ.Найти(ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
			Если ИндексВМассиве <> Неопределено Тогда
				// Копируем описание ссылки
				СсылкаВШаге = ТаблицаСсылокШага.Добавить();
				СсылкаВШаге.СтрокаИдентификатора = СтрокаСсылки.Ссылка;
				
				СсылкаВШаге.Представление  = СтрокаСсылки.Представление;
				СсылкаВШаге.ТипМД          = СтрокаСсылки.ТипМД;
				СсылкаВШаге.ИмяМД          = СтрокаСсылки.ИмяМД;
				СсылкаВШаге.СинонимМД      = СтрокаСсылки.СинонимМД;
				СсылкаВШаге.ПоискПоЗапросу = СтрокаСсылки.ПоискПоЗапросу;
				СсылкаВШаге.ТекстЗапроса   = СтрокаСсылки.ТекстЗапроса;
				
				Для каждого КлючИдентификации Из СтрокаСсылки.СтруктураИдентификации Цикл
					НовыйКлюч = СсылкаВШаге.СтруктураИдентификации.Добавить();
					НовыйКлюч.Имя             = КлючИдентификации.Имя;
					НовыйКлюч.Представление   = КлючИдентификации.Представление;
					НовыйКлюч.Значение        = КлючИдентификации.Значение;
					НовыйКлюч.СокрТипЗначения = КлючИдентификации.СокрТипЗначения;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если таблицы ссылок еще не существует, то и описания ссылок еще нет
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страница_ДанныеШага;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ЗаполнитьДействиеГрупповогоШагаПриОшибке(ЭтотОбъект)
	
	СписокВыбора = Элементы.ДействиеПриОшибкеВПодчиненныхШагах.СписокВыбора;
	СписокВыбора.Добавить("Остановить", НСтр("ru = 'Остановить выполнение'"));
	СписокВыбора.Добавить("Продолжить", НСтр("ru = 'Продолжить выполнение'"));
	
	// Параметры действий при ошибке находятся в корне
	ДействиеПриОшибкеВПодчиненныхШагах = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ДействиеГрупповогоШагаПриОшибке",
		"Остановить");
		
	ИмяПеременнойРеузльтатаВыполненияГруппы = СцТ_ЗначениеВДереве(
		ДеревоЗначения,
		"ПеременнаяОшибкиГрупповогоШага",
		"");
	
	УправлениеДоступностьюПеременнойОшибкиГрупповогоШага(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область СохранениеШагаВСценарии

// Сохранение реализовано в виде функции, т.к. потребуется
// ее выполнение в обработчике ПередЗакрытием
//
&НаКлиенте
Функция СцТ_ПрименитьИзменения_НаКлиенте() Экспорт
	
	// Проверка, что владелец формы еще не закрыт
	Если НЕ ВладелецФормы.Открыта() Тогда
		ТекстСообщения = НСтр("ru = 'Форма с деревом шагов уже закрыта. Применить изменения невозможно'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка правильности данных
	Отказ = Ложь;
	
	Если ПустаяСтрока(ДШ_Наименование) Тогда
		
		СцТ_СообщитьПользователю(НСтр("ru = 'Не заполнено наименование.'"),
			Отказ,
			"ДШ_Наименование");
	КонецЕсли;
	
	// Проверка индивидуальных настроек шага и заполнение ДереваЗначения
	СцТ_ПодготовитьДанныеШагаДляСохранения_НаКлиенте(Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СцТ_ОбновитьНаименование_НаКлиенте();
	ОбновитьПользовательскоеОписание();
	
	ВозвращаемаяСтруктура = СцТ_СформироватьСтруктуруданныхШага_НаКлиенте();
	
	Если ОА_ЭтоНовый Тогда
		
		ДанныеШага = СцТ_ГлавнаяФорма.СцТ_СохранитьНовыйШаг(ВызвавшаяФорма, ВозвращаемаяСтруктура);
		
		ИдентификаторУзла = ДанныеШага.ПолучитьИдентификатор();
		ОА_НомерШага      = ДанныеШага.НомерШага;
		ОА_ЭтоНовый       = Ложь;
		
	Иначе
		СцТ_ГлавнаяФорма.СцТ_ПрименитьИзмененияВШаге(ВызвавшаяФорма, ДанныеШага, ВозвращаемаяСтруктура);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Заполнение дерева значения данными формы.
// Проверка корректности специфических для этого шага данных
&НаКлиенте
Процедура СцТ_ПодготовитьДанныеШагаДляСохранения_НаКлиенте(Отказ)
	
	// Проверки
	Если ПустаяСтрока(ДШ_ТипМетаданных) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ПутьКДанным = "ДШ_ТипМетаданных";
		Сообщение.Текст = НСтр("ru = 'Не указан тип метаданных'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ДШ_ИмяМетаданных) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ПутьКДанным = "ДШ_ИмяМетаданных";
		Сообщение.Текст = НСтр("ru = 'Не задан объект метаданных'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ПУстаяСтрока(ДШ_ТипМетаданных) И ДШ_ТипМетаданных <> "РегистрыСведений" Тогда
		Если ПустаяСтрока(ДШ_ОбСсылка) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.ПутьКДанным = "ДШ_ОбСсылка";
				Сообщение.Текст = НСтр("ru = 'Не задан объект информационной базы'");
				Сообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;		
		
	ИначеЕсли ДШ_ТипМетаданных = "РегистрыСведений" Тогда
		Если КлючЗаписиРегистра.Количество() = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.ПутьКДанным = "КлючЗаписиРегистра";
			Сообщение.Текст = НСтр("ru = 'Не задана структура поиска записи регистра'");
			Сообщение.Сообщить();
			Отказ = Истина;
		Иначе
			Для каждого СтрокаКлюча Из КлючЗаписиРегистра Цикл
				Если ПустаяСтрока(СтрокаКлюча.Имя) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.ПутьКДанным = "КлючЗаписиРегистра";
					Сообщение.Текст = НСтр("ru = 'Структура поиска записи регистра не корректная. Не для всех измерений указано имя'");
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				
				Если СтрокаКлюча.ТипЗначения = "Предопределенное" И ПустаяСтрока(СтрокаКлюча.Значение) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.ПутьКДанным = "КлючЗаписиРегистра";
					Сообщение.Текст = НСтр("ru = 'Структура поиска записи регистра не корректная. Не указано предопределенное значение'");
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				
				Если (СтрокаКлюча.ТипЗначения = "Предопределенное"
					ИЛИ СтрокаКлюча.ТипЗначения = "СистемноеПеречисление")
					И ПустаяСтрока(СтрокаКлюча.Значение) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.ПутьКДанным = "КлючЗаписиРегистра";
					Сообщение.Текст = НСтр("ru = 'Структура поиска записи регистра не корректная. Не указано предопределенное значение или системное перечисление'");
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				
				Если СтрокаКлюча.ТипЗначения = "Параметр"
					И ПустаяСтрока(СтрокаКлюча.Значение) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.ПутьКДанным = "КлючЗаписиРегистра";
					Сообщение.Текст = НСтр("ru = 'Структура поиска записи регистра не корректная. Не указано имя параметра'");
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// формирование дерева
	ДеревоЗначения.ПолучитьЭлементы().Очистить();
	
	Если НаименованиеШагаИзмененоВручную Тогда
		СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ИСТЗ_НаименованиеРучное",
			Истина);
	КонецЕсли;
	
	Если ДШ_ТипМетаданных = "РегистрыСведений" Тогда
		// Заполнение дерева структурой идентификации
		УзелКлючаЗаписиИБ = СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
			ДеревоЗначения,
			"ИСТЗ_КлючЗаписиИБ",
			Истина);
		
		Для каждого СтрокаКлюча Из КлючЗаписиРегистра Цикл
			СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
				УзелКлючаЗаписиИБ,
				СтрокаКлюча.Имя,
				СтрокаКлюча.Значение,
				СтрокаКлюча.Синоним,
				Истина,
				СтрокаКлюча.Представление,,,
				СтрокаКлюча.ТипЗначения);
		КонецЦикла;
		
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ДействиеГрупповогоШагаПриОшибке",
		ДействиеПриОшибкеВПодчиненныхШагах);
		
	СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
		ДеревоЗначения,
		"ПеременнаяОшибкиГрупповогоШага",
		ИмяПеременнойРеузльтатаВыполненияГруппы);
	
КонецПроцедуры

// Свертка данных шага в структуру
// и подготовка возвращаемой структуры отредактированного шага
&НаКлиенте
Функция СцТ_СформироватьСтруктуруданныхШага_НаКлиенте()
	
	// СДШ - структура данных шага
	СДШ = Новый Структура;
	
	СДШ.Вставить("ИдентификаторШага"           , ОА_ОписательПоложенияШагаВДереве.ИдентификаторШага);
	СДШ.Вставить("НаименованиеШага"            , ДШ_Наименование);
	СДШ.Вставить("ТипМетаданных"               , ДШ_ТипМетаданных);
	СДШ.Вставить("ИмяМетаданных"               , ДШ_ИмяМетаданных);
	СДШ.Вставить("Автоописание"                , ДШ_Автоописание);
	СДШ.Вставить("Описание"                    , ДШ_Описание);
	СДШ.Вставить("СкрытьАвтоописание"          , ДШ_СкрытьАвтоописание);
	СДШ.Вставить("ОбСсылка"                    , ДШ_ОбСсылка);
	СДШ.Вставить("ПредставлениеОбъекта"        , ДШ_ПредставлениеОбъекта);
	СДШ.Вставить("ВыполнитьВручную"            , ДШ_ВыполнитьВручную);
	СДШ.Вставить("Комментарий"                 , ДШ_Комментарий);
	СДШ.Вставить("ИмяФормы"                    , ДШ_ИмяФормы);
	СДШ.Вставить("ПредставлениеИмениМетаданных", ДШ_ПредставлениеИмениМетаданных);
	СДШ.Вставить("ЗаголовокФормы"              , ДШ_ЗаголовокФормы);
	СДШ.Вставить("ДанныеКартинки"              , ДШ_ДанныеКартинки);
	СДШ.Вставить("ДеревоЗначения"              , СцТ_ГлавнаяФорма.СцТ_ДеревоформыВДеревоСтруктур(ДеревоЗначения));
	
	//Сначала из таблицы ссылок нужно удалить неиспользованные ссылки
	СписокИспользуемыхСсылокВШаге = Новый СписокЗначений;
	СцТ_ГлавнаяФорма.ИтерационноеЗаполнениеСпискаСсылок(ДеревоЗначения, СписокИспользуемыхСсылокВШаге);
	Если НЕ ПустаяСтрока(ДШ_ОбСсылка) И СписокИспользуемыхСсылокВШаге.НайтиПоЗначению(ДШ_ОбСсылка) = Неопределено Тогда
		СписокИспользуемыхСсылокВШаге.Добавить(ДШ_ОбСсылка);
	КонецЕсли;
	
	Если СписокИспользуемыхСсылокВШаге.Количество() = 0 Тогда
		ТаблицаСсылокШага.Очистить();
	Иначе
		КоличествоСтрок = ТаблицаСсылокШага.Количество();
		// Таблицу нужно обходить только сначала!
		Если КоличествоСтрок > 0 Тогда
			Итератор = 0;
			Пока Итератор < КоличествоСтрок Цикл
				СтрокаТаблицы = ТаблицаСсылокШага[Итератор];
				ЭлементСписка = СписокИспользуемыхСсылокВШаге.НайтиПоЗначению(СтрокаТаблицы.СтрокаИдентификатора);
				Если ЭлементСписка = Неопределено ИЛИ ЭлементСписка.Пометка Тогда
					// Пометка в списке отвечает за дублирующие строки
					ТаблицаСсылокШага.Удалить(Итератор);
					КоличествоСтрок = КоличествоСтрок - 1;
				Иначе
					Итератор = Итератор + 1;
					// Переход на следующую строку
					ЭлементСписка.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// МТИ - массив таблицы идентификации
	МТИ = Новый Массив;
	
	Для каждого СтрТабл Из ТаблицаСсылокШага Цикл
		
		// МСИ - массив структур идентификации
		МСИ = Новый Массив;
		СтрТабл.СтруктураИдентификации.Сортировать("Имя");
		Для каждого СтрИдентификации Из СтрТабл.СтруктураИдентификации Цикл
			// СИ - структура идентификации
			СИ = Новый Структура;
			СИ.Вставить("Имя"            , СтрИдентификации.Имя);
			СИ.Вставить("Представление"  , СтрИдентификации.Представление);
			СИ.Вставить("Значение"       , СтрИдентификации.Значение);
			СИ.Вставить("СокрТипЗначения", СтрИдентификации.СокрТипЗначения);
			МСИ.Добавить(СИ);
		КонецЦикла;
		
		СтрСсылки = Новый Структура;
		СтрСсылки.Вставить("СтруктураИдентификации", МСИ);
		СтрСсылки.Вставить("СтрокаИдентификатора"  , СтрТабл.СтрокаИдентификатора);
		СтрСсылки.Вставить("Представление"         , СтрТабл.Представление);
		СтрСсылки.Вставить("ТипМД"                 , СтрТабл.ТипМД);
		СтрСсылки.Вставить("ИмяМД"                 , СтрТабл.ИмяМД);
		СтрСсылки.Вставить("СинонимМД"             , СтрТабл.СинонимМД);
		
		МТИ.Добавить(СтрСсылки);
		
	КонецЦикла;
	
	// ВСД - возвращаемая структура данных
	ВСД = Новый Структура;
	ВСД.Вставить("ОписательПоложенияШагаВДереве", ОА_ОписательПоложенияШагаВДереве);
	ВСД.Вставить("Наименование"                 , ДШ_Наименование);
	ВСД.Вставить("Активность"                   , ОА_Активность);
	ВСД.Вставить("СтруктураДанныхШага"          , СДШ);
	ВСД.Вставить("ЭтоНовый"                     , ОА_ЭтоНовый);
	ВСД.Вставить("ТипШага"                      , ОА_ТипШага);
	ВСД.Вставить("СсылкиШага"                   , МТИ);
	
	Возврат ВСД;
	
КонецФункции

#КонецОбласти

#Область ФормированеОписанийИНаименований

// Формирование описания шага на клиенте
&НаКлиенте
Функция СцТ_СформироватьОписаниеШага_НаКлиенте(Краткое = Ложь)
	
	
	Если ДШ_ТипМетаданных = "РегистрыСведений" Тогда
		ПредставлениеОбъектаИлиЗаписи = "";
		Для каждого СтрокаИзмерения Из КлючЗаписиРегистра Цикл
			ПредставлениеОбъектаИлиЗаписи = СцТ_ГлавнаяФорма.СцТ_ДобавитьПодстроку(ПредставлениеОбъектаИлиЗаписи, СтрокаИзмерения.Представление, ";" + " ")
		КонецЦикла;
	Иначе
		ПредставлениеОбъектаИлиЗаписи = ДШ_ПредставлениеОбъекта;
	КонецЕсли;
	
	СтруктураДШ = Новый Структура;
	СтруктураДШ.Вставить("ПредставлениеОбъекта"        , ПредставлениеОбъектаИлиЗаписи);
	СтруктураДШ.Вставить("ТипМетаданных"               , ДШ_ТипМетаданных);
	СтруктураДШ.Вставить("ИмяМетаданных"               , ДШ_ИмяМетаданных);
	СтруктураДШ.Вставить("ПредставлениеИмениМетаданных", ДШ_ПредставлениеИмениМетаданных);
	
	ВозвращаемоеОписание = СцТ_ГлавнаяФорма.СцТ_ПолучитьОписаниеШага_АвтоГруппа(СтруктураДШ, Краткое);
	
	Возврат ВозвращаемоеОписание;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ОбновитьНаименование_НаКлиенте(Принудительно = Ложь)
	
	Если НЕ НаименованиеШагаИзмененоВручную ИЛИ Принудительно Тогда
		ДШ_Наименование = СцТ_СформироватьОписаниеШага_НаКлиенте(Истина);
	КонецЕсли;
	
	Если Принудительно Тогда
		НаименованиеШагаИзмененоВручную = Ложь;
		Модифицированность = Истина;
		// В остальных случаях менять модифицированность не нужно,
		// так как ее должно изменить изменение другого элемента формы
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСДеревомЗначения

// Возвращает значение заданного поля в дереве данных
//
// Параметры
//	ДерЗнач              - дерево с данными в котором ведется поиск
//	ИмяПараметра         - имя искомого параметра
//	ЕслиНеНайдено        - что вернуть, если значение не найдено
//	ВозвращаемыйРеквизит - имя колонки, которую нужно вернуть
//	Рекурсивно           - признак рекурсии
// Возвращаемое значение - значение нужного поля найденного узла
&НаСервереБезКонтекста
Функция СцТ_ЗначениеВДереве(
	ДерЗнач,
	ИмяПараметра,
	ЕслиНеНайдено = Неопределено,
	ВозвращаемыйРеквизит = "Значение",
	Рекурсивно = Истина)
	
	УзелЗначения = СцТ_НайтиУзелДереваФормы(ДерЗнач, "Имя", ИмяПараметра, Рекурсивно);
	Если УзелЗначения = Неопределено Тогда
		Возврат ЕслиНеНайдено;
	Иначе
		Возврат УзелЗначения[ВозвращаемыйРеквизит];
	КонецЕсли;
	
КонецФункции

// Поиск нужного узла в дереве данных
//
// Параметры
//	ДеревоФормы       - дерево, в котором ведется поиск
//	Реквизит          - имя поля в котором ведется поиск
//	ЗначениеРеквизита - значение в поле
//	Рекурсивно        - признак рекурсивного поиска
// Возвращаемое значение - найденный узел
&НаСервереБезКонтекста
Функция СцТ_НайтиУзелДереваФормы(
	ДеревоФормы,
	Реквизит,
	ЗначениеРеквизита,
	Рекурсивно = Ложь)
	
	Если ДеревоФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Узел Из ДеревоФормы.ПолучитьЭлементы() Цикл
		Если Узел[Реквизит] = ЗначениеРеквизита Тогда
			Возврат Узел;
		КонецЕсли;
		Если Рекурсивно Тогда
			НайденыйУзел = СцТ_НайтиУзелДереваФормы(Узел, Реквизит, ЗначениеРеквизита, Истина);
			Если НайденыйУзел <> Неопределено Тогда
				Возврат НайденыйУзел;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Заполнение дерева значения данными из структуры
//
// параметры
//	ДеревоФормы - заполняемое дерево
//	ДеревоСтруктур - структура с данными
&НаСервереБезКонтекста
Процедура СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(ДеревоФормы, ДеревоСтруктур)
	
	СтрокиДереваФормы = ДеревоФормы.ПолучитьЭлементы();
	Для каждого СтрокаДереваСтруктур Из ДеревоСтруктур.ИСТЗ_Строки Цикл
		СтрокаДереваФормы = СтрокиДереваФормы.Добавить();
		Для каждого КлючЗначение Из СтрокаДереваСтруктур Цикл
			Если КлючЗначение.Ключ <> "ИСТЗ_Строки" Тогда
				СтрокаДереваФормы[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		СцТ_ЗаполнитьДеревоФормыИзДереваСтруктур(СтрокаДереваФормы, СтрокаДереваСтруктур);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПреобразоватьЗначенияВДереве(ВеткаДерева, ДляОтображения = Истина)
	
	Для каждого СтрокаДерева Из ВеткаДерева.Строки Цикл
		
		Если ДляОтображения Тогда
			СтрокаДерева.Значение = ЗначениеИзСтрокиВнутр(СтрокаДерева.Значение);
		Иначе
			СтрокаДерева.Значение = ЗначениеВСтрокуВнутр(СтрокаДерева.Значение);
		КонецЕсли;
		
		ПреобразоватьЗначенияВДереве(СтрокаДерева, ДляОтображения);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Обновление картинок на закладках
// Вызывается посредством обработки ожидания, чтобы форма нормально закрывалась после редактирования
&НаКлиенте
Процедура СцТ_ОбновитьЗаголовкиЗакладок()
	
	Элементы.Страница_РедактируемоеОписание.Картинка = ?(
		ПустаяСтрока(ДШ_Описание),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
	Элементы.Страница_Комментарий.Картинка = ?(
		ПустаяСтрока(ДШ_Комментарий),
		Новый Картинка,
		БиблиотекаКартинок.РежимПросмотраСпискаСписок);
	
КонецПроцедуры

// Отображение родительского шага
// Параметры:
// ПриОткрытии - устанавливает признак, что настройка выполняется при открытии
// или (в противном случае) по обработке оповещения
&НаКлиенте
Процедура СцТ_СформироватьПредставлениеРодителя(ПриОткрытии = Истина) Экспорт
	
	Если ОА_ЭтоНовый И ПриОткрытии Тогда
		Если ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя = Неопределено Тогда
			ПредставлениеГруппы = "";
		Иначе
			// Поиск данных родительского узла в дереве по идентификатору шага
			СцТ_РодительУзла = СцТ_ГлавнаяФорма.СцТ_ПолучитьДанныеШагаПоИдентификатору(ВызвавшаяФорма,
				ОА_ОписательПоложенияШагаВДереве.ИдентификаторУзлаРодителя);
			
			Если СцТ_РодительУзла = Неопределено Тогда
				ПредставлениеГруппы = "";
			Иначе
				ОтобразитьПредставлениеСуществующегоРодительскогоШага(СцТ_РодительУзла);
			КонецЕсли;
		КонецЕсли;
		
		// Если родительский узел будет изменен у нового шага, то редактируемый шаг уже не имеет смысла,
		// так как неизвестно куда его вставить
		
	ИначеЕсли НЕ ОА_ЭтоНовый Тогда
		Если ДанныеШага = Неопределено Тогда
			ПредставлениеГруппы = "";
		Иначе
			СцТ_РодительУзла = ДанныеШага.ПолучитьРодителя();
			Если СцТ_РодительУзла = Неопределено Тогда
				ПредставлениеГруппы = "";
			Иначе
				ОтобразитьПредставлениеСуществующегоРодительскогоШага(СцТ_РодительУзла);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПредставлениеГруппы = "" Тогда
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы.СтраницаПустойГруппы;
	Иначе
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы.СтраницаЗаполненнойГруппы;
	КонецЕсли;
	
КонецПроцедуры

// Формирование представление существующего шага
// параметры
// РодительскийШаг - указатель на данные родительского шага.
// НЕ может быть Неопределено
&НаКлиенте
Процедура ОтобразитьПредставлениеСуществующегоРодительскогоШага(РодительскийШаг)
	
	ПредставлениеГруппы = НСтр("ru = 'Шаг №%1 ""%2""'");
	ПредставлениеГруппы = СтрЗаменить(
		ПредставлениеГруппы,
		"%1",
		Формат(РодительскийШаг.НомерШага, "ЧГ=0"));
	
	ПредставлениеГруппы = СтрЗаменить(
		ПредставлениеГруппы,
		"%2",
		РодительскийШаг.Наименование);
	
КонецПроцедуры

// Вывод сообщения пользователю
//
// Параметры
// ТекстСообщения - отображаемый текст
// Отказ - ссылка на переменную отказ в вызываемой процедуре
// ПолеДанных - поле, которое должно получить фокус
&НаКлиенте
Процедура СцТ_СообщитьПользователю(ТекстСообщения, Отказ = Неопределено, ПолеДанных = "")
	
	Отказ = Истина;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Поле  = ПолеДанных;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюПеременнойОшибкиГрупповогоШага(УпрФорма)
	
	Если УпрФорма.ДействиеПриОшибкеВПодчиненныхШагах = "Остановить" Тогда
		УпрФорма.Элементы.СтраницыПеременнойОшибки.ТекущаяСтраница = УпрФорма.Элементы.СтраницыПеременнойОшибки_Пустая;
	Иначе
		УпрФорма.Элементы.СтраницыПеременнойОшибки.ТекущаяСтраница = УпрФорма.Элементы.СтраницыПеременнойОшибки_Заполненная;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъектМетаданных(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипМД"                 , ДШ_ТипМетаданных);
	ПараметрыФормы.Вставить("ИмяМД"                 , ДШ_ИмяМетаданных);
	ПараметрыФормы.Вставить("ОтображатьПеречисления", Ложь);
	ПараметрыФормы.Вставить("ОтображатьРегистры"    , Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораОбъектаМетаданныхСсылки", ЭтотОбъект);
	ФормаМакрошага = ОткрытьФорму(ПутьКФормам + "ВыборОбъектаМетаданных", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОбъектаМетаданныхСсылки(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	МД_Изменены = (ДШ_ТипМетаданных <> Результат.ТипМД ИЛИ ДШ_ИмяМетаданных <> Результат.ИмяМД);
	
	ДШ_ТипМетаданных                = Результат.ТипМД;
	ДШ_ИмяМетаданных                = Результат.ИмяМД;
	ДШ_ПредставлениеИмениМетаданных = Результат.СинонимМД;
	
	Если МД_Изменены Тогда
		ДШ_ОбСсылка = "";
		ДШ_ПредставлениеОбъекта ="";
		
		КлючЗаписиРегистра.Очистить();
		ТаблицаСсылокШага.Очистить();
		
		УправлениеВидимостьюСтраницТипаМД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОбъектаМетаданных(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДШ_ИмяМетаданных = Результат.Значение;
	ДШ_ПредставлениеИмениМетаданных = Результат.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъектИнформационнойБазы(Команда)
	
	
	
	Если Элементы.СтраницыТипаМД.ТекущаяСтраница = Элементы.СтраницыТипаМД_Ссылки Тогда
		// Обработка ссылочных типов
		ВыбиратьОбъектМД = Истина;
	Иначе
		// Обработка записей
		ВыбиратьОбъектМД = Ложь;
		
		Отмена = Ложь;
		Если ПустаяСтрока(ДШ_ТипМетаданных) Тогда
			СП = Новый СообщениеПользователю;
			СП.Текст = НСтр("ru = 'Не выбран тип метаданных'");
			СП.ПутьКДанным = "ДШ_ТипМетаданных";
			СП.Сообщить();
			Отмена = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ДШ_ИмяМетаданных) Тогда
			СП = Новый СообщениеПользователю;
			СП.Текст = НСтр("ru = 'Не выбрано имя объекта метаданных'");
			СП.ПутьКДанным = "ДШ_ИмяМетаданных";
			СП.Сообщить();
			Отмена = Истина;
		КонецЕсли;
		
		Если Отмена Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеВыбораОбъектаИБ", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипМД"               , ДШ_ТипМетаданных);
	ПараметрыФормы.Вставить("ИмяМД"               , ДШ_ИмяМетаданных);
	ПараметрыФормы.Вставить("СинонимМД"           , ДШ_ПредставлениеИмениМетаданных);
	ПараметрыФормы.Вставить("ПутьКФормам"         , ПутьКФормам);
	ПараметрыФормы.Вставить("ВыбиратьОбъектМД"    , ВыбиратьОбъектМД);
	ФормаВыбораОбъектаИБ = ОткрытьФорму(ПутьКФормам + "ВыборОбъектовИБ", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
	ФормаВыбораОбъектаИБ.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	ФормаВыбораОбъектаИБ.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДШ_ТипМетаданныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> ДШ_ТипМетаданных Тогда
		ДШ_ИмяМетаданных                = "";
		ДШ_ПредставлениеИмениМетаданных = "";
		ДШ_ОбСсылка                     = "";
		ДШ_ПредставлениеОбъекта         = "";
		
		КлючЗаписиРегистра.Очистить();
		ТаблицаСсылокШага.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеВыбораОбъектаИБ(ВозвращенноеЗначение, ДопПараметры) Экспорт
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		
		Если ДШ_ТипМетаданных <> ВозвращенноеЗначение.ТипМД Тогда
			ДШ_ТипМетаданных = ВозвращенноеЗначение.ТипМД;
		КонецЕсли;
		
		Если ДШ_ИмяМетаданных <> ВозвращенноеЗначение.ИмяМД Тогда
			ДШ_ИмяМетаданных = ВозвращенноеЗначение.ИмяМД;
		КонецЕсли;
		
		Если ДШ_ПредставлениеИмениМетаданных <> ВозвращенноеЗначение.СинонимМД Тогда
			ДШ_ПредставлениеИмениМетаданных = ВозвращенноеЗначение.СинонимМД;
		КонецЕсли;
		
		ОбработатьВыборНаСервере(ВозвращенноеЗначение.ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбработатьВыборНаСервере(ВыбранноеЗначение)
	
	Если ДШ_ТипМетаданных <> "РегистрыСведений" Тогда
		ДШ_ОбСсылка = Строка(ВыбранноеЗначение.УникальныйИдентификатор());
		ДШ_ПредставлениеОбъекта = Строка(ВыбранноеЗначение);
		
		МодульОбработки = РеквизитФормыВЗначение("Объект");
		
		МассивИдентификации = МодульОбработки.СцТ_ПреобразоватьДанныеФормыТаблицыСсылокШагаВСтруктуру(ТаблицаСсылокШага);
		МодульОбработки.СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(
			ВыбранноеЗначение,
			МассивИдентификации,
			ДШ_ТипМетаданных,
			ДШ_ИмяМетаданных,
			ДШ_ПредставлениеИмениМетаданных,
			АдресТаблицыКлючей);
			
		МодульОбработки.СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(ТаблицаСсылокШага, МассивИдентификации);
		
	Иначе
		// Выбранное значение является ключем записи регистра
		// Замечание. С записями, подчиненными регистратору работать нельзя
		
		КлючЗаписиРегистра.Очистить();
		
		// Обязательные реквизиты регистровСведений
		Если Метаданные.РегистрыСведений[ДШ_ИмяМетаданных].ПериодичностьРегистраСведений <>
			Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			
			ДобавитьКлючЗаписи(ВыбранноеЗначение.Период, "Период", НСтр("ru = 'Период'"));
		КонецЕсли;
		
		// Измерения
		Для каждого Измерение Из Метаданные.РегистрыСведений[ДШ_ИмяМетаданных].Измерения Цикл
			ДобавитьКлючЗаписи(ВыбранноеЗначение[Измерение.Имя], Измерение.Имя, Измерение.Синоним);
		КонецЦикла;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКлючЗаписи(ВыбранноеЗначение, Имя, Синоним)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	ОписаниеЗначения = МодульОбработки.СцТ_ПолучитьОписаниеЗначения(ВыбранноеЗначение);
	
	НовыйКлюч = КлючЗаписиРегистра.Добавить();
	НовыйКлюч.Имя           = Имя;
	НовыйКлюч.Синоним       = Синоним;
	НовыйКлюч.ТипЗначения   = ОписаниеЗначения.ТипЗначения;
	НовыйКлюч.Значение      = ОписаниеЗначения.ВнутрЗначение;
	НовыйКлюч.Представление = ОписаниеЗначения.Представление;
	
	//Регистрация в таблице ссылок
	Если ОписаниеЗначения.ТипЗначения = "Ссылка" Тогда
		МассивИдентификации = МодульОбработки.СцТ_ПреобразоватьДанныеФормыТаблицыСсылокШагаВСтруктуру(ТаблицаСсылокШага);
		МодульОбработки.СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(
			ВыбранноеЗначение,
			МассивИдентификации,,,,
			АдресТаблицыКлючей);
			
		МодульОбработки.СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(ТаблицаСсылокШага, МассивИдентификации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДШ_ТипМетаданныхПриИзменении(Элемент)
	
	УправлениеВидимостьюСтраницТипаМД();
	
КонецПроцедуры


&НаКлиенте
Процедура УправлениеВидимостьюСтраницТипаМД()
	
	Если ДШ_ТипМетаданных = "РегистрыСведений" Тогда
		Элементы.СтраницыТипаМД.ТекущаяСтраница = Элементы.СтраницыТипаМД_Записи;
	Иначе
		Элементы.СтраницыТипаМД.ТекущаяСтраница = Элементы.СтраницыТипаМД_Ссылки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДШ_ИмяМетаданныхПриИзменении(Элемент)
	
	ДШ_ОбСсылка             = "";
	ДШ_ПредставлениеОбъекта = "";
	
	КлючЗаписиРегистра.Очистить();
	ТаблицаСсылокШага.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСсылкуВТаблице(Команда)
	
	ТекущиеДанныеСтроки = Элементы.КлючЗаписиРегистра.ТекущиеДанные;
	Если ТекущиеДанныеСтроки = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана редактируемая строка'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТипМД_Строки     = "";
	ИмяМД_Строки     = "";
	СинонимМД_Строки = "";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ПослеВыбораОбъектаИБ_ВТаблице", ЭтотОбъект, ТекущиеДанныеСтроки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипМД"           , ТипМД_Строки);
	ПараметрыФормы.Вставить("ИмяМД"           , ИмяМД_Строки);
	ПараметрыФормы.Вставить("СинонимМД"       , СинонимМД_Строки);
	ПараметрыФормы.Вставить("ПутьКФормам"     , ПутьКФормам);
	ПараметрыФормы.Вставить("ВыбиратьОбъектМД", Истина);
	
	
	Если ТекущиеДанныеСтроки.ТипЗначения = "Предопределенное" И ЗначениеЗаполнено(ТекущиеДанныеСтроки.Значение) Тогда
		ПараметрыФормы.Вставить("Предопределенное", ТекущиеДанныеСтроки.Значение);
		
	ИначеЕсли ТекущиеДанныеСтроки.ТипЗначения = "Ссылка" И ЗначениеЗаполнено(ТекущиеДанныеСтроки.Значение) Тогда
		
		СтруктураПоиска = Новый Структура("СтрокаИдентификатора", ТекущиеДанныеСтроки.Значение);
		НайденныеСтроки = ТаблицаСсылокШага.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НужнаяСтрока = НайденныеСтроки[0];
			ПараметрыФормы.ТипМД     = НужнаяСтрока.ТипМД;
			ПараметрыФормы.ИмяМД     = НужнаяСтрока.ИмяМД;
			ПараметрыФормы.СинонимМД = НужнаяСтрока.СинонимМД;
			
			ПараметрыФормы.Вставить("СтруктураИдентификации", НужнаяСтрока.СтруктураИдентификации);
			
		КонецЕсли;
	КонецЕсли;
	
	ФормаВыбораОбъектаИБ = ОткрытьФорму(ПутьКФормам + "ВыборОбъектовИБ", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
	ФормаВыбораОбъектаИБ.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	ФормаВыбораОбъектаИБ.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ПослеВыбораОбъектаИБ_ВТаблице(ВозвращенноеЗначение, ТекущиеДанныеСтроки) Экспорт
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		СтруктураДанных = ОбработатьВыборЗначенияВТаблицеНаСервере(ВозвращенноеЗначение);
		
		ТекущиеДанныеСтроки.ТипЗначения   = СтруктураДанных.ТипЗначения;
		ТекущиеДанныеСтроки.Значение      = СтруктураДанных.Значение;
		ТекущиеДанныеСтроки.Представление = СтруктураДанных.Представление;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыборЗначенияВТаблицеНаСервере(ВозвращеннаяСтруктураДанных)
	
	СтруктураСтроки = Новый Структура;
	
	Если ВозвращеннаяСтруктураДанных.ТипМД = "Перечисления" Тогда
		
		МассивЗначений = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Метаданные().ЗначенияПеречисления;
		НужноеИмя = "";
		Для каждого ЗначениеПеречисления Из МассивЗначений ЦИкл
			ПолноеИмяПредопределенного = "Перечисление." + ВозвращеннаяСтруктураДанных.ИмяМД + "." + ЗначениеПеречисления.Имя;
			Если ПредопределенноеЗначение(ПолноеИмяПредопределенного) = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение Тогда
				НужноеИмя = ПолноеИмяПредопределенного;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураСтроки.Вставить("ТипЗначения"  , "Предопределенное");
		СтруктураСтроки.Вставить("Значение"     , НужноеИмя);
		СтруктураСтроки.Вставить("Представление", Строка(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение));
		
	Иначе
		Попытка
			Предопределенное = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Предопределенное;
		Исключение
			Предопределенное = Ложь;
		КонецПопытки;
		
		Если Предопределенное Тогда
			
			ИмяМ = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Метаданные().Имя;
			
			
			Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
				ТМД = "Справочник";
				
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
				ТМД = "Документ";
				
			ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
				ТМД = "ПланСчетов";
				
			ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
				ТМД = "ПланВидовХарактеристик";
				
			ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
				ТМД = "ПланВидовРасчета";
				
			ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
				ТМД = "Перечисление";
				
			ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
				ТМД = "БизнесПроцесс";
				
			ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение)) Тогда
				ТМД = "Задача";
				
			Иначе
				ТМД = "";
				
			КонецЕсли;
			
			Если ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Пустая() Тогда
				ВнутрЗначение = ТМД + "." + ИмяМ + ".ПустоеЗначение";
			Иначе
				МассивИменПредопределенных = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.Метаданные().ПолучитьИменаПредопределенных();
				НужноеИмя = "";
				Для каждого ИмяПредопределенного Из МассивИменПредопределенных ЦИкл
					ПолноеИмяПредопределенного = ТМД + "." + ИмяМ + "." + ИмяПредопределенного;
					Если ПредопределенноеЗначение(ПолноеИмяПредопределенного) = ВозвращеннаяСтруктураДанных.ВыбранноеЗначение Тогда
						НужноеИмя = ПолноеИмяПредопределенного;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ВнутрЗначение = НужноеИмя;
			КонецЕсли;
			ТипЗначения = "Предопределенное";
			
			СтруктураСтроки.Вставить("ТипЗначения"  , "Предопределенное");
			СтруктураСтроки.Вставить("Значение"     , ВнутрЗначение);
			СтруктураСтроки.Вставить("Представление", Строка(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение));
			
		Иначе
			МодульОбработки = РеквизитФормыВЗначение("Объект");
			
			ИдентификаторСсылки = Строка(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение.УникальныйИдентификатор());
			МассивИдентификации = МодульОбработки.СцТ_ПреобразоватьДанныеФормыТаблицыСсылокШагаВСтруктуру(ТаблицаСсылокШага);
			МодульОбработки.СцТ_ДобавитьИлиИзменитьСтруктуруИдентификации(
				ВозвращеннаяСтруктураДанных.ВыбранноеЗначение,
				МассивИдентификации,
				ВозвращеннаяСтруктураДанных.ТипМД,
				ВозвращеннаяСтруктураДанных.ИмяМД,
				ВозвращеннаяСтруктураДанных.СинонимМД,
				АдресТаблицыКлючей);
				
			МодульОбработки.СцТ_ЗаполнитьТаблицуИдентификацииФормыПоДаннымМассива(ТаблицаСсылокШага, МассивИдентификации);
				
			СтруктураСтроки.Вставить("ТипЗначения"  , "Ссылка");
			СтруктураСтроки.Вставить("Значение"     , ИдентификаторСсылки);
			СтруктураСтроки.Вставить("Представление", Строка(ВозвращеннаяСтруктураДанных.ВыбранноеЗначение));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураСтроки;
	
КонецФункции

&НаКлиенте
Процедура СтруктураИдентификации(Команда)
	
	СтруктураПоиска = Новый Структура("СтрокаИдентификатора", ДШ_ОбСсылка);
	НайденныеСтроки = ТаблицаСсылокШага.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		л_ТипМД                  = НайденныеСтроки[0].ТипМД;
		л_ИмяМД                  = НайденныеСтроки[0].ИмяМД;
		л_СинонимМД              = НайденныеСтроки[0].СинонимМД;
		л_Представление          = НайденныеСтроки[0].Представление;
		л_Идентификатор          = НайденныеСтроки[0].СтрокаИдентификатора;
		л_СтруктураИдентификации = НайденныеСтроки[0].СтруктураИдентификации;
		л_ПоискПоЗапросу         = НайденныеСтроки[0].ПоискПоЗапросу;
		л_ТекстЗапроса           = НайденныеСтроки[0].ТекстЗапроса;
	Иначе
		л_ТипМД                  = ДШ_ТипМетаданных;
		л_ИмяМД                  = ДШ_ИмяМетаданных;
		л_СинонимМД              = ДШ_ПредставлениеИмениМетаданных;
		л_Представление          = ДШ_ПредставлениеОбъекта;
		л_Идентификатор          = ДШ_ОбСсылка;
		л_СтруктураИдентификации = Неопределено;
		л_ПоискПоЗапросу         = Ложь;
		л_ТекстЗапроса           = "";
	КонецЕсли;
	
	ПараметрыФормыИдентификации = Новый Структура;
	ПараметрыФормыИдентификации.Вставить("ТипМД"                 , л_ТипМД);
	ПараметрыФормыИдентификации.Вставить("ИмяМД"                 , л_ИмяМД);
	ПараметрыФормыИдентификации.Вставить("Идентификатор"         , л_Идентификатор);
	ПараметрыФормыИдентификации.Вставить("СинонимМД"             , л_СинонимМД);
	ПараметрыФормыИдентификации.Вставить("Представление"         , л_Представление);
	ПараметрыФормыИдентификации.Вставить("СтруктураИдентификации", л_СтруктураИдентификации);
	ПараметрыФормыИдентификации.Вставить("АдресТаблицыКлючей"    , СцТ_ГлавнаяФорма.АдресТаблицыКлючей);
	ПараметрыФормыИдентификации.Вставить("ПоискПоЗапросу"        , л_ПоискПоЗапросу);
	ПараметрыФормыИдентификации.Вставить("ТекстЗапроса"          , л_ТекстЗапроса);
	ПараметрыФормыИдентификации.Вставить("СтруктураПараметров"   , СцТ_ГлавнаяФорма.ГлобальныеПараметры);
	
	ПараметрыФормыИдентификации.Вставить("РежимСовместимости838" , СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ПараметрыФормыИдентификации.Вставить("ФормаОткрытаПодВнешнимУправлением", ФормаОткрытаПодВнешнимУправлением);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИзмененияСтруктурыИдентификации", ЭтотОбъект);
	
	ФормаИдентификации = ОткрытьФорму(ПутьКФормам + "КлючиИдентификации",
		ПараметрыФормыИдентификации,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
		
	ФормаИдентификации.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	ФормаИдентификации.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияСтруктурыИдентификации(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Изменение данных этой формы
	ДШ_ТипМетаданных                = Результат.ТипМД;
	ДШ_ИмяМетаданных                = Результат.ИмяМД;
	ДШ_ПредставлениеИмениМетаданных = Результат.СинонимМД;
	ДШ_ПредставлениеОбъекта         = Результат.Представление;
	ДШ_ОбСсылка                     = Результат.Идентификатор;
	
	// Регистрация в структуре идентификации
	СтруктураПоиска = Новый Структура("СтрокаИдентификатора", Результат.Идентификатор);
	
	НайденныеСтроки = ТаблицаСсылокШага.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 1 Тогда
		Для каждого СтрокаКоллекции Из НайденныеСтроки Цикл
			ТаблицаСсылокШага.Удалить(СтрокаКоллекции);
		КонецЦикла;
		
		НужнаяСтрока = ТаблицаСсылокШага.Добавить();
		НужнаяСтрока.СтрокаИдентификатора = Результат.Идентификатор;
	ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
		
		НужнаяСтрока = НайденныеСтроки[0];
	Иначе
		НужнаяСтрока = ТаблицаСсылокШага.Добавить();
		НужнаяСтрока.СтрокаИдентификатора = Результат.Идентификатор;
	КонецЕсли;
	
	НужнаяСтрока.ТипМД          = Результат.ТипМД;
	НужнаяСтрока.ИмяМД          = Результат.ИмяМД;
	НужнаяСтрока.СинонимМД = Результат.СинонимМД;
	НужнаяСтрока.Представление  = Результат.Представление;
	
	НужнаяСтрока.СтруктураИдентификации.Очистить();
	Для каждого СтрИдент Из Результат.СтруктураИдентификации Цикл
		НовыйКлюч = НужнаяСтрока.СтруктураИдентификации.Добавить();
		НовыйКлюч.Имя             = СтрИдент.Имя;
		НовыйКлюч.Значение        = СтрИдент.Значение;
		НовыйКлюч.СокрТипЗначения = СтрИдент.СокрТипЗначения;
	КонецЦикла;
	
	НужнаяСтрока.ПоискПоЗапросу  = Результат.ПоискПоЗапросу;
	НужнаяСтрока.ТекстЗапроса    = Результат.ТекстЗапроса;
	
	// При необходимости нужно изменить представление
	ДШ_ПредставлениеОбъекта = Результат.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИдентификацииТаблицы(Команда)
	
	ТекущиеДанные = Элементы.КлючЗаписиРегистра.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипЗначения <> "Ссылка" Тогда
		ТекстСообщения = НСтр("ru = 'Настройка структры идентификации может быть выполнена только для ссылочных типов.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	
	СтруктураПоиска = Новый Структура("СтрокаИдентификатора", ТекущиеДанные.Значение);
	НайденныеСтроки = ТаблицаСсылокШага.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		л_ТипМД                  = НайденныеСтроки[0].ТипМД;
		л_ИмяМД                  = НайденныеСтроки[0].ИмяМД;
		л_СинонимМД              = НайденныеСтроки[0].СинонимМД;
		л_Представление          = НайденныеСтроки[0].Представление;
		л_Идентификатор          = НайденныеСтроки[0].СтрокаИдентификатора;
		л_СтруктураИдентификации = НайденныеСтроки[0].СтруктураИдентификации;
		л_ПоискПоЗапросу         = НайденныеСтроки[0].ПоискПоЗапросу;
		л_ТекстЗапроса           = НайденныеСтроки[0].ТекстЗапроса;
	Иначе
		л_ТипМД                  = "";
		л_ИмяМД                  = "";
		л_СинонимМД              = "";
		л_Представление          = ТекущиеДанные.ПРедставление;
		л_Идентификатор          = ТекущиеДанные.Значение;
		л_СтруктураИдентификации = Неопределено;
		л_ПоискПоЗапросу         = Ложь;
		л_ТекстЗапроса           = "";
	КонецЕсли;
	
	ПараметрыФормыИдентификации = Новый Структура;
	ПараметрыФормыИдентификации.Вставить("ТипМД"                 , л_ТипМД);
	ПараметрыФормыИдентификации.Вставить("ИмяМД"                 , л_ИмяМД);
	ПараметрыФормыИдентификации.Вставить("Идентификатор"         , л_Идентификатор);
	ПараметрыФормыИдентификации.Вставить("СинонимМД"             , л_СинонимМД);
	ПараметрыФормыИдентификации.Вставить("Представление"         , л_Представление);
	ПараметрыФормыИдентификации.Вставить("СтруктураИдентификации", л_СтруктураИдентификации);
	ПараметрыФормыИдентификации.Вставить("АдресТаблицыКлючей"    , СцТ_ГлавнаяФорма.АдресТаблицыКлючей);
	ПараметрыФормыИдентификации.Вставить("ПоискПоЗапросу"        , л_ПоискПоЗапросу);
	ПараметрыФормыИдентификации.Вставить("ТекстЗапроса"          , л_ТекстЗапроса);
	ПараметрыФормыИдентификации.Вставить("СтруктураПараметров"   , СцТ_ГлавнаяФорма.ГлобальныеПараметры);
	
	ПараметрыФормыИдентификации.Вставить("РежимСовместимости838" , СцТ_ГлавнаяФорма.РежимСовместимости838);
	
	ПараметрыФормыИдентификации.Вставить("ФормаОткрытаПодВнешнимУправлением", ФормаОткрытаПодВнешнимУправлением);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИзмененияСтруктурыИдентификацииВТаблице", ЭтотОбъект, ТекущиеДанные);
	
	ФормаИдентификации = ОткрытьФорму(ПутьКФормам + "КлючиИдентификации",
		ПараметрыФормыИдентификации,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
		
	ФормаИдентификации.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	ФормаИдентификации.Активизировать();
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеИзмененияСтруктурыИдентификацииВТаблице(Результат, ТекущиеДанныеСтроки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Изменение данных этой формы
	ТекущиеДанныеСтроки.Представление = Результат.Представление;
	ТекущиеДанныеСтроки.Значение      = Результат.Идентификатор;
	
	// Регистрация в структуре идентификации
	СтруктураПоиска = Новый Структура("СтрокаИдентификатора", Результат.Идентификатор);
	НайденныеСтроки = ТаблицаСсылокШага.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НужнаяСтрока = НайденныеСтроки[0];
	Иначе
		НужнаяСтрока = ТаблицаСсылокШага.Добавить();
		НужнаяСтрока.СтрокаИдентификатора = Результат.Идентификатор;
	КонецЕсли;
	
	НужнаяСтрока.ТипМД          = Результат.ТипМД;
	НужнаяСтрока.ИмяМД          = Результат.ИмяМД;
	НужнаяСтрока.СинонимМД = Результат.СинонимМД;
	НужнаяСтрока.Представление  = Результат.Представление;
	
	НужнаяСтрока.СтруктураИдентификации.Очистить();
	Для каждого СтрИдент Из Результат.СтруктураИдентификации Цикл
		НовыйКлюч = НужнаяСтрока.СтруктураИдентификации.Добавить();
		НовыйКлюч.Имя             = СтрИдент.Имя;
		НовыйКлюч.Значение        = СтрИдент.Значение;
		НовыйКлюч.СокрТипЗначения = СтрИдент.СокрТипЗначения;
	КонецЦикла;
	
	НужнаяСтрока.ПоискПоЗапросу  = Результат.ПоискПоЗапросу;
	НужнаяСтрока.ТекстЗапроса    = Результат.ТекстЗапроса;
	
	// При необходимости нужно изменить представление
	ДШ_ПредставлениеОбъекта = Результат.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючЗаписиРегистраПриИзменении(Элемент)
	
	ТД = Элементы.КлючЗаписиРегистра.ТекущиеДанные;
	
	УстановитьТипЗначенияПоля(ТД.ТипЗначения, ТД);
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипЗначенияПоля(ТекущийТип, ДанныеСтроки)
	
	Если ТекущийТип = "Число" Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Число");
		
	ИначеЕсли ТекущийТип = "Дата" Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Дата");
		
	ИначеЕсли ТекущийТип = "Булево" Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Булево");
		
	Иначе
		
		ОписаниеТипов = Новый ОписаниеТипов("Строка");
		
	КонецЕсли;
	
	ДанныеСтроки.Значение = ОписаниеТипов.ПривестиЗначение(ДанныеСтроки.Значение);
	
	Элементы.КЗР_Значение.ОграничениеТипа = ОписаниеТипов;
	
	Элементы.КЗР_Значение.ВыбиратьТип     = Ложь;
	Элементы.КЗР_Значение.КнопкаВыбора    = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КЗР_ТипЗначенияПриИзменении(Элемент)
	
	ТД = Элементы.КлючЗаписиРегистра.ТекущиеДанные;
	
	Если ПредыдущийТип <> ТД.ТипЗначения Тогда
		УстановитьТипЗначенияПоля(ТД.ТипЗначения, ТД);
		
		Если ТД.ТипЗначения = "Ссылка" Тогда
			// Ссылки еще нет, так как пользователь только еще выбрал тип ссылка
			
			Элементы.КлючЗаписиРегистра.ЗакончитьРедактированиеСтроки(Ложь);
			
			ПараметрыФормыИдентификации = Новый Структура;
			ПараметрыФормыИдентификации.Вставить("ТипМД"                 , "");
			ПараметрыФормыИдентификации.Вставить("ИмяМД"                 , "");
			ПараметрыФормыИдентификации.Вставить("Идентификатор"         , ТД.Значение);
			ПараметрыФормыИдентификации.Вставить("СинонимМД"             , "");
			ПараметрыФормыИдентификации.Вставить("Представление"         , ТД.Представление);
			ПараметрыФормыИдентификации.Вставить("СтруктураИдентификации", Неопределено);
			ПараметрыФормыИдентификации.Вставить("АдресТаблицыКлючей"    , СцТ_ГлавнаяФорма.АдресТаблицыКлючей);
			ПараметрыФормыИдентификации.Вставить("ПоискПоЗапросу"        , Ложь);
			ПараметрыФормыИдентификации.Вставить("ТекстЗапроса"          , "");
			
			ПараметрыФормыИдентификации.Вставить("РежимСовместимости838" , СцТ_ГлавнаяФорма.РежимСовместимости838);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИзмененияСтруктурыИдентификацииВТаблице", ЭтотОбъект, ТД);
			
			ФормаНастройкиИдентификации = ОткрытьФорму(ПутьКФормам + "КлючиИдентификации",
				ПараметрыФормыИдентификации,
				ЭтотОбъект,,,,
				ОписаниеОповещения);
				
			ФормаНастройкиИдентификации.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
			ФормаНастройкиИдентификации.Активизировать();
			
		ИначеЕсли ТД.ТипЗначения = "УникальныйИдентификатор" Тогда
			ТД.Значение = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		ПредыдущийТип = ТД.ТипЗначения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючЗаписиРегистраПередНачаломИзменения(Элемент, Отказ)
	
	ТД = Элементы.КлючЗаписиРегистра.ТекущиеДанные;
	ПредыдущийТип = ТД.ТипЗначения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПользовательскоеОписание()
	
	ТекстОписания = ДШ_Описание;
	
	Если НЕ ДШ_СкрытьАвтоописание Тогда
		ДШ_Автоописание = СцТ_СформироватьОписаниеШага_НаКлиенте();
		ТекстОписания = СцТ_ГлавнаяФорма.СцТ_ДобавитьПодстроку(ТекстОписания, ДШ_Автоописание, Символы.ПС);
	КонецЕсли;
	
	ПользовательскоеОписание = ТекстОписания;
	
КонецПроцедуры

&НаКлиенте
Процедура ДШ_СкрытьАвтоописаниеПриИзменении(Элемент)
	
	ОбновитьПользовательскоеОписание();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница = Элементы.Страница_ОписаниеШага Тогда
		ОбновитьПользовательскоеОписание();
	КонецЕсли;
	
КонецПроцедуры





#КонецОбласти

#КонецОбласти

