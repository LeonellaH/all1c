
#Область Перемнные

&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

&НаКлиенте
Перем СцТ_ИдентификаторТекущегоШагаСценария Экспорт;

&НаКлиенте
Перем ФормаРодительскогоПроцесса Экспорт;

&НаКлиенте
Перем ШагРодительскогоПроцесса Экспорт;

#КонецОбласти

#Область ЭкспортныеМетоды

&НаКлиенте
Функция СцТ_ВыполнитьСохранениеДанныхИЗакрыть() Экспорт
	
	НовыйАдресДерева = СцТ_ПолучитьАдресИзмененногоДереваМакрошагов();
	
	Если НовыйАдресДерева <> Неопределено Тогда
			
		Оповестить("СцТ_ИзменениеДереваМакрошагов", НовыйАдресДерева, ЭтотОбъект);
		
		Модифицированность = Ложь;
		Закрыть();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимСовместимости838 Тогда
		УстановитьДействие("ПередЗакрытием", "ПередЗакрытиеБезРежимаСовместимости");
	КонецЕсли;
	
	ДействиеФормы         = Параметры.Действие;
	АдресДереваМакрошагов = Параметры.АдресДереваМакрошагов;
	ПутьКФормам           = Параметры.ПутьКФормам;
	
	ДеревоМакрошаговНаСервере = ПолучитьИзВременногоХранилища(АдресДереваМакрошагов);
	
	Если ДействиеФормы = "Новый" Тогда
		
		// Нужно сформировать новое уникальное имя
		ШаблонИмени = "Новый макрошаг";
		МакетИмени = ШаблонИмени;
		
		Итератор = 1;
		Пока ДеревоМакрошаговНаСервере.Строки.Найти(МакетИмени, "Наименование", Ложь) <> Неопределено Цикл
			МакетИмени = ШаблонИмени + " " + Строка(Итератор);
			Итератор = Итератор + 1;
		КонецЦикла;
		
		ИмяМакрошага = МакетИмени;
		
		ИдентификаторМакрошага = Строка(Новый УникальныйИдентификатор);
		
	ИначеЕсли ДействиеФормы = "Копирование" Тогда
		
		// Нужно сформировать новое уникальное имя
		ШаблонИмени = "Новый макрошаг";
		МакетИмени = ШаблонИмени;
		
		Итератор = 1;
		Пока ДеревоМакрошаговНаСервере.Строки.Найти(МакетИмени, "Наименование", Ложь) <> Неопределено Цикл
			МакетИмени = ШаблонИмени + " " + Строка(Итератор);
			Итератор = Итератор + 1;
		КонецЦикла;
		
		ИмяМакрошага = МакетИмени;
		
		ИдентификаторМакрошага = Строка(Новый УникальныйИдентификатор);
		
		// Загрузка данных из копируемого шага
		УзелДерева =  ДеревоМакрошаговНаСервере.Строки.Найти(Параметры.УИШ, "УИШ");
		Если УзелДерева <> Неопределено Тогда
			
			СцТ_ЗагрузитьШагиИзДЗвДеревоФормы(УзелДерева, БлокСценария);
			
		КонецЕсли;
		
	ИначеЕсли ДействиеФормы = "ДобавитьШаги"
		  ИЛИ ДействиеФормы = "Редактирование" Тогда
		  
		Если ЗначениеЗаполнено(Параметры.УИШ) Тогда
		
			ИдентификаторМакрошага = Параметры.УИШ;
			// Поиск нужного шага в дереве
			УзелДерева =  ДеревоМакрошаговНаСервере.Строки.Найти(ИдентификаторМакрошага, "УИШ");
			Если УзелДерева <> Неопределено Тогда
				ИмяМакрошага = УзелДерева.Наименование;
				СцТ_ЗагрузитьШагиИзДЗвДеревоФормы(УзелДерева, БлокСценария);
			Иначе
				ПреобразоватьФормуДляОтображенияОтсутствующегоМакрошага(ИмяМакрошага);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Параметры.НаименованиеШага) Тогда
			
			ИмяМакрошага = Параметры.НаименованиеШага;
			// Поиск нужного шага в дереве
			УзелДерева =  ДеревоМакрошаговНаСервере.Строки.Найти(ИмяМакрошага, "Наименование");
			Если УзелДерева <> Неопределено Тогда
				ИдентификаторМакрошага = УзелДерева.УИШ;
				СцТ_ЗагрузитьШагиИзДЗвДеревоФормы(УзелДерева, БлокСценария);
			Иначе
				ПреобразоватьФормуДляОтображенияОтсутствующегоМакрошага(ИмяМакрошага);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ДействиеФормы = "Выполнение" Тогда
		
		ИмяМакрошага = Параметры.ИмяМакрошага;
		// Поиск нужного шага в дереве
		УзелДерева = ДеревоМакрошаговНаСервере.Строки.Найти(ИмяМакрошага, "Наименование");
		Если УзелДерева <> Неопределено Тогда
			ИмяМакрошага = УзелДерева.Наименование;
			ИдентификаторМакрошага = УзелДерева.УИШ;
			
			СцТ_ЗагрузитьШагиИзДЗвДеревоФормы(УзелДерева, БлокСценария);
			АвтовыполнениеРазрешено = Истина;
			
		Иначе
			ПреобразоватьФормуДляОтображенияОтсутствующегоМакрошага(ИмяМакрошага);
			АвтовыполнениеРазрешено = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Настройка внешнего вида
	// достаточно только спрятать ненужные элементы,
	// так как смена режима для этой формы не предусмотрена
	Если Параметры.РежимПрогона Тогда
		
		// Командная панель
		Элементы.Макрошаг.Видимость                  = Ложь;
		
		Элементы.ДобавитьГрупповойШаг.Видимость      = Ложь;
		Элементы.ДобавитьШаг.Видимость               = Ложь;
		Элементы.СкопироватьШаг.Видимость            = Ложь;
		Элементы.ИзменитьШаг.Видимость               = Ложь;
		Элементы.УдалитьШаг.Видимость                = Ложь;
		
		Элементы.ПереместитьУзелВверх.Видимость      = Ложь;
		Элементы.ПереместитьУзелВниз.Видимость       = Ложь;
		Элементы.ПовыситьУровеньУзла.Видимость       = Ложь;
		Элементы.ПонизитьУровеньУзла.Видимость       = Ложь;
		
		Элементы.ВыполнитьСценарий.Видимость                = Истина;
		Элементы.ОстановитьВыполнение.Видимость             = Истина;
		Элементы.ВыполнитьСценарий.ТолькоВоВсехДействиях    = Ложь;
		Элементы.ОстановитьВыполнение.ТолькоВоВсехДействиях = Ложь;
		
		// Контекстное меню
		Элементы.КМБДобавитьГрупповойШаг.Видимость         = Ложь;
		Элементы.КМБДобавитьШаг.Видимость                  = Ложь;
		Элементы.КМБИзменитьШаг.Видимость                  = Ложь;
		Элементы.КМБУдалитьШаг.Видимость                   = Ложь;
		Элементы.КМБСкопироватьШаг.Видимость               = Ложь;
		
		Элементы.КМБПереместитьВверх.Видимость             = Ложь;
		Элементы.КМБПереместитьВниз.Видимость              = Ложь;
		Элементы.КМБПовыситьУровень.Видимость              = Ложь;
		Элементы.КМБПонизитьУровень.Видимость              = Ложь;
		
	Иначе
		// Обратный переход не предусмотрен, поэтому нужно только спрятать
		// ненужные при записи элементы
		
		// Командная панель
		Элементы.ВыполнитьСценарий.ТолькоВоВсехДействиях = Истина;
		//Видимость               = Ложь;
		Элементы.ОстановитьВыполнение.ТолькоВоВсехДействиях = Истина;
		// Блок сценария
		//Элементы.БлокСценарияТочкаОстанова.Видимость       = Ложь;
		// Контекстное меню
		//Элементы.КМБВыполнитьСценарий.Видимость            = Ложь;
		//Элементы.КМБТочкаОстановаУстановитьСнять.Видимость = Ложь;
		
	КонецЕсли;
	
	Заголовок = СформироватьЗаголовок(ИмяМакрошага);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("СцТ_ОповеститьОбОткрытииФормы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_ИзменениеДереваМакрошагов" И Источник <> ЭтотОбъект Тогда
		АдресДереваМакрошагов = Параметр;
		
	ИначеЕсли ИмяСобытия = "СцТ_ИмпортШаговСценария" И Источник = ЭтотОбъект Тогда
		СцТ_ГлавнаяФорма.СцТ_ИмпортироватьШагиСценария(Параметр, ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		ТекстВопроса = НСтр("ru = 'Данные были модифицированы. Сохранить изменения?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ОбработатьОтветНаВопросОСохраненииПередЗакрытием", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытиеБезРежимаСовместимости(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЗавершениеРаботы Тогда
		
			ТекстВопроса = НСтр("ru = 'Данные были модифицированы. Сохранить изменения?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ОбработатьОтветНаВопросОСохраненииПередЗакрытием", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Изменен макрошаг. При закрытии эти изменения будут утеряны'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура БлокСценарияПриИзменении(Элемент)
	
	ТекДанные = Элементы.БлокСценария.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СцТ_ГлавнаяФорма.СцТ_ПронумероватьШаги_НаКлиенте(,, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.БлокСценария.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "БлокСценарияТочкаОстанова" Тогда
		ТекДанные.ТочкаОстанова = (1 - ТекДанные.ТочкаОстанова);
	Иначе
		СцТ_ГлавнаяФорма.СцТ_ОткрытьФормуНастройкиШага(ВыбраннаяСтрока[0], ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияПриАктивизацииСтроки(Элемент)
	
	// Настройку доступности кнопок нужно выполнить сразу
	// Это необходимо для правильного отображения контекстного меню
	ТекущиеДанныеШага = Элемент.ТекущиеДанные;
	
	СцТ_ГлавнаяФорма.СцТ_ОбновитьДоступностьПовышенияИлиПониженияУровня(
		ТекущиеДанныеШага,
		ЭтотОбъект);
	
	Если ТекущиеДанныеШага = Неопределено Тогда
		// Командная панель
		Элементы.СкопироватьШаг.Доступность        = Ложь;
		Элементы.ИзменитьШаг.Доступность           = Ложь;
		Элементы.УдалитьШаг.Доступность            = Ложь;
		Элементы.РазвернутьВсеУзлы.Доступность     = Ложь;
		Элементы.СвернутьВсеУзлы.Доступность       = Ложь;
		Элементы.ПереместитьУзелВверх.Доступность  = Ложь;
		Элементы.ПереместитьУзелВниз.Доступность   = Ложь;
		Элементы.ВыполнитьСценарий.Доступность     = Ложь;
		Элементы.ВыполнитьОтдельныйШаг.Доступность = Ложь;
		Элементы.ОстановитьВыполнение.Доступность  = Ложь;
		
		// Контекстное меню
		Элементы.КМБСкопироватьШаг.Доступность                 = Ложь;
		Элементы.КМБИзменитьШаг.Доступность                    = Ложь;
		Элементы.КМБУдалитьШаг.Доступность                     = Ложь;
		Элементы.КМБПереместитьВверх.Доступность               = Ложь;
		Элементы.КМБПереместитьВниз.Доступность                = Ложь;
		Элементы.КМБВыполнитьСценарий.Доступность              = Ложь;
		Элементы.КМБВыполнитьШаг.Доступность                   = Ложь;
		Элементы.КМБОтметитьВыполнение.Доступность             = Ложь;
		Элементы.КМБСброситьВыполнение.Доступность             = Ложь;
		Элементы.КМБТочкаОстановаУстановитьСнять.Доступность   = Ложь;
		Элементы.КМБПривязатьАвтогруппуКФорме.Доступность      = Ложь;
		Элементы.КМБАктивизироватьТестируемуюФорму.Доступность = Ложь;
		Элементы.КМБЦветАвто.Доступность                       = Ложь;
		Элементы.КМБЦветКрасный.Доступность                    = Ложь;
		Элементы.КМБЦветЗеленый.Доступность                    = Ложь;
		Элементы.КМБЦветСиний.Доступность                      = Ложь;
		Элементы.КМБЦветОранжевый.Доступность                  = Ложь;
		Элементы.КМБЦветФиолетовый.Доступность                 = Ложь;
		
		Элементы.КМБАктивностьШаговУстановить.Доступность      = Ложь;
		Элементы.КМБАктивностьШаговСбросить.Доступность        = Ложь;
		
		Возврат;
	КонецЕсли;
	
	// Установка доступности кнопок, не зависящих
	// от режима работы и типа шага
	
	// Командная панель
	Элементы.СкопироватьШаг.Доступность        = Истина;
	Элементы.ИзменитьШаг.Доступность           = Истина;
	Элементы.УдалитьШаг.Доступность            = Истина;
	Элементы.РазвернутьВсеУзлы.Доступность     = Истина;
	Элементы.СвернутьВсеУзлы.Доступность       = Истина;
	Элементы.ПереместитьУзелВверх.Доступность  = Истина;
	Элементы.ПереместитьУзелВниз.Доступность   = Истина;
	Элементы.ВыполнитьСценарий.Доступность     = Истина;
	Элементы.ВыполнитьОтдельныйШаг.Доступность = Истина;
	
	// Контекстное меню
	Элементы.КМБСкопироватьШаг.Доступность               = Истина;
	Элементы.КМБИзменитьШаг.Доступность                  = Истина;
	Элементы.КМБУдалитьШаг.Доступность                   = Истина;
	Элементы.КМБАктивностьШаговУстановить.Доступность    = Истина;
	Элементы.КМБАктивностьШаговСбросить.Доступность      = Истина;
	Элементы.КМБПереместитьВверх.Доступность             = Истина;
	Элементы.КМБПереместитьВниз.Доступность              = Истина;
	Элементы.КМБВыполнитьСценарий.Доступность            = Истина;
	Элементы.КМБВыполнитьШаг.Доступность                 = Истина;
	Элементы.КМБОтметитьВыполнение.Доступность           = Истина;
	Элементы.КМБСброситьВыполнение.Доступность           = Истина;
	
	// Временная мера до исправления ошибки видимости кнопок КМ
	Элементы.КМБТочкаОстановаУстановитьСнять.Доступность = СцТ_ГлавнаяФорма.СцТ_РежимВыполнения;
	
	Элементы.КМБЦветАвто.Доступность                     = Истина;
	Элементы.КМБЦветКрасный.Доступность                  = Истина;
	Элементы.КМБЦветЗеленый.Доступность                  = Истина;
	Элементы.КМБЦветСиний.Доступность                    = Истина;
	Элементы.КМБЦветОранжевый.Доступность                = Истина;
	Элементы.КМБЦветФиолетовый.Доступность               = Истина;
	
	// Управление доступностью кнопок, зависящих от типа шага и режима работы
	
	ТекущийТипШага = ТекущиеДанныеШага.ТипШага;
	
	// Кнопки, работающие для текущей строки
	ЭтоИнтерактивнаяГруппа = (ТекущийТипШага = "ИнтерактивнаяАвтоГруппа");
	Элементы.КМБПривязатьАвтогруппуКФорме.Доступность      = ЭтоИнтерактивнаяГруппа;
	Элементы.КМБАктивизироватьТестируемуюФорму.Доступность = ЭтоИнтерактивнаяГруппа;
	
	// Всё отображение не связанное с кнопками меню
	ПодключитьОбработчикОжидания("СцТ_ОтобразитьСостояниеТекущегоШагаПослеОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	//СцТ_ГлавнаяФорма.ДобавитьНовыйШаг(ЭтотОбъект, Элемент, Копирование);
	
	//Отказ = Истина;
	//
	//Если СцТ_ГлавнаяФорма.СцТ_РежимВыполнения Тогда
	//	Возврат;
	//КонецЕсли;
	//ТекущийЭлемент = Элементы.БлокСценария;
	//
	//// Определение текущего узла дереве сценария
	//ТекущаяСтрокаСценария = Элемент.ТекущиеДанные;
	//
	//Если Копирование Тогда
	//	
	//	Если ТекущаяСтрокаСценария <> Неопределено Тогда
	//		
	//		ОписаниеНовых = СцТ_ГлавнаяФорма.СцТ_ОписаниеНовыхШаговВетви(ТекущаяСтрокаСценария);
	//		
	//		Если Не ПустаяСтрока(ОписаниеНовых) Тогда
	//			ПоказатьПредупреждение(, НСтр("ru = 'Некоторые из шагов являются новыми и еще не сохранены: '")
	//				+ ОписаниеНовых
	//				+ ".");
	//			Возврат;
	//		КонецЕсли;
	//		
	//		РодительУзла = СцТ_ГлавнаяФорма.СцТ_УзелБлокаСценария(
	//			ТекущаяСтрокаСценария.ПолучитьРодителя(),
	//			ЭтотОбъект);
	//		ИндексТекущегоУзла = РодительУзла.ПолучитьЭлементы().Индекс(ТекущаяСтрокаСценария);
	//		
	//		НовыйУзелСценария = СцТ_ГлавнаяФорма.СцТ_СкопироватьУзелСценария(
	//			ТекущаяСтрокаСценария,
	//			РодительУзла,
	//			ИндексТекущегоУзла + 1,,,,,,,, ЭтотОбъект);
	//		
	//		Элемент.ТекущаяСтрока = НовыйУзелСценария.ПолучитьИдентификатор();
	//		
	//		СцТ_ГлавнаяФорма.СцТ_ОбновитьАвтоОписаниеШагаВДеревеБлокаСценария(
	//			Элементы.БлокСценария.ТекущиеДанные, ЭтотОбъект);
	//		
	//	КонецЕсли;
	//	
	//Иначе
	//	
	//	РодительНовогоШага = Элементы.БлокСценария.ТекущиеДанные;
	//	Если РодительНовогоШага <> Неопределено Тогда
	//		Если НЕ СцТ_ГлавнаяФорма.СцТ_ЭтоГрупповойШаг(РодительНовогоШага.ТипШага) Тогда
	//			РодительНовогоШага = РодительНовогоШага.ПолучитьРодителя();
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если РодительНовогоШага <> Неопределено И СцТ_ГлавнаяФорма.СцТ_ЭтоНовыйШаг(РодительНовогоШага) Тогда
	//		
	//		ПоказатьПредупреждение(,
	//			СтрЗаменить(
	//				НСтр("ru = 'Шаг №%1 еще не сохранен. Требуется выполнить сохранение шага'"),
	//				"%1",
	//				Формат(РодительНовогоШага.НомерШага, "ЧГ=0")));
	//		Возврат;
	//		
	//	КонецЕсли;
	//	
	//	// Определение приоритетов: Дочерние узлы действий ориентируются сначала
	//	// на тип шага текущей строки и по-умолчанию воспринимают его как родителя
	//	// если текущий тип шага не подразумевает детализирующих типов шагов,
	//	// то анализируется родительский узел.
	//	
	//	// Формирование списков выбора доступных действий
	//	СписокВыбора = СцТ_ГлавнаяФорма.СцТ_ЗаполнитьСписокДоступныхШагов_НаКлиенте(ТекущаяСтрокаСценария, Истина);
	//	
	//	СтруктураДопПараметров = Новый Структура("ВызвавшаяФорма", ЭтотОбъект);
	//	// Добавление шагов в сценарий
	//	СписокВыбора.ПоказатьВыборЭлемента(
	//		Новый ОписаниеОповещения(
	//			"СцТ_ОбработатьВыборТипаДобавляемогоШага",
	//			СцТ_ГлавнаяФорма,
	//			СтруктураДопПараметров),
	//		НСтр("ru = 'Тип добавляемого шага'"));
	//	
	//КонецЕсли;
	
	
		// Определение текущего узла дереве сценария
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущийТипШага = НЕопределено;
	Иначе
		ТекущийТипШага = ТекущиеДанные.ТипШага;
	КонецЕсли;
	
	Если Копирование Тогда
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			СцТ_ГлавнаяФорма.СцТ_СкопироватьУзелСценарияПоКомандеИнтерфейса(
				ТекущиеДанные,
				ЭтотОбъект);
				
			СцТ_ГлавнаяФорма.СцТ_ПронумероватьШаги_НаКлиенте(БлокСценария,, ЭтотОбъект);
			
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Не выбрана строка для копирования'");
			
		КонецЕсли;
		
	Иначе
		
		ОписательПоложенияШагаВДереве = СцТ_ГлавнаяФорма.ПолучитьОписательПоложенияНовогоШагаВДереве(ЭтотОбъект, ТекущиеДанные);
		
		//// Формирование списков выбора доступных действий
		//СписокВыбора = СцТ_ЗаполнитьСписокДоступныхШагов_НаКлиенте(ТекущиеДанные); //ОписательПоложенияШагаВДереве
		
		СтруктураДопПараметров = Новый Структура;
		СтруктураДопПараметров.Вставить("ВызвавшаяФорма"               , ЭтотОбъект);
		СтруктураДопПараметров.Вставить("ОписательПоложенияШагаВДереве", ОписательПоложенияШагаВДереве);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ОбработатьВыборТипаНовогоШага", СцТ_ГлавнаяФорма, СтруктураДопПараметров);
		// Добавление шагов в сценарий
		//СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Тип добавляемого шага'"));
		
		// Подготовка данных
		
		Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.ТипШага <> "Группа"
			И ТекущиеДанные.ТипШага <> "АвтоГруппа"
			И ТекущиеДанные.ТипШага <> "ИнтерактивнаяАвтоГруппа"
			И ТекущиеДанные.ТипШага <> "АвтоГруппаТаблицаФормы"
			И ТекущиеДанные.ТипШага <> "АвтоГруппаТабличныйДокумент"
			И ТекущиеДанные.ТипШага <> "Повторение"
			И ТекущиеДанные.ТипШага <> "Условие" Тогда
			
			ДанныеШага = ТекущиеДанные.ПолучитьРодителя();
			
		Иначе
			ДанныеШага = ТекущиеДанные;
			
		КонецЕсли;
	
		Если ДанныеШага = Неопределено Тогда
			
			ТипГруппы     = "Группа";
			ТипМетаданных = "";
			
		Иначе
			
			ТипГруппы     = ДанныеШага.ТипШага;
			ТипМетаданных = ДанныеШага.ТипМетаданных;
			
		КонецЕсли;
		
		ПФ = Новый Структура;
		ПФ.Вставить("ТипРодителя"    , ТипГруппы);
		ПФ.Вставить("ТипМД"          , ТипМетаданных);
		ПФ.Вставить("ДляМакрошага"   , Истина);
		ПФ.Вставить("ВставитьГруппу" , Ложь);
		
		// Открытие формы настройки эталонной базы
		ФормаВыбораТипаШага = ОткрытьФорму(ПутьКФормам + "ВыборТипаШага",
			ПФ,
			ЭтотОбъект,,,,
			ОписаниеОповещения);
			
	КонецЕсли;

	
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если СцТ_ГлавнаяФорма.СцТ_РежимВыполнения Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения(
			"СцТ_УдалитьШагиСценарияПоЗапросуНаУдаление",
			СцТ_ГлавнаяФорма,
			ЭтотОбъект),
		НСтр("ru = 'Удалить шаги из макрошага?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.БлокСценария.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипШага = "ИнтерактивнаяАвтоГруппа"
		И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		// Это привязка формы к интерактивной автогруппе
		ОписаниеВыбраннойФормы = ВыбранноеЗначение;
		
		Если ОписаниеВыбраннойФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СцТ_ГлавнаяФорма.СцТ_ФормыТестируемогоПриложения[ТекущиеДанные.УИШ] =
			Новый Структура("ФормаОбъект,ОкноОбъект,ТипОкна",
				ОписаниеВыбраннойФормы.Объект,
				ОписаниеВыбраннойФормы.ОкноОбъект,
				ОписаниеВыбраннойФормы.ТипОкна);
		
		ТекущиеДанные.ЗаголовокФормы = ОписаниеВыбраннойФормы.Заголовок;
		ТекущиеДанные.ИмяФормы       = ОписаниеВыбраннойФормы.Имя;
		
		Если ПустаяСтрока(ТекущиеДанные.ЗаголовокФормы) Тогда
			ТекущиеДанные.ПредставлениеОбъекта = НСтр("ru = '<без заголовка>'");
			Если НЕ ПустаяСтрока(ТекущиеДанные.ИмяФормы) Тогда
				ТекущиеДанные.ПредставлениеОбъекта = ТекущиеДанные.ПредставлениеОбъекта
					+ " (" + ТекущиеДанные.ИмяФормы + ")";
			КонецЕсли;
		Иначе
			ТекущиеДанные.ПредставлениеОбъекта = ТекущиеДанные.ЗаголовокФормы;
		КонецЕсли;
		
		Если ОписаниеВыбраннойФормы.ОписаниеРодительскогоОбъекта <> Неопределено Тогда
			СцТ_ГлавнаяФорма.СцТ_ДобавитьУзелВДеревоЗначения(
				ТекущиеДанные.Значение,
				"ЗаголовокОкнаФормы",
				ОписаниеВыбраннойФормы.ОписаниеРодительскогоОбъекта.Заголовок);
		КонецЕсли;
		
		Если НЕ СцТ_ЗначениеВДереве(ТекущиеДанные.Значение, "ИСТЗ_НаименованиеРучное", Ложь, , Ложь) Тогда
			ТекущиеДанные.Наименование =
				  НСтр("ru = 'Форма ""'")
				+ ?(ПустаяСтрока(ТекущиеДанные.ЗаголовокФормы), НСтр("ru = '<без заголовка>'"), ТекущиеДанные.ЗаголовокФормы)
				+ """";
		КонецЕсли;
		
		ТекущиеДанные.АвтоОписание =
			  НСтр("ru = 'Интерактивная работа с формой ""'")
			+ ?(ПустаяСтрока(ТекущиеДанные.ЗаголовокФормы), НСтр("ru = '<без заголовка>'"), ТекущиеДанные.ЗаголовокФормы)
			+ """";
		
		СцТ_ГлавнаяФорма.СцТ_ОбновитьПодчиненныеШагиАвтоГруппы(ТекущиеДанные);
		
		СцТ_ГлавнаяФорма.СцТ_ОбновитьАвтоОписаниеШагаВДеревеБлокаСценария(ТекущиеДанные, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	МассивУзлов = СцТ_ГлавнаяФорма.СцТ_УзлыВерхнегоУровня(
		СцТ_ГлавнаяФорма.СцТ_ПреобразоватьВУзлыИзИдентификаторов(
			ПараметрыПеретаскивания.Значение,
			БлокСценария));
	
	Для каждого Узел Из МассивУзлов Цикл
		
		Если    Узел.ТипШага = "Воспроизвести"
			ИЛИ Узел.ТипШага = "СравнитьСЭталоном"
			ИЛИ Узел.ТипШага = "СравнитьДвижения"
			ИЛИ Узел.ТипШага = "ЗаменаСсылки" Тогда
			
			Выполнение = Ложь;
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементДерева") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	
	УзелНазначения = СцТ_ГлавнаяФорма.СцТ_УзелБлокаСценария(Строка, ЭтотОбъект);
	Если  УзелНазначения         <> БлокСценария
		И УзелНазначения.ТипШага <> "Группа"
		И УзелНазначения.ТипШага <> "АвтоГруппа"
		И УзелНазначения.ТипШага <> "ИнтерактивнаяАвтоГруппа"
		И УзелНазначения.ТипШага <> "АвтоГруппаТаблицаФормы" Тогда
		
		УзелНазначения = СцТ_ГлавнаяФорма.СцТ_УзелБлокаСценария(УзелНазначения.ПолучитьРодителя(), ЭтотОбъект);
		
	КонецЕсли;
	
	МассивУзлов = СцТ_ГлавнаяФорма.СцТ_УзлыВерхнегоУровня(
		СцТ_ГлавнаяФорма.СцТ_ПреобразоватьВУзлыИзИдентификаторов(
			ПараметрыПеретаскивания.Значение,
			БлокСценария));
	
	Для каждого Узел Из МассивУзлов Цикл
		
		РодительУзла = СцТ_ГлавнаяФорма.СцТ_УзелБлокаСценария(Узел.ПолучитьРодителя(), ЭтотОбъект);
		Если СцТ_ГлавнаяФорма.СцТ_УзелНаходитсяВИерархииУзла(УзелНазначения, Узел)
			ИЛИ УзелНазначения = РодительУзла
			ИЛИ Узел = УзелНазначения Тогда
			
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			Возврат;
			
		КонецЕсли;
		
		Если УзелНазначения = БлокСценария
			ИЛИ УзелНазначения.ТипШага = "Группа"
			ИЛИ УзелНазначения.ТипШага = "АвтоГруппа" Тогда
			
			Если    Узел.ТипШага = "НайтиФорму"
				ИЛИ Узел.ТипШага = "ЗаполнитьОдинРеквизитФормы"
				ИЛИ Узел.ТипШага = "ЗаполнитьРеквизитыФормы"
				ИЛИ Узел.ТипШага = "ЗаполнитьКолонкуТаблицы"
				ИЛИ Узел.ТипШага = "ЗаполнитьСтрокуТаблицы"
				ИЛИ Узел.ТипШага = "НажатьКнопку"
				ИЛИ Узел.ТипШага = "ПроверитьТабличныйДокумент"
				ИЛИ Узел.ТипШага = "ЗакрытьКлиентскоеОкноФормы"
				ИЛИ Узел.ТипШага = "АвтоГруппаТаблицаФормы"
				ИЛИ Узел.ТипШага = "НайтиСтрокуТаблицы"
				ИЛИ Узел.ТипШага = "ДействиеСТаблицей" Тогда
				ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
				Возврат;
			КонецЕсли;
			
		ИначеЕсли РодительУзла <> БлокСценария Тогда
			
			Если УзелНазначения.ТипШага = РодительУзла.ТипШага Тогда
				ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеИсточника = БлокСценария.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
		
		ИдентификаторПриемника = Строка;
		ИдентификаторИсточника = ПараметрыПеретаскивания.Значение[0];
	
		Если ДанныеИсточника.ТипШага <> "Группа"
			И ДанныеИсточника.ТипШага <> "АвтоГруппа" Тогда
			
			Элементы.БлокСценария.ТекущаяСтрока = ИдентификаторИсточника
			
		КонецЕсли;
		
		Если ИдентификаторПриемника = Неопределено Тогда
			ПриемникРодитель = БлокСценария;
			ИндексВставки = ПриемникРодитель.ПолучитьЭлементы().Количество();
		Иначе
			ДанныеПриемника = БлокСценария.НайтиПоИдентификатору(ИдентификаторПриемника);
			Если ДанныеПриемника.ТипШага <> "Группа"
				И ДанныеПриемника.ТипШага <> "АвтоГруппа" Тогда
				
				ПриемникРодитель = ДанныеПриемника.ПолучитьРодителя();
				ИндексВставки = ПриемникРодитель.ПолучитьЭлементы().Индекс(ДанныеПриемника) + 1;
			Иначе
				ПриемникРодитель = ДанныеПриемника;
				ИндексВставки = ПриемникРодитель.ПолучитьЭлементы().Количество();
			КонецЕсли;
			
			Если ПриемникРодитель = Неопределено Тогда
				ПриемникРодитель = БлокСценария;
				ИндексВставки = ПриемникРодитель.ПолучитьЭлементы().Количество();
			КонецЕсли;
		
		КонецЕсли;
		
		СцТ_ГлавнаяФорма.СцТ_СкопироватьУзелСценария(ДанныеИсточника, ПриемникРодитель, ИндексВставки, Истина,,,,,,, ЭтотОбъект);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ИдентификаторНовойСтроки = Неопределено;
		Для каждого СтрокаИсточника Из ПараметрыПеретаскивания.Значение Цикл
			СозданнаяСтрока = СцТ_ГлавнаяФорма.СцТ_ИтерационнойСозданиеУзловВДеревеСценария_НаКлиенте(
				СтрокаИсточника,
				Строка,,,
				ЭтотОбъект);
			Если СозданнаяСтрока <> Неопределено Тогда
				ИдентификаторНовойСтроки = СозданнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторНовойСтроки <> Неопределено Тогда
			Элементы.БлокСценария.ТекущаяСтрока = СозданнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность  = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяМакрошагаПриИзменении(Элемент)
	
	Если НЕ ИмяМакрошагаУникальное(АдресДереваМакрошагов, ИдентификаторМакрошага, ИмяМакрошага) Тогда
		ТекстСообщения = НСтр("ru = 'Имя макрошага неуникальное'");
		ПоказатьПредупреждение(, ТекстСообщения);
		ТекущийЭлемент = Элементы.ИмяМакрошага;
	КонецЕсли;
	
	Заголовок = СформироватьЗаголовок(ИмяМакрошага);
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияАктивностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БлокСценария.ТекущиеДанные;
	ЗначениеАктивности = ТекущиеДанные.Активность;
	Если ЗначениеАктивности = 2 Тогда
		ЗначениеАктивности       = 0;
		ТекущиеДанные.Активность = 0;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_УстановитьФлагиУРодителей(ТекущиеДанные);
	СцТ_ГлавнаяФорма.СцТ_УстановитьФлагиУДочерних(ТекущиеДанные);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура АктивизироватьФормуСвязаннуюСАвтогруппой(Команда)
	
	Если Элементы.БлокСценария.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаПриложения = СцТ_ГлавнаяФорма.СцТ_ПолучитьФормуДляИнтерактивногоШага(
		ЭтотОбъект,
		Элементы.БлокСценария.ТекущиеДанные);
	
	Попытка
		ФормаПриложения.Активизировать();
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось активизировать форму тестируемого приложения. Форма не найдена'"));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивностьШаговСбросить(Команда)
	
	ТекДанные = Элементы.БлокСценария.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзлыВерхнегоУровня = СцТ_ГлавнаяФорма.СцТ_УзлыВерхнегоУровня(
		СцТ_ГлавнаяФорма.СцТ_ПреобразоватьВУзлыИзИдентификаторов(
			Элементы.БлокСценария.ВыделенныеСтроки,
			БлокСценария));
	
	Для каждого Узел Из УзлыВерхнегоУровня Цикл
		СцТ_ГлавнаяФорма.СцТ_УстановитьАктивностьШага(Узел, 0);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивностьШаговУстановить(Команда)
	
	ТекДанные = Элементы.БлокСценария.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзлыВерхнегоУровня = СцТ_ГлавнаяФорма.СцТ_УзлыВерхнегоУровня(
		СцТ_ГлавнаяФорма.СцТ_ПреобразоватьВУзлыИзИдентификаторов(
			Элементы.БлокСценария.ВыделенныеСтроки,
			БлокСценария));
	
	Для каждого Узел Из УзлыВерхнегоУровня Цикл
		СцТ_ГлавнаяФорма.СцТ_УстановитьАктивностьШага(Узел, 1);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокСценарияИзменить(Команда)
	
	Если Элементы.БлокСценария.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ОткрытьФормуНастройкиШага(
		Элементы.БлокСценария.ТекущиеДанные,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарий(Команда)
	
	СцТ_ИдентификаторТекущегоШагаСценария = Элементы.БлокСценария.ТекущаяСтрока;
	
	Если СцТ_ИдентификаторТекущегоШагаСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ОстановкаПоИнициативеПользователя = Ложь;
	СцТ_ГлавнаяФорма.СцТ_ВыполнениеТеста                   = "АвтоматическийРежим";
	
	Элементы.ОстановитьВыполнение.Доступность = Истина;
	
	ПолучитьФормуВыполненияИВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьШаг(Команда)
	
	СцТ_ИдентификаторТекущегоШагаСценария = Элементы.БлокСценария.ТекущаяСтрока;
	
	Если СцТ_ИдентификаторТекущегоШагаСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ОстановкаПоИнициативеПользователя = Ложь;
	СцТ_ГлавнаяФорма.СцТ_ВыполнениеТеста                   = "ПошаговыйРежим";
	
	ПолучитьФормуВыполненияИВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуПоНомеру(Команда)
	
	НомерШагаЧисло = 1;
	Если Элементы.БлокСценария.ТекущиеДанные <> Неопределено Тогда
		НомерШагаЧисло = Элементы.БлокСценария.ТекущиеДанные.НомерШага;
	КонецЕсли;
	
	ПоказатьВводЧисла(
		Новый ОписаниеОповещения("СцТ_ОбработатьПереходКШагуПоНомеру", ЭтотОбъект),
		НомерШагаЧисло,
		НСтр("ru = 'Перейти к шагу №:'"),
		5,
		0);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГрупповойШаг(Команда)
	
	ТекущиеДанные = Элементы.БлокСценария.ТекущиеДанные;
	
	ОписательПоложенияШагаВДереве = СцТ_ГлавнаяФорма.ПолучитьОписательПоложенияНовогоШагаВДереве(ЭтотОбъект, ТекущиеДанные);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОписательПоложенияШагаВДереве", ОписательПоложенияШагаВДереве);
	ДопПараметры.Вставить("ВызвавшаяФорма"               , ЭтотОбъект);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ОбработатьВыборТипаНовогоШага", СцТ_ГлавнаяФорма, ДопПараметры);
	
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ТипШага <> "Группа"
		И ТекущиеДанные.ТипШага <> "АвтоГруппа"
		И ТекущиеДанные.ТипШага <> "ИнтерактивнаяАвтоГруппа"
		И ТекущиеДанные.ТипШага <> "Повторение"
		И ТекущиеДанные.ТипШага <> "Условие" Тогда
		
		ДанныеШага = ТекущиеДанные.ПолучитьРодителя();
		
	Иначе
		ДанныеШага = ТекущиеДанные;
		
	КонецЕсли;
	
	Если ДанныеШага = Неопределено Тогда
		
		ТипГруппы     = "Группа";
		
	Иначе
		
		ТипГруппы     = ДанныеШага.ТипШага;
		
	КонецЕсли;
	
	ПФ = Новый Структура;
	ПФ.Вставить("ТипРодителя"    , ТипГруппы);
	ПФ.Вставить("ТипМД"          , "");
	ПФ.Вставить("ДляМакрошага"   , Истина);
	ПФ.Вставить("ВставитьГруппу" , Истина);
	
	// Открытие формы настройки эталонной базы
	ФормаВыбораТипаШага = ОткрытьФорму(ПутьКФормам + "ВыборТипаШага",
		ПФ,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗавершитьЗапись(Команда)
	
	СцТ_ГлавнаяФорма.СцТ_ЗаписатьЖурналДействийПользователя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьВыполнение(Команда)
	
	СцТ_ГлавнаяФорма.СцТ_ОстановкаПоИнициативеПользователя     = Истина;
	СцТ_ГлавнаяФорма.Элементы.ОстановитьВыполнение.Доступность = Ложь;
	
	Элементы.ОстановитьВыполнение.Доступность              = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыполнение(Команда)
	
	УзлыВерхнегоУровня = СцТ_ГлавнаяФорма.СцТ_УзлыВерхнегоУровня(
		СцТ_ГлавнаяФорма.СцТ_ПреобразоватьВУзлыИзИдентификаторов(
			Элементы.БлокСценария.ВыделенныеСтроки,
			БлокСценария));
	
	Для каждого Узел Из УзлыВерхнегоУровня Цикл
		СцТ_ГлавнаяФорма.СцТ_ИтерационноУстановитьФлагВыполненоУВетки(Узел, 1);
		РодительУзла = Узел.ПолучитьРодителя();
		Пока РодительУзла <> Неопределено Цикл
			СцТ_ГлавнаяФорма.СцТ_УстановитьФлагВыполненияУГрупповогоУзла(РодительУзла, БлокСценария);
			РодительУзла = РодительУзла.ПолучитьРодителя();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьАвтогруппуКОткрытойФорме(Команда)
	
	Если Элементы.БлокСценария.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СцТ_ГлавнаяФорма.СцТ_ТестируемоеПриложениеАктивно() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет активного соединения с тестируемым приложением'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные   = Элементы.БлокСценария.ТекущиеДанные;
	ФормаПриложения = СцТ_ГлавнаяФорма.СцТ_ПолучитьФормуДляИнтерактивногоШага(ЭтотОбъект, ТекущиеДанные);
	
	Если ФормаПриложения = Неопределено Тогда
		ОписаниеТекущейФормы = Неопределено;
	Иначе
		ОписаниеТекущейФормы = Новый Структура;
		ОписаниеТекущейФормы.Вставить("Тип"             , Тип("ТестируемаяФорма"));
		ОписаниеТекущейФормы.Вставить("ЗаголовокОбъекта", ТекущиеДанные.ЗаголовокФормы);
		ОписаниеТекущейФормы.Вставить("Имя"             , "");
	КонецЕсли;
	
	СписокОтображаемыхОбъектов = Новый СписокЗначений;
	СписокОтображаемыхОбъектов.Добавить(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	ОписаниеВыбраннойФормы = СцТ_ГлавнаяФорма.СцТ_ВыбратьОбъектыТестируемогоПриложения(
		СцТ_ГлавнаяФорма.СцТ_Контроллер,
		Тип("ТестируемаяФорма"),
		СписокОтображаемыхОбъектов,
		ОписаниеТекущейФормы,
		,
		Элементы.БлокСценария);
	
КонецПроцедуры

&НаКлиенте
Процедура ПронумероватьШаги(Команда)
	
	СцТ_ГлавнаяФорма.СцТ_ПронумероватьШаги_НаКлиенте(,, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для каждого Узел Из БлокСценария.ПолучитьЭлементы() Цикл
		Элементы.БлокСценария.Развернуть(Узел.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВыполнение(Команда)
	
	УзлыВерхнегоУровня = СцТ_ГлавнаяФорма.СцТ_УзлыВерхнегоУровня(
		СцТ_ГлавнаяФорма.СцТ_ПреобразоватьВУзлыИзИдентификаторов(Элементы.БлокСценария.ВыделенныеСтроки, БлокСценария));
	
	Для каждого Узел Из УзлыВерхнегоУровня Цикл
		СцТ_ГлавнаяФорма.СцТ_ИтерационноУстановитьФлагВыполненоУВетки(Узел);
		РодительУзла = Узел.ПолучитьРодителя();
		Пока РодительУзла <> Неопределено Цикл
			СцТ_ГлавнаяФорма.СцТ_УстановитьФлагВыполненияУГрупповогоУзла(РодительУзла, БлокСценария);
			РодительУзла = РодительУзла.ПолучитьРодителя();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	СцТ_ГлавнаяФорма.СцТ_СвернутьРекурсивно(БлокСценария, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаОстановаУстановитьСнять(Команда)
	
	Если НЕ СцТ_ГлавнаяФорма.СцТ_РежимВыполнения Тогда
		Возврат;
	КонецЕсли;
	
	ТекШаг = Элементы.БлокСценария.ТекущиеДанные;
	
	Если ТекШаг = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекШаг.ТочкаОстанова = 1 - ТекШаг.ТочкаОстанова;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветАвто(Команда)
	
	СцТ_ГлавнаяФорма.СцТ_УстановитьЦветТекстаУВыделенных("", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветЗеленый(Команда)
	
	СцТ_ГлавнаяФорма.СцТ_УстановитьЦветТекстаУВыделенных("Зеленый", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветКрасный(Команда)
	
	СцТ_ГлавнаяФорма.СцТ_УстановитьЦветТекстаУВыделенных("Красный", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветОранжевый(Команда)
	
	СцТ_ГлавнаяФорма.СцТ_УстановитьЦветТекстаУВыделенных("Оранжевый", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветСиний(Команда)
	
	СцТ_ГлавнаяФорма.СцТ_УстановитьЦветТекстаУВыделенных("Синий", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветФиолетовый(Команда)
	
	СцТ_ГлавнаяФорма.СцТ_УстановитьЦветТекстаУВыделенных("Фиолетовый", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзмененияИЗакрыть(Команда)
	
	НовыйАдресДерева = СцТ_ПолучитьАдресИзмененногоДереваМакрошагов();
	
	Если НовыйАдресДерева <> Неопределено Тогда
			
		Оповестить("СцТ_ИзменениеДереваМакрошагов", НовыйАдресДерева, ЭтотОбъект);
		
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПовыситьУровень(Команда)
	
	ТекущийУзел = Элементы.БлокСценария.ТекущиеДанные;
	Если НЕ СцТ_ГлавнаяФорма.СцТ_ПовышениеУровняУзлаВозможно(ТекущийУзел, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ПовыситьУровеньУзла_НаКлиенте(ТекущийУзел, ЭтотОбъект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровень(Команда)
	
	ТекущийУзел = Элементы.БлокСценария.ТекущиеДанные;
	Если НЕ СцТ_ГлавнаяФорма.СцТ_ПонижениеУровняУзлаВозможно(ТекущийУзел, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СцТ_ГлавнаяФорма.СцТ_ПонизитьУровеньУзла_НаКлиенте(ТекущийУзел, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

// Обрабатывает ввод пользователем числа для перехода к шагу с заданным номером номеру
// Параметры
//	НомерШагаЧисло - номер шага, к которому требуется выполнить переход;
//	ДопПараметры - дополнительные параметры;
//
&НаКлиенте
Процедура СцТ_ОбработатьПереходКШагуПоНомеру(НомерШагаЧисло, ДопПараметры) Экспорт
	
	Если НомерШагаЧисло = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденыйУзел = СцТ_ГлавнаяФорма.СцТ_НайтиУзелШагаПоНомеру(НомерШагаЧисло, БлокСценария);
	
	Если НайденыйУзел = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Шаг с указанным номером не найден'"));
	Иначе
		СцТ_РазвернутьУзлыНаПутиОтУзлаККорню(НайденыйУзел, Элементы.БлокСценария);
		Элементы.БлокСценария.ТекущаяСтрока = НайденыйУзел.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОбработатьОтветНаВопросОСохраненииПередЗакрытием(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НовыйАдресДерева = СцТ_ПолучитьАдресИзмененногоДереваМакрошагов();
		
		Если НовыйАдресДерева <> Неопределено Тогда
				
			Оповестить("СцТ_ИзменениеДереваМакрошагов", НовыйАдресДерева, ЭтотОбъект);
			
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		// Ничего не делаем
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

&НаКлиенте
Процедура СцТ_ДобавитьДанныеУзлаВМакрошаг(УзелИсточник, УзелПриемник) Экспорт
	
	НовыйУзел = УзелПриемник.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, УзелИсточник,,"Значение");
	СцТ_РекурсивноСкопироватьСтрокиДереваЗначения(УзелИсточник.Значение, НовыйУзел.Значение);
	
	СцТ_РекурсивноДобавитьДанныеПодчиненныхЭлементов(УзелИсточник, НовыйУзел);
	
	СцТ_ГлавнаяФорма.СцТ_ПронумероватьШаги_НаКлиенте(,, ЭтотОбъект);
	
	Модифициванность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьМакрошагСПервойСтроки() Экспорт
	
	// Определяем первую строку
	КоллекцияШагов = БлокСценария.ПолучитьЭлементы();
	Если КоллекцияШагов.Количество() = 0 Тогда
		// Нет шагов - выполнять нечего
		ЭтотОбъект.Закрыть();
		Если ФормаРодительскогоПроцесса <> Неопределено И ШагРодительскогоПроцесса <> Неопределено Тогда
			ФормаРодительскогоПроцесса.СцТ_ПерейтиНаСледующийШаг(ШагРодительскогоПроцесса);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СцТ_ИдентификаторТекущегоШагаСценария = КоллекцияШагов[0].ПолучитьИдентификатор();
	
	Элементы.ОстановитьВыполнение.Доступность = Истина;
	
	Если СцТ_ГлавнаяФорма.СцТ_ВыполнениеТеста = "АвтоматическийРежим" Тогда
		// В пошаговом режиме достаточно открытия формы макрошага
		ПолучитьФормуВыполненияИВыполнить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

&НаСервере
Функция СцТ_ПолучитьАдресИзмененногоДереваМакрошагов()
	
	Если ПустаяСтрока(ИмяМакрошага) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Имя макрошага не может быть пустым'");
		Сообщение.ПутьКДанным = "ИмяМакрошага";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ИмяМакрошагаУникальное(АдресДереваМакрошагов, ИдентификаторМакрошага, ИмяМакрошага) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Имя макрошага неуникальное'");
		Сообщение.ПутьКДанным = "ИмяМакрошага";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	// Сохранение данных в дереве
	ОбщееДеревоМакрошаговНаСервере = ПолучитьИзВременногоХранилища(АдресДереваМакрошагов);
	
	УзелМакрошага = Неопределено;
	
	Для каждого СтрокаДерева Из ОбщееДеревоМакрошаговНаСервере.Строки Цикл
		
		Если СтрокаДерева.УИШ = ИдентификаторМакрошага Тогда
			
			УзелМакрошага = СтрокаДерева;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если УзелМакрошага = Неопределено Тогда
		// Очевидно, что это новый узел
		УзелМакрошага = ОбщееДеревоМакрошаговНаСервере.Строки.Добавить();
		УзелМакрошага.УИШ = ИдентификаторМакрошага;
		УзелМакрошага.ТипШага = "Макрошаг";
	КонецЕсли;
	
	УзелМакрошага.Наименование = ИмяМакрошага;
	
	
	// Удаление старых шагов
	УзелМакрошага.Строки.Очистить();
	
	// Рекурсивное копирование новых шагов из формы
	РекурсивноеКопированиеШаговВДерево(БлокСценария, УзелМакрошага);
	
	АдресДереваМакрошагов = ПоместитьВоВременноеХранилище(ОбщееДеревоМакрошаговНаСервере, Новый УникальныйИдентификатор);
	
	Возврат АдресДереваМакрошагов;
	
КонецФункции

&НаСервере
Процедура РекурсивноеКопированиеШаговВДерево(ДанныеДереваИсточника, УзелДереваПриемника)
	
	// Замечание. Данные в дереве хранятся уже в виде преобразованном для хранения
	// Никаких преобразований не нужно
	Для каждого СтрокаДанных Из ДанныеДереваИсточника.ПолучитьЭлементы() Цикл
		НовыйУзелДерева = УзелДереваПриемника.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйУзелДерева, СтрокаДанных, , "Значение");
		НовыйУзелДерева.Значение = ДанныеФормыВЗначение(СтрокаДанных.Значение, Тип("ДеревоЗначений"));
		РекурсивноеКопированиеШаговВДерево(СтрокаДанных, НовыйУзелДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СцТ_ЗагрузитьШагиИзДЗвДеревоФормы(ВеткаДереваИсточник, УзелДереваДанныхПриемник)
	
	Для каждого СтрокаДЗ ИЗ ВеткаДереваИсточник.Строки Цикл
		НоваяСтрокаДанных = УзелДереваДанныхПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных, СтрокаДЗ, , "Значение, Выполнено");
		ЗначениеВДанныеФормы(СтрокаДЗ.Значение, НоваяСтрокаДанных.Значение);
		
		СцТ_ЗагрузитьШагиИзДЗвДеревоФормы(СтрокаДЗ, НоваяСтрокаДанных);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяМакрошагаУникальное(АдресДереваМакрошагов, ИдентификаторМакрошага, ИмяМакрошага)
	
	ДеревоМакрошаговНаСервере = ПолучитьИзВременногоХранилища(АдресДереваМакрошагов);
	
	ИмяУникальное = Истина;
	
	Для каждого СтрокаДерева Из ДеревоМакрошаговНаСервере.Строки Цикл
		
		Если СтрокаДерева.Наименование = ИмяМакрошага
			И СтрокаДерева.УИШ <> ИдентификаторМакрошага Тогда
			
			ИмяУникальное = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИмяУникальное;
	
КонецФункции

&НаКлиенте
Процедура СцТ_РекурсивноДобавитьДанныеПодчиненныхЭлементов(УзелИсточник, УзелПриемник)
	
	Для каждого СтрокаИсточник Из УзелИсточник.ПолучитьЭлементы() Цикл
		НовыйУзел = УзелПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйУзел, СтрокаИсточник,,"Значение");
		СцТ_РекурсивноСкопироватьСтрокиДереваЗначения(СтрокаИсточник.Значение, НовыйУзел.Значение);
		
		СцТ_РекурсивноДобавитьДанныеПодчиненныхЭлементов(СтрокаИсточник, НовыйУзел);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_РекурсивноСкопироватьСтрокиДереваЗначения(УзелИсточник, УзелПриемник)
	
	Для каждого СтрокаИсточника Из УзелИсточник.ПолучитьЭлементы() Цикл
		НоваяСтрока = УзелПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		
		СцТ_РекурсивноСкопироватьСтрокиДереваЗначения(СтрокаИсточника, НоваяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура отображения состояния текущего шага сценария
// Вызывается в обрабочике ожидания
&НаКлиенте
Процедура СцТ_ОтобразитьСостояниеТекущегоШагаПослеОжидания()
	
	СцТ_ГлавнаяФорма.СцТ_ОтобразитьСостояниеТекущегоШага(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФормуВыполненияИВыполнить()
	
	ФормаПроцедурВыполнения = ПолучитьФорму(ПутьКФормам + "ПроцедурыВыполнения",, ЭтотОбъект, Истина);
	
	ФормаПроцедурВыполнения.ПутьКФормам                = ПутьКФормам;
	ФормаПроцедурВыполнения.СцТ_ГлавнаяФорма           = СцТ_ГлавнаяФорма;
	ФормаПроцедурВыполнения.ФормаШагов                 = ЭтотОбъект;
	ФормаПроцедурВыполнения.ФормаРодительскогоПроцесса = ФормаРодительскогоПроцесса;
	ФормаПроцедурВыполнения.ШагРодительскогоПроцесса   = ШагРодительскогоПроцесса;
	
	ФормаПроцедурВыполнения.СцТ_ПодготовитьсяКВыполнениюШага();
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОповеститьОбОткрытииФормы()
	
	Если ДействиеФормы = "Выполнение" И АвтовыполнениеРазрешено Тогда
		
		ВыполнитьМакрошагСПервойСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовок(НаименованиеМакрошага)
	
	ЗаголовокФормы = НСтр("ru = 'Макрошаг ""%1""'");
	Возврат СтрЗаменить(ЗаголовокФормы, "%1", НаименованиеМакрошага);
	
КонецФункции

&НаКлиенте
Процедура СцТ_РазвернутьУзлыНаПутиОтУзлаККорню(УзелДереваФормы, ТаблицаФормыДерево)
	
	РодительУзла = УзелДереваФормы.ПолучитьРодителя();
	Пока РодительУзла <> Неопределено Цикл
		
		ТаблицаФормыДерево.Развернуть(РодительУзла.ПолучитьИдентификатор());
		РодительУзла = РодительУзла.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьМакрошаг(Команда)
	
	НовыйАдресДерева = СцТ_ПолучитьАдресИзмененногоДереваМакрошагов();
	
	Если НовыйАдресДерева <> Неопределено Тогда
		
		АдресДереваМакрошагов = НовыйАдресДерева;
		Оповестить("СцТ_ИзменениеДереваМакрошагов", НовыйАдресДерева, ЭтотОбъект);
		Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры


// Поиск значения в дереве
//
// Парметры
//	ИмяПараметра - имя искомого параметра
//	ЕслиНеНайдено  - признак, что не найдено
//	ВозвращаемыйРеквизит  - поле, значение которого нужно вернуть
//	Рекурсивно  - нужно ли искать среди подчиненных
&НаКлиентеНаСервереБезКонтекста
Функция СцТ_ЗначениеВДереве(ДерЗнач,
	ИмяПараметра,
	ЕслиНеНайдено = Неопределено,
	ВозвращаемыйРеквизит = "Значение",
	Рекурсивно = Истина)
	
	УзелЗначения = СцТ_НайтиУзелДереваФормы(ДерЗнач, "Имя", ИмяПараметра, Рекурсивно);
	Если УзелЗначения = Неопределено Тогда
		Возврат ЕслиНеНайдено;
	Иначе
		Возврат УзелЗначения[ВозвращаемыйРеквизит];
	КонецЕсли;
	
КонецФункции

// Поиск строки дерева формы по значению реквизита
// Параметры
//	ДеревоФормы - Дерево данных формы
//	Реквизит - Имя реквизита,
//	ЗначениеРеквизита - значение реквизита
//	Рекурсивно - признак необходимости поиска в подчиненных узлах
// Возвращаемое значение - указатель на найденный узел
&НаКлиентеНаСервереБезКонтекста
Функция СцТ_НайтиУзелДереваФормы(
	ДеревоФормы,
	Реквизит,
	ЗначениеРеквизита,
	Рекурсивно = Ложь) Экспорт
	
	Для каждого Узел Из ДеревоФормы.ПолучитьЭлементы() Цикл
		Если Узел[Реквизит] = ЗначениеРеквизита Тогда
			Возврат Узел;
		КонецЕсли;
		Если Рекурсивно Тогда
			НайденыйУзел = СцТ_НайтиУзелДереваФормы(Узел, Реквизит, ЗначениеРеквизита, Истина);
			Если НайденыйУзел <> Неопределено Тогда
				Возврат НайденыйУзел;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


&НаСервере
Процедура ПреобразоватьФормуДляОтображенияОтсутствующегоМакрошага(ИмяМакрошага = "")
	
	Элементы.НадписьОтсутствующегоШага.Заголовок = СтрЗаменить(Элементы.НадписьОтсутствующегоШага.Заголовок, "%1", ИмяМакрошага);
	
	Элементы.СтраницаОтсутствующегоШага.Видимость = Истина;
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОтсутствующегоШага;
	
	Элементы.ФормаСохранитьИзмененияИЗакрыть.Доступность = Ложь;
	Элементы.ФормаЗаписатьМакрошаг.Доступность           = Ложь;
	Элементы.Макрошаг.Доступность                        = Ложь;
	Элементы.ДобавитьГрупповойШаг.Доступность            = Ложь;
	Элементы.ДобавитьШаг.Доступность                     = Ложь;
	Элементы.СкопироватьШаг.Доступность                  = Ложь;
	Элементы.ИзменитьШаг.Доступность                     = Ложь;
	Элементы.УдалитьШаг.Доступность                      = Ложь;
	Элементы.ГруппаКнопокПеремещение.Доступность         = Ложь;
	Элементы.ГруппаКнопокВыполнения.Доступность          = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеШага(Команда)
	
	ТекущаяСтрока = Элементы.БлокСценария.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		СцТ_ГлавнаяФорма.ОтобразитьДанныеШага(ТекущаяСтрока, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьШагиВСценарий(Команда)
	
	Приемник = СцТ_ГлавнаяФорма.БлокСценария;
	
	// Добавление комментария начала
	НовыйШаг = СцТ_ГлавнаяФорма.СцТ_ВставитьШаг_НаКлиенте(Неопределено, "Комментарий", СцТ_ГлавнаяФорма);
	НовыйШаг.Активность     = Истина;
	НовыйШаг.Наименование   = НСтр("ru = 'Шаги из макрошага ""%1"" - Начало'");
	НовыйШаг.Наименование = СтрЗаменить(НовыйШаг.Наименование, "%1", ИмяМакрошага);
	
	СцТ_РекурсивноДобавитьДанныеПодчиненныхЭлементов(БлокСценария, Приемник);
	
	// Добавление комментария окончания
	НовыйШаг = СцТ_ГлавнаяФорма.СцТ_ВставитьШаг_НаКлиенте(Неопределено, "Комментарий", СцТ_ГлавнаяФорма);
	НовыйШаг.Активность     = Истина;
	НовыйШаг.Наименование   = НСтр("ru = 'Шаги из макрошага ""%1"" - Окончание'");
	НовыйШаг.Наименование = СтрЗаменить(НовыйШаг.Наименование, "%1", ИмяМакрошага);
	
	СцТ_ГлавнаяФорма.СцТ_ПронумероватьШаги_НаКлиенте();
	СцТ_ГлавнаяФорма.Модифицированность = Истина;
	
	ТекстДиалога = НСтр("ru = 'Данные успешно скопированы. Закрыть форму макрошага?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОКопированииШагов", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстДиалога, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОКопированииШагов(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// Попытка зхакрыть форму списка шагов
		Попытка
			ВладелецФормы.Закрыть();
		Исключение
		КонецПопытки;
		
		// Закрытие этой формы
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти









