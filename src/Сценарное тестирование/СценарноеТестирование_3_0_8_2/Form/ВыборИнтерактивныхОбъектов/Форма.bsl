#Область Переменные

&НаКлиенте
Перем ВладелецОбъектов Экспорт;

&НаКлиенте
Перем ТипыОтображаемыхОбъектов Экспорт;

&НаКлиенте
Перем ТипыВыбираемыхОбъектов Экспорт;

&НаКлиенте
Перем ПодсвечиваемыеПриВыборе Экспорт;

&НаКлиенте
Перем ТекущиеЭлементы Экспорт;

&НаКлиенте
Перем ОбъектыТестируемогоПриложения;

&НаКлиенте
Перем ПутиПоискаОбъектов;

&НаКлиенте
Перем Автоматически Экспорт;

&НаКлиенте
Перем НеВыбиратьПодчиненныеИзТаблиц Экспорт;

&НаКлиенте
Перем ЗапретитьВыборПодсвеченных Экспорт;

&НаКлиенте
Перем СцТ_ГлавнаяФорма Экспорт;

// Содержит указатель на объект тестируемого приложения
&НаКлиенте
Перем СцТ_Контроллер Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	
	ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	
	ПоказыватьКонтекстноеМеню = Параметры.ПоказыватьКонтекстноеМеню;
	
	МножественныйВыбор = Параметры.МножественныйВыбор;
	Элементы.ДеревоОбъектовОтметка.Видимость            = МножественныйВыбор;
	Элементы.ДеревоОбъектовОтметитьВсе.Видимость        = МножественныйВыбор;
	Элементы.ДеревоОбъектовСнятьОтметкуСоВсех.Видимость = МножественныйВыбор;
	Элементы.КМОтметитьВыделенные.Видимость             = МножественныйВыбор;
	Элементы.КМСнятьОтметкуСВыделенных.Видимость        = МножественныйВыбор;
	
	Если ТипЗнч(Параметры.ВидимостьКолонок) = Тип("Соответствие") Тогда
		Для каждого КолонкаВидимость Из Параметры.ВидимостьКолонок Цикл
			Элементы[КолонкаВидимость.Ключ].Видимость = КолонкаВидимость.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СцТ_ВыполнитьДействияПриОткрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_ДеревоОбъектов

&НаКлиенте
Процедура ДеревоОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ МножественныйВыбор Тогда
		
		СцТ_ВыбратьОбъектыИЗакрытьФорму();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура АктивизироватьВТестируемомПриложении(Команда)
	
	Попытка
		ОбъектыТестируемогоПриложения[Элементы.ДеревоОбъектов.ТекущаяСтрока].Активизировать();
	Исключение
		ПоказатьПредупреждение(, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	СцТ_УстановитьОтметкиВДеревеОбъектов(ДеревоОбъектов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
	
	СцТ_УстановитьОтметкиВДеревеОбъектов(ДеревоОбъектов, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыделенные(Команда)
	
	Для каждого ИдентификаторВыделеннойСтроки Из Элементы.ДеревоОбъектов.ВыделенныеСтроки Цикл
		Узел = ДеревоОбъектов.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		Если Узел.ДоступенДляВыбора Тогда
			Узел.Отметка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСВыделенных(Команда)
	
	Для каждого ИдентификаторВыделеннойСтроки Из Элементы.ДеревоОбъектов.ВыделенныеСтроки Цикл
		Узел = ДеревоОбъектов.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		Если Узел.ДоступенДляВыбора Тогда
			Узел.Отметка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ИдентификаторТекущеСтроки = Элементы.ДеревоОбъектов.ТекущаяСтрока;
	ДеревоОбъектов.ПолучитьЭлементы().Очистить();
	СцТ_ОтобразитьОбъектыТестируемогоПриложения();
	СцТ_ВыполнитьДействияПриОткрытии();
	
	Попытка
		Элементы.ДеревоОбъектов.ТекущаяСтрока = ИдентификаторТекущеСтроки;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	
	СцТ_ВыбратьОбъектыИЗакрытьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

&НаКлиенте
Процедура СцТ_ОтобразитьОбъектыТестируемогоПриложения() Экспорт
	
	Попытка
		
		ДеревоОбъектов.ПолучитьЭлементы().Очистить();
		ОбъектыТестируемогоПриложения = Новый Соответствие;
		ПутиПоискаОбъектов            = Новый Соответствие;
		Если ТипЗнч(ВладелецОбъектов) <> Тип("Массив") Тогда
			СцТ_ПостроитьДеревоОбъектовРекурсивно(ВладелецОбъектов, ДеревоОбъектов);
		Иначе
			Для каждого ОписаниеВладельца Из ВладелецОбъектов Цикл
				СцТ_ПостроитьДеревоОбъектовРекурсивно(ОписаниеВладельца, ДеревоОбъектов);
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		
		Если Автоматически <> Истина Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Не удалось отобразить список объектов: %1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеОшибки());
			ПоказатьПредупреждение(, ТекстСообщения);
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ВыполнитьДействияПриОткрытии()
	
	// Развернуть все элементы
	Для каждого УзелОбъекта Из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОбъектов.Развернуть(УзелОбъекта.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	Элементы.ДеревоОбъектов.ВыделенныеСтроки.Очистить();
	Если ТекущиеЭлементы <> Неопределено Тогда
		СцТ_ОтметитьЭлементы(ДеревоОбъектов, ТекущиеЭлементы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ИмяТекущегоЭлементаФормы(ТекущаяФормаТестируемогоПриложения)
	
	Попытка
		
		ТекущийЭлементФормы = ТекущаяФормаТестируемогоПриложения.ПолучитьТекущийЭлемент();
		Если ТекущийЭлементФормы = Неопределено Тогда
			Возврат "$";
		КонецЕсли;
		
		ИмяЭлемента = СцТ_ГлавнаяФорма.СцТ_ИмяИнтерактивногоОбъекта(ТекущийЭлементФормы);
		Возврат ?(ПустаяСтрока(ИмяЭлемента), "$", ИмяЭлемента);
		
	Исключение
		Возврат "$";
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция СцТ_ИмяКнопкиФормыПоУмолчанию(ТекущаяФормаТестируемогоПриложения)
	
	Попытка
		
		КнопкаФормыПоУмолчанию = ТекущаяФормаТестируемогоПриложения.НайтиКнопкуПоУмолчанию();
		Если КнопкаФормыПоУмолчанию = Неопределено Тогда
			Возврат "$";
		КонецЕсли;
		
		ИмяЭлемента = СцТ_ГлавнаяФорма.СцТ_ИмяИнтерактивногоОбъекта(КнопкаФормыПоУмолчанию);
		
		Возврат ?(ПустаяСтрока(ИмяЭлемента), "$", ИмяЭлемента);
		
	Исключение
		Возврат "$";
	КонецПопытки;
	
КонецФункции

// Параметры:
//	ТипОкна (Число):  0 - без окна, 1 - основное окно, 2 - клиентское окно
&НаКлиенте
Процедура СцТ_ПостроитьДеревоОбъектовРекурсивно(
	ТекущийОбъект,
	РодительскаяВетвь,
	Знач ИмяТекущегоЭлемента = "$",
	Знач ИмяКнопкиПоУмолчанию = "$",
	Знач ТипОкна             = 0,
	Знач ТаблицаНаФорме      = Неопределено,
	Знач ПутьКОбъектуВх        = Неопределено)
	
	Если ТипЗнч(ТекущийОбъект) = Тип("Структура") Тогда
		
		// Текущий объект должен быть отображен в дереве своим узлом
		РодительскийУзел = РодительскаяВетвь.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(РодительскийУзел, ТекущийОбъект);
		ОбъектыТестируемогоПриложения[РодительскийУзел.ПолучитьИдентификатор()] = ТекущийОбъект.ОбъектТестируемогоПриложения;
		СцТ_ПостроитьДеревоОбъектовРекурсивно(
			ТекущийОбъект.ОбъектТестируемогоПриложения,
			РодительскийУзел,
			,
			,
			РодительскийУзел.ТипОкна);
		
		Возврат;
		
	КонецЕсли;
	
	// Заглушка для объектов, не имеющих подчиненных объектов
	Если НЕ СцТ_ГлавнаяФорма.СцТ_ИнтерактивныйОбъектДопускаетНаличиеПодчиненныхОбъектов(ТекущийОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ТипТекущегоОбъекта = ТипЗнч(ТекущийОбъект);
	Если ТипТекущегоОбъекта = Тип("ТестируемаяФорма") ИЛИ ТипТекущегоОбъекта = Тип("ТестируемаяТаблицаФормы") Тогда
		ИмяТекущегоЭлемента  = СцТ_ИмяТекущегоЭлементаФормы(ТекущийОбъект);
		ИмяКнопкиПоУмолчанию = СцТ_ИмяКнопкиФормыПоУмолчанию(ТекущийОбъект);
	КонецЕсли;
	
	Если ПутьКОбъектуВх = Неопределено Тогда
		ПутьКОбъектуВх = Новый Массив;
	КонецЕсли;
	
	ЗаголовокОбъекта = СцТ_ГлавнаяФорма.СцТ_ЗаголовокИнтерактивногоОбъекта(ТекущийОбъект);
	ИмяОбъекта       = СцТ_ГлавнаяФорма.СцТ_ИмяИнтерактивногоОбъекта(ТекущийОбъект);
	Если ПустаяСтрока(ИмяОбъекта) Тогда
		ИмяОбъекта = "$" + ЗаголовокОбъекта;
	КонецЕсли;
	
	Попытка
		ВидОбъекта = Строка(ТекущийОбъект.Вид);
	Исключение
		ВидОбъекта = Неопределено;
	КонецПопытки;
	
	ПутьКОбъектуВх.Добавить(Новый Структура("ТипОбъекта,ИмяОбъекта,ЗаголовокОбъекта,ВидОбъекта",
										  ТипТекущегоОбъекта,
										  ИмяОбъекта,
										  ЗаголовокОбъекта,
										  ВидОбъекта));
	
	Если ТаблицаНаФорме = Неопределено
		И ТипТекущегоОбъекта = Тип("ТестируемаяТаблицаФормы") Тогда
		ТаблицаНаФорме = ТекущийОбъект;
		Попытка
			Если ТаблицаНаФорме.ТекущийРежимРедактирование() Тогда
				ТаблицаНаФорме.ЗакончитьРедактированиеСтроки();
			КонецЕсли;
		Исключение
		КонецПопытки;
	Иначе
		ТаблицаНаФормеДляПередачиДочерним = ТаблицаНаФорме;
	КонецЕсли;
	
	Если ТипТекущегоОбъекта = Тип("ТестируемоеОкноКлиентскогоПриложения") Тогда
		Если СцТ_ВСпискеПрисутствуетОбъект(ТипыОтображаемыхОбъектов, Тип("ТестируемыйКомандныйИнтерфейсОкна"), "КомандныйИнтерфейс")
			ИЛИ СцТ_ВСпискеПрисутствуетОбъект(ТипыОтображаемыхОбъектов, Тип("ТестируемаяГруппаКомандногоИнтерфейса"), "ГруппаКомандногоИнтерфейса")
			ИЛИ СцТ_ВСпискеПрисутствуетОбъект(ТипыОтображаемыхОбъектов, Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), "КнопкаКомандногоИнтерфейса") Тогда
			
			
			Если ТекущийОбъект.Основное Тогда
				// Добавление кнопок для Такси
				УзелКнопокДляТакси = РодительскаяВетвь.ПолучитьЭлементы().Добавить();
				УзелКнопокДляТакси.ПредставлениеОбъектаПриложения = НСтр("ru = 'Кнопки для Такси'");
				УзелКнопокДляТакси.ИндексКартинки                 = 3;
				//УзелКомандногоИнтерфейса.Тип = Тип("ТестируемыйКомандныйИнтерфейсОкна");
				//ОбъектыТестируемогоПриложения[УзелКомандногоИнтерфейса.ПолучитьИдентификатор()] = КомандныйИнтерфейсОбъект;
				//УзелКомандногоИнтерфейса.ТипОкна = РодительскаяВетвь.ТипОкна;
					
				УзелПредыдущий = УзелКнопокДляТакси.ПолучитьЭлементы().Добавить();
				УзелПредыдущий.ПредставлениеОбъектаПриложения = НСтр("ru = 'К предыдущему окну'");
				УзелПредыдущий.Вид                            = НСтр("ru = 'Предыдущий'");
				УзелПредыдущий.Заголовок                      = НСтр("ru = 'К предыдущему окну'");
				УзелПредыдущий.ТипОкна                        = 1;
				УзелПредыдущий.ИндексКартинки                 = 4;
				УзелПредыдущий.ДоступенДляВыбора              = Истина;
				
				УзелСледующий = УзелКнопокДляТакси.ПолучитьЭлементы().Добавить();
				УзелСледующий.ПредставлениеОбъектаПриложения = НСтр("ru = 'К следующему окну'");
				УзелСледующий.Вид                            = НСтр("ru = 'Следующий'");
				УзелСледующий.Заголовок                      = НСтр("ru = 'К следующему окну'");
				УзелСледующий.ТипОкна                        = 1;
				УзелСледующий.ИндексКартинки                 = 4;
				УзелСледующий.ДоступенДляВыбора              = Истина;
				
				УзелДомой = УзелКнопокДляТакси.ПолучитьЭлементы().Добавить();
				УзелДомой.ПредставлениеОбъектаПриложения = НСтр("ru = 'К начальной странице'");
				УзелДомой.Вид                            = НСтр("ru = 'Домой'");
				УзелДомой.Заголовок                      = НСтр("ru = 'К начальной странице'");
				УзелДомой.ТипОкна                        = 1;
				УзелДомой.ИндексКартинки                 = 4;
				УзелДомой.ДоступенДляВыбора              = Истина;
			КонецЕсли;
			
			Попытка
				
				КомандныйИнтерфейсОбъект = ТекущийОбъект.ПолучитьКомандныйИнтерфейс();
				УзелКомандногоИнтерфейса = РодительскаяВетвь.ПолучитьЭлементы().Добавить();
				УзелКомандногоИнтерфейса.ПредставлениеОбъектаПриложения = НСтр("ru = 'Командный интерфейс'");
				УзелКомандногоИнтерфейса.ИндексКартинки                 = 3;
				УзелКомандногоИнтерфейса.Тип = Тип("ТестируемыйКомандныйИнтерфейсОкна");
				ОбъектыТестируемогоПриложения[УзелКомандногоИнтерфейса.ПолучитьИдентификатор()] = КомандныйИнтерфейсОбъект;
				УзелКомандногоИнтерфейса.ТипОкна = РодительскаяВетвь.ТипОкна;
				СцТ_ПостроитьДеревоОбъектовРекурсивно(
					КомандныйИнтерфейсОбъект,
					УзелКомандногоИнтерфейса,
					,
					,
					УзелКомандногоИнтерфейса.ТипОкна);
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыРодительскойВетви = РодительскаяВетвь.ПолучитьЭлементы();
	ПодчиненныеОбъекты        = Неопределено;
	Попытка
		ПодчиненныеОбъекты = ТекущийОбъект.ПолучитьПодчиненныеОбъекты();
	Исключение
	КонецПопытки;
	
	Если ТипЗнч(ПодчиненныеОбъекты) <> Тип("ФиксированныйМассив") Тогда
		МассивПодчиненных = Новый Массив;
	Иначе
		МассивПодчиненных = Новый Массив(ПодчиненныеОбъекты);
	КонецЕсли;
	
	Если ПоказыватьКонтекстноеМеню Тогда
		Попытка
			КонтекстноеМеню = ТекущийОбъект.ПолучитьКонтекстноеМеню();
			Если КонтекстноеМеню.ПолучитьПодчиненныеОбъекты().Количество() > 0 Тогда
				МассивПодчиненных.Добавить(КонтекстноеМеню);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			КомПанель = ТекущийОбъект.ПолучитьКоманднуюПанель();
			Если КомПанель.ПолучитьПодчиненныеОбъекты().Количество() > 0 Тогда
				МассивПодчиненных.Добавить(КомПанель);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Если МассивПодчиненных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПодчиненныйОбъект Из МассивПодчиненных Цикл
		
		ПутьКОбъекту = Новый Массив;
		Для каждого ЭлМассива Из ПутьКОбъектуВх Цикл
			ПутьКОбъекту.Добавить(ЭлМассива);
		КонецЦикла;
		
		ТипОбъекта = ТипЗнч(ПодчиненныйОбъект);
		
		Если ТипОбъекта = Тип("ТестируемаяКнопкаКомандногоИнтерфейса")
			И ПустаяСтрока(ПодчиненныйОбъект.ТекстЗаголовка) И ПустаяСтрока(ПодчиненныйОбъект.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		// Определение типа окна для всех дочерних объектов - в каком окне они находятся - 
		// без окна (0), в основном (1) или в клиентском (2)
		ТипТекущегоОкна = ?(ТипОбъекта = Тип("ТестируемоеОкноКлиентскогоПриложения"),
							?(ПодчиненныйОбъект.Основное, 1, 2),
							ТипОкна);
		
		ОписаниеВидаОбъекта = СцТ_ГлавнаяФорма.СцТ_ПолучитьВидОбъекта(ПодчиненныйОбъект);
		
		Если НЕ СцТ_ВСпискеПрисутствуетОбъект(ТипыОтображаемыхОбъектов, ТипОбъекта, ОписаниеВидаОбъекта.Вид) Тогда
			Если НеВыбиратьПодчиненныеИзТаблиц = Истина
				И ТипОбъекта = Тип("ТестируемаяТаблицаФормы") Тогда
				//ПутьКОбъекту.Удалить(ПутьКОбъекту.ВГраница());
				Продолжить;
			КонецЕсли;
			
			СцТ_ПостроитьДеревоОбъектовРекурсивно(
				ПодчиненныйОбъект,
				РодительскаяВетвь,
				ИмяТекущегоЭлемента,
				ИмяКнопкиПоУмолчанию,
				ТипТекущегоОкна,
				ТаблицаНаФорме,
				ПутьКОбъекту);
			
		Иначе
			
			СтрокаДереваОбъектов = ЭлементыРодительскойВетви.Добавить();
			ИдентификаторСтроки = СтрокаДереваОбъектов.ПолучитьИдентификатор();
			СтрокаДереваОбъектов.ДоступенДляВыбора = СцТ_ВСпискеПрисутствуетОбъект(
				ТипыВыбираемыхОбъектов,
				ТипОбъекта,
				ОписаниеВидаОбъекта.Вид);
			
			// Определение видимости, доступности, только просмотр
			//АтрибутыДоступности = СцТ_ГлавнаяФорма.СцТ_АтрибутыДоступностиИнтерактивногоОбъекта(ПодчиненныйОбъект);
			//ЗаполнитьЗначенияСвойств(СтрокаДереваОбъектов, АтрибутыДоступности);
			
			ОбъектыТестируемогоПриложения[ИдентификаторСтроки] = ПодчиненныйОбъект;
			
			СтрокаДереваОбъектов.Имя = СцТ_ГлавнаяФорма.СцТ_ИмяИнтерактивногоОбъекта(ПодчиненныйОбъект);
			СтрокаДереваОбъектов.Заголовок = СцТ_ГлавнаяФорма.СцТ_ЗаголовокИнтерактивногоОбъекта(ПодчиненныйОбъект);
			Если ПустаяСтрока(СтрокаДереваОбъектов.Имя) Тогда
				СтрокаДереваОбъектов.Имя = "$" + СтрокаДереваОбъектов.Заголовок;
			КонецЕсли;
			
			СтрокаДереваОбъектов.Тип       = ТипОбъекта;
			
			СтрокаДереваОбъектов.Вид         = ОписаниеВидаОбъекта.Вид;
			СтрокаДереваОбъектов.СинонимВида = ОписаниеВидаОбъекта.Синоним;
			
			СтрокаДереваОбъектов.ПредставлениеОбъектаПриложения =
				СцТ_ПолучитьПредставлениеОбъекта(СтрокаДереваОбъектов, (ТаблицаНаФорме <> Неопределено));
			
			СтрокаДереваОбъектов.ИндексКартинки = СцТ_ПолучитьИндексКартинки(СтрокаДереваОбъектов);
			
			Если ТипОбъекта = Тип("ТестируемоеОкноКлиентскогоПриложения") И ТипТекущегоОкна = 1 Тогда
				СтрокаДереваОбъектов.ВыделитьЖирным = Истина;
				СтрокаДереваОбъектов.ПредставлениеОбъектаПриложения =
					СтрокаДереваОбъектов.ПредставлениеОбъектаПриложения + НСтр("ru = ' (главное окно)'");
			КонецЕсли;
			
			СцТ_ЗакрепитьПутьКОбъекту(
				ИдентификаторСтроки,
				ПутьКОбъекту,
				ТипОбъекта,
				СтрокаДереваОбъектов.Имя,
				СтрокаДереваОбъектов.Заголовок,
				СтрокаДереваОбъектов.Вид);
			
			СтрокаДереваОбъектов.ПредставлениеДанных = СцТ_ГлавнаяФорма.СцТ_ДанныеИнтерактивногоОбъекта(
				ПодчиненныйОбъект,
				ОписаниеВидаОбъекта.Вид,
				ТаблицаНаФорме,
				СтрокаДереваОбъектов.Значение
			);
			
			Если ПодсвечиваемыеПриВыборе <> Неопределено Тогда
				СтрокаДереваОбъектов.Подсветить = СцТ_ВСпискеПрисутствуетОбъект(
					ПодсвечиваемыеПриВыборе,
					ТипОбъекта,
					ОписаниеВидаОбъекта.Вид,
					СтрокаДереваОбъектов.Имя,
					СтрокаДереваОбъектов.Заголовок,
					ПутиПоискаОбъектов[ИдентификаторСтроки]);
			КонецЕсли;
			
			Если СтрокаДереваОбъектов.Подсветить Тогда
				Если ЗапретитьВыборПодсвеченных = Истина Тогда
					СтрокаДереваОбъектов.ДоступенДляВыбора = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДереваОбъектов.ЭтоТекущийЭлемент = (СтрокаДереваОбъектов.Имя = ИмяТекущегоЭлемента);
			СтрокаДереваОбъектов.КнопкаПоУмолчанию = (ТипОбъекта = Тип("ТестируемаяКнопкаФормы")
				И СтрокаДереваОбъектов.Имя = ИмяКнопкиПоУмолчанию);
			СтрокаДереваОбъектов.ТипОкна = ТипТекущегоОкна;
			
			Если НеВыбиратьПодчиненныеИзТаблиц = Истина
				И ТипОбъекта = Тип("ТестируемаяТаблицаФормы") Тогда
				//ПутьКОбъекту.Удалить(ПутьКОбъекту.ВГраница());
				Продолжить;
			КонецЕсли;
			
			СцТ_ПостроитьДеревоОбъектовРекурсивно(
				ПодчиненныйОбъект,
				СтрокаДереваОбъектов,
				ИмяТекущегоЭлемента,
				ИмяКнопкиПоУмолчанию,
				ТипТекущегоОкна,
				ТаблицаНаФорме,
				ПутьКОбъекту);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПутьКОбъекту.Удалить(ПутьКОбъекту.ВГраница());
	
	
	// Удаление элементов, не содержащих требуемых элементов
	КоличествоЭлементов = ЭлементыРодительскойВетви.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		
		УзелОбъекта = ЭлементыРодительскойВетви.Получить(КоличествоЭлементов - ОбратныйИндекс);
		Если УзелОбъекта.ПолучитьЭлементы().Количество() = 0
			И НЕ УзелОбъекта.ДоступенДляВыбора
			И НЕ УзелОбъекта.Подсветить Тогда
			
			ЭлементыРодительскойВетви.Удалить(УзелОбъекта);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ВыбратьОбъектыИЗакрытьФорму()
	
	Если НЕ МножественныйВыбор Тогда
		
		Если Элементы.ДеревоОбъектов.ТекущаяСтрока = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбран объект тестируемого приложения'"));
			Возврат;
		КонецЕсли;
		
		УзелОбъекта = ДеревоОбъектов.НайтиПоИдентификатору(Элементы.ДеревоОбъектов.ТекущаяСтрока);
		Если НЕ УзелОбъекта.ДоступенДляВыбора Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Текущий объект не может быть выбран!'"));
			Возврат;
		КонецЕсли;
		
		ОписаниеВыбранногоЭлементаФормы = СцТ_ПолучитьОписаниеОбъекта(УзелОбъекта);
		ОповеститьОВыборе(ОписаниеВыбранногоЭлементаФормы);
		
	Иначе
		
		СписокВыбранныхОбъектов = Новый СписокЗначений;
		СцТ_ЗаполнитьСписокВыбранныхОбъектов(ДеревоОбъектов, СписокВыбранныхОбъектов);
		
		Если СписокВыбранныхОбъектов.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не отмечен ни один объект тестируемого приложения!'"));
			Возврат;
		КонецЕсли;
		
		//Закрыть(СписокВыбранныхОбъектов);
		ОповеститьОВыборе(СписокВыбранныхОбъектов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ПолучитьОписаниеОбъекта(Знач УзелДереваОбъектов) Экспорт
	
	Если ТипЗнч(УзелДереваОбъектов) = Тип("Число") Тогда
		УзелДереваОбъектов = ДеревоОбъектов.НайтиПоИдентификатору(УзелДереваОбъектов);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Имя"                           , УзелДереваОбъектов.Имя);
	Результат.Вставить("Заголовок"                     , УзелДереваОбъектов.Заголовок);
	Результат.Вставить("Тип"                           , УзелДереваОбъектов.Тип);
	Результат.Вставить("Вид"                           , УзелДереваОбъектов.Вид);
	Результат.Вставить("Доступность"                   , УзелДереваОбъектов.Доступность);
	Результат.Вставить("Видимость"                     , УзелДереваОбъектов.Видимость);
	Результат.Вставить("ТолькоПросмотр"                , УзелДереваОбъектов.ТолькоПросмотр);
	Результат.Вставить("ПредставлениеОбъектаПриложения", УзелДереваОбъектов.ПредставлениеОбъектаПриложения);
	Результат.Вставить("Значение"                      , УзелДереваОбъектов.Значение);
	Результат.Вставить("ПредставлениеДанных"           , УзелДереваОбъектов.ПредставлениеДанных);
	Результат.Вставить("Объект"                        , ОбъектыТестируемогоПриложения[УзелДереваОбъектов.ПолучитьИдентификатор()]);
	Результат.Вставить("ОписаниеРодительскогоОбъекта"  , Неопределено);
	Результат.Вставить("ОкноОбъект"                    , Неопределено);
	Результат.Вставить("ЭтоТекущийЭлемент"             , УзелДереваОбъектов.ЭтоТекущийЭлемент);
	Результат.Вставить("КнопкаПоУмолчанию"             , УзелДереваОбъектов.КнопкаПоУмолчанию);
	Результат.Вставить("ТипОкна"                       , УзелДереваОбъектов.ТипОкна);
	Результат.Вставить("ПутьКОбъекту"                  , ПутиПоискаОбъектов[УзелДереваОбъектов.ПолучитьИдентификатор()]);
	
	РодительскийУзел = УзелДереваОбъектов.ПолучитьРодителя();
	
	Если РодительскийУзел <> Неопределено Тогда
		Результат.ОписаниеРодительскогоОбъекта = СцТ_ПолучитьОписаниеОбъекта(РодительскийУзел);
		
		Если Результат.Тип = Тип("ТестируемаяФорма") Тогда
			Если Результат.ОписаниеРодительскогоОбъекта.Тип = Тип("ТестируемоеОкноКлиентскогоПриложения") Тогда
				Результат.ОкноОбъект = Результат.ОписаниеРодительскогоОбъекта.Объект;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СцТ_ЗаполнитьСписокВыбранныхОбъектов(УзелДерева, СписокВыбранныхОбъектов)
	
	Для каждого Узел Из УзелДерева.ПолучитьЭлементы() Цикл
		Если Узел.Отметка Тогда
			СписокВыбранныхОбъектов.Добавить(СцТ_ПолучитьОписаниеОбъекта(Узел));
		КонецЕсли;
		СцТ_ЗаполнитьСписокВыбранныхОбъектов(Узел, СписокВыбранныхОбъектов);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СцТ_ОтметитьЭлементы(ВетвьДерева, ТекущиеЭлементы)
	
	Для каждого Узел Из ВетвьДерева.ПолучитьЭлементы() Цикл
		
		ОтметитьУзел = (Узел.ДоступенДляВыбора И МножественныйВыбор ИЛИ НЕ МножественныйВыбор)
			И СцТ_ВСпискеПрисутствуетОбъект(
				ТекущиеЭлементы,
				Узел.Тип,
				Узел.Вид,
				Узел.Имя,
				Узел.Заголовок,
				ПутиПоискаОбъектов[Узел.ПолучитьИдентификатор()]);
		
		Если ОтметитьУзел Тогда
			Если МножественныйВыбор Тогда
				Узел.Отметка = Истина;
			Иначе
				ИдентификаторУзла = Узел.ПолучитьИдентификатор();
				Элементы.ДеревоОбъектов.ВыделенныеСтроки.Добавить(ИдентификаторУзла);
				Элементы.ДеревоОбъектов.ТекущаяСтрока = ИдентификаторУзла;
			КонецЕсли;
		КонецЕсли;
		
		СцТ_ОтметитьЭлементы(Узел, ТекущиеЭлементы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ПолучитьИндексКартинки(СтруктураОбъект)
	
	ТипОбъекта = СтруктураОбъект.Тип;
	Если ТипОбъекта = Тип("ТестируемоеОкноКлиентскогоПриложения")
		ИЛИ ТипОбъекта = Тип("ТестируемыйКомандныйИнтерфейсОкна") Тогда
		Возврат 0;
	ИначеЕсли ТипОбъекта = Тип("ТестируемаяФорма") Тогда
		Возврат 1;
	ИначеЕсли ТипОбъекта = Тип("ТестируемаяТаблицаФормы") Тогда
		Возврат 2;
	ИначеЕсли ТипОбъекта = Тип("ТестируемаяГруппаФормы")
		ИЛИ ТипОбъекта = Тип("ТестируемаяГруппаКомандногоИнтерфейса") Тогда
		Возврат 3;
	ИначеЕсли ТипОбъекта = Тип("ТестируемаяКнопкаФормы")
		ИЛИ ТипОбъекта = Тип("ТестируемаяКнопкаКомандногоИнтерфейса") Тогда
		Возврат 4;
	ИначеЕсли ТипОбъекта = Тип("ТестируемоеПолеФормы") Тогда
		Возврат 5;
	ИначеЕсли ТипОбъекта = Тип("ТестируемаяДекорацияФормы") Тогда
		Возврат 6;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПолучитьВсеВыбираемыеОбъекты() Экспорт
	
	Результат = Новый Массив;
	СцТ_ЗаполнитьВсеВыбираемыеОбъекты(Результат, ДеревоОбъектов);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СцТ_ЗаполнитьВсеВыбираемыеОбъекты(МассивОбъектов, УзелДерева)
	
	Для каждого Узел Из УзелДерева.ПолучитьЭлементы() Цикл
		
		Если Узел.ДоступенДляВыбора Тогда
			МассивОбъектов.Добавить(СцТ_ПолучитьОписаниеОбъекта(Узел));
		КонецЕсли;
		
		СцТ_ЗаполнитьВсеВыбираемыеОбъекты(МассивОбъектов, Узел);
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура СцТ_УстановитьОтметкиВДеревеОбъектов(УзелДерева, ЗначениеОтметки)
	
	Если УзелДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Узел Из УзелДерева.ПолучитьЭлементы() Цикл
		
		Если Узел.ДоступенДляВыбора Тогда
			Узел.Отметка = ЗначениеОтметки;
		КонецЕсли;
		
		СцТ_УстановитьОтметкиВДеревеОбъектов(Узел, ЗначениеОтметки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ВСпискеПрисутствуетОбъект(
	СписокВидов,
	ТипОбъекта,
	ВидОбъекта,
	ИмяОбъекта = Неопределено,
	ЗаголовокОбъекта = Неопределено,
	ПутьПоискаОбъекта = Неопределено)
	
	Если СписокВидов = Неопределено Тогда
		// Список не задан
		Возврат Истина;
	КонецЕсли;
	
	Если СписокВидов.НайтиПоЗначению(ТипОбъекта) <> Неопределено
		ИЛИ СписокВидов.НайтиПоЗначению(ВидОбъекта) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	НайденоСовпадение = Ложь;
	Для каждого ЭлементСписка Из СписокВидов Цикл
		
		ЗначениеЭлемента = ЭлементСписка.Значение;
		Если ТипЗнч(ЗначениеЭлемента) = Тип("Структура") Тогда
			
			ЗначениеСтруктуре = Неопределено;
			Если ЗначениеЭлемента.Свойство("ТипОбъекта", ЗначениеСтруктуре)
				И ТипОбъекта <> ЗначениеСтруктуре Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЭлемента.Свойство("ВидОбъекта", ЗначениеСтруктуре)
				И ВидОбъекта <> ЗначениеСтруктуре Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяОбъекта <> Неопределено
				И ЗначениеЭлемента.Свойство("ИмяОбъекта", ЗначениеСтруктуре)
				И ИмяОбъекта <> ЗначениеСтруктуре Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗаголовокОбъекта <> Неопределено
				И ЗначениеЭлемента.Свойство("ЗаголовокОбъекта", ЗначениеСтруктуре)
				И ЗаголовокОбъекта <> ЗначениеСтруктуре Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПутьПоискаОбъекта <> Неопределено
				И ЗначениеЭлемента.Свойство("ПутьКОбъекту", ЗначениеСтруктуре)
				И НЕ СцТ_ПутиОбъектовСовпадают(ПутьПоискаОбъекта, ЗначениеСтруктуре) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденоСовпадение = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденоСовпадение;
	
КонецФункции

&НаКлиенте
Функция СцТ_ПутиОбъектовСовпадают(Путь1, Путь2)
	
	ВГраница = Путь1.ВГраница();
	Если ВГраница <> Путь2.ВГраница() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Итератор = 0 По ВГраница Цикл
		
		ОбъектВПути1 = Путь1[Итератор];
		ОбъектВПути2 = Путь2[Итератор];
		
		Если ОбъектВПути1.ТипОбъекта <> ОбъектВПути2.ТипОбъекта Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Лев(ОбъектВПути2.ИмяОбъекта, 1) = "$" Тогда
			
			Если ОбъектВПути1.ЗаголовокОбъекта <> Сред(ОбъектВПути2.ИмяОбъекта, 2) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			
			Если ОбъектВПути1.ИмяОбъекта <> ОбъектВПути2.ИмяОбъекта Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если ОбъектВПути1.ЗаголовокОбъекта <> ОбъектВПути2.ЗаголовокОбъекта Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СцТ_ЗакрепитьПутьКОбъекту(ИдентификаторУзла, ПолныйПуть, ТипОбъекта, ИмяОбъекта, ЗаголовокОбъекта, ВидОбъекта)
	
	ТипПриложение = Тип("ТестируемоеПриложение");
	ТипОкно       = Тип("ТестируемоеОкноКлиентскогоПриложения");
	ТипФорма      = Тип("ТестируемаяФорма");
	ТипТаблица    = Тип("ТестируемаяТаблицаФормы");
	
	КоличествоЭлементовВПути = ПолныйПуть.Количество();
	ИндексОбъекта = 0;
	Для ОбратныйИндекс = 1 По КоличествоЭлементовВПути Цикл
		
		ИндекстТекущегоОбъекта = КоличествоЭлементовВПути - ОбратныйИндекс;
		ОписательОбъекта = ПолныйПуть[ИндекстТекущегоОбъекта];
		Если ОписательОбъекта.ТипОбъекта = ТипПриложение
			ИЛИ ОписательОбъекта.ТипОбъекта = ТипОкно
			ИЛИ ОписательОбъекта.ТипОбъекта = ТипФорма
			ИЛИ ОписательОбъекта.ТипОбъекта = ТипТаблица
				И ОбратныйИндекс <> 1 Тогда
			
			ИндексОбъекта = ИндекстТекущегоОбъекта;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтносительныйПуть = Новый Массив; // относительно формы или таблицы формы
	
	Для Итератор = ИндексОбъекта + 1 По КоличествоЭлементовВПути - 1 Цикл
		ОписательОбъекта = ПолныйПуть[Итератор];
		ОтносительныйПуть.Добавить(ОписательОбъекта);
	КонецЦикла;
	
	ОтносительныйПуть.Добавить(Новый Структура("ТипОбъекта,ИмяОбъекта,ЗаголовокОбъекта,ВидОбъекта",
											   ТипОбъекта,
											   ИмяОбъекта,
											   ЗаголовокОбъекта,
											   Строка(ВидОбъекта)));
	
	ПутиПоискаОбъектов[ИдентификаторУзла] = ОтносительныйПуть;
	
КонецФункции

// Получение представление объекта тестируемого приложения
// Параметры
//	СтруктураОбъект - структура объекта
//	ВТаблицеНаФорме - признак, что поле находится в таблице
// Возвращаемое значение
// Пользовательское представление объекта
&НаКлиенте
Функция СцТ_ПолучитьПредставлениеОбъекта(СтруктураОбъект, ВТаблицеНаФорме = Ложь)
	
	// Обработка типов, для которых заголовки не отображаются
	Если СтруктураОбъект.Вид = "КоманднаяПанель" Тогда
		Если СтруктураОбъект.Имя = "ФормаКоманднаяПанель" Тогда
			Возврат НСтр("ru = 'Командная панель формы'");
		ИначеЕсли ВТаблицеНаФорме Тогда
			Возврат НСтр("ru = 'Командная панель таблицы'");
		КонецЕсли;
	ИначеЕсли СтруктураОбъект.Вид = "КонтекстноеМеню" Тогда
		Возврат НСтр("ru = 'Контекстное меню'");
	ИначеЕсли СтруктураОбъект.Вид = "КомандныйИнтерфейс" Тогда
		Возврат НСтр("ru = 'Командный интерфейс'");
	ИначеЕсли СтруктураОбъект.Вид = "ГруппаКомандногоИнтерфейса" Тогда
		Возврат СтруктураОбъект.Заголовок;
		
		// Иначе будет выполнено продолжение функции
	КонецЕсли;
	
	// Обработка оставшихся типов элементов формы
	Результат = ?(ПустаяСтрока(СтруктураОбъект.Вид),
				  НСтр("ru = 'Объект тестируемого приложения ""'"),
				  ?(СтруктураОбъект.Тип = Тип("ТестируемоеПолеФормы") И ВТаблицеНаФорме,
					НСтр("ru = 'Ячейка'"),
					СтруктураОбъект.СинонимВида)
				  + " """);
	
	Если ПустаяСтрока(СтруктураОбъект.Заголовок) Тогда
		Если СтруктураОбъект.Вид = "ТестируемоеОкноКлиентскогоПриложения"
			ИЛИ СтруктураОбъект.Тип = Тип("ТестируемаяФорма") Тогда
			Результат = Результат + "<без заголовка>";
		Иначе
			Результат = Результат + СтруктураОбъект.Имя;
		КонецЕсли;
	Иначе
		Результат = Результат + СтруктураОбъект.Заголовок;
	КонецЕсли;
	
	Возврат Результат + """";
	
КонецФункции


#КонецОбласти
