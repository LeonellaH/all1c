
#Область Переменные

&НаКлиенте
Перем СцТ_ГлавнаяФорма;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	//
	//ПутьКФормам         = ЭтаОбработка.Метаданные().ПолноеИмя() + ".Форма.";
	//ИмяОбъектаЭтойФормы = ЭтаОбработка.ИмяОбъектаЭтаФорма();
	
	РежимПрогона                       = Параметры.РежимПрогона;
	Автор                              = Параметры.Автор;
	Наименование                       = Параметры.Наименование;
	НачальнаяДата                      = Параметры.НачальнаяДата;
	РабочийКаталог                     = Параметры.РабочийКаталог;
	Цель                               = Параметры.Цель;
	ИмяФайлаПротокола                  = Параметры.ИмяФайлаПротокола;
	БлокироватьГлавноеОкно             = Параметры.БлокироватьГлавноеОкно;
	URLИБ                              = Параметры.URLИБ;
	ВидТестируемогоКлиента             = Параметры.ВидТестируемогоКлиента;
	ИмяПользователя                    = Параметры.ИмяПользователя;
	ПарольПользователяИБ               = Параметры.ПарольПользователяИБ;
	ПортТестируемогоКлиента            = Параметры.ПортТестируемогоКлиента;
	КомпьютерИБ                        = Параметры.КомпьютерИБ;
	ДругаяИБ                           = Параметры.ДругаяИБ;
	СтрокаПодключенияКИБ               = Параметры.СтрокаПодключенияКИБ;
	ДопПараметрыКоманднойСтроки        = Параметры.ДопПараметрыКоманднойСтроки;
	ТаймаутПоискаИнтерактивныхОбъектов = Параметры.ТаймаутПоискаИнтерактивныхОбъектов;
	ВыполнятьЗамерПроизводительности   = Параметры.ВыполнятьЗамерПроизводительности;
	
	ВыполнятьПреобразованиеСсылочныхТипов = Параметры.ВыполнятьПреобразованиеСсылочныхТипов;
	
	ОбновлятьИндексППД                 = Параметры.ОбновлятьИндексППД;
	
	СписокВыбора = Элементы.ИмяПользователя.СписокВыбора;
	СцТ_ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	СписокВыбора.Добавить(СцТ_ТекущийПользователь.Имя,
						  ?(ПустаяСтрока(СцТ_ТекущийПользователь.ПолноеИмя),
							НСтр("ru = 'Текущий пользователь'"),
							СцТ_ТекущийПользователь.ПолноеИмя + НСтр("ru = ' (текущий)'")));
	
	Попытка
		СцТ_ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для каждого СцТ_Пользователь Из СцТ_ПользователиИБ Цикл
			Если СписокВыбора.НайтиПоЗначению(СцТ_Пользователь.Имя) = Неопределено Тогда
				СписокВыбора.Добавить(СцТ_Пользователь.Имя, СцТ_Пользователь.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	СписокВыбора.СортироватьПоПредставлению();
	
	Элементы.ИмяФайлаПротокола.Видимость                = РежимПрогона;
	Элементы.ВыполнятьЗамерПроизводительности.Видимость = РежимПрогона;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СцТ_ГлавнаяФорма = ВладелецФормы;
	УправлениеЭлементамиФормыДляРазныхИБ();
	УправлениеВидимостьюСтраницВидаКлиента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СцТ_ПринудительноеЗакрытиеВсехФормОбработки" Тогда
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_Шапка

&НаКлиенте
Процедура РабочийКаталогПриИзменении(Элемент)
	
	СтрокаОшибок = СцТ_ПроверкаДопустимостиСимволовИмениФайла(РабочийКаталог);
	
	Если НЕ ПустаяСтрока(СтрокаОшибок) Тогда
		
		ТекстСообщения = НСтр("ru='Название каталога ""<PATH>"" содержит недопустимые символы ""<ERROR>""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "<PATH>", РабочийКаталог);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ERROR", СтрокаОшибок);
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	// Проверка существования каталога
	Каталог = Новый Файл(РабочийКаталог);
	Если НЕ Каталог.Существует() Тогда
		СоздатьКаталог(РабочийКаталог);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочийКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ВыборФайла.Заголовок = НСтр("ru='Выбор рабочего каталога'");
	
	Каталог = Новый Файл(РабочийКаталог);
	Если Каталог.Существует() Тогда
		ВыборФайла.Каталог = РабочийКаталог;
	КонецЕсли;
	
	Если ВыборФайла.Выбрать() Тогда
		РабочийКаталог = ВыборФайла.Каталог;
	КонецЕсли;
	
	РазделительПути = ПолучитьРазделительПути();
	Если Сред(РабочийКаталог, СтрДлина(РабочийКаталог))<> РазделительПути Тогда
		РабочийКаталог = РабочийКаталог + РазделительПути;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПротоколаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФайлаПротоколаПередИзменением = ИмяФайлаПротокола;
	
	Если ПустаяСтрока(ИмяФайлаПротокола) Тогда
		 ПослеИнициализацииПроверочногоФайла(Неопределено, Неопределено);
	Иначе
		ПроверочныйФайл = Новый Файл();
		
		ОписаниеОповещенияИнициализации = Новый ОписаниеОповещения("ПослеИнициализацииПроверочногоФайла", ЭтотОбъект);
		ПроверочныйФайл.НачатьИнициализацию(ОписаниеОповещенияИнициализации, ИмяФайлаПротокола);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИнициализацииПроверочногоФайла(РезультатИнициализации, ДопПараметры) Экспорт
	
	ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	МаскаВсеФайлы = ПолучитьМаскуВсеФайлы();
	ДВФ.Фильтр = НСтр("ru = 'Файлы протокола (*.json)|*.json|Все файлы|" + МаскаВсеФайлы + "'");
	ДВФ.МножественныйВыбор = Ложь;
	ДВФ.ПроверятьСуществованиеФайла = Ложь;
	
	Если РезультатИнициализации = Неопределено Тогда
		ДВФ.Каталог        = РезультатИнициализации.Путь;
		ДВФ.ПолноеИмяФайла = РезультатИнициализации.Имя;
	Иначе
		ДВФ.Каталог        = РабочийКаталог;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаПротокола", ЭтотОбъект);
	
	ДВФ.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаПротокола(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяФайлаПротокола <> РезультатВыбора[0] Тогда
		ПроверочныйФайл = Новый Файл();
		
		ИмяФайлаПротокола = РезультатВыбора[0];
		
		ОписаниеОповещенияИнициализации = Новый ОписаниеОповещения("ПослеИнициализацииВыбранногоФайла", ЭтотОбъект);
		ПроверочныйФайл.НачатьИнициализацию(ОписаниеОповещенияИнициализации, ИмяФайлаПротокола);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИнициализацииВыбранногоФайла(РезультатИнициализации, ДопПараметры) Экспорт
	
	Если РезультатИнициализации = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПроверкиСуществованияВыбранногоФайла", ЭтотОбъект);
		РезультатИнициализации.НачатьПроверкуСуществования(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеПроверкиСуществованияВыбранногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СцТ_ОбработатьОтветПользователяОПерезаписиФайлаПротокола", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Выбранный файл протокола уже существует. Очистить файл перед началом выполнения?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры





&НаКлиенте
Процедура ИмяФайлаПротоколаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка    = Ложь;
	ОписательФайлаПротокола = Новый Файл(ИмяФайлаПротокола);
	Если НЕ ОписательФайлаПротокола.Существует() ИЛИ ОписательФайлаПротокола.ЭтоКаталог() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Файл протокола не существует (запись в файл не выполнялась или файл удален)'"));
		Возврат;
	КонецЕсли;
	
	//Попытка
	//	ЗапуститьПриложение(ИмяФайлаПротокола);
	//Исключение
	//	ПоказатьПредупреждение(, НСтр("ru = 'Не удалось открыть файл протокола: '")
	//				   + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//КонецПопытки;
	
	// Открытие JSON
	ИмяФайла = ИмяФайлаПротокола; // + ".json";
	
	//СцТ_ЧтениеJSON = Новый ЧтениеJSON;
	//СцТ_ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	//РезудьтатВыполнения = ПрочитатьJSON(СцТ_ЧтениеJSON);
	//СцТ_ЧтениеJSON.Закрыть();
	
	ДД = Новый ДвоичныеДанные(ИмяФайла);
	АдрДД = ПоместитьВоВременноеХранилище(ДД, Новый УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдрДД"      , АдрДД);
	ПараметрыФормы.Вставить("ПутьКФормам", СцТ_ГлавнаяФорма.ПутьКФормам);
	
	ПараметрыФормы.Вставить("Расшифровка"            , Неопределено);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ФормаПротокола = ОткрытьФорму(СцТ_ГлавнаяФорма.ПутьКФормам + "ПротоколВыполнения", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.Независимый);
	
	ФормаПротокола.СцТ_ГлавнаяФорма = СцТ_ГлавнаяФорма;
	
КонецПроцедуры


&НаКлиенте
Процедура ВидТестируемогоКлиентаПриИзменении(Элемент)
	
	УправлениеВидимостьюСтраницВидаКлиента();
	Если (ВидТестируемогоКлиента = 2) Тогда
		ВыполнятьЗамерПроизводительности = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДругаяИБПриИзменении(Элемент)
	
	УправлениеЭлементамиФормыДляРазныхИБ();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Элемент.Списоквыбора.НайтиПоЗначению(Текст) = Неопределено Тогда
		Элемент.Списоквыбора.Вставить(0, Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПрименитьИЗакрыть(Команда)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РежимПрогона"                       , РежимПрогона);
	ПараметрыОповещения.Вставить("Автор"                              , Автор);
	ПараметрыОповещения.Вставить("Наименование"                       , Наименование);
	ПараметрыОповещения.Вставить("НачальнаяДата"                      , НачальнаяДата);
	ПараметрыОповещения.Вставить("РабочийКаталог"                     , РабочийКаталог);
	ПараметрыОповещения.Вставить("Описание"                           , Цель);
	ПараметрыОповещения.Вставить("ИмяФайлаПротокола"                  , ИмяФайлаПротокола);
	ПараметрыОповещения.Вставить("БлокироватьГлавноеОкно"             , БлокироватьГлавноеОкно);
	ПараметрыОповещения.Вставить("ИмяПользователя"                    , ИмяПользователя);
	ПараметрыОповещения.Вставить("ПарольПользователяИБ"               , ПарольПользователяИБ);
	ПараметрыОповещения.Вставить("ВидТестируемогоКлиента"             , ВидТестируемогоКлиента);
	ПараметрыОповещения.Вставить("URLИБ"                              , URLИБ);
	ПараметрыОповещения.Вставить("ПортТестируемогоКлиента"            , ПортТестируемогоКлиента);
	ПараметрыОповещения.Вставить("КомпьютерИБ"                        , КомпьютерИБ);
	ПараметрыОповещения.Вставить("ДругаяИБ"                           , ДругаяИБ);
	ПараметрыОповещения.Вставить("СтрокаПодключенияКИБ"               , СтрокаПодключенияКИБ);
	ПараметрыОповещения.Вставить("ДопПараметрыКоманднойСтроки"        , ДопПараметрыКоманднойСтроки);
	
	ПараметрыОповещения.Вставить("БлокироватьГлавноеОкно"             , БлокироватьГлавноеОкно);
	ПараметрыОповещения.Вставить("ТаймаутПоискаИнтерактивныхОбъектов" , ТаймаутПоискаИнтерактивныхОбъектов);
	ПараметрыОповещения.Вставить("ПерезаписатьФайлПротокола"          , ПерезаписатьФайлПротокола);
	ПараметрыОповещения.Вставить("ОбновлятьИндексППД"                 , ОбновлятьИндексППД);
	ПараметрыОповещения.Вставить("ВыполнятьЗамерПроизводительности"   , ВыполнятьЗамерПроизводительности);
	ПараметрыОповещения.Вставить("ВыполнятьПреобразованиеСсылочныхТипов", ВыполнятьПреобразованиеСсылочныхТипов);
	
	Оповестить("ИзменениеНастроекТеста", ПараметрыОповещения);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

&НаКлиенте
Процедура СцТ_ОбработатьОтветПользователяОПерезаписиФайлаПротокола(КодВозврата, ДопПараметры) Экспорт
	
	ПерезаписатьФайлПротокола = (КодВозврата = КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Функция СцТ_ПроверкаДопустимостиСимволовИмениФайла(СтрокаСимволовДляПроверки)
	
	СтрокаДопустимыхСимволов = "1234567890ABCDEFGHIJKLMNOPQRSTUWVXYZ .,;:'""!_-+=\/()";
	СтрокаОшибок = "";
	ДлинаСтроки = СтрДлина(СтрокаСимволовДляПроверки);
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		ТекущийСивол = Сред(СтрокаСимволовДляПроверки, НомерСимвола, 1);
		Если Найти(СтрокаДопустимыхСимволов, ВРег(ТекущийСивол)) = 0 Тогда
			СтрокаОшибок = СтрокаОшибок + ТекущийСивол;
		КонецЕСли;
	КонецЦикла;
	
	Возврат СтрокаОшибок;
	
КонецФункции

&НаКлиенте
Процедура УправлениеЭлементамиФормыДляРазныхИБ()
	
	Если ДругаяИБ Тогда
		Элементы.СтрокаПодключенияКИБ.Доступность = Истина;
		Элементы.КомпьютерИБ.Доступность = Истина;
		Элементы.СтраницыПользователя.ТекущаяСтраница = Элементы.СтраницаПользователяДругойИБ;
	Иначе
		Элементы.СтрокаПодключенияКИБ.Доступность = Ложь;
		Элементы.КомпьютерИБ.Доступность          = Ложь;
		
		Элементы.СтраницыПользователя.ТекущаяСтраница = Элементы.СтраницаПользователяЭтойИБ;
		
		СтрокаПодключенияКИБ = СтрокаСоединенияИнформационнойБазы();
		
		Если СцТ_ГлавнаяФорма.ПараметрыСоединенияСИБ.КлиентСерверная Тогда
			КомпьютерИБ = СцТ_ГлавнаяФорма.ПараметрыСоединенияСИБ.Кластер;
		Иначе
			КомпьютерИБ = "127.0.0.1";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСтраницВидаКлиента()
	
	Если (ВидТестируемогоКлиента = 2) Тогда
		Элементы.СтраницыВидаКлиента.ТекущаяСтраница = Элементы.СтраницыВидаКлиентаВеб;
	Иначе
		Элементы.СтраницыВидаКлиента.ТекущаяСтраница = Элементы.СтраницыВидаКлиентаНеВеб;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


