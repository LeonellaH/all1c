Перем КонтекстЯдра;
Перем Утверждения;
Перем Ожидаем;

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
КонецПроцедуры

Функция ПолучитьСписокТестов() Экспорт
	
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_Выполняется");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПартнера");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетОрганизацию");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетВалюту_Рубль");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетВидЦен_РозничнаяЦена");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_Возвращаетa3nСпособыДоставки_ПочтаРоссии");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетБизнесРегион_МоскваКДС");                      
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПроизводителя_TOYOTA");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетСпособОбеспечения_СобственныеОстаткиМытищи");	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПеречислениеТипыДоговоров_СПокупателем");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетЗаказКлиента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетЭквайринговуюОперацию");
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляСправочника");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляДокумента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляПеречисления");
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Валюты");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Производителя");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Контрагента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Партнера");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_КонтактногоЛица");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Организации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Договора");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_БизнесРегиона");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Склада");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СкладскогоПомещения");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ТипаДоговора");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СтатусаОбъектаВШине");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СпособаДоставки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаДокумента1С");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаЦен");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СпособаОбеспечения");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаБалансовойОперацииВШине");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ЗаказаКлиента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Реализации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВозвратаОтКлиента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ЭквайринговойОперации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ПКО");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ПоступленияБезналичныхДС");
		
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ДоговорыКонтрагентов");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_Контрагенты");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_Партнеры");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_Организации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_КонтактныеЛицаПартнеров");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ЗаказКлиента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ПриходныйКассовыйОрдер");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ПоступлениеБезналичныхДС");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ОперацияПоПлатежнойКарте");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_РеализацияТоваровУслуг");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ВозвратТоваровОтКлиента");
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Валюты");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Производителя");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Контрагента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Партнера");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_КонтактногоЛица");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Организации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Договора");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_БизнесРегиона");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Склада");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_СкладскогоПомещения");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ТипаДоговора");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_СтатусаОбъектаВШине");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_СпособаДоставки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ВидаДокумента1С");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ВидаЦен");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_СпособаОбеспечения");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ВидаБалансовойОперацииВШине");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ФормыОплаты");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ЗаказаКлиента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Реализации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ВозвратаОтКлиента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ЭквайринговойОперации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ПКО");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ПоступленияБезналичныхДС");
	
	
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ЗаменитьРусскиеБуквыВАртикуле_СменаРаскладки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ЗаменитьРусскиеБуквыВАртикуле_Опечатки");	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОчиститьАртикул");	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьБухгалтерскийОперационныйБалансСПокупателем_ВозвращаетСтруктуру");	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСписокИзмененныхОбъектовИзNotificationService_Выполняется");	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьПоставщиковПоГрафикуЗаказовДляВыгрузки_Выполняется");	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПересчитатьБлижайшиеДатыСозданияЗаказов_Выполняется");
	 
	Возврат ВсеТесты;
КонецФункции

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт

	НаборТестов.НачатьГруппу("Тесты создания справочников в 1С", Истина);
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_НайтиПроизводителя1С_ВыполняетсяДляНового");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_НайтиПроизводителя1С_ВыполняетсяДляСуществующего");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_НайтиНоменклатуруВ1С_ВыполняетсяДляНового");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_НайтиНоменклатуруВ1С_ВыполняетсяДляСуществующего");

	НаборТестов.НачатьГруппу("Метод ПолучитьСсылку1СПоTypeId", Истина);
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_Выполняется");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПартнера");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетОрганизацию");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетВалюту_Рубль");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетВидЦен_РозничнаяЦена");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_Возвращаетa3nСпособыДоставки_ПочтаРоссии");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетБизнесРегион_МоскваКДС");                      
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПроизводителя_TOYOTA");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетСпособОбеспечения_СобственныеОстаткиМытищи");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПеречислениеТипыДоговоров_СПокупателем");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетЗаказКлиента");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетЭквайринговуюОперацию");
	
	НаборТестов.НачатьГруппу("Метод ПолучитьTypeIdПоСсылке1С", Истина);
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляСправочника");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляДокумента");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляПеречисления");
	
	НаборТестов.НачатьГруппу("Метод СтруктураИдентификацииОбъектаВШине", Истина);
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Валюты");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Производителя");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Контрагента");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Партнера");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_КонтактногоЛица");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Организации");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Договора");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_БизнесРегиона");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Склада");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СкладскогоПомещения");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ТипаДоговора");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СтатусаОбъектаВШине");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СпособаДоставки");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаДокумента1С");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаЦен");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СпособаОбеспечения");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаБалансовойОперацииВШине");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ЗаказаКлиента");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Реализации");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВозвратаОтКлиента");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ЭквайринговойОперации");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ПКО");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ПоступленияБезналичныхДС");
	
	НаборТестов.НачатьГруппу("Метод СформироватьСтруктуруОбъектаAutoXPL", Истина);
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ДоговорыКонтрагентов");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_Контрагенты");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_Партнеры");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_Организации");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_КонтактныеЛицаПартнеров");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ЗаказКлиента");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ПриходныйКассовыйОрдер");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ПоступлениеБезналичныхДС");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ОперацияПоПлатежнойКарте");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_РеализацияТоваровУслуг");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ВозвратТоваровОтКлиента");
	
	НаборТестов.НачатьГруппу("Метод ОпределитьСтатусОбъектаВ1С", Истина);
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Валюты");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Производителя");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Контрагента");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Партнера");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_КонтактногоЛица");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Организации");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Договора");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_БизнесРегиона");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Склада");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_СкладскогоПомещения");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ТипаДоговора");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_СтатусаОбъектаВШине");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_СпособаДоставки");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ВидаДокумента1С");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ВидаЦен");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_СпособаОбеспечения");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ВидаБалансовойОперацииВШине");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ФормыОплаты");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ЗаказаКлиента");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Реализации");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ВозвратаОтКлиента");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ЭквайринговойОперации");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ПКО");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ПоступленияБезналичныхДС");
	
	
	НаборТестов.НачатьГруппу("Метод Прочие методы", Истина);
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ЗаменитьРусскиеБуквыВАртикуле_СменаРаскладки");
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ЗаменитьРусскиеБуквыВАртикуле_Опечатки");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ОчиститьАртикул");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьБухгалтерскийОперационныйБалансСПокупателем_ВозвращаетСтруктуру");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСписокИзмененныхОбъектовИзNotificationService_Выполняется");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьПоставщиковПоГрафикуЗаказовДляВыгрузки_Выполняется");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьМетод_ПересчитатьБлижайшиеДатыСозданияЗаказов_Выполняется");

КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
		
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры


// Покрытие методов общего модуля a3nОбщегоНазначенияСервер:
// Есть тесты (+) 		Имя метода 											Тестируется через другой метод
// +			GetЗапрос												(ПолучитьСписокИзмененныхОбъектовИзNotificationService)
// 				PostЗапрос
// + 			ЗаменитьРусскиеБуквыВАртикуле
//				ЗаполнитьОбеспечениеЗаказа
//				ЗаполнитьОбеспечениеЗаказаНаПеремещение
//				НайтиЗаказКлиентаВ1С
//				НайтиЗаказПоставщикуВ1С
//				НайтиКонтрагентаПоПрайсЛисту
//				НайтиНовоеСобытиеОтказСтрокиЗаказаВ1С
//				НайтиНоменклатуруВ1С
//				НайтиНоменклатуруПоставщикаВ1С
//				НайтиОперациюПоПлатежнойКартеВ1С
//				НайтиПартнераКонтрагентаВ1С
//				НайтиПроизводителя1С
//				НайтиСоглашениеДоговорВ1С
//				НайтиСпособОбеспеченияПотребностейВ1С
//				ОбновитьОбъект1С
//				ОбновитьСобытиеNotificationService
//				ОбновитьСтатусЗаказаКлиентаВШине
//				ОбработатьСобытиеNotificationService
// + 			ОпределитьСтатусОбъектаВ1С
//				ОпределитьСтатусыСтрокЗаказаКлиента
//				ОтменитьСопоставлениеОбъектаШиныСОбъектом1С
// + 			ОчиститьАртикул
//				ПередаватьТолькоБалансовыеОперации
// + 			ПересчитатьБлижайшиеДатыСозданияЗаказов
// + 			ПолучитьTypeIdПоСсылке1С
// + 			ПолучитьБухгалтерскийОперационныйБалансСПокупателем
//				ПолучитьИдентификаторСтрокиДокумента
//				ПолучитьМассивИменОбъектовШиныДляОбработкиСобытий
//				ПолучитьМассивСтруктурПолучателейСообщенийПоРоли
// +			ПолучитьПоставщиковПоГрафикуЗаказовДляВыгрузки
//				ПолучитьСкладПоПодразделениюАгенту
// +			ПолучитьСоглашениеДоговорСКлиентом						(СформироватьСтруктуруДоговораAutoXPL)
// + 			ПолучитьСписокИзмененныхОбъектовИзNotificationService
// + 			ПолучитьСсылку1СПоTypeId
// +			ПреобразованиеJSON										(ПолучитьСписокИзмененныхОбъектовИзNotificationService)
// +			ПреобразоватьТочкуВхода									(GetЗапрос)
//				СинхронизироватьЗаказКлиентаВШине
//				СоздатьКонтрагентаВOrderService
//				СоздатьНовыйОбъект1С
//				СоздатьОбновитьОбъектВШине
// + 			СоздатьСсылкуAutoXPL									(СформироватьСтруктуруОбъектаAutoXPL)
//				СопоставитьОбъектШиныСОбъектом1С
// + 			СтрокаПоМаске											(ОчиститьАртикул)
// + 			СтруктураИдентификацииОбъектаВШине
// + 			СформироватьСтруктуруOrderItemAutoXPL					(СформироватьСтруктуруОбъектаAutoXPL)
// + 			СформироватьСтруктуруPaymentAutoXPL            			(СформироватьСтруктуруОбъектаAutoXPL)
// + 			СформироватьСтруктуруShipmentAutoXPL           			(СформироватьСтруктуруОбъектаAutoXPL)
// + 			СформироватьСтруктуруБалансовыхОперацийAutoXPL 			(СформироватьСтруктуруОбъектаAutoXPL)
// + 			СформироватьСтруктуруДоговораAutoXPL           			(СформироватьСтруктуруОбъектаAutoXPL)
// + 			СформироватьСтруктуруЗаказаAutoXPL             			(СформироватьСтруктуруОбъектаAutoXPL)
// + 			СформироватьСтруктуруКонтактногоЛицаAutoXPL    			(СформироватьСтруктуруОбъектаAutoXPL)
// + 			СформироватьСтруктуруКонтрагентаAutoXPL        			(СформироватьСтруктуруОбъектаAutoXPL)
// + 			СформироватьСтруктуруОбъектаAutoXPL
#Область ТестыМетодовМодуля_a3nОбщегоНазначенияСервер

#Область ТестыМетода_ПолучитьСсылку1СПоTypeId
	
// Передаем данные партнера Центр Закупки ООО
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_Выполняется() Экспорт	
	Параметры = Новый Массив;
	Параметры.Добавить("Counteragent");
	Параметры.Добавить(56);	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ПолучитьСсылку1СПоTypeId", Параметры);
КонецПроцедуры

// Передаем данные партнера Центр Закупки ООО
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПартнера() Экспорт
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Counteragent", 56)).Существует().ИмеетТип("СправочникСсылка.Партнеры").Заполнено();
КонецПроцедуры

// Передаем данные организации
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетОрганизацию() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Counteragent", 56, "Справочник.Организации")).Существует().ИмеетТип("СправочникСсылка.Организации").Заполнено();
КонецПроцедуры

// Передаем данные валюты значение Рубль
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетВалюту_Рубль() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Currency", 643, "Справочник.Валюты")).Существует().ИмеетТип("СправочникСсылка.Валюты").Заполнено();
КонецПроцедуры

// Передаем данные вида цен значение Розничная цена
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетВидЦен_РозничнаяЦена() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("PriceGroup", 1020)).Существует().ИмеетТип("СправочникСсылка.ВидыЦен").Заполнено();
КонецПроцедуры

// Передаем данные справочника a3nСпособыДоставки значение Почта России
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_Возвращаетa3nСпособыДоставки_ПочтаРоссии() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("TransportCompany", 1)).Существует().ИмеетТип("СправочникСсылка.a3nСпособыДоставки").Заполнено();
КонецПроцедуры

// Передаем данные справочника БизнесРегионы значение Москва 1_Мытищи КДС
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетБизнесРегион_МоскваКДС() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Agent", 1102)).Существует().ИмеетТип("СправочникСсылка.БизнесРегионы").Заполнено();
КонецПроцедуры

// Передаем данные справочника Производители значение TOYOTA
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПроизводителя_TOYOTA() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Brand", 4096)).Существует().ИмеетТип("СправочникСсылка.Производители").Заполнено();
КонецПроцедуры

// Передаем данные справочника СпособыОбеспеченияПотребностей значение Собственные остатки 50001 СП Мытищи
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетСпособОбеспечения_СобственныеОстаткиМытищи() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Pricelist", 7997)).Существует().ИмеетТип("СправочникСсылка.СпособыОбеспеченияПотребностей").Заполнено();
КонецПроцедуры

// Передаем данные перечисления ТипыДоговоров значение СПокупателем
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПеречислениеТипыДоговоров_СПокупателем() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("ContractType", 6)).Существует().ИмеетТип("ПеречислениеСсылка.ТипыДоговоров").Заполнено();
КонецПроцедуры

// Передаем данные документа ЗаказКлиента ЦЗ01-000001 от 02.01.2016 12:41:57
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетЗаказКлиента() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Order", 4811)).Существует().ИмеетТип("ДокументСсылка.ЗаказКлиента").Заполнено();
КонецПроцедуры

// Передаем данные документа ЭквайринговаяОперация 3N01-000191 от 16.06.2016 18:51:23
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетЭквайринговуюОперацию() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Payment", 15164)).Существует().ИмеетТип("ДокументСсылка.ОперацияПоПлатежнойКарте").Заполнено();
КонецПроцедуры

#КонецОбласти

#Область ТестыМетода_ПолучитьTypeIdПоСсылке1С

// Передаем ссылку на случайный элемент справочника Партнеры
Процедура ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляСправочника() Экспорт	
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Партнеры");
	Если Ссылка1С <> Неопределено Тогда
		Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьTypeIdПоСсылке1С(Ссылка1С)).Существует().ИмеетТип("Структура").Заполнено();
	КонецЕсли;
КонецПроцедуры

// Передаем ссылку на случайный документ ЗаказКлиента
Процедура ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляДокумента() Экспорт	
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.ЗаказКлиента");
	Если Ссылка1С <> Неопределено Тогда
		Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьTypeIdПоСсылке1С(Ссылка1С)).Существует().ИмеетТип("Структура").Заполнено();
	КонецЕсли;
КонецПроцедуры 

// Передаем ссылку на значение перечисления ТипыДоговоров.СПокупателем
Процедура ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляПеречисления() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьTypeIdПоСсылке1С(Перечисления.ТипыДоговоров.СПокупателем)).Существует().ИмеетТип("Структура").Заполнено();
КонецПроцедуры

#КонецОбласти

#Область ТестыМетода_СтруктураИдентификацииОбъектаВШине

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Валюты() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Валюты");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Currency");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Integration");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.Валюты");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Производителя() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Производители");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Brand");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Prag");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.Производители");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Контрагента() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Контрагенты");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Counteragent");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.Контрагенты");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Партнера() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Партнеры");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Counteragent");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.Партнеры");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_КонтактногоЛица() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.КонтактныеЛицаПартнеров");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("CounteragentContactInfo");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.КонтактныеЛицаПартнеров");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Организации() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Организации");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();
	
	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Counteragent");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.Организации");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Договора() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.ДоговорыКонтрагентов");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Contract");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.ДоговорыКонтрагентов");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_БизнесРегиона() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.БизнесРегионы");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Agent");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Integration");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.БизнесРегионы");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Склада() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Склады");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Warehouse");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Prag");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.Склады");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СкладскогоПомещения() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.СкладскиеПомещения");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Warehouse");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Prag");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.СкладскиеПомещения");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ТипаДоговора() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Перечисление.ТипыДоговоров");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("ContractType");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Перечисление.ТипыДоговоров");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/dict/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СтатусаОбъектаВШине() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.a3nСтатусыОбъектовВШине");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("StateMachine");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.a3nСтатусыОбъектовВШине");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/dict/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СпособаДоставки() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.a3nСпособыДоставки");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("TransportCompany");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Delivery");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.a3nСпособыДоставки");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаДокумента1С() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Перечисление.a3nВидыДокументов1С");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("ShipmentType");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Перечисление.a3nВидыДокументов1С");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/dict/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаЦен() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.ВидыЦен");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("PriceGroup");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Prag");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.ВидыЦен");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/dict/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СпособаОбеспечения() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.СпособыОбеспеченияПотребностей");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Pricelist");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Prag");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.СпособыОбеспеченияПотребностей");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаБалансовойОперацииВШине() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.a3nВидыБалансовыхОпераций");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("BalanceOperationType");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.a3nВидыБалансовыхОпераций");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/dict/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ФормыОплаты() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Перечисление.ФормыОплаты");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("PaymentType");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Перечисление.ФормыОплаты");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/dict/AUTO3N/");
КонецПроцедуры


Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ЗаказаКлиента() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.ЗаказКлиента");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Order");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Документ.ЗаказКлиента");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Реализации() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.РеализацияТоваровУслуг");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Shipment");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Документ.РеализацияТоваровУслуг");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВозвратаОтКлиента() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.ВозвратТоваровОтКлиента");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Shipment");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Документ.РеализацияТоваровУслуг");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ЭквайринговойОперации() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.ОперацияПоПлатежнойКарте");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Payment");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Документ.ОперацияПоПлатежнойКарте");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ПКО() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.ПриходныйКассовыйОрдер");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Payment");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Документ.ОперацияПоПлатежнойКарте");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ПоступленияБезналичныхДС() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.ПоступлениеБезналичныхДенежныхСредств");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Payment");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Документ.ОперацияПоПлатежнойКарте");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

#КонецОбласти

#Область ТестыМетода_СформироватьСтруктуруОбъектаAutoXPL

Процедура ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ДоговорыКонтрагентов() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.ДоговорыКонтрагентов"));
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "СформироватьСтруктуруОбъектаAutoXPL", Параметры);	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_Контрагенты() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.Контрагенты"));
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "СформироватьСтруктуруОбъектаAutoXPL", Параметры);	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_Партнеры() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.Партнеры"));
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "СформироватьСтруктуруОбъектаAutoXPL", Параметры);	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_Организации() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.Организации"));
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "СформироватьСтруктуруОбъектаAutoXPL", Параметры);	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_КонтактныеЛицаПартнеров() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.КонтактныеЛицаПартнеров"));
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "СформироватьСтруктуруОбъектаAutoXPL", Параметры);	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ЗаказКлиента() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Документ.ЗаказКлиента"));
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "СформироватьСтруктуруОбъектаAutoXPL", Параметры);	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ПриходныйКассовыйОрдер() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Документ.ПриходныйКассовыйОрдер"));
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "СформироватьСтруктуруОбъектаAutoXPL", Параметры);	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ПоступлениеБезналичныхДС() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Документ.ПоступлениеБезналичныхДенежныхСредств"));
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "СформироватьСтруктуруОбъектаAutoXPL", Параметры);	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ОперацияПоПлатежнойКарте() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Документ.ОперацияПоПлатежнойКарте"));
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "СформироватьСтруктуруОбъектаAutoXPL", Параметры);	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_РеализацияТоваровУслуг() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Документ.РеализацияТоваровУслуг"));
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "СформироватьСтруктуруОбъектаAutoXPL", Параметры);	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СформироватьСтруктуруОбъектаAutoXPL_ВыполняетсяДляСсылки_ВозвратТоваровОтКлиента() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Документ.ВозвратТоваровОтКлиента"));
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "СформироватьСтруктуруОбъектаAutoXPL", Параметры);	
КонецПроцедуры

#КонецОбласти

#Область ТестыМетода_ОпределитьСтатусОбъектаВ1С

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Валюты() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.Валюты"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Производителя() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.Производители"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Контрагента() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.Контрагенты"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Партнера() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.Партнеры"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_КонтактногоЛица() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.КонтактныеЛицаПартнеров"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Организации() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.Организации"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Договора() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.ДоговорыКонтрагентов"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_БизнесРегиона() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.БизнесРегионы"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Склада() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.Склады"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_СкладскогоПомещения() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.СкладскиеПомещения"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ТипаДоговора() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Перечисление.ТипыДоговоров"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_СтатусаОбъектаВШине() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.a3nСтатусыОбъектовВШине"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_СпособаДоставки() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.a3nСпособыДоставки"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ВидаДокумента1С() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Перечисление.a3nВидыДокументов1С"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ВидаЦен() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.ВидыЦен"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_СпособаОбеспечения() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.СпособыОбеспеченияПотребностей"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ВидаБалансовойОперацииВШине() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Справочник.a3nВидыБалансовыхОпераций"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ФормыОплаты() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Перечисление.ФормыОплаты"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры


Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ЗаказаКлиента() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Документ.ЗаказКлиента"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_Реализации() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Документ.РеализацияТоваровУслуг"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ВозвратаОтКлиента() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Документ.ВозвратТоваровОтКлиента"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ЭквайринговойОперации() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Документ.ОперацияПоПлатежнойКарте"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ПКО() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Документ.ПриходныйКассовыйОрдер"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОпределитьСтатусОбъектаВ1С_ВыполняетсяДля_ПоступленияБезналичныхДС() Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(ПолучитьСлучайныйЭлемент("Документ.ПоступлениеБезналичныхДенежныхСредств"));	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ОпределитьСтатусОбъектаВ1С", Параметры);
КонецПроцедуры

#КонецОбласти

//				НайтиНоменклатуруВ1С
//				НайтиНоменклатуруПоставщикаВ1С
//				НайтиПартнераКонтрагентаВ1С
//				НайтиКонтрагентаПоПрайсЛисту
//				НайтиСоглашениеДоговорВ1С
//				НайтиСпособОбеспеченияПотребностейВ1С

//				НайтиЗаказКлиентаВ1С
//				НайтиНовоеСобытиеОтказСтрокиЗаказаВ1С
//				НайтиЗаказПоставщикуВ1С
//				НайтиОперациюПоПлатежнойКартеВ1С

Процедура ТестДолжен_ПроверитьМетод_НайтиПроизводителя1С_ВыполняетсяДляНового() Экспорт	
	
	УникальноеНаименование = Строка(Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss"));
	КонтекстЯдра.СохранитьКонтекст(УникальноеНаименование);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Наименование", УникальноеНаименование);
	МассивПараметровМетода = Новый Массив;
	МассивПараметровМетода.Добавить(Параметры);
	МассивПараметровМетода.Добавить(Истина);
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "НайтиПроизводителя1С", МассивПараметровМетода);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_НайтиПроизводителя1С_ВыполняетсяДляСуществующего() Экспорт
	
	Контекст = КонтекстЯдра.ПолучитьКонтекст();
	
	Параметры = Новый Структура;
	Параметры.Вставить("Наименование", Контекст);
	МассивПараметровМетода = Новый Массив;
	МассивПараметровМетода.Добавить(Параметры);	
	МассивПараметровМетода.Добавить(Истина);
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "НайтиПроизводителя1С", МассивПараметровМетода);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_НайтиНоменклатуруВ1С_ВыполняетсяДляНового() Экспорт
	
	Контекст = КонтекстЯдра.ПолучитьКонтекст();
	
	Параметры = Новый Структура;
	Параметры.Вставить("Наименование", Контекст);
	Параметры.Вставить("Артикул", Контекст);
	Параметры.Вставить("Бренд", Контекст);
	МассивПараметровМетода = Новый Массив;
	МассивПараметровМетода.Добавить(Параметры);
	МассивПараметровМетода.Добавить(Истина);
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "НайтиНоменклатуруВ1С", МассивПараметровМетода);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_НайтиНоменклатуруВ1С_ВыполняетсяДляСуществующего() Экспорт	
	
	Контекст = КонтекстЯдра.ПолучитьКонтекст();
	
	Параметры = Новый Структура;
	Параметры.Вставить("Наименование", Контекст);
	Параметры.Вставить("Артикул", Контекст);
	Параметры.Вставить("Бренд", Контекст);
	МассивПараметровМетода = Новый Массив;
	МассивПараметровМетода.Добавить(Параметры);	
	МассивПараметровМетода.Добавить(Истина);
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "НайтиНоменклатуруВ1С", МассивПараметровМетода);
КонецПроцедуры


Процедура ТестДолжен_ПроверитьМетод_ЗаменитьРусскиеБуквыВАртикуле_СменаРаскладки() Экспорт
	ТестоваяСтрока = "ЁЙЦУКЕНГШЩЗХЪ";
	a3nОбщегоНазначенияСервер.ЗаменитьРусскиеБуквыВАртикуле(ТестоваяСтрока);
	Ожидаем.Что(ТестоваяСтрока).Равно("~QWERTYUIOP{}");
	
	ТестоваяСтрока = "ФЫВАПРОЛДЖЭ";
	a3nОбщегоНазначенияСервер.ЗаменитьРусскиеБуквыВАртикуле(ТестоваяСтрока);
	Ожидаем.Что(ТестоваяСтрока).Равно("ASDFGHJKL:""");
	
	ТестоваяСтрока = "ЯЧСМИТЬБЮ";
	a3nОбщегоНазначенияСервер.ЗаменитьРусскиеБуквыВАртикуле(ТестоваяСтрока);
	Ожидаем.Что(ТестоваяСтрока).Равно("ZXCVBNM<>");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ЗаменитьРусскиеБуквыВАртикуле_Опечатки() Экспорт
	ТестоваяСтрока = "КЕНХВАРОСМТ";
	a3nОбщегоНазначенияСервер.ЗаменитьРусскиеБуквыВАртикуле(ТестоваяСтрока, "Опечатка");
	Ожидаем.Что(ТестоваяСтрока).Равно("KEHXBAPOCMT");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОчиститьАртикул() Экспорт
	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("ё1234567890-=")).Равно("1234567890");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("йцукенгшщзхъ")).Равно("QWERTYUIOP");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("фывапролджэ\")).Равно("ASDFGHJKL");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("\ячсмитьбю.")).Равно("ZXCVBNM");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("/*-+")).Равно("");
	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("Ё!""№;%:?*()_+")).Равно("%");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("ЙЦУКЕНГШЩЗХЪ")).Равно("QWERTYUIOP");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("ФЫВАПРОЛДЖЭ/")).Равно("ASDFGHJKL");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("/ЯЧСМИТЬБЮ,")).Равно("ZXCVBNM");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("/*-+")).Равно("");
	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("`1234567890-=")).Равно("1234567890");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("qwertyuiop[]")).Равно("QWERTYUIOP[]");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("asdfghjkl;'\")).Равно("ASDFGHJKL");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("\zxcvbnm,./")).Равно("ZXCVBNM");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("/*-+")).Равно("");
	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("~!@#$%^&*()_+")).Равно("%");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("QWERTYUIOP{}")).Равно("QWERTYUIOP");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("ASDFGHJKL:""|")).Равно("ASDFGHJKL");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("|ZXCVBNM<>?")).Равно("ZXCVBNM");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("/*-+")).Равно("");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ПолучитьБухгалтерскийОперационныйБалансСПокупателем_ВозвращаетСтруктуру() Экспорт
	
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.ДоговорыКонтрагентов");
	Результат = a3nОбщегоНазначенияСервер.ПолучитьБухгалтерскийОперационныйБалансСПокупателем(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();
	
	Ожидаем.Что(Результат.ОперационныйБаланс).Существует().ИмеетТип("Число");
	Ожидаем.Что(Результат.БухгалтерскийБаланс).Существует().ИмеетТип("Число");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ПолучитьСписокИзмененныхОбъектовИзNotificationService_Выполняется() Экспорт
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ПолучитьСписокИзмененныхОбъектовИзNotificationService");
КонецПроцедуры	

Процедура ТестДолжен_ПроверитьМетод_ПолучитьПоставщиковПоГрафикуЗаказовДляВыгрузки_Выполняется() Экспорт
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ПолучитьПоставщиковПоГрафикуЗаказовДляВыгрузки");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ПересчитатьБлижайшиеДатыСозданияЗаказов_Выполняется() Экспорт
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ПересчитатьБлижайшиеДатыСозданияЗаказов");
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедуры
	
Функция ПолучитьСлучайныйЭлемент(ОбъектМетаданных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	Таблица.Ссылка
	|ИЗ
	|	" + ОбъектМетаданных + " КАК Таблица";
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выгрузить();
	
	Если Выборка.Количество() > 0 Тогда
		СлучайныйИндекс = ПолучитьСлучайноеЧисло(0, Выборка.Количество()-1);			
		Возврат Выборка.Получить(СлучайныйИндекс).Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСлучайноеЧисло(НижняяГраница = 0, ВерхняяГраница = 4294967295)	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	СлучайныйИндекс = ГСЧ.СлучайноеЧисло(НижняяГраница, ?(ВерхняяГраница > 4294967295, 4294967295, ВерхняяГраница));	
	Возврат СлучайныйИндекс;	
КонецФункции

#КонецОбласти


