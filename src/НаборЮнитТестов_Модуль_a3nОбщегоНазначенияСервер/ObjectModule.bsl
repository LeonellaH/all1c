Перем КонтекстЯдра;
Перем Утверждения;
Перем Ожидаем;

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
КонецПроцедуры

Функция ПолучитьСписокТестов() Экспорт
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_Выполняется");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПартнера");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетОрганизацию");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетВалюту_Рубль");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетВидЦен_РозничнаяЦена");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_Возвращаетa3nСпособыДоставки_ПочтаРоссии");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетБизнесРегион_МоскваКДС");                      
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПроизводителя_TOYOTA");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетСпособОбеспечения_СобственныеОстаткиМытищи");	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПеречислениеТипыДоговоров_СПокупателем");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетЗаказКлиента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетЭквайринговуюОперацию");
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляСправочника");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляДокумента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляПеречисления");
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ЗаменитьРусскиеБуквыВАртикуле_СменаРаскладки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ЗаменитьРусскиеБуквыВАртикуле_Опечатки");
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_ОчиститьАртикул");
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Валюты");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Производителя");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Контрагента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Партнера");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_КонтактногоЛица");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Организации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Договора");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_БизнесРегиона");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Склада");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СкладскогоПомещения");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ТипаДоговора");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СтатусаОбъектаВШине");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СпособаДоставки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаДокумента1С");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаЦен");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СпособаОбеспечения");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаБалансовойОперацииВШине");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ЗаказаКлиента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Реализации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВозвратаОтКлиента");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ЭквайринговойОперации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ПКО");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ПоступленияБезналичныхДС");


	         
	Возврат ВсеТесты;
КонецФункции

#Область ТестыМетодовМодуля_a3nОбщегоНазначенияСервер

#Область ТестыМетода_ПолучитьСсылку1СПоTypeId
	
// Передаем данные партнера Центр Закупки ООО
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_Выполняется() Экспорт	
	Параметры = Новый Массив;
	Параметры.Добавить("Counteragent");
	Параметры.Добавить(56);	
	Утверждения.ПроверитьМетодВыполнился(a3nОбщегоНазначенияСервер, "ПолучитьСсылку1СПоTypeId", Параметры);
КонецПроцедуры

// Передаем данные партнера Центр Закупки ООО
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПартнера() Экспорт
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Counteragent", 56)).Существует().ИмеетТип("СправочникСсылка.Партнеры").Заполнено();
КонецПроцедуры

// Передаем данные организации
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетОрганизацию() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Counteragent", 56, "Справочник.Организации")).Существует().ИмеетТип("СправочникСсылка.Организации").Заполнено();
КонецПроцедуры

// Передаем данные валюты значение Рубль
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетВалюту_Рубль() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Currency", 643, "Справочник.Валюты")).Существует().ИмеетТип("СправочникСсылка.Валюты").Заполнено();
КонецПроцедуры

// Передаем данные вида цен значение Розничная цена
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетВидЦен_РозничнаяЦена() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("PriceGroup", 1020)).Существует().ИмеетТип("СправочникСсылка.ВидыЦен").Заполнено();
КонецПроцедуры

// Передаем данные справочника a3nСпособыДоставки значение Почта России
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_Возвращаетa3nСпособыДоставки_ПочтаРоссии() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("TransportCompany", 1)).Существует().ИмеетТип("СправочникСсылка.a3nСпособыДоставки").Заполнено();
КонецПроцедуры

// Передаем данные справочника БизнесРегионы значение Москва 1_Мытищи КДС
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетБизнесРегион_МоскваКДС() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Agent", 1102)).Существует().ИмеетТип("СправочникСсылка.БизнесРегионы").Заполнено();
КонецПроцедуры

// Передаем данные справочника Производители значение TOYOTA
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПроизводителя_TOYOTA() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Brand", 4096)).Существует().ИмеетТип("СправочникСсылка.Производители").Заполнено();
КонецПроцедуры

// Передаем данные справочника СпособыОбеспеченияПотребностей значение Собственные остатки 50001 СП Мытищи
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетСпособОбеспечения_СобственныеОстаткиМытищи() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Pricelist", 7997)).Существует().ИмеетТип("СправочникСсылка.СпособыОбеспеченияПотребностей").Заполнено();
КонецПроцедуры

// Передаем данные перечисления ТипыДоговоров значение СПокупателем
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетПеречислениеТипыДоговоров_СПокупателем() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("ContractType", 6)).Существует().ИмеетТип("ПеречислениеСсылка.ТипыДоговоров").Заполнено();
КонецПроцедуры

// Передаем данные документа ЗаказКлиента ЦЗ01-000001 от 02.01.2016 12:41:57
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетЗаказКлиента() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Order", 4811)).Существует().ИмеетТип("ДокументСсылка.ЗаказКлиента").Заполнено();
КонецПроцедуры

// Передаем данные документа ЭквайринговаяОперация 3N01-000191 от 16.06.2016 18:51:23
Процедура ТестДолжен_ПроверитьМетод_ПолучитьСсылку1СПоTypeId_ВозвращаетЭквайринговуюОперацию() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьСсылку1СПоTypeId("Payment", 15164)).Существует().ИмеетТип("ДокументСсылка.ОперацияПоПлатежнойКарте").Заполнено();
КонецПроцедуры

#КонецОбласти

#Область ТестыМетода_ПолучитьTypeIdПоСсылке1С

// Передаем ссылку на случайный элемент справочника Партнеры
Процедура ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляСправочника() Экспорт	
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Партнеры");
	Если Ссылка1С <> Неопределено Тогда
		Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьTypeIdПоСсылке1С(Ссылка1С)).Существует().ИмеетТип("Структура").Заполнено();
	КонецЕсли;
КонецПроцедуры

// Передаем ссылку на случайный документ ЗаказКлиента
Процедура ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляДокумента() Экспорт	
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.ЗаказКлиента");
	Если Ссылка1С <> Неопределено Тогда
		Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьTypeIdПоСсылке1С(Ссылка1С)).Существует().ИмеетТип("Структура").Заполнено();
	КонецЕсли;
КонецПроцедуры 

// Передаем ссылку на значение перечисления ТипыДоговоров.СПокупателем
Процедура ТестДолжен_ПроверитьМетод_ПолучитьTypeIdПоСсылке1С_ВозвращаетСтруктуруДляПеречисления() Экспорт	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ПолучитьTypeIdПоСсылке1С(Перечисления.ТипыДоговоров.СПокупателем)).Существует().ИмеетТип("Структура").Заполнено();
КонецПроцедуры

#КонецОбласти

Процедура ТестДолжен_ПроверитьМетод_ЗаменитьРусскиеБуквыВАртикуле_СменаРаскладки() Экспорт
	ТестоваяСтрока = "ЁЙЦУКЕНГШЩЗХЪ";
	a3nОбщегоНазначенияСервер.ЗаменитьРусскиеБуквыВАртикуле(ТестоваяСтрока);
	Ожидаем.Что(ТестоваяСтрока).Равно("~QWERTYUIOP{}");
	
	ТестоваяСтрока = "ФЫВАПРОЛДЖЭ";
	a3nОбщегоНазначенияСервер.ЗаменитьРусскиеБуквыВАртикуле(ТестоваяСтрока);
	Ожидаем.Что(ТестоваяСтрока).Равно("ASDFGHJKL:""");
	
	ТестоваяСтрока = "ЯЧСМИТЬБЮ";
	a3nОбщегоНазначенияСервер.ЗаменитьРусскиеБуквыВАртикуле(ТестоваяСтрока);
	Ожидаем.Что(ТестоваяСтрока).Равно("ZXCVBNM<>");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ЗаменитьРусскиеБуквыВАртикуле_Опечатки() Экспорт
	ТестоваяСтрока = "КЕНХВАРОСМТ";
	a3nОбщегоНазначенияСервер.ЗаменитьРусскиеБуквыВАртикуле(ТестоваяСтрока, "Опечатка");
	Ожидаем.Что(ТестоваяСтрока).Равно("KEHXBAPOCMT");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_ОчиститьАртикул() Экспорт
	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("ё1234567890-=")).Равно("1234567890");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("йцукенгшщзхъ")).Равно("QWERTYUIOP");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("фывапролджэ\")).Равно("ASDFGHJKL");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("\ячсмитьбю.")).Равно("ZXCVBNM");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("/*-+")).Равно("");
	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("Ё!""№;%:?*()_+")).Равно("%");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("ЙЦУКЕНГШЩЗХЪ")).Равно("QWERTYUIOP");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("ФЫВАПРОЛДЖЭ/")).Равно("ASDFGHJKL");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("/ЯЧСМИТЬБЮ,")).Равно("ZXCVBNM");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("/*-+")).Равно("");
	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("`1234567890-=")).Равно("1234567890");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("qwertyuiop[]")).Равно("QWERTYUIOP[]");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("asdfghjkl;'\")).Равно("ASDFGHJKL");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("\zxcvbnm,./")).Равно("ZXCVBNM");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("/*-+")).Равно("");
	
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("~!@#$%^&*()_+")).Равно("%");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("QWERTYUIOP{}")).Равно("QWERTYUIOP");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("ASDFGHJKL:""|")).Равно("ASDFGHJKL");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("|ZXCVBNM<>?")).Равно("ZXCVBNM");
	Ожидаем.Что(a3nОбщегоНазначенияСервер.ОчиститьАртикул("/*-+")).Равно("");

КонецПроцедуры

#Область ТестыМетода_СтруктураИдентификацииОбъектаВШине

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Валюты() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Валюты");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Currency");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Integration");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.Валюты");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Производителя() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Производители");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Brand");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Prag");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.Производители");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Контрагента() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Контрагенты");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Counteragent");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.Контрагенты");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Партнера() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Партнеры");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Counteragent");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.Партнеры");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_КонтактногоЛица() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.КонтактныеЛицаПартнеров");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("CounteragentContactInfo");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.КонтактныеЛицаПартнеров");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Организации() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Организации");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();
	
	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Counteragent");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.Организации");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Договора() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.ДоговорыКонтрагентов");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Contract");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.ДоговорыКонтрагентов");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_БизнесРегиона() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.БизнесРегионы");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Agent");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Integration");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.БизнесРегионы");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Склада() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.Склады");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Warehouse");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Prag");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.Склады");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СкладскогоПомещения() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.СкладскиеПомещения");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Warehouse");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Prag");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.СкладскиеПомещения");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ТипаДоговора() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Перечисление.ТипыДоговоров");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("ContractType");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Перечисление.ТипыДоговоров");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/dict/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СтатусаОбъектаВШине() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.a3nСтатусыОбъектовВШине");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("StateMachine");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.a3nСтатусыОбъектовВШине");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/dict/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СпособаДоставки() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.a3nСпособыДоставки");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("TransportCompany");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Delivery");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.a3nСпособыДоставки");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаДокумента1С() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Перечисление.a3nВидыДокументов1С");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("ShipmentType");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Перечисление.a3nВидыДокументов1С");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/dict/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаЦен() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.ВидыЦен");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("PriceGroup");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Prag");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.ВидыЦен");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/dict/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_СпособаОбеспечения() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.СпособыОбеспеченияПотребностей");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Pricelist");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("Prag");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.СпособыОбеспеченияПотребностей");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВидаБалансовойОперацииВШине() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Справочник.a3nВидыБалансовыхОпераций");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("BalanceOperationType");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Справочник.a3nВидыБалансовыхОпераций");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/dict/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ФормыОплаты() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Перечисление.ФормыОплаты");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("PaymentType");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Перечисление.ФормыОплаты");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/dict/AUTO3N/");
КонецПроцедуры


Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ЗаказаКлиента() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.ЗаказКлиента");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Order");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Документ.ЗаказКлиента");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_Реализации() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.РеализацияТоваровУслуг");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Shipment");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Документ.РеализацияТоваровУслуг");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ВозвратаОтКлиента() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.ВозвратТоваровОтКлиента");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Shipment");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Документ.РеализацияТоваровУслуг");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ЭквайринговойОперации() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.ОперацияПоПлатежнойКарте");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Payment");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Документ.ОперацияПоПлатежнойКарте");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ПКО() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.ПриходныйКассовыйОрдер");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Payment");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Документ.ОперацияПоПлатежнойКарте");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМетод_СтруктураИдентификацииОбъектаВШине_ВозвращаетВернуюСтруктуруДля_ПоступленияБезналичныхДС() Экспорт
	Ссылка1С = ПолучитьСлучайныйЭлемент("Документ.ПоступлениеБезналичныхДенежныхСредств");
	Результат = a3nОбщегоНазначенияСервер.СтруктураИдентификацииОбъектаВШине(Ссылка1С);
	
	Ожидаем.Что(Результат).Существует().ИмеетТип("Структура").Заполнено();

	Ожидаем.Что(Результат.ИмяОбъектаВШине).Существует().ИмеетТип("Строка").Равно("Payment");
	Ожидаем.Что(Результат.ИмяСервиса).Существует().ИмеетТип("Строка").Равно("OrderService");
	Ожидаем.Что(Результат.Тип1С).Существует().ИмеетТип("Строка").Равно("Документ.ОперацияПоПлатежнойКарте");
	Ожидаем.Что(Результат.ТочкаВхода).Существует().ИмеетТип("Строка").Равно("/v2/entity/AUTO3N/");
КонецПроцедуры

#КонецОбласти



#КонецОбласти

#Область СлужебныеПроцедуры
	
Функция ПолучитьСлучайныйЭлемент(ОбъектМетаданных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	Таблица.Ссылка
	|ИЗ
	|	" + ОбъектМетаданных + " КАК Таблица";
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выгрузить();
	
	Если Выборка.Количество() > 0 Тогда
		СлучайныйИндекс = ПолучитьСлучайноеЧисло(0, Выборка.Количество()-1);			
		Возврат Выборка.Получить(СлучайныйИндекс).Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСлучайноеЧисло(НижняяГраница = 0, ВерхняяГраница = 4294967295)	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	СлучайныйИндекс = ГСЧ.СлучайноеЧисло(НижняяГраница, ?(ВерхняяГраница > 4294967295, 4294967295, ВерхняяГраница));	
	Возврат СлучайныйИндекс;	
КонецФункции

#КонецОбласти



