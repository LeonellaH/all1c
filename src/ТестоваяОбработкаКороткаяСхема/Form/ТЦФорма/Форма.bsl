///////////////////////////////////////////////////////////////////////////////
// В Н И М А Н И Е!
// ПЕРЕМЕННЫЕ, ПРОЦЕДУРЫ И ФУНКЦИИ, НАЧИНАЮЩИЕСЯ С "ТЦ", НЕЛЬЗЯ УДАЛЯТЬ, Т.К.
// ОНИ НЕОБХОДИМЫ ДЛЯ ПРАВИЛЬНОЙ РАБОТЫ ТЕСТ-ЦЕНТРА
//

&НаКлиенте
Перем ТЦКонтекстВыполнения; // Служебная переменная Тест-центра
&НаКлиенте
Перем ТЦИмяОбработчика;     // Служебная переменная Тест-центра

&НаКлиенте
Перем МассивШаблоновЗаказов;
&НаКлиенте
Перем МассивТоваровДляЗаказов;
&НаСервере
Перем ГСЧ;

///////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС РАЗРАБОТЧИКА СЦЕНАРИЯ

&НаКлиенте
// Единовременная подготовка данных перед выполнением действия.
// Эта подготовка выполняется только при необходимости и не является
// обязательной.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.
//   Успешно - если при инициализации ошибок не возникло
//   Предупреждение - если возникшие ошибки позволяют продолжить выполнение
//   Ошибка - если возникли ошибки, которые не позволяют продолжить выполнение
//
Функция ТЦИнициализировать() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		// Код обычного приложения
	#Иначе
		// Код управляемого приложения
		ИнициализироватьНаСервере(МассивШаблоновЗаказов, МассивТоваровДляЗаказов);
	#КонецЕсли
	
	Возврат ТЦРезультатВыполненияУспешно();
	
КонецФункции // ТЦИнициализировать()

&НаКлиенте
// Выполнение действия.
// В этой функции содержится основной код действия, необходимый для выполнения
// сценария.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.
//   Успешно - если при инициализации ошибок не возникло
//   Предупреждение - если возникшие ошибки позволяют продолжить выполнение
//   Ошибка - если возникли ошибки, которые не позволяют продолжить выполнение
//
Функция ТЦВыполнить() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		// Код обычного приложения
	#Иначе		
		Попытка
			ВыполнитьНаСервере(МассивШаблоновЗаказов, МассивТоваровДляЗаказов);			
		
			ТЦЗавершитьВыполнение(ТЦРезультатВыполненияУспешно());
		Исключение
			ТЦОбщий.ЗаписатьВЖурнал("Ошибка проведения документа "+ ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
	
	Возврат ТЦРезультатВыполненияУспешно();
	
КонецФункции // ТЦВыполнить()

&НаКлиенте
// Единовременное удаление созданных при инициализации данных, после выполнения
// действия. Это удаление выполняется только при необходимости и не является
// обязательным.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.
//   Успешно - если при инициализации ошибок не возникло
//   Предупреждение - если возникшие ошибки позволяют продолжить выполнение
//   Ошибка - если возникли ошибки, которые не позволяют продолжить выполнение
//
Функция ТЦУдалитьДанные() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		// Код обычного приложения
	#Иначе
		// Код управляемого приложения
	#КонецЕсли
	
	Возврат ТЦРезультатВыполненияУспешно();
	
КонецФункции // ТЦУдалитьДанные()



&НаСервере
Процедура ИнициализироватьНаСервере(МассивШаблоновЗаказов, МассивТоваровДляЗаказов)
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Если Не ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь.a3nБизнесРегион) Тогда
		ТекТЦПользователь = Справочники.ТЦПользователи.НайтиПоНаименованию(ПараметрыСеанса.ТекущийПользователь.Наименование);
		      
		ОригинальныйТЦПользователь = ТЦСервер.НайтиОригиналПоКлону(ТекТЦПользователь);
		Если ЗначениеЗаполнено(ОригинальныйТЦПользователь) Тогда
			ПользовательИБ = ТЦСервер.ТЦПользовательВПользовательИБ(ОригинальныйТЦПользователь);
			Если ПользовательИБ <> Неопределено Тогда 
				ОригинальныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
				ТекПользовательОбъект = ПараметрыСеанса.ТекущийПользователь.ПолучитьОбъект();
				ТекПользовательОбъект.a3nБизнесРегион = ОригинальныйПользователь.a3nБизнесРегион;
				ТекПользовательОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//ПараметрыЗаполнения = Новый Структура;
	//ПараметрыЗаполнения.Вставить("МассивШаблоновЗаказов", МассивШаблоновЗаказов);
	//ПараметрыЗаполнения.Вставить("МассивТоваровДляЗаказов", МассивТоваровДляЗаказов);
	//ПараметрыЗаполнения.Вставить("КоличествоЗаказов", ТЦОбъект.КоличествоЗаказов);
	//ПараметрыЗаполнения.Вставить("КоличествоТоваровВЗаказе", ТЦОбъект.КоличествоТоваровВЗаказе);
	//ПараметрыЗаполнения.Вставить("ГСЧ", ГСЧ);
		
	ПодготовитьШаблоныЗаказов(МассивШаблоновЗаказов);
	ПодготовитьТоварыЗаказов(МассивТоваровДляЗаказов);
КонецПроцедуры

&НаСервере
Процедура ПодготовитьШаблоныЗаказов(МассивШаблоновЗаказов)
	
	МассивШаблоновЗаказов = Новый Массив;
	
	КоличествоЗаказов = ТЦОбъект.КоличествоЗаказов;
	
	СкладПользователя = a3nОбщегоНазначенияПовтИсп.ПолучитьСкладТекущегоПользователя();
				
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + КоличествоЗаказов*2 + "
		|	ЗаказКлиента.Партнер,
		|	ЗаказКлиента.Контрагент,
		|	ЗаказКлиента.Организация,
		|	ЗаказКлиента.Соглашение,
		|	ЗаказКлиента.Сделка,
		|	ЗаказКлиента.Валюта,
		|	ЗаказКлиента.ГрафикОплаты,
		|	ЗаказКлиента.Склад,
		|	ЗаказКлиента.ЦенаВключаетНДС,
		|	ЗаказКлиента.ДополнительнаяИнформация,
		|	ЗаказКлиента.НеОтгружатьЧастями,
		|	ЗаказКлиента.ФормаОплаты,
		|	ЗаказКлиента.БанковскийСчет,
		|	ЗаказКлиента.БанковскийСчетКонтрагента,
		|	ЗаказКлиента.Касса,
		|	ЗаказКлиента.АдресДоставки,
		|	ЗаказКлиента.НалогообложениеНДС,
		|	ЗаказКлиента.ХозяйственнаяОперация,
		|	ЗаказКлиента.Грузоотправитель,
		|	ЗаказКлиента.Грузополучатель,
		|	ЗаказКлиента.БанковскийСчетГрузоотправителя,
		|	ЗаказКлиента.БанковскийСчетГрузополучателя,
		|	ЗаказКлиента.ГруппаФинансовогоУчета,
		|	ЗаказКлиента.КартаЛояльности,
		|	ЗаказКлиента.Договор,
		|	ЗаказКлиента.Подразделение,
		|	ЗаказКлиента.ПорядокРасчетов,
		|	ЗаказКлиента.СпособДоставки,
		|	ЗаказКлиента.ПеревозчикПартнер,
		|	ЗаказКлиента.ЗонаДоставки,
		|	ЗаказКлиента.ВремяДоставкиС,
		|	ЗаказКлиента.ВремяДоставкиПо,
		|	ЗаказКлиента.АдресДоставкиПеревозчика,
		|	ЗаказКлиента.АдресДоставкиЗначенияПолей,
		|	ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей,
		|	ЗаказКлиента.ДополнительнаяИнформацияПоДоставке,
		|	ЗаказКлиента.КонтактноеЛицо,
		|	ЗаказКлиента.Руководитель,
		|	ЗаказКлиента.ГлавныйБухгалтер,
		|	ЗаказКлиента.ВернутьМногооборотнуюТару,
		|	ЗаказКлиента.СрокВозвратаМногооборотнойТары,
		|	ЗаказКлиента.СостояниеЗаполненияМногооборотнойТары,
		|	ЗаказКлиента.ТребуетсяЗалогЗаТару,
		|	ЗаказКлиента.Приоритет,
		|	ЗаказКлиента.ОсобыеУсловияПеревозки,
		|	ЗаказКлиента.ОсобыеУсловияПеревозкиОписание,
		|	ЗаказКлиента.НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Дата МЕЖДУ &ПериодНачало И &ПериодОкончание
		|	И ЗаказКлиента.Проведен = ИСТИНА
		|	И ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|	И ЗаказКлиента.Склад = &Склад";
	
	Запрос.УстановитьПараметр("ПериодНачало", НачалоГода(ДобавитьМесяц(ТекущаяДата(), -3)));
	Запрос.УстановитьПараметр("ПериодОкончание", КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1)));	
	Запрос.УстановитьПараметр("Склад", СкладПользователя);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
		
		Для Счетчик=1 По КоличествоЗаказов Цикл
			СлучайныйИндекс = ПолучитьСлучайноеЧисло(0, ТаблицаДокументов.Количество()-1);
			ДанныеСлучайногоДокумента = ТаблицаДокументов.Получить(СлучайныйИндекс);
			
			ШаблонЗаказа = Новый Структура;
			Для Каждого Колонка Из ТаблицаДокументов.Колонки Цикл
				ШаблонЗаказа.Вставить(Колонка.Имя, ДанныеСлучайногоДокумента[Колонка.Имя]);
			КонецЦикла;
			МассивШаблоновЗаказов.Добавить(ШаблонЗаказа);
		КонецЦикла;
		
	Иначе
		Сообщить("Не найден заказ клиента для заполнения шапки заказа");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТоварыЗаказов(МассивТоваровДляЗаказов)
	
	КоличествоТоваров = ТЦОбъект.КоличествоЗаказов * ТЦОбъект.КоличествоТоваровВЗаказе*2;
	
	МассивТоваровДляЗаказов = Новый Массив;
	
	СкладПользователя = a3nОбщегоНазначенияПовтИсп.ПолучитьСкладТекущегоПользователя();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ  
	|	Набор.Склад КАК Склад,
	|	Набор.Номенклатура КАК Номенклатура,
	|	Набор.Характеристика КАК Характеристика,
	|	СУММА(Набор.ВНаличии) КАК ВНаличии,
	|	СУММА(Набор.ВРезервеСоСклада) КАК ВРезервеСоСклада,
	|	СУММА(Набор.ВРезервеПодЗаказ) КАК ВРезервеПодЗаказ
	|ПОМЕСТИТЬ ВтСвободныеОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Склад КАК Склад,
	|		Т.Номенклатура КАК Номенклатура,
	|		Т.Характеристика КАК Характеристика,
	|		Т.ВНаличииОстаток КАК ВНаличии,
	|		Т.ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада,
	|		Т.ВРезервеПодЗаказОстаток КАК ВРезервеПодЗаказ
	|	ИЗ
	|		РегистрНакопления.СвободныеОстатки.Остатки(, Склад В (&Склад)) КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Склад,
	|		Т.Номенклатура,
	|		Т.Характеристика,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
	|	ГДЕ
	|		Т.Склад В(&Склад)) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Склад,
	|	Набор.Номенклатура,
	|	Набор.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + КоличествоТоваров + "
	|	ОстаткиСклада.Склад КАК Склад,
	|	ЕСТЬNULL(ОстаткиСклада.ВНаличии - ОстаткиСклада.ВРезервеСоСклада - ОстаткиСклада.ВРезервеПодЗаказ, 0) КАК Доступно,
	|	ОстаткиСклада.Номенклатура
	|ИЗ
	|	ВтСвободныеОстатки КАК ОстаткиСклада
	|ГДЕ
	|	ОстаткиСклада.Склад В(&Склад)
	|	И ЕСТЬNULL(ОстаткиСклада.ВНаличии - ОстаткиСклада.ВРезервеСоСклада - ОстаткиСклада.ВРезервеПодЗаказ, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиСклада.Склад.Наименование";
	
	Запрос.УстановитьПараметр("Склад", СкладПользователя);	
	ОстаткиТоваров = Запрос.Выполнить().Выгрузить();		
	
	Если ОстаткиТоваров.Количество() > 0 Тогда
		//Счетчик = 0;
		//КоличествоПопыток = 0;
		
		Для Счетчик=1 По КоличествоТоваров Цикл
			//Если КоличествоПопыток < 100 Тогда
				//КоличествоПопыток = КоличествоПопыток + 1;
				
				СлучайныйИндекс = ПолучитьСлучайноеЧисло(0, ОстаткиТоваров.Количество()-1);
				
				ВыбранныйТовар = ОстаткиТоваров.Получить(СлучайныйИндекс);
				
				//Если МассивТоваровДляЗаказов.Найти(ВыбранныйТовар.Номенклатура) = Неопределено Тогда
					
					СтруктураТовара = Новый Структура;
					
					Для Каждого Колонка Из ОстаткиТоваров.Колонки Цикл
						СтруктураТовара.Вставить(Колонка.Имя, ВыбранныйТовар[Колонка.Имя]);
					КонецЦикла;
					
					МассивТоваровДляЗаказов.Добавить(СтруктураТовара);
					//Счетчик = Счетчик + 1;
				//КонецЕсли;
			//Иначе
			//	Прервать;
			//КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Сообщить("Не найдено ни одного товара для заполнения заказа")
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСлучайноеЧисло(НижняяГраница = 0, ВерхняяГраница = 4294967295)
	
	СлучайныйИндекс = ГСЧ.СлучайноеЧисло(НижняяГраница, ?(ВерхняяГраница > 4294967295, 4294967295, ВерхняяГраница));
	
	Возврат СлучайныйИндекс;
	
КонецФункции



&НаСервере
Процедура ВыполнитьНаСервере(МассивШаблоновЗаказов, МассивТоваровДляЗаказов)
	
	//НачатьТранзакцию();
	
	МассивЗаказов = Новый Массив;
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	Для Счетчик=1 По ТЦОбъект.КоличествоЗаказов Цикл		
		НачатьТранзакцию();
		ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументЗаказКлиентаЗаполнение");	
		ЗаказКлиента = СоздатьЗаказКлиента(МассивШаблоновЗаказов, МассивТоваровДляЗаказов);				
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ДокументЗаказКлиентаЗаполнение", ВремяНачала);		
		
		КипВнешнийКомпонент.Пауза(Инструменты, ТЦОбъект.ПаузаПослеОперации*1000);
		
		ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументЗаказКлиентаПроведение");	
		Попытка
			ЗаказКлиента.Записать(РежимЗаписиДокумента.Проведение);
		исключение
			Сообщить("Ошибка: ЗаказКлиента, Начальное заполнение: " + ОписаниеОшибки());
		КонецПопытки;
		МассивЗаказов.Добавить(ЗаказКлиента.Ссылка);
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ДокументЗаказКлиентаПроведение", ВремяНачала);
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	КипВнешнийКомпонент.Пауза(Инструменты, ТЦОбъект.ПаузаПослеОперации*1000);
	
	Для Каждого ЗаказКлиента Из МассивЗаказов Цикл
		ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументОплатаЗаполнение");
		Оплата = СоздатьДокументОплаты(ЗаказКлиента);
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ДокументОплатаЗаполнение", ВремяНачала);
		
		КипВнешнийКомпонент.Пауза(Инструменты, ТЦОбъект.ПаузаПослеОперации*1000);
		
		ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументОплатаПроведение");	
		Оплата.Записать(РежимЗаписиДокумента.Проведение);	
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ДокументОплатаПроведение", ВремяНачала);
	КонецЦикла;
	
	КипВнешнийКомпонент.Пауза(Инструменты, ТЦОбъект.ПаузаПослеОперации*1000);
	
	Для Каждого ЗаказКлиента Из МассивЗаказов Цикл
		ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументЗаказКлиентаОтгрузка");
		ЗаказКлиентаОбъект = ЗаказКлиента.ПолучитьОбъект();
		
		МассивВариантовОбеспечения = Новый Массив();
		МассивВариантовОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
		МассивВариантовОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно"));
		МассивВариантовОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"));
		ЗаполнитьОбеспечениеЗаказа(ЗаказКлиентаОбъект, МассивВариантовОбеспечения);
		
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ДокументЗаказКлиентаОтгрузка", ВремяНачала);
		
		КипВнешнийКомпонент.Пауза(Инструменты, ТЦОбъект.ПаузаПослеОперации*1000);
		
		ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументЗаказКлиентаПроведение");	
		ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);	
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ДокументЗаказКлиентаПроведение", ВремяНачала);
	КонецЦикла;
	
	КипВнешнийКомпонент.Пауза(Инструменты, ТЦОбъект.ПаузаПослеОперации*1000);
	
	Для Каждого ЗаказКлиента Из МассивЗаказов Цикл
		ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументРеализацияЗаполнение");
		Реализация = СоздатьДокументРеализации(ЗаказКлиента);
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ДокументРеализацияЗаполнение", ВремяНачала);
		
		КипВнешнийКомпонент.Пауза(Инструменты, ТЦОбъект.ПаузаПослеОперации*1000);
		
		ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументРеализацияПроведение");	
		Реализация.Записать(РежимЗаписиДокумента.Проведение);	
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ДокументРеализацияПроведение", ВремяНачала);
	КонецЦикла;
	
	Для Каждого ЗаказКлиента Из МассивЗаказов Цикл
		ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументЗаказКлиентаЗакрытие");
		ЗаказКлиентаОбъект = ЗаказКлиента.ПолучитьОбъект();
		ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ДокументЗаказКлиентаЗакрытие", ВремяНачала);
		
		КипВнешнийКомпонент.Пауза(Инструменты, ТЦОбъект.ПаузаПослеОперации*1000);
		
		ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументЗаказКлиентаПроведение");	
		ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);	
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ДокументЗаказКлиентаПроведение", ВремяНачала);
	КонецЦикла;
	
	//ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗаказКлиента(МассивШаблоновЗаказов, МассивТоваровДляЗаказов)
		
	ЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
	 
	Попытка 
		
		ЗаполнитьШапкуЗаказа(ЗаказКлиента, МассивШаблоновЗаказов);
		
		ЗаполнитьТоварыЗаказа(ЗаказКлиента, МассивТоваровДляЗаказов);
		
		ЗаказКлиента.Дата = ТекущаяДата();
		ЗаказКлиента.Комментарий = "Тест-центр";
		ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		
		Если ЗначениеЗаполнено(ЗаказКлиента.Соглашение) Тогда
			//УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(ЗаказКлиента.Соглашение, Истина);
			//ЗаказКлиента.ЗаполнитьУсловияПродаж(УсловияПродаж);
			ЗаказКлиента.ЗаполнитьУсловияПродажПоCоглашению();
			
			Для Каждого СтрокаТовара Из ЗаказКлиента.Товары Цикл
				Если СтрокаТовара.Цена = 0 Тогда
					СтрокаТовара.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
					СтрокаТовара.Цена = 99.99;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
			СтруктураПараметров.БанковскийСчет = ЗаказКлиента.БанковскийСчет;  
			
			ЗаказКлиента.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
			ЗаказКлиента.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(ЗаказКлиента.Контрагент, , ЗаказКлиента.БанковскийСчетКонтрагента);
			
			Если Не ЗначениеЗаполнено(ЗаказКлиента.НалогообложениеНДС) Тогда
				ЗаказКлиента.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(ЗаказКлиента.Организация, ЗаказКлиента.Склад, ЗаказКлиента.Дата);
			КонецЕсли;
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиента);        
			СтруктураДействий = Новый Структура(
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки, ЗаполнитьСтавкуНДС",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь));
			
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ЗаказКлиента.Товары, СтруктураДействий, Неопределено);            
			
		КонецЕсли;
		
		ЗаполнитьОбеспечениеЗаказа(ЗаказКлиента, , Ложь);
			
		ЗаказКлиента.ЗаполнитьЭтапыГрафикаОплаты();
		
		Если ЗаказКлиента.ЭтапыГрафикаОплаты.Количество() = 1 Тогда
			ЗаказКлиента.ЭтапыГрафикаОплаты[0].ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
			ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		КонецЕсли;
					
		Возврат ЗаказКлиента;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьШапкуЗаказа(ЗаказКлиента, МассивШаблоновЗаказов)
	ДанныеШапкиЗаказа = МассивШаблоновЗаказов[0];
	
	ЗаполнитьЗначенияСвойств(ЗаказКлиента, ДанныеШапкиЗаказа);
	
	МассивШаблоновЗаказов.Удалить(0);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыЗаказа(ЗаказКлиента, МассивТоваровДляЗаказов)
		
	ТоваровКЗаказе = 0;
	КоличествоПопыток = 0;
	КоличествоПопытокМакс = 10;
	
	Пока ТоваровКЗаказе < ТЦОбъект.КоличествоТоваровВЗаказе Цикл
		
		Если КоличествоПопыток < КоличествоПопытокМакс Тогда
			
			КоличествоПопыток = КоличествоПопыток + 1;
			СтрокаТовара = МассивТоваровДляЗаказов[ТоваровКЗаказе];
			//Для Каждого СтрокаТовара Из МассивТоваровДляЗаказов Цикл
			
			Если ЕстьОстатокТовара(СтрокаТовара.Номенклатура, ЗаказКлиента.Склад) Тогда
				
				Если ЗаказКлиента.Товары.Найти(СтрокаТовара.Номенклатура) = Неопределено Тогда
					
					ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара(СтрокаТовара.Номенклатура);
					ПараметрыТовара.Вставить("Количество", 1);  
					ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТовара);		
					
					Если (СтрокаТовара.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
						Или СтрокаТовара.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара) Тогда
						ПараметрыТовара.Склад = ЗаказКлиента.Склад;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(ПараметрыТовара.Упаковка) Тогда
						ПараметрыТовара.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(СтрокаТовара.Номенклатура);
					КонецЕсли;
					
					ПараметрыТовара.КоличествоУпаковок = 1;
					
					КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
					
					ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
					
					ТекущаяСтрока = ЗаказКлиента.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыТовара); 
					ЗаполнитьОбособленно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента.Соглашение, "ОбеспечиватьЗаказыОбособленно");
					
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ЗаказКлиента.НалогообложениеНДС);
					СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ЗаказКлиента.ВернутьМногооборотнуюТару);
					СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(ЗаказКлиента, Ложь));
					ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечениеВДокументеПродажи(
					ЗаполнитьОбособленно, ЗаказКлиента.Статус, ЗаказКлиента.ЖелаемаяДатаОтгрузки);
					СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
					
					ЗависимыеРеквизиты = Новый Структура(
					"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
					"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
					"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
					"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
					
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиента);
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСумму");
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
					
					ИндексЭлемента = МассивТоваровДляЗаказов.Найти(СтрокаТовара);
					МассивТоваровДляЗаказов.Удалить(ИндексЭлемента);
					ТоваровКЗаказе = ТоваровКЗаказе + 1;
				Иначе
					
					ИндексЭлемента = МассивТоваровДляЗаказов.Найти(СтрокаТовара);
					МассивТоваровДляЗаказов.Удалить(ИндексЭлемента);
					МассивТоваровДляЗаказов.Добавить(СтрокаТовара);
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ЗаказКлиента, Документы.ЗаказКлиента));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаказКлиента, ПараметрыУказанияСерий);
	
	Если ЗаказКлиента.НеОтгружатьЧастями Тогда
		МаксимальнаяДата = ОбеспечениеСервер.МаксимальноеЗначениеВКоллекции(ЗаказКлиента.Товары, "ДатаОтгрузки", '00010101');
		ЗаказКлиента.ДатаОтгрузки = ?(ЗначениеЗаполнено(МаксимальнаяДата), МаксимальнаяДата, ЗаказКлиента.ДатаОтгрузки);
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(ЗаказКлиента.Товары, "ДатаОтгрузки", ЗаказКлиента.ДатаОтгрузки);
	КонецЕсли;
	 	
КонецПроцедуры

&НаСервере
Функция ЕстьОстатокТовара(Товар, Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Набор.Склад КАК Склад,
		|	Набор.Номенклатура КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	СУММА(Набор.ВНаличииОстаток) КАК ВНаличии,
		|	СУММА(Набор.ВРезервеСоСкладаОстаток) КАК ВРезервеСоСклада,
		|	СУММА(Набор.ВРезервеПодЗаказОстаток) КАК ВРезервеПодЗаказ
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(
		|			,
		|			Склад В (&Склады)
		|				И Номенклатура В (&Номенклатура)) КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Склад,
		|	Набор.Номенклатура,
		|	Набор.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(Набор.ВНаличииОстаток) - СУММА(Набор.ВРезервеСоСкладаОстаток) - СУММА(Набор.ВРезервеПодЗаказОстаток) > 0";
	
	Запрос.УстановитьПараметр("Склады", Склад);
	Запрос.УстановитьПараметр("Номенклатура", Товар);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
//Процедура заполняет обеспечение заказа клиента по ссылке на заказ
//Заказ - Ссылка на заказ клиента
//МассивВариантовОбеспечения - массив вариантов обеспечения
Процедура ЗаполнитьОбеспечениеЗаказа(ЗаказОбъект, МассивВариантовОбеспечения = Неопределено, ОбеспечиватьУслуги = Истина, СтатусЗаказа = Неопределено)
	
	ЗаказСсылка = ЗаказОбъект.Ссылка;
	
	Если МассивВариантовОбеспечения = Неопределено Тогда
		МассивВариантовОбеспечения = Новый Массив();
		//МассивВариантовОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
		МассивВариантовОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
		МассивВариантовОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно"));
		МассивВариантовОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"));
	КонецЕсли;
	
	//ЗаказОбъект = Заказ.ПолучитьОбъект();
	Если ЗначениеЗаполнено(СтатусЗаказа) Тогда
		ЗаказОбъект.Статус = СтатусЗаказа;
	КонецЕсли;
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗаказСсылка);
	
	МассивВыделенныеСтроки = Новый Массив;
	МассивНевыделенныеСтроки = Новый Массив;
	Для Каждого СтрокаТЧ ИЗ ЗаказОбъект.Товары Цикл
		Если Не СтрокаТЧ.Отменено Тогда
			Если Не ОбеспечиватьУслуги Тогда
				Если СтрокаТЧ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					МассивНевыделенныеСтроки.Добавить(СтрокаТЧ);
				Иначе
					МассивВыделенныеСтроки.Добавить(СтрокаТЧ);
				КонецЕсли;
			Иначе	
				МассивВыделенныеСтроки.Добавить(СтрокаТЧ);
			КонецЕсли;
		Иначе
			МассивНевыделенныеСтроки.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Назначение = Справочники.Назначения.НайтиПоРеквизиту("Заказ", ЗаказСсылка);
	
	ТаблицаВыделенныеСтроки = ЗаказОбъект.Товары.Выгрузить(МассивВыделенныеСтроки);
	ТаблицаВыделенныеСтроки.Колонки.Добавить("ТипНоменклатуры");
	ТаблицаВыделенныеСтроки.Колонки.Добавить("Назначение");
	ТаблицаВыделенныеСтроки.ЗаполнитьЗначения(Назначение, "Назначение");
	ТаблицаВыделенныеСтроки.Колонки.Добавить("Ссылка");
	ТаблицаВыделенныеСтроки.ЗаполнитьЗначения(ЗаказСсылка, "Ссылка");
	ТаблицаВыделенныеСтроки.Колонки.Добавить("Подразделение");
	ТаблицаВыделенныеСтроки.ЗаполнитьЗначения(ЗаказОбъект.Подразделение, "Подразделение");
	ТаблицаВыделенныеСтроки.Колонки.Добавить("ДатаОтгрузкиРабот");
	ТаблицаВыделенныеСтроки.ЗагрузитьКолонку(ТаблицаВыделенныеСтроки.ВыгрузитьКолонку("ДатаОтгрузки"),"ДатаОтгрузкиРабот");
	ТаблицаВыделенныеСтроки.Колонки.Добавить("Идентификатор");
	Для Каждого Стр Из ТаблицаВыделенныеСтроки Цикл	
		Стр.Идентификатор = Стр.НомерСтроки - 1;
		Стр.ТипНоменклатуры = Стр.Номенклатура.ТипНоменклатуры;
	КонецЦикла;
	
	ТаблицаНевыделенныеСтроки = ЗаказОбъект.Товары.Выгрузить(МассивНевыделенныеСтроки);
	ТаблицаНевыделенныеСтроки.Колонки.Добавить("ТипНоменклатуры");
	ТаблицаНевыделенныеСтроки.ЗаполнитьЗначения(Перечисления.ТипыНоменклатуры.Услуга, "ТипНоменклатуры");
	ТаблицаНевыделенныеСтроки.Колонки.Добавить("Назначение");
	ТаблицаНевыделенныеСтроки.ЗаполнитьЗначения(Назначение, "Назначение");
	ТаблицаНевыделенныеСтроки.Колонки.Добавить("Ссылка");
	ТаблицаНевыделенныеСтроки.ЗаполнитьЗначения(ЗаказСсылка, "Ссылка");
	ТаблицаНевыделенныеСтроки.Колонки.Добавить("Подразделение");
	ТаблицаНевыделенныеСтроки.ЗаполнитьЗначения(ЗаказОбъект.Подразделение, "Подразделение");
	ТаблицаНевыделенныеСтроки.Колонки.Добавить("ДатаОтгрузкиРабот");
	ТаблицаНевыделенныеСтроки.ЗагрузитьКолонку(ТаблицаВыделенныеСтроки.ВыгрузитьКолонку("ДатаОтгрузки"),"ДатаОтгрузкиРабот");
	ТаблицаНевыделенныеСтроки.Колонки.Добавить("Идентификатор");
	Для Каждого Стр Из ТаблицаНевыделенныеСтроки Цикл	
		Стр.Идентификатор = Стр.НомерСтроки - 1;
		Стр.ТипНоменклатуры = Стр.Номенклатура.ТипНоменклатуры;
	КонецЦикла;
	
	
	ОтборОформлено = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(Новый Структура("Ссылка, КодСтроки",
	ОбеспечениеКлиентСервер.ОписаниеТиповЗаказыКОбеспечению(), ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 0)));
	
	//Для Каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
	//	Строка = ТабЧасть.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
	//	Строка.Количество = 0;
	//	ЗаполнитьЗначенияСвойств(ОтборОформлено.Добавить(), ВыделеннаяСтрока);
	//КонецЦикла;
	
	ОформитьПоНакладным = РегистрыНакопления.ЗаказыКлиентов.ТаблицаОформлено(ОтборОформлено);
	
	//Для Каждого ВыделеннаяСтрока Из ТаблицаВыделенныеСтроки Цикл
	//	Строка = ТабЧасть.НайтиПоИдентификатору(ВыделеннаяСтрока.Идентификатор);
	//	Строка.Количество = ВыделеннаяСтрока.Количество;
	//КонецЦикла;
	
	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияУниверсальный(
	ТаблицаВыделенныеСтроки, МассивВариантовОбеспечения, ОформитьПоНакладным,
	ТаблицаНевыделенныеСтроки, ЗаказСсылка, ЗаказОбъект.Склад, , Истина);
	
	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		//Перенос результатов в документ.
		МенеджерДокумента.ЗаполнитьВариантОбеспечения(ЗаказОбъект, Неопределено, "ИндексыСтрок", Таблица);
		ЗаказОбъект.ДополнительныеСвойства.Вставить("КонтролироватьОбеспечение", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументОплаты(ЗаказКлиента)
	
	Оплата = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
	Оплата.Дата = ТекущаяДата();
	Оплата.НомерПлатежнойКарты = "9999";
	Оплата.Комментарий = "Тест-центр";
	Оплата.Заполнить(ЗаказКлиента);
	Если Не ЗначениеЗаполнено(Оплата.ЭквайринговыйТерминал) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
		|	И (ЭквайринговыеТерминалы.БанковскийСчет.Владелец = &Организация
		|		ИЛИ &Организация = Неопределено)
		|");
		
		Запрос.УстановитьПараметр("Организация", Оплата.Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Оплата.ЭквайринговыйТерминал = Выборка.ЭквайринговыйТерминал;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Оплата;
	
КонецФункции

&НаСервере
Функция СоздатьДокументРеализации(ЗаказКлиента)
	Реализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Реализация.Дата = ТекущаяДата();
	Реализация.Комментарий = "Тест-центр";
	Реализация.Заполнить(ЗаказКлиента);
	
	Возврат Реализация;
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАЗРАБОТЧИКА СЦЕНАРИЯ

&НаКлиенте
// Записать значение показателя производительности
//
// Параметры:
//  ИмяПоказателя - Строка, произвольное имя показателя производительности
//  ЗначениеПоказателя - Число, значение показателя
//
Процедура ТЦЗаписатьПоказатель(ИмяПоказателя, ЗначениеПоказателя)
	
	ТЦКлиент.ДобавитьРезультат(ТЦКонтекст(), ИмяПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры // ТЦЗаписатьПоказатель()

&НаКлиенте
// Завершить выполнение действия
//
// Параметры:
//  Результат - ПеречислениеСсылка.ТЦРезультатВыполнения
//  ВозниклоИсключение - Булево, при выполнении обработчика ожидания
//                 возникла и обработана исключительная ситуация
//                 указывать этот параметр явно не следует
//
Процедура ТЦЗавершитьВыполнение(Результат, ВозниклоИсключение = Ложь, ТекстОшибкиОбработки = "")
	
	ОтключитьОбработчикОжидания("ТЦОбработчикВыполнения");
	ФормаВРМ = ТЦКонтекст().ФормаВРМ;
	
	Если ФормаВРМ <> Неопределено Тогда
		ФормаВРМ.РезультатВыполнения = Результат;
		ФормаВРМ.ВозниклоИсключение = ВозниклоИсключение;
		ФормаВРМ.ТекстОшибкиОбработки = ТекстОшибкиОбработки;
	КонецЕсли;
	
	ТЦКонтекстВыполнения.ТекущийРезультатВыполнения = Результат;
	ТЦКонтекстВыполнения.ВозниклоИсключение = ВозниклоИсключение;
	ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки = ТекстОшибкиОбработки;
	
КонецПроцедуры // ТЦЗавершитьВыполнение()

&НаКлиенте
// Номер ВРМ, уникальный в рамках сценария
//
// Возвращаемое значение:
//  Число - номер текущего ВРМ
//
Функция ТЦНомерВРМ()
	
	Возврат ТЦКонтекст().ВРМ.Номер;
	
КонецФункции // ТЦНомерВРМ()

&НаКлиенте
// Ссылка на сценарий
//
// Возвращаемое значение:
//  СправочникСсылка.ТЦСценарии
//
Функция ТЦСценарий()
	
	Возврат ТЦКонтекст().ВРМ.Сценарий;
	
КонецФункции // ТЦСценарий()

&НаКлиенте
// Возвращает коэффициент интенсивности текущего сценария
//
// Возвращаемое значение:
//  Число
//
Функция ТЦКоэффициентИнтенсивности()
	
	Возврат ТЦКонтекст().КоэффициентИнтенсивности;
	
КонецФункции // ТЦСценарий()

&НаКлиенте
// Получить имя текущей роли
//
// Возвращаемое значение:
//  Строка - имя текущей роли
//
Функция ТЦИмяРоли()
	
	Возврат ТЦКонтекст().ВРМ.ИмяРоли;
	
КонецФункции // ТЦИмяРоли()

&НаКлиенте
// Получить имя текущей роли
//
// Возвращаемое значение:
//  Строка - имя текущей роли
//
Функция ТЦРоль()
	
	Возврат ТЦКонтекст().ВРМ.Роль;
	
КонецФункции // ТЦРоль()

&НаКлиенте
// Получить имя текущего пользователя
//
// Возвращаемое значение:
//  Строка - имя текущего пользователя
//
Функция ТЦИмяПользователя()
	
	Возврат ТЦКонтекст().ВРМ.Пользователь;
	
КонецФункции // ТЦИмяПользователя()

&НаКлиенте
// Получить имя текущего компьютера
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
Функция ТЦИмяКомпьютера()
	
	Возврат ТЦКонтекст().ВРМ.Компьютер;
	
КонецФункции // ТЦИмяКомпьютера()

&НаКлиенте
// Получить результат выполнения "Успешно"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.Успешно
//
Функция ТЦРезультатВыполненияУспешно()
	
	Возврат ТЦКонтекст().РезультатВыполнения.Успешно;
	
КонецФункции // ТЦРезультатВыполненияУспешно()

&НаКлиенте
// Получить результат выполнения "Предупреждение"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.Предупреждение
//
Функция ТЦРезультатВыполненияПредупреждение()
	
	Возврат ТЦКонтекст().РезультатВыполнения.Предупреждение;
	
КонецФункции // ТЦРезультатВыполненияПредупреждение()

&НаКлиенте
// Получить результат выполнения "Ошибка"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.Ошибка
//
Функция ТЦРезультатВыполненияОшибка()
	
	Возврат ТЦКонтекст().РезультатВыполнения.Ошибка;
	
КонецФункции // ТЦРезультатВыполненияОшибка()

&НаКлиенте
// Получить результат выполнения "Продолжить" и подключить обработчик
// ТЦОбработчикВыполнения с указанным интервалом, который в свою очередь,
// Периодически выполняет функцию указанную в параметре Обработчик.
//
// Параметры:
//  Интервал - Число, через которое будет вызываться обработчик
//  Однократно - Булево, Признак однократного выполнения обработчика ожидания
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.Продолжить
//
Функция ТЦРезультатВыполненияПродолжить(Обработчик, Интервал, Однократно = Ложь)
	
	ТЦИмяОбработчика = Обработчик;
	ПодключитьОбработчикОжидания("ТЦОбработчикВыполнения", Интервал, Однократно);
	Возврат ТЦКонтекст().РезультатВыполнения.Продолжить;
	
КонецФункции // ТЦРезультатВыполненияОшибка()

&НаКлиенте
// Получить статус сообщения "Информация"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦСтатусСообщения.Информация
//
Функция ТЦСтатусСообщенияИнформация()
	
	Возврат ТЦКонтекст().СтатусСообщения.Информация;
	
КонецФункции // ТЦСтатусСообщенияИнформация()

&НаКлиенте
// Получить статус сообщения "Предупреждение"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦСтатусСообщения.Предупреждение
//
Функция ТЦСтатусСообщенияПредупреждение()
	
	Возврат ТЦКонтекст().СтатусСообщения.Предупреждение;
	
КонецФункции // ТЦСтатусСообщенияПредупреждение()

&НаКлиенте
// Получить статус сообщения "Ошибка"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦСтатусСообщения.Ошибка
//
Функция ТЦСтатусСообщенияОшибка()
	
	Возврат ТЦКонтекст().СтатусСообщения.Ошибка;
	
КонецФункции // ТЦСтатусСообщенияОшибка()


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ТЕСТ-ЦЕНТРА

&НаКлиенте
// Обработчик команды "Выполнить".
// Выполняет инициализацию, действие и удаление созданных данных.
//
Процедура ВыполнитьДействие(Команда)
	
	ТЦВыполнитьТестирование(Ложь, Истина);
	
КонецПроцедуры // ВыполнитьДействие()

&НаКлиенте
// Обработчик выполнения действия в случае возврата из ТЦВыполнить результата
// ПеречислениеСсылка.ТЦРезультатВыполнения.ТЦПродолжить
//
Процедура ТЦОбработчикВыполнения()
	
	Попытка
		Результат = Вычислить(ТЦИмяОбработчика + "()");
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ВП");
		ТЦЗавершитьВыполнение(
			ТЦКонтекст().РезультатВыполнения.Неопределено,
			Истина,
			ТЦОбщий.ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры // ТЦОбработчикВыполнения()

&НаКлиенте
// Получить контекст выполнения обработки
//
// Возвращаемое значение:
//  Структура - см. ТЦСервер.СоздатьКонтекстВыполненияОбработки()
//
Функция ТЦКонтекст() Экспорт
	
	Если ТЦКонтекстВыполнения = Неопределено Тогда
		ТЦКонтекстВыполнения = ТЦСервер.СоздатьКонтекстВыполненияОбработки();
	КонецЕсли;
	
	Возврат ТЦКонтекстВыполнения;
	
КонецФункции // ТЦКонтекст()

&НаКлиенте
// Загрузить параметры обработки и формы
//
// Параметры:
//  ПараметрыЗагрузки - ХранилищеЗначения
//
Процедура ТЦЗагрузить(ПараметрыЗагрузки) Экспорт
	
	ТЦЗагрузитьНаСервере(ПараметрыЗагрузки);
	ТЦКонтекст();
	
КонецПроцедуры // ТЦЗагрузить()

&НаСервере
// Загрузить параметры обработки.
// Во время загрузки устанавливаются ранее сохраненные значения реквизитов
//
// Параметры:
//  АрхивЗначений - ХранилищеЗначения, загружаемые данные
//
Процедура ТЦЗагрузитьНаСервере(АрхивЗначений)
	
	ТекущийОбъект = РеквизитФормыВЗначение("ТЦОбъект");
	ТЦСервер.ЗагрузитьРеквизитыОбработки(ТекущийОбъект, АрхивЗначений);
	ЗначениеВРеквизитФормы(ТекущийОбъект, "ТЦОбъект");
	
КонецПроцедуры // ТЦЗагрузитьНаСервере()

&НаКлиенте
// Сохранить значения реквизитов для возможности последующей загрузки
//
// Возвращаемое значение:
//  ХранилищеЗначения - запакованые значения реквизитов
//
Функция ТЦСохранить() Экспорт
	
	Возврат ТЦСохранитьНаСервере();
	
КонецФункции // ТЦСохранить()

&НаСервере
// Сохранить значения реквизитов для возможности последующей загрузки
//
// Возвращаемое значение:
//  ХранилищеЗначения - запакованые значения реквизитов
//
Функция ТЦСохранитьНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("ТЦОбъект");
	Возврат ТЦСервер.СохранитьРеквизитыОбработки(ТекущийОбъект);
	
КонецФункции // ТЦСохранитьНаСервере()

&НаКлиенте
// Получить результат выполнения тестирования
//
// Возвращаемое значение:
//  Соответствие - показатели и их значения
//
Функция ТЦПолучитьРезультат() Экспорт
	
	Возврат ТЦКонтекст().Результаты;
	
КонецФункции // ТЦПолучитьРезультат()

&НаКлиенте
// Выполняет инициализацию, действие и удаление созданных данных
Процедура ТЦВыполнитьТестирование(ЗавершатьРаботу = Истина, ПоказыватьОшибки = Ложь)
	
	ТЦКонтекст().ПоказыватьОшибки = ПоказыватьОшибки;
	ТЦКонтекстВыполнения.ЗавершатьРаботуПослеВыполнения = ЗавершатьРаботу;
	
	ТЦКонтекстВыполнения.МассивДействий = Новый Массив;
	ТЦКонтекстВыполнения.МассивДействий.Добавить("ТЦИнициализировать()");
	ТЦКонтекстВыполнения.МассивДействий.Добавить("ТЦВыполнить()");
	ТЦКонтекстВыполнения.МассивДействий.Добавить("ТЦУдалитьДанные()");
	
	Для Каждого ТекущееДействие Из ТЦКонтекстВыполнения.МассивДействий Цикл
		
		РезультатВыполнения = ТЦВыполнитьДействиеТеста(ТекущееДействие);

		Если РезультатВыполнения = ТЦКонтекстВыполнения.РезультатВыполнения.Продолжить
			ИЛИ РезультатВыполнения = ТЦРезультатВыполненияОшибка()
			ИЛИ ТЦКонтекстВыполнения.ВозниклоИсключение Тогда

			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТЦКонтекстВыполнения.ЗавершатьРаботуПослеВыполнения Тогда
		ЗавершитьРаботуСистемы(Ложь, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик заверщения выполнения
Процедура ТЦОжиданиеЗавершенияВыполнения()
	
	ЗавершитьВыполнение = Ложь;
	ТекущийРезультатВыполнения = ТЦКонтекст().ТекущийРезультатВыполнения;
	ТекущаяОперация = ТЦКонтекстВыполнения.ТекущаяОперация;
	
	// Возникло исключение
	// или выполнение действия вернуло ошибку
	Если ТЦКонтекстВыполнения.ВозниклоИсключение ИЛИ ТекущийРезультатВыполнения = ТЦРезультатВыполненияОшибка() Тогда
		
		ЗавершитьВыполнение = Истина;
		Пояснение = ?(ТекущийРезультатВыполнения = ТЦРезультатВыполненияОшибка(), "Функция вернула ошибку. ", "");
		
		ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки = "Возникла ошибка при выполнении " + ТекущаяОперация +
														Символы.ПС + Пояснение + ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки;
			
		Если ТЦКонтекстВыполнения.ПоказыватьОшибки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки;
			Сообщение.Сообщить();
		КонецЕсли;
	
		ТЦОбщий.ЗаписатьВЖурнал(ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки, "Тест-центр", ТЦСтатусСообщенияОшибка());
	
	// Завершилась часть теста
	ИначеЕсли ТекущийРезультатВыполнения <> Неопределено
		И ТекущийРезультатВыполнения <> ТЦКонтекстВыполнения.РезультатВыполнения.Неопределено
		И ТекущийРезультатВыполнения <> ТЦКонтекстВыполнения.РезультатВыполнения.Продолжить Тогда

		Индекс = ТЦКонтекстВыполнения.МассивДействий.Найти(ТекущаяОперация);
		// Произошла ошибка
		Если Индекс = Неопределено Тогда
			ЗавершитьВыполнение = Истина;
			
		// Все операции выполнены	
		ИначеЕсли Индекс = ТЦКонтекстВыполнения.МассивДействий.ВГраница() Тогда
			ЗавершитьВыполнение = Истина;
			
		// Продолжаем выполнение операций
		Иначе
			ОтключитьОбработчикОжидания("ТЦОжиданиеЗавершенияВыполнения");
			
			МассивДействий = ТЦКонтекстВыполнения.МассивДействий;
			Для Сч = Индекс + 1 По МассивДействий.ВГраница() Цикл
				
				ТекущаяОперация = МассивДействий[Сч];
				РезультатВыполнения = ТЦВыполнитьДействиеТеста(ТекущаяОперация);
				
				Если РезультатВыполнения = ТЦКонтекстВыполнения.РезультатВыполнения.Продолжить
					ИЛИ РезультатВыполнения = ТЦРезультатВыполненияОшибка()
					ИЛИ ТЦКонтекстВыполнения.ВозниклоИсключение Тогда
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			ЗавершитьВыполнение = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗавершитьВыполнение Тогда
		ОтключитьОбработчикОжидания("ТЦОжиданиеЗавершенияВыполнения");
		Если ТЦКонтекстВыполнения.ЗавершатьРаботуПослеВыполнения Тогда
			ЗавершитьРаботуСистемы(Ложь, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Служебная функция, предназначенная для выполнения указанной процедуры и записи результатов в текстовый файл.
//   Параметры:
//      ИмяПроцедуры - имя тестовой процедуры, которую нужно выполнить.
//						
Функция ТЦВыполнитьДействиеТеста(Знач ИмяФункции)
	
	ТЦКонтекст().ТекущийРезультатВыполнения = Неопределено;
	ТЦКонтекстВыполнения.ВозниклоИсключение = Ложь;
	ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки = "";
	ТЦКонтекстВыполнения.ТекущаяОперация = ИмяФункции;
	
	Попытка
		РезультатВыполнения = Вычислить(ИмяФункции);

		Если РезультатВыполнения = ТЦРезультатВыполненияОшибка() Тогда
			ТЦВозниклоИсключение = Ложь;
			ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки = "Возникла ошибка при выполнении " + ИмяФункции + Символы.ПС +
															"Функция вернула ошибку. " + ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки;
		КонецЕсли;
		
	Исключение

		РезультатВыполнения = ТЦКонтекст().РезультатВыполнения.Неопределено;
		ТЦКонтекстВыполнения.ВозниклоИсключение = Истина;		
		ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки = "Возникла ошибка при выполнении " + ИмяФункции + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
	КонецПопытки;
				
	Если ТЦКонтекстВыполнения.ВозниклоИсключение ИЛИ РезультатВыполнения = ТЦРезультатВыполненияОшибка() Тогда
		
		Если ТЦКонтекстВыполнения.ПоказыватьОшибки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки;
			Сообщение.Сообщить();
		КонецЕсли;
		
		ТЦОбщий.ЗаписатьВЖурнал(ТЦКонтекстВыполнения.ТекстИсключенияИлиОшибки, "Тест-центр", ТЦСтатусСообщенияОшибка());
		Если ТЦКонтекстВыполнения.ЗавершатьРаботуПослеВыполнения Тогда
			ЗавершитьРаботуСистемы(Ложь, Ложь);
		КонецЕсли;
		
	ИначеЕсли РезультатВыполнения = ТЦКонтекст().РезультатВыполнения.Продолжить Тогда
		ПодключитьОбработчикОжидания("ТЦОжиданиеЗавершенияВыполнения", 1);
	КонецЕсли;
	
	ТЦКонтекстВыполнения.ТекущийРезультатВыполнения = РезультатВыполнения;
	Возврат РезультатВыполнения;
		
КонецФункции	// ВыполнитьДействиеТеста

&НаКлиенте
// Закрыть форму и вернуть значение Истина, для модального вызова
//
Процедура ТЦОК(Команда)
	
	Закрыть(Истина);
	
КонецПроцедуры // ТЦОК()
